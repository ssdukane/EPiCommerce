<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EPiServer.Business.Commerce</name>
    </assembly>
    <members>
        <member name="T:EPiServer.Commerce.ApplicationContext">
            <summary>
            Contains information about the current application context
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.ApplicationContext.HasContentModelTypes">
            <summary>
            Indicates whether the current application has the IContent model types for catalog content available.
            Considers the models available if there is at least one available which is decorated with the
            <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.CatalogContentTypeAttribute"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.ApplicationContext.DisableVersionSync">
            <summary>
            Gets the value of the DisableVersionSync appSetting, indicating whether an
            update to Catalog content done outside the Content APIs will remove any version data (e.g. drafts,
            old published versions...) for the affected Content.
            Setting this to true can improve the speed of batch operations done through the lower-level API:s
            (like ICatalogSystem), e.g. the catalog import.
            </summary>
            <value>
            <c>true</c> to delete all versions; <c>false</c> to update versions if content models are available.
            </value>
        </member>
        <member name="T:EPiServer.Core.CampaignFolder">
             <summary>
                 NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
                 Represents a campaign folder to structure campaign items
            </summary>
        </member>
        <member name="P:EPiServer.Core.CampaignFolder.Name">
            <summary>
                Overwrite name with translation for campaign folder
            </summary>
        </member>
        <member name="T:EPiServer.Core.CampaignData">
            <summary>
                NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
                Represents a content based campaign item.
            </summary>
        </member>
        <member name="P:EPiServer.Core.CampaignData.Description">
            <summary>
                Gets or sets description of the campaign
            </summary>
        </member>
        <member name="P:EPiServer.Core.CampaignData.ValidFrom">
            <summary>
                Gets or sets the time when the campaign starts.
            </summary>
        </member>
        <member name="P:EPiServer.Core.CampaignData.ValidUntil">
            <summary>
                Gets or sets the time when the campaign ends.
            </summary>
        </member>
        <member name="P:EPiServer.Core.CampaignData.IsActive">
            <summary>
                Gets or sets if this campaign is active.
            </summary>
        </member>
        <member name="P:EPiServer.Core.CampaignData.Code">
            <summary>
                Gets or sets code of the campaign.
            </summary>
        </member>
        <member name="T:EPiServer.Business.Commerce.CatalogHelper">
            <summary>
            CatalogHelper, to get CatalogNode from database to bind in ProductPicker
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.CatalogHelper.#ctor">
            <summary>
            Set the constructor private
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.CatalogHelper.GetCatalogNodesFromCache(System.Int32,System.Int32)">
            <summary>
            Gets the catalog nodes from cache.
            </summary>
            <param name="catalogId">The catalog id.</param>
            <param name="parentNodeId">The parent node id.</param>
            <returns>A CatalogNodes instance, null if not existed in cache</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.CatalogHelper.GetCatalogNodes(System.Int32)">
            <summary>
            Gets the nodes for catalog id with specific parent.
            </summary>
            <param name="catalogId">The catalog id.</param>
            <returns>A CatalogNodes instance</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.CatalogHelper.GetCatalogNodes(System.Int32,System.Int32)">
            <summary>
            Gets the nodes for catalog id with specific parent.
            </summary>
            <param name="catalogId">The catalog id.</param>
            <param name="parentNodeId">The parent node id.</param>
            <returns>A CatalogNodes instance</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.CatalogHelper.GetCatalogNodesFromDatabase(System.Int32)">
            <summary>
            Gets CatalogNodes from database.
            </summary>
            <param name="catalogId">The catalog id.</param>
            <returns>List of CatalogNode</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.CatalogHelper.GetCatalogNodesFromDatabase(System.Int32,System.Int32)">
            <summary>
            Gets CatalogNodes with specific parent from database.
            </summary>
            <param name="catalogId">The catalog id.</param>
            <param name="parentNodeId">The parent node id.</param>
            <returns>List of CatalogNode</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.CatalogHelper.GetCatalogNodesFromDatabase(Mediachase.Data.Provider.DataCommand)">
            <summary>
            Gets the catalog nodes from database.
            </summary>
            <param name="command">DataCommand to execute.</param>
            <returns>List of CatalogNode</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.CatalogHelper.CreateCatalogNodeFromDataRow(System.Data.DataRow)">
            <summary>
            Creates the catalog node from a DataRow.
            </summary>
            <param name="row">The data row instance contains catalog node data.</param>
            <returns>A CatalogNode holding data from the DataRow</returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.CatalogHelper.Instance">
            <summary>
            Singleton object
            </summary>
            <value>The only instance of the class.</value>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.AssetUrlConventions">
            <summary>
            Sets default group on content types, which implements <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.AssetUrlConventions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.AssetUrlConventions"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.AssetUrlConventions.AddDefaultGroup``1(System.String)">
            <summary>
            Adds a group as default group for a specific content type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="groupName">Name of the group.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.AssetUrlConventions.GetDefaultGroup(EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer)">
            <summary>
            Gets the default group for the specific content.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.AssetUrlConventions.DefaultAssetUrl">
            <summary>
            Gets or sets the default asset URL.
            </summary>
            <value>
            The default asset URL.
            </value>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.AssetUrlResolver">
            <summary>
            Gets the asset url.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.AssetUrlResolver.#ctor(EPiServer.Web.Routing.UrlResolver,EPiServer.Commerce.Catalog.AssetUrlConventions)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.AssetUrlResolver"/> class.
            </summary>
            <param name="urlResolver">The URL resolver.</param>
            <param name="assetUrlConvention">The asset URL convention.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.AssetUrlResolver.#ctor(EPiServer.Web.Routing.UrlResolver,EPiServer.Commerce.Catalog.AssetUrlConventions,EPiServer.IContentLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.AssetUrlResolver"/> class.
            </summary>
            <param name="urlResolver">The URL resolver.</param>
            <param name="assetUrlConvention">The asset URL convention.</param>
            <param name="contentLoader">The content loader.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.AssetUrlResolver.GetAssetUrl(EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer)">
            <summary>
            Gets the asset URL.
            </summary>
            <param name="assetContainer">The asset container.</param>
            <returns>The asset url.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.AssetUrlResolver.GetAssetUrl``1(EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer)">
            <summary>
            Gets the asset URL for a specific type.
            </summary>
            <param name="assetContainer">The asset container.</param>
            <returns>The asset url.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.AssetUrlResolver.GetAssetUrl(EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer,System.Func{EPiServer.Commerce.SpecializedProperties.CommerceMedia,System.String})">
            <summary>
            Gets the asset URL.
            </summary>
            <param name="assetContainer">The asset container.</param>
            <param name="resolveForSelected">Delegate, which will be called with a selected <see cref="T:EPiServer.Commerce.SpecializedProperties.CommerceMedia"/>. The delegate will return the url of the <see cref="T:EPiServer.Commerce.SpecializedProperties.CommerceMedia"/>.</param>
            <returns>The asset url.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.AssetUrlResolver.GetAssetUrl``1(EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer,System.Func{EPiServer.Commerce.SpecializedProperties.CommerceMedia,System.String})">
            <summary>
            Gets the asset URL for a specific type.
            </summary>
            <param name="assetContainer">The asset container.</param>
            <param name="resolveForSelected">Delegate, which will be called with a selected <see cref="T:EPiServer.Commerce.SpecializedProperties.CommerceMedia"/>. The delegate will return the url of the <see cref="T:EPiServer.Commerce.SpecializedProperties.CommerceMedia"/>.</param>
            <returns>The asset url.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.CatalogContentLanguageSettingsHandler">
            <summary>
                Extends the default language settings handler with logic for catalog content.
                The logic is as follows:
                - No replacement languages
                - No fallback languages
                - All languages that are enabled for a catalog are active, the others are not.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.CatalogLanguageSettingsHandler">
            <summary>
                Extends the default language settings handler with logic for catalog content.
                The logic is as follows:
                - No replacement languages
                - No fallback languages
                - All languages that are enabled for a catalog are active, the others are not.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.CatalogLanguageSettingsHandler.Get(EPiServer.Core.ContentReference)">
            <summary>
                Gets the settings for all languages for the specified content link.
            </summary>
            <param name="contentLink">The content link.</param>
            <returns>An IEnumerable{ContentLanguageSetting} with the language settings for the given content.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.CatalogLanguageSettingsHandler.GetClosestSetting(EPiServer.Core.ContentReference)">
            <summary>
                Gets the closest ancestor that has language settings.
            </summary>
            <param name="contentLink">The content link.</param>
            <returns>
                The closest ancestor that has language settings.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.CatalogLanguageSettingsHandler.IsSettingsDefined(EPiServer.Core.ContentReference)">
            <summary>
                Determines whether there exists language settings for the given content.
            </summary>
            <param name="contentLink">The content link.</param>
            <returns>
            	<c>true</c> if language settings exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.CatalogLanguageSettingsHandler.ContentLoader">
            <summary>
            Gets the content loader.
            </summary>
            <value>
            The content loader.
            </value>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.CatalogContentLanguageSettingsHandler.#ctor(EPiServer.Core.IContentEvents,EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.Core.IContentProviderManager,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.DataAbstraction.ContentLanguageSettingRepository,System.Func{EPiServer.IContentLoader})">
            <summary>
                Creates an instance of <see cref="T:EPiServer.Commerce.Catalog.CatalogContentLanguageSettingsHandler"/>.
            </summary>
            <param name="contentEvents">The content events</param>
            <param name="languageBranchRepository">The language branch repository</param>
            <param name="contentProviderManager">The content provider manager</param>
            <param name="referenceConverter">The reference converter</param>
            <param name="contentLanguageSettingsRepository">The content language settings repository.</param>
            <param name="contentLoaderAccessor">The accessor to use when calling IContentLoader.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.CatalogContentLanguageSettingsHandler.#ctor(EPiServer.IContentRepository,EPiServer.Core.IContentEvents,EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.Core.IContentProviderManager,Mediachase.Commerce.Catalog.ReferenceConverter)">
            <summary>
                Creates an instance of <see cref="T:EPiServer.Commerce.Catalog.CatalogContentLanguageSettingsHandler"/>.
            </summary>
            <param name="contentRepository">The content repository</param>
            <param name="contentEvents">The content events</param>
            <param name="languageBranchRepository">The language branch repository</param>
            <param name="contentProviderManager">The content provider manager</param>
            <param name="referenceConverter">The reference converter</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.CatalogContentLanguageSettingsHandler.Get(EPiServer.Core.ContentReference)">
            <summary>
                Gets the settings for all languages for the specified content link.
            </summary>
            <param name="contentLink">The content link.</param>
            <returns>A ContentLanguageSetting[] with the language settings for the given content.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.CatalogContentLanguageSettingsHandler.EPiServer#Core#IContentLanguageSettingsHandler#Get(EPiServer.Core.ContentReference)">
            <summary>
                Gets the settings for all languages for the specified content link.
            </summary>
            <param name="contentLink">The content link.</param>
            <returns>An IEnumerable{ContentLanguageSetting} with the language settings for the given content.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.CatalogSecurityDescriptor">
            <summary>
                Handles access rights for catalog content.
            </summary>
            <remarks>
                The logic is as follows:
                - All users has read access to all content.
                - Users allowed access to the catalog management UI, ie they are in the role <see cref="F:EPiServer.Commerce.Security.RoleNames.CatalogManagers"/>
                  or <see cref="F:EPiServer.Commerce.Security.RoleNames.CommerceAdmins"/>, have full access to all content.
                - Users allowed acesss to the Commerce Settings UI, ie they are in the role <see cref="F:EPiServer.Commerce.Security.RoleNames.CommerceSettingsAdmins"/>,
                  have full access to all Settings.
            </remarks>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.CatalogSecurityDescriptor.CommerceAdminsRoleName">
            <summary>
                The name of the role that is allowed to administer commerce content and settings.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.CatalogSecurityDescriptor.CommerceSettingsAdminsRoleName">
            <summary>
                The name of the role that is allowed to administer commerce settings.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.CatalogSecurityDescriptor.CatalogManagersRoleName">
            <summary>
                The name of the role that is allowed to manage catalogs.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.CatalogSecurityDescriptor.GetAccessLevel(System.Security.Principal.IPrincipal)">
            <summary>
                Returns the access level for the specified principal.
            </summary>
            <param name="principal">The principal to check access against.</param>
            <returns>The access level.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.CatalogSecurityDescriptor.HasAccess(System.Security.Principal.IPrincipal,EPiServer.Security.AccessLevel)">
            <summary>
                Determines whether the specified principal has the requested access.
            </summary>
            <param name="principal">The principal to authorize.</param>
            <param name="access">The requested access level.</param>
            <returns>
            	<c>true</c> if the specified principal has access; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentReferenceExtensions.GetCommonDraft(EPiServer.Core.ContentReference,System.String,EPiServer.IContentLoader,EPiServer.Core.IContentVersionRepository)">
            <summary>
            Gets the common draft version of a catalog content.
            </summary>
            <param name="contentLink">The content link, which will be used when getting the common draft.</param>
            <param name="language">The language for the catalog content</param>
            <param name="contentLoader">The content loader</param>
            <param name="contentVersionRepository">The content version repository</param>
            <returns>The common draft if exists.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.Associations">
            <summary>
            Represents associated entries for a catalog entry.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.Associations.ContentLink">
            <summary>
            gets or sets the association content reference
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.BundleContent">
            <summary>
            Class to store information about bundles
            </summary>
            <remarks>
            For more information read the <a href="../EPiServer SDK/Knowledge base/Developer Guide/Content Provider/Working with the catalog as IContent.htm">Working with the Catalog as IContent</a> article.
            </remarks>
            <example>
            <para>An example of how to create a Commerce content type:</para>
            <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeSample.cs" />
            </example>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase">
            <summary>
            Base class for all types of catalog entries (products, variations, bundles, packages...)
            </summary>
            <remarks>
            This class is not designed to be used as a base class directly by client code, instead
            use one of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.ProductContent"/>, <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.VariationContent"/>, 
            <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.BundleContent"/> or <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.PackageContent"/>
            </remarks>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase">
            <summary>
            Base class for all content delivered from the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider"/>
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.ValidUrlCharactersRegex">
            <summary>
                A string representing the regex describing valid characters in a url.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.CreateWritableClone">
            <summary>
            Creates a writable clone of this object.
            </summary>
            <returns>A writable <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> object.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.CreateWriteableCloneImplementation">
            <summary>
            Creates the writeable clone including writeable clones of the content link
            and the language collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.MakeReadOnly">
            <summary>
            Protects from modifying this object.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.ResetModified">
            <summary>
            Resets the modified flag.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.GetSecurityDescriptor">
            <summary>
                Gets the security descriptor.
            </summary>
            <returns>An instance of <see cref="T:EPiServer.Commerce.Catalog.CatalogSecurityDescriptor"/>.</returns>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.ContentType">
            <summary>
            Gets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.ContentLink">
            <summary>
            Gets or sets the content link.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.ParentLink">
            <summary>
            Gets or sets the parent link.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.ContentGuid">
            <summary>
            Gets or sets the content GUID.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.ContentTypeID">
            <summary>
            Gets or sets the content type ID that this <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> is an instance of.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.IsDeleted">
            <summary>
            Gets or sets a value indicating whether the content is deleted.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.IsNull">
            <summary>
            Gets a value indicating whether this instance is null.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.ExistingLanguages">
            <summary>
            Gets or sets the existing languages for this instance.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.Language">
            <summary>
            Gets or sets the language for this instance.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.MasterLanguage">
            <summary>
            Gets or sets the master language for this instance.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.IsPendingPublish">
            <summary>
            Gets or sets a value indicating whether the content is pending publish.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.StartPublish">
            <summary>
            Gets or sets the start publish date.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.Status">
            <summary>
            Gets or sets the version status.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.StopPublish">
            <summary>
            Gets or sets the stop publish date.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.RouteSegment">
            <summary>
            Gets or sets the route segment.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.ApplicationId">
            <summary>
            Gets or sets the application id.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.CatalogId">
            <summary>
            Gets or sets the catalog id.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase.IsModified">
            <summary>
            Gets a value indicating whether this instance has been modified after loading.
            </summary>
            <value>
            	<c>true</c> if this instance has been modified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.IMetaClass">
            <summary>
            Describes a Content class which can have a Meta Class in Meta Data Plus
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IMetaClass.MetaClassId">
            <summary>
            Gets or sets the meta class id.
            </summary>
            <remarks>This property is not designed to be set by client code. The meta class of the content
            should be defined by decorating the class with  the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.CatalogContentTypeAttribute"/>
            and defining the MetaClassName property.</remarks>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.ISearchEngineInformation">
            <summary>
            Marks if a catalog node or entry has SEO information
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.ISearchEngineInformation.SeoInformation">
            <summary>
            Gets or sets the seo info.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.ISearchEngineInformation.SeoUri">
            <summary>
            Gets or sets the SEO URI.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.ICategorizable">
            <summary>
            Defines the properties of an item supporting Relations
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.ICategorizable.Categories">
            <summary>
                Gets or sets the categories item which holds the category data.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.IAssociating">
            <summary>
            Defines the properties of an item supporting associations
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IAssociating.Associations">
            <summary>
                Gets or sets the associations item which holds the relation data.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer.CommerceMediaCollection">
            <summary>
            Gets or sets the commerce media collection.
            </summary>
            <value>
            The commerce media collection.
            </value>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer.LargeThumbnail">
            <summary>
            Large thumbnail url, which suppose to get from first image-based Commerce media in CommerceMediaCollection
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.ResetModified">
            <summary>
            Resets the modified flag.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.ContentType">
            <summary>
            Gets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.ClassTypeId">
            <summary>
            Gets the class type id.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.SeoUri">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.Code">
            <summary>
            Gets or sets the code.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.MarketFilter">
            <summary>
            Gets or sets ids for the markets where the product not available.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.MetaClassId">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.SeoInformation">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.CommerceMediaCollection">
            <summary>
            Gets or sets the commerce media for catalog node
            </summary>            
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.LargeThumbnail">
            <summary>
            Large thumbnail url
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.Changed">
            <summary>
            Gets or sets the DateTime when has changed
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.ChangedBy">
            <summary>
            Gets or sets the ChangedBy when has changed
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.Created">
            <summary>
            Gets the date and time when this content instance was created
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.CreatedBy">
            <summary>
            Gets the username of the user that created this content instance.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.Deleted">
            <summary>
            Gets or sets the deleted date.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.DeletedBy">
            <summary>
            Gets or sets who deleted the content.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.Saved">
            <summary>
            Gets the date and time when this content instance was last saved.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.SetChangedOnPublish">
            <summary>
                Gets or sets a value indicating whether the <see cref="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.Changed"/> should be updated on publish.
            </summary>
            <remarks>
                The commerce backend has only one date field, so we cannot differentiate between Saved and Changed.
                Because of this, this property will always return true.
            </remarks>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.Categories">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.ParentEntries">
            <summary>
                Gets or sets the item which holds the relations to any parent entries.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.Associations">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase.IsModified">
            <summary>
            Gets a value indicating whether this instance has been modified after loading.
            </summary>
            <value>
            	<c>true</c> if this instance has been modified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.BundleContent.ClassTypeId">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.BundleContent.BundleReference">
            <summary>
            Gets or sets the bundle content reference
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.Categories">
            <summary>
            Represents relating categories for a catalog entry or node.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.Categories.ContentLink">
            <summary>
            gets or sets the relation content reference
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.IDimensionalStockPlacement">
            <summary>
            Interface to indicate that an variation/package has shipment dimension properties.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement">
            <summary>
            Marks if a catalog entry has inventory data.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement.MaxQuantity">
            <summary>
                Gets or sets the maximum quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement.MinQuantity">
            <summary>
                Gets or sets the minimum quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement.TrackInventory">
            <summary>
                Gets or sets a value indicating whether inventory should be tracked.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement.Weight">
            <summary>
                Gets or sets the weight.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement.InventoryReference">
            <summary>
               Gets or sets the product link, which holds inventory data.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IDimensionalStockPlacement.ShippingDimensions">
            <summary>
                Gets or sets the dimensions of the shipment.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.IVariantContainer">
            <summary>
            Defines the properties of an item supporting Variance.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IVariantContainer.VariantsReference">
            <summary>
                Gets or sets the variants content reference
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.Relations">
            <summary>
            Represents relating entries for an entry.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.Relations.ContentLink">
            <summary>
            gets or sets the content reference
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.ShippingDimensions">
            <summary>
                The dimensions of a shipping item.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.ShippingDimensions.Length">
            <summary>
                Gets or sets the length.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.ShippingDimensions.Height">
            <summary>
                Gets or sets the height.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.ShippingDimensions.Width">
            <summary>
                Gets or sets the width.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.CustomerGroupLoader">
            <summary>
            Loads inventories for a content.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.CustomerGroupLoader.#ctor(Mediachase.BusinessFoundation.Data.DataContext)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Catalog.CustomerGroupLoader"/>.
            </summary>
            <param name="dataContext">The meta data entry point.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.CustomerGroupLoader.Get">
            <summary>
            Gets all customer group.
            </summary>
            <returns>Collection of customer group.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.CustomerGroupLoader.Get(System.String)">
            <summary>
            Gets a customer group by a specified <paramref name="name"/>
            </summary>
            <param name="name">Customer group name.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.UseInComparisonAttribute">
            <summary>
                Use this attribute to declare a property to be used for comparison.
            </summary>
            <example>
                <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeSample.cs" lang="cs" />
            </example>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.UseInComparisonAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.SortableInSearchResultsAttribute"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.UseInComparisonAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.SortableInSearchResultsAttribute"/> class.
            </summary>
            <param name="usedInComparison">Specifies if the property is used in comparison.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAnnotations.UseInComparisonAttribute.UsedInComparison">
            <summary>
            Gets a value indicating whether the property is used in comparison.
            </summary>
            <value>
              <c>true</c> if used in comparison, otherwise <c>false</c>.
            </value>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.DecimalSettingsAttribute">
            <summary>
                Use this attribute to declare a property to have precision and scale.
            </summary>
            <example>
                <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeSample.cs" lang="cs" />
            </example>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.DecimalSettingsAttribute.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.DecimalSettingsAttribute"/> class.
            </summary>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAnnotations.DecimalSettingsAttribute.Precision">
            <summary>
            Gets the precision.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAnnotations.DecimalSettingsAttribute.Scale">
            <summary>
            Gets the scale.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.TokenizeAttribute">
            <summary>
                Use this attribute to declare a property to be tokenized.
            </summary>
            <example>
                <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeSample.cs" lang="cs" />
            </example>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.TokenizeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.TokenizeAttribute"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.TokenizeAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.TokenizeAttribute"/> class.
            </summary>
            <param name="isTokenized">Specifies if the property is tokenized.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAnnotations.TokenizeAttribute.IsTokenized">
            <summary>
            Gets a value indicating whether the property is tokenized.
            </summary>
            <value>
              <c>true</c> if tokenized, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAnnotations.TokenizeAttribute.Tokenized">
            <summary>
            Gets the tokenized.
            </summary>
            <value>
            The tokenized.
            </value>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.IncludeInDefaultSearchAttribute">
            <summary>
                Use this attribute to declare a property to include the value in default search results.
                This will be used by the search provider system.
            </summary>
            <example>
                <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeSample.cs" lang="cs" />
            </example>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.IncludeInDefaultSearchAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.IncludeInDefaultSearchAttribute"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.IncludeInDefaultSearchAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.IncludeInDefaultSearchAttribute"/> class.
            </summary>
            <param name="includedInDefaultSearch">Specifies if the property should be included in the default search.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAnnotations.IncludeInDefaultSearchAttribute.IncludedInDefaultSearch">
            <summary>
            Gets a value indicating whether property is included in default search
            </summary>
            <value>
              <c>true</c> if included in default search, otherwise <c>false</c>.
            </value>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.IncludeValuesInSearchResultsAttribute">
            <summary>
                Use this attribute to declare a property to be included in the search results.
                This will be used by the search provider system.
            </summary>
            <example>
                <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeSample.cs" lang="cs" />
            </example>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.IncludeValuesInSearchResultsAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.IncludeValuesInSearchResultsAttribute"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.IncludeValuesInSearchResultsAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.IncludeValuesInSearchResultsAttribute"/> class.
            </summary>
            <param name="includedInSearch">Specifies if the property should be included in search.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAnnotations.IncludeValuesInSearchResultsAttribute.IncludedInSearch">
            <summary>
            Gets a value indicating whether property is included in search
            </summary>
            <value>
              <c>true</c> if included in search, otherwise <c>false</c>.
            </value>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.SortableInSearchResultsAttribute">
            <summary>
            Use this attribute to declare a property to be flaged as index sortable.
            This will be used by the search provider system.
            </summary>
            <example>
                <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeSample.cs" lang="cs" />
            </example>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.SortableInSearchResultsAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.SortableInSearchResultsAttribute"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.SortableInSearchResultsAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.SortableInSearchResultsAttribute"/> class.
            </summary>
            <param name="isSortableInSearch">Specifies if the property is sortable in search.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAnnotations.SortableInSearchResultsAttribute.IsSortableInSearch">
            <summary>
            Gets a value indicating whether property is sortable in search.
            </summary>
            <value>
              <c>true</c> if sortable in search, otherwise <c>false</c>.
            </value>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.GreaterThanAttribute">
            <summary>
            Serves as the class for compare value field validation attributes.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.GreaterThanAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value"> The value of the object to validate.</param>
            <param name="context"> The validation context.</param>
            <returns> return ValidationResult.Success if valid, otherwise return ValidationResult with ErrorMessage.</returns>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAnnotations.GreaterThanAttribute.TargetProperty">
            <summary>
            The property to validate against.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAnnotations.GreaterThanAttribute.LocalizationService">
            <summary>
            The localization service.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.PositiveNumberAttribute">
            <summary>
            Serves as the class for non negative number validation attributes.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.PositiveNumberAttribute.IsValid(System.Object)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value">The value of the object to validate.</param>
            <returns>true if the specified value is valid; otherwise, false.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.SystemUiHint">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Contains UI hints with system usage. <see cref="T:EPiServer.Commerce.UIHint"/> contains UI hints for
            public use.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.EntryLoaderBase">
            <summary>
            Base class for loading specialized properties from an entry.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.EntryLoaderBase.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,Mediachase.Commerce.Catalog.ICatalogSystem)">
            <summary>
            Base constructor
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogSystem">The catalog system.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.EntryLoaderBase.GetCatalogContentType(EPiServer.Core.ContentReference)">
            <summary>
            Gets the type of the catalog content.
            </summary>
            <param name="contentLink">The content link.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.EntryLoaderBase.GetCatalogKey(EPiServer.Core.ContentReference)">
            <summary>
            Gets the catalog key for a <paramref name="contentLink"/>
            </summary>
            <param name="contentLink">The content link to receive the key for.</param>
            <returns>The catalog key for a <paramref name="contentLink"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.EntryLoaderBase.GetContentLink(Mediachase.Commerce.Catalog.CatalogKey)">
            <summary>
            Gets the content link from a <paramref name="catalogKey"/> by loading the entry.
            </summary>
            <param name="catalogKey">The catalog key.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.EntryLoaderBase.GetProductVariants(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Gets the product variants.
            </summary>
            <param name="productContent">Product contents.</param>
            <returns>An enumerable ContentReference list of variants belong to that product.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.Association">
            <summary>
            Describes an association of a catalog entry eg an accessory, up-sell or cross-sell product etc.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.ILink">
            <summary>
            Common interface for links (Associations and Relations)
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.ILink.SortOrder">
            <summary>
            The sort order of the link.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.ILink.Source">
            <summary>
            Gets or sets the source of the link (the item that has the link).
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.ILink.Target">
            <summary>
            Gets or sets the target of the link (the item we're linking to).
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.Association.Group">
            <summary>
            Gets or sets the association group.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.Association.SortOrder">
            <summary>
            The sort order of the association
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.Association.Source">
            <summary>
            Gets or sets the source of the association (the item that has the association,
            e.g. a catalog entry for which we want to recommend accessories).
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.Association.Target">
            <summary>
            Gets or sets the target of the association (the item we're associating to,
            e.g. an accessory to the Source product).
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.Association.Type">
            <summary>
            Gets or sets the type of the association.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.AssociationGroup">
            <summary>
            Describes a group of associations of a catalog entry.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Linking.AssociationGroup.DefaultName">
            <summary>
            The default group name.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.AssociationGroup.Description">
            <summary>
            Gets or sets the description of the group.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.AssociationGroup.Name">
            <summary>
            Gets or sets the name of the group.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.AssociationGroup.SortOrder">
            <summary>
            Gets or sets the sort order of the group.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.AssociationType">
            <summary>
            Describes a type of association.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Linking.AssociationType.DefaultTypeId">
            <summary>
            The default association type id.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.AssociationType.Id">
            <summary>
            Gets or sets the id of the association type.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.AssociationType.Description">
            <summary>
            Gets or sets the description of the association type.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.BundleEntry">
            <summary>
            Describes the relation from a bundle to one of the items in the bundle. <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Source"/>
            is the bundle, and <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Target"/> is the item included in the bundle.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.EntryRelation">
            <summary>
            Abstract base for describing the relations from a catalog entry to another.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.Relation">
            <summary>
            Abstract base class for describing a relation from one catalog item to another (the <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Target"/>)
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.Relation.SortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.Relation.Source">
            <summary>
            Gets or sets the source of the relation (the item that has the relation).
            For <see cref="T:EPiServer.Commerce.Catalog.Linking.NodeRelation"/> this is the categorized item (entry or subcategory). For
            <see cref="T:EPiServer.Commerce.Catalog.Linking.ProductVariation"/>, <see cref="T:EPiServer.Commerce.Catalog.Linking.BundleEntry"/> and <see cref="T:EPiServer.Commerce.Catalog.Linking.PackageEntry"/>
            this is the product/bundle/package itself.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.Relation.Target">
            <summary>
            Gets or sets the target of the relation (the item we're relating to).
            For <see cref="T:EPiServer.Commerce.Catalog.Linking.NodeRelation"/> this is the category (parent). For <see cref="T:EPiServer.Commerce.Catalog.Linking.ProductVariation"/>
            this is the variant. For <see cref="T:EPiServer.Commerce.Catalog.Linking.BundleEntry"/> and <see cref="T:EPiServer.Commerce.Catalog.Linking.PackageEntry"/> this is the entry
            included in the bundle/package.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Linking.EntryRelation.DefaultGroupName">
            <summary>
            The default group name.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Linking.EntryRelation.DefaultQuantity">
            <summary>
            The default quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.EntryRelation.GroupName">
            <summary>
            Gets or sets the name of the group.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.EntryRelation.Quantity">
            <summary>
            Gets or sets the quantity.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.AssociationGroupDefinition">
            <summary>
            Represents a definitions of a <see cref="T:EPiServer.Commerce.Catalog.Linking.AssociationGroup"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.RelationGroupDefinition">
            <summary>
            Represents a definitions of groups for a <see cref="T:EPiServer.Commerce.Catalog.Linking.Relation"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.GroupDefinitionRepository`1">
            <summary>
            A repository to store <see cref="T:EPiServer.Commerce.Catalog.Linking.GroupDefinitionRepository`1"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.GroupDefinitionRepository`1.#ctor(EPiServer.Data.Dynamic.DynamicDataStoreFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Linking.GroupDefinitionRepository`1"/> class.
            </summary>
            <param name="storeFactory">The store factory.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.GroupDefinitionRepository`1.Add(`0)">
            <summary>
            Adds the specified relation group definition to the repository if it doesnt already exists.
            </summary>
            <param name="typeToAdd">The relation group definition to add.</param>
            <exception cref="T:System.ArgumentException">The RelationGroupDefinition to be added must have a Name;typeToAdd</exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.GroupDefinitionRepository`1.List">
            <summary>
            Lists all available bundle entry group definitions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.GroupDefinitionRepository`1.Delete(System.String)">
            <summary>
            Deletes the specified bundle entry group definition if it exists in the repository.
            </summary>
            <param name="name">The name of the bundle entry group definition to delete.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.GroupDefinitionRepository`1.Store">
            <summary>
            Gets the backing DDS store.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.IAssociationRepository">
            <summary>
            Describes a service for handling associations of catalog content.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.IAssociationRepository.GetAssociations(EPiServer.Core.ContentReference)">
            <summary>
            Gets the associations for the catalog content specified by the content link.
            </summary>
            <param name="contentLink">The content link.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.IAssociationRepository.RemoveAssociations(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Association})">
            <summary>
            Removes the associations.
            </summary>
            <param name="associations">The associations to remove.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.IAssociationRepository.UpdateAssociations(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Association})">
            <summary>
            Updates matching associations and adds new associations for an entry.
            </summary>
            <param name="associations">The associations.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.ILinksRepository">
            <summary>
            Describes a service for handling relations and associations of catalog content.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.IRelationRepository">
            <summary>
            Describes a service for handling relations of catalog content.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.IRelationRepository.GetRelationsBySource(EPiServer.Core.ContentReference)">
            <summary>
            Gets the relations with <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Source"/> matching the specified content link.
            Depending on what content type the specified content link points to this will return
            instances of one or more of the following relation types:
            <see cref="T:EPiServer.Commerce.Catalog.Linking.ProductVariation"/> where Target is a product variation.
            <see cref="T:EPiServer.Commerce.Catalog.Linking.BundleEntry"/> or <see cref="T:EPiServer.Commerce.Catalog.Linking.PackageEntry"/> where Target is a bundle/package
            entry.
            <see cref="T:EPiServer.Commerce.Catalog.Linking.NodeRelation"/> where Target is a (parent) category.
            </summary>
            <param name="contentLink">The source content link to match.</param>
            <returns>The matching relations.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.IRelationRepository.GetRelationsBySource``1(EPiServer.Core.ContentReference)">
            <summary>
            Gets the relations with <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Source"/> matching the specified content link.
            Depending on what content type the specified content link points to this will return
            instances of one or more of the following relation types:
            <see cref="T:EPiServer.Commerce.Catalog.Linking.ProductVariation"/> where Target is a product variation.
            <see cref="T:EPiServer.Commerce.Catalog.Linking.BundleEntry"/> or <see cref="T:EPiServer.Commerce.Catalog.Linking.PackageEntry"/> where Target is a bundle/package
            entry.
            <see cref="T:EPiServer.Commerce.Catalog.Linking.NodeRelation"/> where Target is a (parent) category.
            </summary>
            <typeparam name="T">The type of relation to filter by, e.g. return only
            <see cref="T:EPiServer.Commerce.Catalog.Linking.ProductVariation"/> instances.</typeparam>
            <param name="contentLink">The source content link to match.</param>
            <returns>
            The matching relations.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.IRelationRepository.GetRelationsByTarget(EPiServer.Core.ContentReference)">
            <summary>
            Gets the relations with <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Target"/> matching the speified content link.
            Depending on what content type the specified content link points to this will return
            instances of one or more of the following relation types:
            <see cref="T:EPiServer.Commerce.Catalog.Linking.ProductVariation"/> where Source is the parent product of the variation.
            <see cref="T:EPiServer.Commerce.Catalog.Linking.BundleEntry"/> or <see cref="T:EPiServer.Commerce.Catalog.Linking.PackageEntry"/> where Source is a bundle/package
            containing the entry.
            <see cref="T:EPiServer.Commerce.Catalog.Linking.NodeRelation"/> where Source is an entry or (sub) category in the specified
            category. However, that information is probably simpler to retrieve by using
            <see cref="T:EPiServer.IContentLoader"/>s GetChildren method.
            </summary>
            <param name="contentLink">The target content link to match.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.IRelationRepository.GetRelationsByTarget``1(EPiServer.Core.ContentReference)">
            <summary>
            Gets the relations with <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Target"/> matching the speified content link.
            Depending on what content type the specified content link points to this will return
            instances of one or more of the following relation types:
            <see cref="T:EPiServer.Commerce.Catalog.Linking.ProductVariation"/> where Source is the parent product of the variation.
            <see cref="T:EPiServer.Commerce.Catalog.Linking.BundleEntry"/> or <see cref="T:EPiServer.Commerce.Catalog.Linking.PackageEntry"/> where Source is a bundle/package
            containing the entry.
            <see cref="T:EPiServer.Commerce.Catalog.Linking.NodeRelation"/> where Source is an entry or (sub) category in the specified
            category. However, that information is probably simpler to retrieve by using
            <see cref="T:EPiServer.IContentLoader"/>s GetChildren method.
            </summary>
            <typeparam name="T">The type of relation to filter by, e.g. return only
            <see cref="T:EPiServer.Commerce.Catalog.Linking.ProductVariation"/> instances.</typeparam>
            <param name="contentLink">The target content link to match.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.IRelationRepository.RemoveRelations(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Relation})">
            <summary>
            Removes the relations.
            </summary>
            <param name="relations">The relations to remove.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.IRelationRepository.UpdateRelations(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Relation})">
            <summary>
            Updates matching relations or adds new relations for an entry or node.
            </summary>
            <param name="relations">The relations.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.IRelationRepository.SetNodeParent(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
            <summary>
            Changes the parent of a catalog node to a different catalog node or a catalog.
            </summary>
            <param name="contentLink">The link to the node to change the parent of.</param>
            <param name="newParentLink">The link to the new parent.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.InventoryLoader">
            <summary>
            Loads inventories for a content.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.InventoryLoader.#ctor(Mediachase.Commerce.Inventory.IWarehouseInventoryService,Mediachase.Commerce.Catalog.ReferenceConverter,Mediachase.Commerce.Catalog.ICatalogSystem)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Catalog.InventoryLoader"/>.
            </summary>
            <param name="warehouseInventoryService">The warehouse inventory service.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogSystem">The catalog system.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.InventoryLoader.GetStockPlacement(EPiServer.Core.ContentReference)">
            <summary>
            Gets the inventories for the specified <paramref name="contentLink"/>.
            </summary>
            <param name="contentLink">Reference to the content to get inventories for.</param>
            <returns>Collection of inventories for the content.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.LinksRepository">
            <summary>
            Default implementation of the <see cref="T:EPiServer.Commerce.Catalog.Linking.ILinksRepository"/> interface.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.LinksRepository.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.CatalogContentLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Linking.LinksRepository"/> class.
            </summary>
            <param name="catalogContext">The catalog context.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentLoader">The catalog content loader.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.LinksRepository.GetRelationsBySource``1(EPiServer.Core.ContentReference)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.LinksRepository.GetRelationsBySource(EPiServer.Core.ContentReference)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.LinksRepository.GetRelationsByTarget``1(EPiServer.Core.ContentReference)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.LinksRepository.GetRelationsByTarget(EPiServer.Core.ContentReference)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.LinksRepository.RemoveRelations(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Relation})">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.LinksRepository.UpdateRelations(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Relation})">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.LinksRepository.GetAssociations(EPiServer.Core.ContentReference)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.LinksRepository.RemoveAssociations(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Association})">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.LinksRepository.UpdateAssociations(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Association})">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.LinksRepository.SetNodeParent(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.LinksRepository.MoveCatalogNode(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves the catalog node to new parent, recursively.
            This function will update the parent catalog node id of the moving catalog node
            and catalog id (if needed) for all child objects of it.
            </summary>
            <param name="catalogId">The catalog id.</param>
            <param name="catalogNodeId">The catalog node id.</param>
            <param name="targetCatalogId">The target catalog id.</param>
            <param name="targetCatalogNodeId">The target catalog node id.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.LinksRepository.MoveNodeEntry(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves the node entry. Make sure that the entry will has correct catalogid and/or node entry relation.
            </summary>
            <param name="catalogId">The catalog id.</param>
            <param name="catalogNodeId">The catalog node id.</param>
            <param name="catalogEntryId">The catalog entry id.</param>
            <param name="targetCatalogId">The target catalog id.</param>
            <param name="targetCatalogNodeId">The target catalog node id.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.NodeRelation">
            <summary>
            Describes a relation from an entry to a category or a category to another category. <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Source"/>
            is the categorized entry or (child) category, and <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Target"/> is the parent category.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Linking.NodeRelation.TargetCatalog">
            <summary>
            Gets or sets the catalog the relation is valid for. If not set, the catalog of the
            <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Target"/> is used.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.PackageEntry">
            <summary>
            Describes the relation from a package to one of the items in the package.  <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Source"/>
            is the package, and <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Target"/> is the item included in the package.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.ProductVariation">
            <summary>
            Describes the relation from a product to a variation of the product. <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Source"/>
            is the product, and <see cref="P:EPiServer.Commerce.Catalog.Linking.Relation.Target"/> is the variant.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Migration.RootContentMigration">
            <summary>
            Represents a migration step to migrate CommerceRootContentType to RootContent content type.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.PricingCommitter.#ctor(Mediachase.Commerce.Pricing.IPriceDetailService)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Catalog.PricingCommitter"/>.
            </summary>
            <param name="priceDetailService">IPriceDetailService instance.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.PricingCommitter.SavePrice(EPiServer.Commerce.SpecializedProperties.PriceDetail)">
            <summary>
            Saves the price.
            </summary>
            <param name="priceDetail">The price value to save.</param>
            <returns>The saved price</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.PricingCommitter.DeletePrice(System.Int64)">
            <summary>
            Deletes the price.
            </summary>
            <param name="priceValueId">The price value id to delete.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.PricingLoader">
            <summary>
            Loads prices for a content.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.PricingLoader.#ctor(EPiServer.IContentLoader,Mediachase.Commerce.Pricing.IPriceDetailService,EPiServer.Core.LanguageSelectorFactory,Mediachase.Commerce.Catalog.ReferenceConverter,Mediachase.Commerce.Catalog.ICatalogSystem)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Catalog.PricingLoader"/>.
            </summary>
            <param name="contentLoader">The content loader to fetch proces from.</param>
            <param name="priceService">The price service.</param>
            <param name="languageSelectorFactory">The language selection factory.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogSystem">The catalog system.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.PricingLoader.#ctor(EPiServer.IContentLoader,Mediachase.Commerce.Pricing.IPriceDetailService,Mediachase.Commerce.Catalog.ReferenceConverter,Mediachase.Commerce.Catalog.ICatalogSystem)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Catalog.PricingLoader"/>.
            </summary>
            <param name="contentLoader">The content loader to fetch proces from.</param>
            <param name="priceService">The price service.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogSystem">The catalog system.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.PricingLoader.GetPrice(System.Int64)">
            <summary>
            Gets the the price specified by the ID.
            </summary>
            <param name="priceId">The price ID.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.PricingLoader.GetPrices(EPiServer.Core.ContentReference,Mediachase.Commerce.MarketId,Mediachase.Commerce.Pricing.CustomerPricing)">
            <summary>
            Gets the prices for the specified <paramref name="contentLink" />.
            </summary>
            <param name="contentLink">Reference to the content to get prices for.</param>
            <param name="marketId">The market id. Pass emtpy marketId to get prices for all markets.</param>
            <param name="customerPricing">The customer pricing. Pass emtpy customer pricing to get prices for all customers.</param>
            <returns>
            Collection of prices for the content.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.PricingLoader.GetPrices(EPiServer.Core.ContentReference,Mediachase.Commerce.MarketId,Mediachase.Commerce.Pricing.CustomerPricing,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets the prices.
            </summary>
            <param name="contentLink">Reference to the content to get prices for.</param>
            <param name="marketId">The market id. Pass emtpy marketId to get prices for all markets.</param>
            <param name="customerPricing">The customer pricing. Pass emtpy customer pricing to get prices for all customers.</param>
            <param name="startIndex">The start index.</param>
            <param name="numberOfRecord">The number of record.</param>
            <param name="total">The total.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.PricingLoader.GetAllVariants(EPiServer.Core.ContentReference)">
            <summary>
            Gets all variants from a content link.
            If content link is a CatalogNode, then return variants and variants of products which are direct children of it
            If content link is a Product, then return variants of it
            If content link is a variant/package, then return content of it
            </summary>
            <param name="contentLink">The content link.</param>
            <returns><see cref="T:System.Collections.IEnumerable"/> of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase"/></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler"/> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler"/> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="objectInstanceCache">The object instance cache.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.Initialize">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.InitializeEvents">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.ExecuteWithLocalEventsDisabled(System.Action)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Executes the action with forwarding of local events temporarily disabled.
            This means the <see cref="E:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.ContentUpdated"/>, <see cref="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.RelationUpdated(System.Object,Mediachase.Commerce.Catalog.Events.RelationEventArgs)"/> 
            and <see cref="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.AssociationUpdated(System.Object,Mediachase.Commerce.Catalog.Events.AssociationEventArgs)"/>  events are not triggered on the
            events from <see cref="T:Mediachase.Commerce.Catalog.EventContext"/>.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.EntryUpdated(System.Object,Mediachase.Commerce.Catalog.Events.EntryEventArgs)">
            <summary>
            Implementation of the EntryUpdated event handler of the <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogEventListenerBase"/>
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:Mediachase.Commerce.Catalog.Events.EntryEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.EntryDeleted(System.Object,Mediachase.Commerce.Catalog.Events.DeletedEntryEventArgs)">
            <summary>
            Implementation of the EntryDeleted event handler of the <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogEventListenerBase"/>
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:Mediachase.Commerce.Catalog.Events.DeletedEntryEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.NodeUpdated(System.Object,Mediachase.Commerce.Catalog.Events.NodeEventArgs)">
            <summary>
            Implementation of the NodeUpdated event handler of the <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogEventListenerBase"/>
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:Mediachase.Commerce.Catalog.Events.NodeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.NodeDeleted(System.Object,Mediachase.Commerce.Catalog.Events.DeletedNodeEventArgs)">
            <summary>
            Implementation of the NodeDeleted event handler of the <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogEventListenerBase"/>
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:Mediachase.Commerce.Catalog.Events.DeletedNodeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.CatalogUpdated(System.Object,Mediachase.Commerce.Catalog.Events.CatalogEventArgs)">
            <summary>
            Implementation of the CatalogUpdated event handler of the <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogEventListenerBase"/>
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.CatalogDeleted(System.Object,Mediachase.Commerce.Catalog.Events.DeletedCatalogEventArgs)">
            <summary>
            Implementation of the CatalogDeleted event handler of the <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogEventListenerBase"/>
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:Mediachase.Commerce.Catalog.Events.DeletedCatalogEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.CatalogLanguageUpdated(System.Object,Mediachase.Commerce.Catalog.Events.CatalogLanguageEventArgs)">
            <summary>
            Implementation of the CatalogLanguageUpdated event handler of the <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogEventListenerBase"/>
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogLanguageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.AssociationUpdated(System.Object,Mediachase.Commerce.Catalog.Events.AssociationEventArgs)">
            <summary>
            Implementation of the AssociationUpdated event handler of the <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogEventListenerBase"/>
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:Mediachase.Commerce.Catalog.Events.AssociationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.AssociationDeleted(System.Object,Mediachase.Commerce.Catalog.Events.DeletedAssociationEventArgs)">
            <summary>
            Implementation of the AssociationDeleted event handler of the <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogEventListenerBase"/>
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:Mediachase.Commerce.Catalog.Events.DeletedAssociationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.RelationUpdated(System.Object,Mediachase.Commerce.Catalog.Events.RelationEventArgs)">
            <summary>
            Implementation of the RelationUpdated event handler of the <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogEventListenerBase"/>
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:Mediachase.Commerce.Catalog.Events.RelationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.RelationDeleted(System.Object,Mediachase.Commerce.Catalog.Events.DeletedRelationEventArgs)">
            <summary>
            Implementation of the RelationDeleted event handler of the <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogEventListenerBase"/>
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:Mediachase.Commerce.Catalog.Events.DeletedRelationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.ContentUpdated">
            <summary>
            Occurs when an item in the ECF has been updated and the corresponding
            content is cleared from cache.
            </summary>
        </member>
        <member name="E:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.RelationsUpdated">
            <summary>
            Occurs when the relations of an item in ECF have been updated
            </summary>
        </member>
        <member name="E:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.AssociationsUpdated">
            <summary>
            Occurs when the associations of an item in ECF have been updated
            </summary>
        </member>
        <member name="E:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.LanguageConfigurationUpdated">
            <summary>
            Occurs when the language configuration of a catalog 
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogEventHandler.CatalogCacheRootKeyPolicy">
            <summary>
            Cache dependency for the catalog. When the main catalog item has been updated, the cache item that uses this dependency will be removed.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.CatalogAvailableContentTypeService">
            <summary>
                Extends the <see cref="T:EPiServer.DataAbstraction.ContentTypeAvailabilityService"/> with logic that enforces the ECF rules regarding data structure in the catalog.
                It will remove any <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContent"/> as an available child from any catalog content 
                that isn't either a <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent"/> or another <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContent"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogAvailableContentTypeService.#ctor(EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAbstraction.IContentTypeRepository},EPiServer.DataAbstraction.RuntimeModel.IAvailableModelSettingsRepository,EPiServer.DataAbstraction.IAvailableSettingsRepository)">
            <summary>
                Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogAvailableContentTypeService"/> class.
            </summary>
            <param name="contentTypeRepositoryAccessor">The content type repository accessor.</param>
            <param name="modelRepository">The model repository.</param>
            <param name="typeSettingsRepository">The type settings repository.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogAvailableContentTypeService.#ctor(EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAbstraction.IContentTypeRepository},EPiServer.DataAbstraction.RuntimeModel.IAvailableModelSettingsRepository,EPiServer.DataAbstraction.IAvailableSettingsRepository,EPiServer.DataAbstraction.GroupDefinitionRepository,EPiServer.IContentLoader,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogAvailableContentTypeService"/> class.
            </summary>
            <param name="contentTypeRepositoryAccessor">The content type repository accessor to use</param>
            <param name="modelRepository">The model repository to use</param>
            <param name="typeSettingsRepository">The type setting repository to use</param>
            <param name="groupDefinitionRepository">The group definition repository to use</param>
            <param name="contentLoader">The content loader to use</param>
            <param name="cache">The cache to use</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogAvailableContentTypeService.GetSetting(System.String)">
            <summary>
            Gets the settings for available content types for a <see cref="T:EPiServer.DataAbstraction.ContentType"/> 
            given by name <paramref name="contentTypeName"/>. 
            Will enforce ECF rules by remove and node content types if the content type is not a catalog or a node.
            </summary>
            <param name="contentTypeName">Name of the content type.</param>
            <returns>The settings for available content types</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.CatalogMetadataExtender">
            <summary>
                Adds custom modifications of metadata for catalog content.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.CatalogMetadataExtender.ModifyMetadata(EPiServer.Shell.ObjectEditing.ExtendedMetadata,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
                Changes metadata for the editor before the UI is rendered.
            </summary>
            <remarks>
                Will hide the SetChangedOnPublish property, since it doesn't make sense for catalog content.
                Will set Name as ReadOnly if not on the master language.
                Will hide the media collection property if legacy assets are used.
            </remarks>
            <param name="metadata">The metadata to modify.</param>
            <param name="attributes">The attributes for this metadata.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogLanguageLoader.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.CatalogLanguageLoader"/> class.
            </summary>
            <param name="catalogContext">The catalog context.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogLanguageLoader.VerifyLanguageSetup(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.String,System.Int32)">
            <summary>
            Verifies the language setup so that the language of the content is one
            of the available languages of the catalog, and also that the master
            language and available languages are set.
            </summary>
            <param name="content">The content.</param>
            <param name="language">The preferred language, or null for master language.</param>
            <param name="catalogId">The catalog id.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.EncryptedAttribute">
            <summary>
                Use this attribute to declare a property to have "Use Encryption" enabled.
                This will encrypt the value when stored in MetaData plus.
            </summary>
            <example>
                <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeSample.cs" lang="cs" />
            </example>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.EncryptedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.EncryptedAttribute"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.DataAnnotations.EncryptedAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.EncryptedAttribute"/> class.
            </summary>
            <param name="isEncrypted">Specifies if the property is encrypted.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAnnotations.EncryptedAttribute.IsEncrypted">
            <summary>
            Gets a value indicating whether the property is encrypted.
            </summary>
            <value>
              <c>true</c> if tokenized, otherwise <c>false</c>.
            </value>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContentBase">
            <summary>
            Base class for all types of nodes in the catalog (nodes as well
            as the catalog itself and the catalog root).
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.ProductContent">
            <summary>
            Class to store information about products
            </summary>
            <remarks>
            For more information read the <a href="../EPiServer SDK/Knowledge base/Developer Guide/Content Provider/Working with the catalog as IContent.htm">Working with the Catalog as IContent</a> article.
            </remarks>
            <example>
            <para>An example of how to create a Commerce content type:</para>
            <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeSample.cs" />
            </example>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.ProductContent.VariantsReference">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.ProductContent.ClassTypeId">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.SeoInformation">
            <summary>
            Represents SEO information for a catalog entry or node.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.SeoInformation.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.SeoInformation.Description">
            <summary>
            Gets or sets the SEO description.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.SeoInformation.Keywords">
            <summary>
            Gets or sets the SEO keywords.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentFactory">
            <summary>
            Extends <see cref="T:EPiServer.Construction.ContentFactory"/> to do processing specific to <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/>
            instances.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentFactory.#ctor(EPiServer.Construction.ISharedBlockFactory,EPiServer.Construction.IContentDataFactory{EPiServer.Core.IContent},EPiServer.Construction.IContentDataFactory{EPiServer.Core.PageData},EPiServer.Construction.IPageDataBuilder,EPiServer.Construction.IContentDataBuilder,EPiServer.Construction.IPropertyDataFactory,EPiServer.Commerce.Catalog.Provider.Construction.CatalogLanguageLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentFactory"/> class.
            </summary>
            <param name="sharedblockFactory">The sharedblock factory.</param>
            <param name="contentFactory">The content factory.</param>
            <param name="pageDataFactory">The page data factory.</param>
            <param name="pageDataBuilder">The page data builder.</param>
            <param name="contentDataBuilder">The content data builder.</param>
            <param name="propertyDataFactory">The property data factory.</param>
            <param name="languageLoader">The language loader.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentFactory.CreateContent(EPiServer.DataAbstraction.ContentType,EPiServer.Construction.BuildingContext)">
            <summary>
            Creates the content, using base implementation but verifying
            the languge setup according to the catalog.
            </summary>
            <param name="contentType">Type of the content.</param>
            <param name="buildingContext">The building context.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataPropertyResolver">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Maps a the meta fields of a meta class to property definition models.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataPropertyResolver.#ctor(EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataPropertyResolver"/> class.
            </summary>
            <param name="metaDataPropertyMapper">The meta data property mapper.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataPropertyResolver.ExtractProperties(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Extracts information about the meta fields of a meta class as <see cref="T:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel"/> instances,
            if they can be mapped to property types.
            </summary>
            <param name="metaClassId">The meta class id.</param>
            <param name="propertiesToSkip">Names of properties to skip (e.g. because they are already included as
            a result of scanning).</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataPropertyResolver.ExtractProperties(System.Collections.Generic.IEnumerable{Mediachase.MetaDataPlus.Configurator.MetaField})">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Extracts information about the meta fields of a meta class as <see cref="T:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel"/> instances,
            if they can be mapped to property types.
            </summary>
            <param name="metaFields">The meta fields.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataPropertyResolver.ConfigureProperties(System.Collections.Generic.ICollection{EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel})">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Configures the properties by adding default UI hints
            </summary>
            <param name="propertyDefinitionModels">The property definition models.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataPropertyResolver.MetaDataContext">
            <summary>
            Context used when loading <see cref="T:Mediachase.MetaDataPlus.Configurator.MetaClass"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.ContentEventHandler.#ctor(EPiServer.Core.IContentEvents,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.ContentEventHandler"/> class.
            </summary>
            <param name="contentEvents">The content events to handle.</param>
            <param name="synchronizedObjectInstanceCache">The object instance cache.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.ContentEventHandler.Initialize">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Initializes event handlers for the events in <see cref="T:EPiServer.Core.IContentEvents"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.ContentEventHandler.ContentEventsOnPublishedContent(System.Object,EPiServer.ContentEventArgs)">
            <summary>
            When catalog content is published we need to clear the cache for all children of the catalog. 
            DefaultLanguage on CatalogContent determines MasterLanguage on child content.
            </summary>
            <param name="sender"></param>
            <param name="contentEventArgs"></param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.ContentEventHandler.ContentEventsOnCreatedContent(System.Object,EPiServer.ContentEventArgs)">
            <summary>
            When we create entries as children to Products/Packages/Bundles the values of e.TargetLink (the product) and 
            e.Content.ParentLink (the actual parent (node/catalog)) differs. CMS will clear the cache for e.TargetLink. 
            We need to clear the cache for children of the actual parent (e.Content.ParentLink).
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.ExtendedSaveAction">
            <summary>
            Defines flags that can be used to mask the <see cref="T:EPiServer.DataAccess.SaveAction"/> when working with catalog content
            and the content provider.
            Use the extension methods of <see cref="T:EPiServer.Commerce.Catalog.Provider.SaveActionExtensions"/> to work with these extra flags.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.ExtendedSaveAction.ClearVersions">
            <summary>
            When this flag is set in the <see cref="T:EPiServer.DataAccess.SaveAction"/> used when saving a catalog content,
            any previously existing vesions will be deleted from the database, and no additional version
            data (except for the saved data itself) will be kept.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.IgnoreMetaDataPlusSynchronizationAttribute">
            <summary>
            This attribute is used on properties that should not be synchronized to the Meta Data Plus layer.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.VariationContent">
            <summary>
            Class to store information about variations/SKUs
            </summary>
            <remarks>
            For more information read the <a href="../EPiServer SDK/Knowledge base/Developer Guide/Content Provider/Working with the catalog as IContent.htm">Working with the Catalog as IContent</a> article.
            </remarks>
            <example>
            <para>An example of how to create a Commerce content type:</para>
            <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeSample.cs" />
            </example>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing">
            <summary>
                Defines what the properties of an item that supports pricing.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IPricing.TaxCategoryId">
            <summary>
                Gets or sets the tax category.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.IPricing.PriceReference">
            <summary>
                Gets or sets a product link, which holds the price data.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.VariationContent.ClassTypeId">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.VariationContent.MinQuantity">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.VariationContent.MaxQuantity">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.VariationContent.Weight">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.VariationContent.ShippingDimensions">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.VariationContent.TrackInventory">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.VariationContent.InventoryReference">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.VariationContent.TaxCategoryId">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.VariationContent.PriceReference">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Class for storing a draft version of a <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> instance
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft"/> class
            with dependencies loaded from the Service locator.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory,EPiServer.Core.Transfer.ContentTransfer,EPiServer.Core.Transfer.RawContentRetriever,EPiServer.Commerce.Catalog.Provider.CatalogContentGuidProvider,EPiServer.IContentRepository)">
            <summary>
            Creates a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft"/> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="metaClassContentFactory">The meta class content factory.</param>
            <param name="contentTransfer">The content transfer.</param>
            <param name="rawContentRetriever">The raw content retriever.</param>
            <param name="guidProvider">The guid provider</param>
            <param name="contentRepository">The content repository</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory,EPiServer.Core.Transfer.ContentTransfer,EPiServer.Core.Transfer.RawContentRetriever,EPiServer.IContentRepository,EPiServer.Web.IPermanentLinkMapper)">
            <summary>
            Creates a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft"/> class.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="metaClassContentFactory">The meta class content factory.</param>
            <param name="contentTransfer">The content transfer.</param>
            <param name="rawContentRetriever">The raw content retriever.</param>
            <param name="contentRepository">The content repository</param>
            <param name="linkMapper">The permanent link mapper</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.GetContent">
            <summary>
            Gets the content without restoring the <see cref="P:EPiServer.Core.IContent.ParentLink"/>.
            </summary>
            <returns>The draft content.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.GetContent(EPiServer.Core.ContentReference)">
            <summary>
            Gets the content, correcting the parent link if necessary.
            </summary>
            <param name="parentLink">The parent link to set on the content instance.</param>
            <returns>The draft content.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.SetContent(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Sets the content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.EnsureContentReferenceProperties(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,EPiServer.Core.RawContent)">
            <summary>
            Ensures that ContentReference properties have value as ContentReference instead of PermanentLink.
            </summary>
            <param name="draftContent">The draft content to check/update its property.</param>
            <param name="deserializedRawContent">The raw content to get property value from.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.Create">
            <summary>
            Creates a CatalogContentDraft using the current <see cref="T:EPiServer.ServiceLocation.ServiceLocator"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.Id">
            <summary>
            Gets or sets the dynamic data instance Id.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.Content">
            <summary>
            Gets the content instance saved in the draft, or sets
            the content instance to be saved.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.ContentReferenceToSoftlinkMapping">
            <summary>
            Mapping between property name and guid for content references.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.ContentLink">
            <summary>
            Gets the content link for the content stored in the draft, without
            reconstructing the whole content instance.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.ContentId">
            <summary>
            Gets the ID of the <see cref="T:EPiServer.Core.ContentReference"/>  of the content instance set by <see cref="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.SetContent(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)"/>
            </summary>
            <remarks>This is used in order be able to do a dds match on just the Id part of <see cref="P:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.ContentLink"/></remarks>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.ContentGuid">
            <summary>
            Gets the content Guid of the stored content.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.ContentWorkId">
            <summary>
            Gets the ID of the <see cref="T:EPiServer.Core.ContentReference"/>  of the content instance set by <see cref="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.SetContent(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)"/>
            </summary>
            <remarks>This is used in order be able to do a dds match on just the Id part of <see cref="P:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.ContentLink"/></remarks>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.LanguageName">
            <summary>
            Gets the name of the language of the stored content.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.MasterLanguageName">
            <summary>
            Gets the name of the master language of the stored content.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.ParentLink">
            <summary>
            Gets or sets the parent link.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.RouteSegment">
            <summary>
            Gets or sets the route segment.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.IsCommonDraft">
            <summary>
            Sets whether this version is the common draft version. Only
            one version for each ContentId should be common draft.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.MasterVersionId">
            <summary>
            Gets or sets the master version from which this draft was "branched".
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.CatalogId">
            <summary>
            Gets or sets the catalog id.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.Status">
            <summary>
            Gets the version status.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.StartPublish">
            <summary>
            Gets the start publish date.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.ExistingLanguages">
            <summary>
            Gets or sets the existing languages as a string separated by <see cref="F:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.ExistingLanguagesSplitter"/>
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.CurrentLanguageRemoved">
            <summary>
            Gets or sets a value indicating whether the language of the content has been removed.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.Name">
            <summary>
            Gets or sets the content name.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.IsDirty">
            <summary>
            Special flag, should only change to incidate that a published draft is out of sync with ecf.
            </summary>
            <value>
              <c>true</c> if it needs to be synced; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.SerializedPropertyCollection">
            <summary>
            Gets a dictionary representing the properties of the content instance set by <see cref="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft.SetContent(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)"/>
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Stores drafts (versions) of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> in the DDS
            and loads and saves the drafts or published versions (using the
            <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader"/> and <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentCommitterHandler"/>,
            respectively).
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.#ctor(EPiServer.Commerce.ApplicationContext,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.CatalogContentLoader,EPiServer.Commerce.Catalog.Provider.CatalogContentCommitterHandler,EPiServer.Data.Dynamic.DynamicDataStoreFactory,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache,EPiServer.Commerce.Catalog.Provider.CatalogEventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore"/> class.
            </summary>
            <param name="applicationContext">The application context.</param>
            <param name="referenceConverter">The reference converter</param>
            <param name="contentLoader">The commerce loader.</param>
            <param name="contentCommitter">The commerce committer.</param>
            <param name="storeFactory">The store factory.</param>
            <param name="objectInstanceCache">The runtime cache.</param>
            <param name="catalogEventHandler">The catalog event handler.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.#ctor(EPiServer.Commerce.ApplicationContext,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.CatalogContentLoader,EPiServer.Commerce.Catalog.Provider.CatalogContentCommitterHandler,EPiServer.Data.Dynamic.DynamicDataStoreFactory,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache,EPiServer.Commerce.Catalog.Provider.CatalogEventHandler,EPiServer.Data.Providers.IDatabaseFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore"/> class.
            </summary>
            <param name="applicationContext">The application context.</param>
            <param name="referenceConverter">The reference converter</param>
            <param name="contentLoader">The commerce loader.</param>
            <param name="contentCommitter">The commerce committer.</param>
            <param name="storeFactory">The store factory.</param>
            <param name="objectInstanceCache">The runtime cache.</param>
            <param name="catalogEventHandler">The catalog event handler.</param>
            <param name="databaseFactory">The database factory.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.Save(EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction)">
            <summary>
            Saves the specified content.
            </summary>
            <param name="content">The content.</param>
            <param name="saveAction">The save action.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.DeleteContent(EPiServer.Core.ContentReference)">
            <summary>
            Deletes the specified content
            </summary>
            <param name="contentLink">The content to delete</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.SaveSimple(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,EPiServer.DataAccess.SaveAction)">
            <summary>
            Saves without keeping any version information
            </summary>
            <param name="content">The content.</param>
            <param name="saveAction">The save action.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.IsNewVersionRequired(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,EPiServer.DataAccess.SaveAction)">
            <summary>
            Determines whether it is required to create a new version to perform the 
            requested <see cref="T:EPiServer.DataAccess.SaveAction"/> on the <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/>.
            </summary>
            <param name="content">The commerce content</param>
            <param name="saveAction">The save action.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.TrySetPublishedOrLastVersionId(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,EPiServer.DataAccess.SaveAction)">
            <summary>
            Tries to set the published version id in the <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/>'s <see cref="P:EPiServer.Core.ContentReference.WorkID"/>
            for a published version content link (WorkId 0).
            If there is a published version draft the <see cref="T:EPiServer.DataAccess.SaveAction"/> will also be forced to include
            <see cref="F:EPiServer.DataAccess.SaveAction.Publish"/>. If there is no published version, the ID of the latest version
            is used. If there is no previous version, the version ID will be left untouched.
            </summary>
            <param name="content">The commerce content.</param>
            <param name="saveAction">The save action.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.DoSaveFull(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,EPiServer.DataAccess.SaveAction,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Saves or publishes content accodring to the <see cref="T:EPiServer.DataAccess.SaveAction"/>.
            </summary>
            <param name="content">The catalog content.</param>
            <param name="saveAction">The save action.</param>
            <param name="userName">Name of the user saving.</param>
            <param name="forceCurrentVersion">if set to <c>true</c>, no new version is created.</param>
            <param name="newVersionRequired">if set to <c>true</c> and <paramref name="forceCurrentVersion"/>
            is false, a new version is created.</param>
            <param name="delayedPublish">if set to <c>true</c> the delayed publish status is set.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.SetPreviouslyPublishedStatus(EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
            <summary>
            Finds any published drafts in the specified language and sets the status to
            <see cref="F:EPiServer.Core.VersionStatus.PreviouslyPublished"/> except for the version specified
            in the <see cref="T:EPiServer.Core.ContentReference"/>.
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.GetItems(System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.String)">
            <summary>
            Gets content items correspoinding to the supplied content links.
            </summary>
            <param name="contentLinks">The content links.</param>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.GetCommittedContent(EPiServer.Core.ContentReference,System.String)">
            <summary>
            Gets the contents from the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader"/>
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="language">The content language.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.GetVersionListEvictionPolicy(EPiServer.Core.ContentReference)">
            <summary>
            Gets an eviction policy with master key dependencies to the entry, node or catalog.
            </summary>
            <param name="contentLink">The content link.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.GetCommittedContents(System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.String)">
            <summary>
            Gets the content from the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader"/>
            </summary>
            <param name="contentLinks">The content links.</param>
            <param name="language">The content language.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.EnsureOriginalVersionsPersisted(EPiServer.Core.ContentReference)">
            <summary>
            Persists the drafts created by EnsureOriginalVersions so that they
            are no longer only in memory.
            </summary>
            <param name="contentLink">The content link.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.GetDraft(EPiServer.Core.ContentReference)">
            <summary>
            Gets the draft for a specific content version.
            </summary>
            <param name="contentLink">The content link.</param>
            <returns>The matching draft, or null if there is none.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.GetDrafts(EPiServer.Core.ContentReference)">
            <summary>
            Gets the drafts for a <see cref="T:EPiServer.Core.ContentReference"/> including drafts
            for original versions not yet stored in the DDS.
            </summary>
            <param name="contentLink">The content link.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.RefreshPublishedContent(EPiServer.Commerce.Catalog.Provider.CatalogContentDraft)">
            <summary>
            Update a published content to make sure it's synced with ecf.
            </summary>
            <param name="publishedDraft">The published draft.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.GetStoredDrafts(EPiServer.Core.ContentReference)">
            <summary>
            Gets the drafts for a <see cref="T:EPiServer.Core.ContentReference"/> from the DDS.
            </summary>
            <param name="contentLink">The content link.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.EnsureOriginalVersions(EPiServer.Core.ContentReference,System.Collections.Generic.IList{EPiServer.Commerce.Catalog.Provider.CatalogContentDraft})">
            <summary>
            Adds drafts to the draft collection for all languages that are returned by the
            <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader"/> if there aren't already drafts for them.
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="storedDrafts">The stored drafts.</param>
            <remarks>By adding these drafts dynamically they are not persisted
            to the DDS until they are modified and saved which speeds up
            loading a lot for any content that isn't edited (e.g when the UI
            creates listings).</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.CreateOriginalVersionDraft(EPiServer.Core.ContentReference,System.String,System.Collections.Generic.IList{EPiServer.Commerce.Catalog.Provider.CatalogContentDraft})">
            <summary>
            Creates the original version draft based on content stored in the
            <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader"/>.
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="language">The content language.</param>
            <param name="existingDrafts">The existing drafts.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.CreateDraft(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.Int32,EPiServer.Core.VersionStatus,System.Int32)">
            <summary>
            Creates a new draft containing a cloned version of the passed <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/>
            </summary>
            <param name="content">The content.</param>
            <param name="workId">The work id.</param>
            <param name="status">The status.</param>
            <param name="masterVersionId">The master version.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.GetNextVersion(EPiServer.Core.ContentReference)">
            <summary>
            Finds the next free version ID (WorkId) for the
            <see cref="T:EPiServer.Core.ContentReference"/>.
            </summary>
            <param name="contentLink">The content link.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.GetNextVersion(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Provider.CatalogContentDraft})">
            <summary>
            Finds the next free version ID (WorkId) for the
            based on the supplied instances of <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentDraft"/>
            </summary>
            <param name="drafts">The drafts.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.CommitChanges(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Commits the changes to ECF with events disabled to avoid triggering
            <see cref="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.ContentUpdatedInEcf(System.Object,EPiServer.ContentEventArgs)"/>.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.UpdateStatus(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,EPiServer.DataAccess.SaveAction,System.Boolean)">
            <summary>
            Updates the status taking into account the current status,
            the save action and delayed publish.
            </summary>
            <param name="content">The content.</param>
            <param name="saveAction">The save action.</param>
            <param name="delayedPublish">The delayedPublish flag.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.SaveDraft(EPiServer.Commerce.Catalog.Provider.CatalogContentDraft)">
            <summary>
            Saves the draft.
            </summary>
            <param name="draft">The draft.</param>
            <returns>The saved and reloaded draft.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.RemoveDraft(EPiServer.Commerce.Catalog.Provider.CatalogContentDraft)">
            <summary>
            Removes the draft.
            </summary>
            <param name="draft">The draft.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.Delete(EPiServer.Core.ContentReference)">
            <summary>
            Delete a single version of a Content
            </summary>
            <param name="contentLink">The content link.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.List(EPiServer.Core.ContentReference,System.String)">
            <summary>
            Lists all versions for a page current language selection if the languageBranch is null otherwise
            lists all versions for a page for a specific language
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="languageBranch">The language branch</param>
            <returns>
            All matching versions
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.List(EPiServer.Core.ContentReference)">
            <summary>
            Lists all versions
            </summary>
            <param name="contentLink">The content link.</param>
            <returns>
            All matching versions
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.ListDelayedPublish">
            <summary>
             Lists all content references that are set to delayed publish.
            </summary> 
            <returns>
            All matching content Versions
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.ListPublished(EPiServer.Core.ContentReference)">
            <summary>
            Loads the published version
            </summary>
            <param name="contentLink">The content link.</param>
            <returns>
            A <see cref="T:EPiServer.DataAbstraction.PageVersion"/>
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.Load(EPiServer.Core.ContentReference)">
            <summary>
            Loads the version.
            </summary>
            <param name="contentLink">The content link.</param>
            <returns>
            A <see cref="T:EPiServer.DataAbstraction.PageVersion"/>
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.LoadCommonDraft(EPiServer.Core.ContentReference,System.String)">
            <summary>
            Loads the common draft.
            </summary>
            <param name="contentLink">The content link to load common draft for.</param>
            <param name="language">The language.</param>
            <returns>
            CommonDraft if it exist, otherwise Published, If no published exist the latest saved version is returned
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.LoadPublished(EPiServer.Core.ContentReference)">
            <summary>
            Loads the published version
            </summary>
            <param name="contentLink">The content link.</param>
            <returns>
            A <see cref="T:EPiServer.DataAbstraction.PageVersion"/>
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.LoadPublished(EPiServer.Core.ContentReference,System.String)">
            <summary>
            Loads the published version a page with current language selection if the languageBranch is null otherwise
            loads the published version a page for a specific language
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="languageBranch">The language branch.</param>
            <returns>
            A <see cref="T:EPiServer.DataAbstraction.PageVersion"/>
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore.SetCommonDraft(EPiServer.Core.ContentReference)">
            <summary>
            Sets the specified version as common draft.
            </summary>
            <param name="contentLink">The content link.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.CatalogContentGuidProvider">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Used to deterministically generate Guids for Commerce Catalog content.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentGuidProvider.GetGuid(EPiServer.Core.ContentReference,System.Boolean)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Deterministically generates a guid based on a <see cref="T:EPiServer.Core.ContentReference"/>'s
            ID and WorkID.
            </summary>
            <param name="contentLink">The content link get Guid for.</param>
            <param name="ignoreWorkId">If true, different work ID:s will generate the same Guid
            (Work ID will be stored as 0).</param>
            <returns>The Guid.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentGuidProvider.GetContentLink(System.Guid,System.String)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Restores a <see cref="T:EPiServer.Core.ContentReference"/> from a <see cref="T:System.Guid"/> previously
            encoded by this class.
            </summary>
            <param name="encodedGuid">The encoded guid.</param>
            <param name="providerName">The provider name to use in the content link. This
            must be supplied since it is not stored in the encoded Guid, but it will
            be compared to a hash stored in the Guid.</param>
            <returns>The ContentReference.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the supplied providerName does not
            match the hashed value stored in the Guid.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentGuidProvider.TryGetContentLink(System.Guid,System.String,EPiServer.Core.ContentReference@)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Restores a <see cref="T:EPiServer.Core.ContentReference"/> from a <see cref="T:System.Guid"/> previously
            encoded by this class.
            </summary>
            <param name="encodedGuid">The encoded guid.</param>
            <param name="providerName">The provider name to use in the content link. This
            must be supplied since it is not stored in the encoded Guid, but it will
            be compared to a hash stored in the Guid.</param>
            <param name="result">Contains the decoded ContentReference.</param>
            <returns>True if the decoding was successful, false if the hashed providerName
            stored in the Guid did not match the supplied providerName.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentGuidProvider.Encode(System.Guid,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Mask four integers onto a base Guid.
            </summary>
            <param name="baseGuid">The base Guid.</param>
            <param name="data1">First integer.</param>
            <param name="data2">Second integer.</param>
            <param name="data3">Third integer.</param>
            <param name="data4">Fourth integer.</param>
            <returns>The masked Guid.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentGuidProvider.Decode(System.Guid,System.Guid)">
            <summary>
            Unmask four integers from a guid using a base Guid.
            </summary>
            <param name="baseGuid">The base Guid.</param>
            <param name="encodedData">The masked Guid.</param>
            <returns>The decoded data.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.CatalogContentTypeAttribute">
            <summary>
            Extends the default content type registration with the possibility to associate the content type with a metadata class.
            </summary>
            <example>
            <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeAttributeSample.cs" lang="cs" />
            </example>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.DataAnnotations.CatalogContentTypeAttribute.MetaClassName">
            <summary>
            Gets or sets the name of the meta class the content type should be associated with.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.CatalogBuilder">
            <summary>
            Handles creation of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> that is a <see cref="F:Mediachase.Commerce.Catalog.CatalogContentType.Catalog"/>.
            NOTE: All operations is in ths class are uncached!
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.ICatalogContentBuilder">
            <summary>
            Handles creation of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> based on <see cref="T:Mediachase.Commerce.Catalog.CatalogContentType"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.ICatalogContentBuilder.HandleType(Mediachase.Commerce.Catalog.CatalogContentType)">
            <summary>
            Checks if this builder handles the specified <paramref name="catalogContentType"/>.
            </summary>
            <param name="catalogContentType">Type of the commerce content.</param>
            <returns>
                <c>true</c> if <paramref name="catalogContentType"/> can be handled by this instance; 
                otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.ICatalogContentBuilder.Create(System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.String)">
            <summary>
            Creates a list of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> according to each of the specified
            <see cref="T:EPiServer.Core.ContentReference"/> in <paramref name="contentLinks"/>.
            </summary>
            <param name="contentLinks">The content links.</param>
            <param name="language">The content language.</param>
            <returns>A list of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogBuilder.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory,EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.CatalogContentGuidProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.CatalogBuilder"/> class.
            </summary>
            <param name="catalogContext">The catalog context.</param>
            <param name="metaClassContentFactory">The meta class content factory.</param>
            <param name="catalogPropertyLoader">The catalog property loader.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="guidProvider">The guid provider.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogBuilder.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory,EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader,Mediachase.Commerce.Catalog.ReferenceConverter,Mediachase.Commerce.Catalog.Data.CatalogGuidMapping)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.CatalogBuilder"/> class.
            </summary>
            <param name="catalogContext">The catalog context.</param>
            <param name="metaClassContentFactory">The meta class content factory.</param>
            <param name="catalogPropertyLoader">The catalog property loader.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogGuidMapping">The catalog Guid mapping.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogBuilder.HandleType(Mediachase.Commerce.Catalog.CatalogContentType)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogBuilder.Create(System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.String)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension">
            <summary>
                Injects code specific to the catalog into the content type scanning mechanism.
                Responsible for handling synchronization between content types and the meta data plus layer.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.#ctor(EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver,EPiServer.Commerce.Catalog.Provider.Construction.MetaDataPropertyResolver,EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository,EPiServer.DataAbstraction.RuntimeModel.IContentTypeModelAssigner,EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler,EPiServer.Framework.Initialization.HostType)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension"/> class.
            </summary>
            <param name="metaDataTypeResolver">The meta data type resolver.</param>
            <param name="metaDataPropertyResolver">The meta data property resolver.</param>
            <param name="propertyDefinitionTypeRepository">The property definition type repository.</param>
            <param name="contentTypeModelAssigner">The content type model assigner.</param>
            <param name="metaDataChangeEventHandler">The metadata change event handler.</param>
            <param name="hostType">The host type.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension._metaDataChangeEventHandler_MetaDataChanged(System.Object,Mediachase.MetaDataPlus.MetaDataChangeEventArgs)">
            <summary>
            When meta data has been changed, let's synchronize model repository.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.AssignValuesToModel(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
            <summary>
            Syncs a content type to a meta class.
            </summary>
            <param name="typeModel">The type model.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.AssignValuesToProperties(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
            <summary>
            Syncs properties to meta fields of a conten type/meta class.
            </summary>
            <param name="contentTypeModel">The content type model.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.Validate(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel})">
            <summary>
            Validate content types so that properties with the same name don't have different attribute values.
            </summary>
            <param name="typeModels">The type models.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.ValidateNoCatalogContentExtensions(System.Collections.Generic.List{EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel})">
            <summary>
                Throws if any content type model extends CatalogContent and has the CatalogContentTypeAttribute.
            </summary>
            <param name="contentTypeModelList">A list of content type models to validate.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.ValidateDuplicatedModels``1(EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel,EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel,System.Func{``0,System.Object})">
            <summary>
            Throws exception if the attribute exist on one model, but not on the other.
            </summary>
            <typeparam name="T">The model attribute to validate against.</typeparam>
            <param name="model">The first property definition model.</param>
            <param name="compareWithModel">The second property definition model.</param>
            <param name="action">The action to get the attribute value.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.CreateMetaField(EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel,Mediachase.MetaDataPlus.Configurator.MetaDataType)">
            <summary>
            Creates <see cref="T:Mediachase.MetaDataPlus.Configurator.MetaField"/> from <paramref name="propertyDefinitionModel"/>.
            </summary>
            <param name="propertyDefinitionModel">The property definition to create the meta field from.</param>
            <param name="metaDataType">The type of property.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.UpdateMetaField(EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel,Mediachase.MetaDataPlus.Configurator.MetaField)">
            <summary>
                Updates the specifed <see cref="T:Mediachase.MetaDataPlus.Configurator.MetaField"/> from the specified <see cref="T:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel"/>.
            </summary>
            <param name="propertyDefinitionModel">The property definition to update the meta field from.</param>
            <param name="metaField">The meta field that will be updated</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.ThrowIfAnyModelAttributeIsUnsupported(Mediachase.MetaDataPlus.Configurator.MetaDataType,EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if any model attribute on <paramref name="propertyDefinitionModel"/> is not supported by the <paramref name="metaDataType"/>
            </summary>
            <param name="metaDataType">The meta data type to validate.</param>
            <param name="propertyDefinitionModel">The property definition model, which contains the model attribute to validate.</param>
            <exception cref="T:System.InvalidOperationException">Will be thrown if any attribute is unsupported.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.ThrowIfModelContainsAttribute(EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel,System.Type[])">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if any model attribute on <paramref name="propertyDefinitionModel"/> is not supported by the <paramref name="types"/>
            </summary>
            <param name="types">The model attributes to validate.</param>
            <param name="propertyDefinitionModel">The property definition model, which contains the model attribute to validate.</param>
            <exception cref="T:System.InvalidOperationException">Will be thrown if any attribute is unsupported.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.SetMetaFieldAttributes(Mediachase.MetaDataPlus.Configurator.MetaAttributeCollection,EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel)">
            <summary>
            Sets meta field attributes. Override this method to set attributes.
            </summary>
            <param name="metaFiledAttributes">The meta fild attributes that will be populated with data.</param>
            <param name="model">The property definition model, which will be used to set the value on the meta field attribute.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.SetMetaFieldAttribute``1(System.String,Mediachase.MetaDataPlus.Configurator.MetaAttributeCollection,EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel,System.Func{``0,System.Object})">
            <summary>
            Sets a meta field attribute to a value specified in <paramref name="action"/>.
            </summary>
            <typeparam name="TAttribute">The attribute type, used to set the meta field attribute.</typeparam>
            <param name="name">The name of the meta field attribute</param>
            <param name="metaFiledAttributes">The meta field attributes.</param>
            <param name="model">The property definition model.</param>
            <param name="action">The action used to get the value.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.AssignMetaClassPropertiesToModel(Mediachase.MetaDataPlus.Configurator.MetaClass,EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
            <summary>
            Populates the content type model with property definitions for meta fields that exist only in
            the ECF DB (i.e. are not created from the strongly typed class). This enables the
            metadata store to pick up required fields etc.
            </summary>
            <param name="metaClass"></param>
            <param name="contentTypeModel"></param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.IsValid(Mediachase.MetaDataPlus.Configurator.MetaDataType,Mediachase.MetaDataPlus.Configurator.MetaDataType)">
            <summary>
            Validates if the two types are compatible.
            </summary>
            <param name="typeFromCode">The property type created from content data model.</param>
            <param name="typeFromMetaData">The property type in Meta data plus.</param>
            <returns><c>True</c> if the types are compatible, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.ContentTypeModelScanners">
            <summary>
            The registred content type model scanners
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.CatalogContentScannerExtension.MetaDataContext">
            <summary>
            Context used when loading and creating <see cref="T:Mediachase.MetaDataPlus.Configurator.MetaClass"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader">
            <summary>
            Handles converting Commerce catalog data to properties
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader.LoadProperties(Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.CatalogEntryRow,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.CatalogItemSeoRow,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.VariationRow,EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Creates properties in the <paramref name="content"/> instance corresponding to the static and metadata
            attributes of the provided data rows and sets the property values.
            </summary>
            <param name="entryRow">The entry row to read attributes from.</param>
            <param name="seoRow">The seo row to read attributes from.</param>
            <param name="variationRow">The variation row to read attributes from, if applicable (otherwise null).</param>
            <param name="content">The content to populate with properties.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader.LoadProperties(Mediachase.Commerce.Catalog.Dto.CatalogDto.CatalogRow,Mediachase.Commerce.Catalog.Dto.CatalogDto.CatalogLanguageRow,EPiServer.Commerce.Catalog.ContentTypes.CatalogContent)">
            <summary>
            Creates properties in the specified <paramref name="content"/> instance corresponding to the static
            properties on the provided data row.
            </summary>
            <param name="catalogRow">The catalog row to read attributes from.</param>
            <param name="languageRow">The catalog language row to read attributes from, if available (otherwise null).</param>
            <param name="content">The content to populate with properties.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader.LoadProperties(Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogNodeRow,Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogItemSeoRow,EPiServer.Commerce.Catalog.ContentTypes.NodeContent)">
            <summary>
             Creates properties in the specified <paramref name="content"/> instance corresponding to the static and metadata
             attributes of the provided data rows and sets the property values.
             </summary>
             <param name="nodeRow">The node to read attributes from.</param>
             <param name="seoRow">The seo row to read attributes from.</param>
             <param name="content">The content to populate with properties.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader"/> class.
            </summary>
            <param name="catalogContext">The catalog context used to get catalog data.</param>
            <param name="referenceConverter">The service used to convert reference.</param>
            <param name="metaDataPropertyMapper">The meta data property mapper.</param>
            <param name="localizationService">The service used to get localized string resources.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.#ctor(EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper,EPiServer.Framework.Localization.LocalizationService,EPiServer.Commerce.Catalog.Provider.MetaDataPropertyConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader"/> class.
            </summary>
            <param name="metaDataPropertyMapper">The meta data property mapper.</param>
            <param name="localizationService">The service used to get localized string resources.</param>
            <param name="metaDataPropertyConfiguration">The catalog meta data property configuration.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.#ctor(EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper,EPiServer.Framework.Localization.LocalizationService,EPiServer.Commerce.Catalog.Provider.MetaDataPropertyConfiguration,EPiServer.Web.IPermanentLinkMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader"/> class.
            </summary>
            <param name="metaDataPropertyMapper">The meta data property mapper.</param>
            <param name="localizationService">The service used to get localized string resources.</param>
            <param name="metaDataPropertyConfiguration">The catalog meta data property configuration.</param>
            <param name="permanentLinkMapper">The permanent link mapper.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadProperties(Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.CatalogEntryRow,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.CatalogItemSeoRow,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.VariationRow,EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadProperties(Mediachase.Commerce.Catalog.Dto.CatalogDto.CatalogRow,Mediachase.Commerce.Catalog.Dto.CatalogDto.CatalogLanguageRow,EPiServer.Commerce.Catalog.ContentTypes.CatalogContent)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadProperties(Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogNodeRow,Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogItemSeoRow,EPiServer.Commerce.Catalog.ContentTypes.NodeContent)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadProperties(Mediachase.Commerce.Catalog.Dto.CatalogDto.CatalogLanguageDataTable,EPiServer.Commerce.Catalog.ContentTypes.CatalogContent)">
            <summary>
                Creates language properties in the specified <paramref name="content"/> instance 
                corresponding to the languages on the <paramref name="catalogLanguage"/> parameter.
            </summary>
            <param name="catalogLanguage"></param>
            <param name="content"></param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadStaticContentProperties(Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.CatalogEntryRow,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.CatalogItemSeoRow,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.VariationRow,EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Creates properties in the <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase"/> instance corresponding to the static
            attributes of the <see cref="T:Mediachase.Commerce.Catalog.Dto.CatalogEntryDto"/> and sets the property values. Uses the language
            of the content instance to populate properties corresponding to multi language attributes.
            </summary>
            <param name="entryRow">The entry row to read attributes from.</param>
            <param name="seoRow">The seo row to read attributes from.</param>
            <param name="variationRow">The variation row to read attributes from, if applicable (otherwise null).</param>
            <param name="content">The content to populate with properties.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadStaticContentProperties(Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogNodeRow,Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogItemSeoRow,EPiServer.Commerce.Catalog.ContentTypes.NodeContent)">
            <summary>
             Creates properties in the specified <paramref name="content"/> according to the static properties on <paramref name="nodeRow"/>.
             </summary>
             <param name="nodeRow">The node to read attributes from.</param>
             <param name="seoRow">The seo row to read attributes from.</param>
             <param name="content">The content to populate with properties.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadStaticContentProperties(Mediachase.Commerce.Catalog.Dto.CatalogDto.CatalogRow,Mediachase.Commerce.Catalog.Dto.CatalogDto.CatalogLanguageRow,EPiServer.Commerce.Catalog.ContentTypes.CatalogContent)">
            <summary>
            Creates properties in the specified <paramref name="content"/> according to the static properties on <paramref name="catalogRow"/>.
            </summary>
            <param name="catalogRow">The catalog row to read attributes from.</param>
            <param name="languageRow">The catalog language row to read attributes from, if available (otherwise null).</param>
            <param name="content">The content to populate with properties.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadMarkets(Mediachase.Commerce.Storage.MetaObjectAccessor,EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Loads the available markets in the entry.
            </summary>
            <param name="accessor">The meta object accessor.</param>
            <param name="content">The content to pouplate with markets.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadMetaDataContentProperties(Mediachase.Commerce.Storage.MetaObjectAccessor,EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Populates the  <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase"/> instance with values from the
            <see cref="T:Mediachase.Commerce.Storage.MetaObjectAccessor"/>. Uses the language of the content instance to populate properties
            corresponding to multi language attributes.
            </summary>
            <param name="accessor">The meta object accessor.</param>
            <param name="content">The content to populate with properties.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadAssets(Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.CatalogEntryRow,EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Create AssetLinkCollection property from CatalogItemAsset table
            </summary>
            <param name="entryRow">The entry row to read attributes from.</param>
            <param name="content">The content to populate with properties.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadAssets(Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogNodeRow,EPiServer.Commerce.Catalog.ContentTypes.NodeContent)">
            <summary>
            Create AssetLinkCollection property from CatalogItemAsset table
            </summary>
            <param name="nodeRow">The node row to read attributes from.</param>
            <param name="content">The content to populate with properties.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.CatalogPropertyLoader.LoadMetaDataContentProperties(Mediachase.Commerce.Storage.MetaObjectAccessor,EPiServer.Commerce.Catalog.ContentTypes.NodeContent)">
            <summary>
            Populates the  <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContent"/> instance with values from the
            <see cref="T:Mediachase.Commerce.Storage.MetaObjectAccessor"/>. Uses the language of the content instance to populate properties
            corresponding to multi language attributes.
            </summary>
            <param name="accessor">The meta object accessor.</param>
            <param name="content">The content to populate with properties.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.EntryBuilder">
            <summary>
            Handles creation of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> that is a <see cref="F:Mediachase.Commerce.Catalog.CatalogContentType.CatalogEntry"/>.
            NOTE: All operations is in ths class are uncached!
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.EntryBuilder.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,Mediachase.Commerce.Pricing.IPriceService,Mediachase.Commerce.Inventory.IWarehouseInventoryService,EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory,EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.CatalogContentGuidProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.EntryBuilder"/> class.
            </summary>
            <param name="catalogContext">The catalog context.</param>
            <param name="priceService">The price service.</param>
            <param name="inventoryService">The inventory service</param>
            <param name="metaClassContentFactory">The meta class content factory.</param>
            <param name="catalogPropertyLoader">The catalog property loader.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="guidProvider">The guid provider.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.EntryBuilder.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,Mediachase.Commerce.Pricing.IPriceService,Mediachase.Commerce.Inventory.IWarehouseInventoryService,EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory,EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader,Mediachase.Commerce.Catalog.ReferenceConverter,Mediachase.Commerce.Catalog.Data.CatalogGuidMapping)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.EntryBuilder"/> class.
            </summary>
            <param name="catalogContext">The catalog context.</param>
            <param name="priceService">The price service.</param>
            <param name="inventoryService">The inventory service.</param>
            <param name="metaClassContentFactory">The meta class content factory.</param>
            <param name="catalogPropertyLoader">The catalog property loader.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogGuidMapping">The permanent link mapper.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.EntryBuilder.HandleType(Mediachase.Commerce.Catalog.CatalogContentType)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.EntryBuilder.Create(System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.String)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.EntryBuilder.SetChangeTrackingProperties(Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.CatalogEntryRow,EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Sets the change tracking properties.
            </summary>
            <param name="entryRow">The entry row.</param>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.EntryBuilder.GetEntryNodeRelations(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the entry node relations.
            </summary>
            <param name="entryIds">The entry ids.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory">
            <summary>
            Creates <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> instances based on a <see cref="T:Mediachase.MetaDataPlus.Configurator.MetaClass"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory.#ctor(EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap,EPiServer.Commerce.Catalog.Provider.Construction.MetaDataPropertyResolver,EPiServer.Construction.ContentFactory,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.Commerce.Catalog.Provider.Construction.CatalogLanguageLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory"/> class.
            </summary>
            <param name="metaClassMap">The meta class map.</param>
            <param name="metaDataPropertyResolver">The meta data property resolver.</param>
            <param name="contentFactory">The content factory.</param>
            <param name="contentTypeRepository">The content type repository.</param>
            <param name="languageLoader">The language loader.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory.Create``1(System.String,System.Nullable{System.Int32})">
            <summary>
            Creates an instance of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to create</typeparam>
            <param name="language">The requested language, or null for master language.</param>
            <param name="catalogId">The catalog id.</param>
            <returns>A <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory.Create``1(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates an instance of type <typeparamref name="T"/> and with properties from metafields.
            </summary>
            <typeparam name="T">The type to create</typeparam>
            <param name="language">The requested language, or null for master language.</param>
            <param name="metaClassId">The meta class id.</param>
            <param name="catalogId">The catalog id.</param>
            <returns>
            A <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> of type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory.Create(System.String,System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> based on the specified <paramref name="metaClassId"/>.
            </summary>
            <param name="baseEntryType">The base entry type, if any, used as fallback if no meta class matches.</param>
            <param name="metaClassId">The meta class id.</param>
            <param name="language">The requested language, or null for master language.</param>
            <param name="catalogId">The catalog id.</param>
            <returns>A <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> if any match is found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory.Create(System.Type,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> based on the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type.</param>
            <param name="language">The language.</param>
            <param name="catalogId">The catalog id.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory.AddMetaClassPropertiesForWeaklyTypedMetaClass(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.Int32)">
            <summary>
            Adds properties corresponding to meta field on a catalog entry/node which does not have a
            corresponding strongly typed model (and hence isn't included in the scanning).
            </summary>
            <param name="content">The content.</param>
            <param name="metaClassId">The meta class id.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver">
            <summary>
            Mappes a <see cref="T:System.Type"/> to a <see cref="T:Mediachase.MetaDataPlus.Configurator.MetaDataType"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.GetMetaDataType(EPiServer.Core.PropertyDataType)">
            <summary>
            Gets the mapped <see cref="T:Mediachase.MetaDataPlus.Configurator.MetaDataType"/> from a <see cref="T:EPiServer.Core.PropertyDataType"/>
            </summary>
            <param name="propertyDataType">The property data type.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.GetMetaDataType(System.Type)">
            <summary>
            Gets the mapped <see cref="T:Mediachase.MetaDataPlus.Configurator.MetaDataType"/> from a <see cref="T:System.Type"/>
            </summary>
            <param name="type">The type.</param>
            <returns>The <see cref="T:Mediachase.MetaDataPlus.Configurator.MetaDataType"/> representing the <paramref name="type"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.GetMetaDataTypeFromBackingType(System.Type)">
            <summary>
            Gets the mapped <see cref="T:Mediachase.MetaDataPlus.Configurator.MetaDataType"/> from a <see cref="T:System.Type"/> representing the backing type of a property
            </summary>
            <param name="backingType">The backing type</param>
            <returns>The <see cref="T:Mediachase.MetaDataPlus.Configurator.MetaDataType"/> representing the backing type</returns>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.Byte">
            <summary>
            PropertyData type for a byte
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.Int16">
            <summary>
            PropertyData type for an int16.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.Int32">
            <summary>
            PropertyData type for an int32.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.Int64">
            <summary>
            PropertyData type for an int64.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.Double">
            <summary>
            PropertyData type for a double.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.Single">
            <summary>
            PropertyData type for a single.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.Float">
            <summary>
            PropertyData type for a float.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.Decimal">
            <summary>
            PropertyData type for a decimal.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.String">
            <summary>
            PropertyData type for a string
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.Boolean">
            <summary>
            PropertyData type for a boolean.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.DateTime">
            <summary>
            PropertyData type for a date time.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.Url">
            <summary>
            PropertyData type for an URL.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.XhtmlString">
            <summary>
            PropertyData type for an XhtmlString.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.ContentArea">
            <summary>
            PropertyData type for an ContentArea.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.LinkItemCollection">
            <summary>
            PropertyData type for an LinkItemCollection.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.PageReference">
            <summary>
            PropertyData type for an PageReference.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Construction.MetaDataTypeResolver.ContentReference">
            <summary>
            PropertyData type for an ContentReference.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.NodeBuilder">
            <summary>
            Handles creation of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> that is a <see cref="F:Mediachase.Commerce.Catalog.CatalogContentType.CatalogNode"/>.
            NOTE: All operations is in ths class are uncached!
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.Construction.NodeBuilder.NodeResponseGroup">
            <summary>
            The default node response group
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.NodeBuilder.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory,EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.CatalogContentGuidProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.NodeBuilder"/> class.
            </summary>
            <param name="catalogContext">The catalog context.</param>
            <param name="metaClassContentFactory">The meta class content factory.</param>
            <param name="catalogPropertyLoader">The catalog property loader.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="guidProvider">The guid provider.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.NodeBuilder.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory,EPiServer.Commerce.Catalog.Provider.Construction.ICatalogPropertyLoader,Mediachase.Commerce.Catalog.ReferenceConverter,Mediachase.Commerce.Catalog.Data.CatalogGuidMapping)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.NodeBuilder"/> class.
            </summary>
            <param name="catalogContext">The catalog context.</param>
            <param name="metaClassContentFactory">The meta class content factory.</param>
            <param name="catalogPropertyLoader">The catalog property loader.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogGuidMapping">The catalog Guid mapping.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.NodeBuilder.HandleType(Mediachase.Commerce.Catalog.CatalogContentType)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.NodeBuilder.Create(System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.String)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.NodeBuilder.SetChangeTrackingProperties(Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogNodeRow,EPiServer.Commerce.Catalog.ContentTypes.NodeContent)">
            <summary>
            Sets the change tracking properties.
            </summary>
            <param name="nodeRow">The node row.</param>
            <param name="node">The node.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Construction.RootBuilder">
            <summary>
            Handles creation of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> that is a <see cref="F:Mediachase.Commerce.Catalog.CatalogContentType.Root"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.RootBuilder.#ctor(EPiServer.Framework.Localization.LocalizationService,EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory,EPiServer.Commerce.Catalog.Provider.CatalogContentGuidProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.RootBuilder"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
            <param name="metaClassContentFactory">The meta class content factory.</param>
            <param name="guidProvider">The guid provider.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.RootBuilder.#ctor(EPiServer.Framework.Localization.LocalizationService,EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Construction.RootBuilder"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
            <param name="metaClassContentFactory">The meta class content factory.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.RootBuilder.HandleType(Mediachase.Commerce.Catalog.CatalogContentType)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Construction.RootBuilder.Create(System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.String)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Contains mappings between content type models and meta classes.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap.#ctor(EPiServer.DataAbstraction.ContentTypeModelRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap"/> class.
            </summary>
            <param name="contentTypeModelRepository">Service to work with content type models.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap.GetContentTypeModel(System.Int32)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Gets the content type model.
            </summary>
            <param name="metaClassId">The meta class id.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap.GetContentTypeModel(System.String)">
            <summary>
            Gets the content type model from the name (according to <see cref="T:Mediachase.Commerce.Catalog.Objects.EntryType"/>).
            </summary>
            <param name="baseEntryType">Type of the base entry.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap.GetMetaClassName(System.Type)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            Gets the name of the meta class from the a registered model type.
            </summary>
            <param name="modelType">Type of the model.</param>
            <returns>The meta class name from the <see cref="T:EPiServer.Commerce.Catalog.DataAnnotations.CatalogContentTypeAttribute"/> of the type registered
            in the <see cref="T:EPiServer.DataAbstraction.ContentTypeRepository"/>, or null if it is not registered or lacks the attribute.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap.GetMetaClassId(System.Type)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            Gets the meta class id.
            </summary>
            <param name="modelType">Type of the model.</param>
            <returns>The id of the meta class if found, otherwise 0.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap.ThrowIfNotUnique(System.Collections.Generic.Dictionary{System.Type,System.String},System.String)">
            <summary>
            Throws an exception if the same meta class name is used on several content types.
            </summary>
            <param name="mappings">The existing mappings.</param>
            <param name="metaClassName">The name to check.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.DataAnnotations.TabNames">
            <summary>
                This class contains constants with the names of the built in tabs used in the catalog editing view.
                They can be used when setting a group name on a property, to control what tab it should added to.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.Pricing">
            <summary>
                The pricing tab.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.Media">
            <summary>
                The media tab.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.Inventory">
            <summary>
                The inventory tab.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.Content">
            <summary>
                The content tab.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.Assets">
            <summary>
                The assets tab.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.BundleEntries">
            <summary>
                The Bundle Entries tab.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.PackageEntries">
            <summary>
                The Package Entries tab.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.SettingsHeader">
            <summary>
                The settings header/panel.
            </summary>
            <remarks>
                Whlie the settings header behaves/looks like a panel, it is technically a tab, and can be used as such when defining properties.
            </remarks>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.Links">
            <summary>
                The links tab.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.Variants">
            <summary>
            The variances tab.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.DataAnnotations.TabNames.RelatedEntries">
            <summary>
            The related entries tab
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler.#ctor(EPiServer.Commerce.Catalog.Provider.Construction.MetaDataPropertyResolver,EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionSynchronizer,EPiServer.DataAbstraction.ContentTypeModelRepository,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.DataAbstraction.IPropertyDefinitionRepository)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler"/> class.
            </summary>
            <param name="metaDataPropertyResolver">The meta data property mapper.</param>
            <param name="propertyDefinitionSynchronizer">The property definition synchronizer.</param>
            <param name="contentTypeModelRepository">The content type model repository.</param>
            <param name="contentTypeRepository">The content type repository.</param>
            <param name="propertyDefinitionRepository">The property definition repository.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler.#ctor(EPiServer.Commerce.Catalog.Provider.Construction.MetaDataPropertyResolver,EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionSynchronizer,EPiServer.DataAbstraction.ContentTypeModelRepository,EPiServer.DataAbstraction.IContentTypeRepository)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler"/> class.
            </summary>
            <param name="metaDataPropertyResolver">The meta data property mapper.</param>
            <param name="propertyDefinitionSynchronizer">The property definition synchronizer.</param>
            <param name="contentTypeModelRepository">The content type model repository.</param>
            <param name="contentTypeRepository">The content type repository.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler.#ctor(EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper,EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionSynchronizer,EPiServer.DataAbstraction.ContentTypeModelRepository,EPiServer.DataAbstraction.IContentTypeRepository)">
            <summary>
            Obsolete constructor kept to be binary compatible. This class should not be
            instantiated by 3rd party code anyway.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler.InitializeEvents">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Initializes event handlers for the events in <see cref="T:EPiServer.Commerce.MetaDataEventManager"/> and
            <see cref="T:Mediachase.Commerce.Catalog.EventContext"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler.RemoteMetaFieldUpdated(System.Object,Mediachase.MetaDataPlus.MetaDataChangeEventArgs)">
            <summary>
            When a meta field was updated, let's sync the model properties.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The meta data update event arguments, which contains information regarding updated meta field.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler.RemoteMetaFieldLink(System.Object,Mediachase.MetaDataPlus.MetaDataChangeEventArgs)">
            <summary>
            Add the property definition model following the metaclass and metafield updated
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler.RemoteMetaFieldUnlink(System.Object,Mediachase.MetaDataPlus.MetaDataChangeEventArgs)">
            <summary>
            Remove the property definition model following the metaclass and metafield updated
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler.IsIncludedInPropertyDefinitionModels(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel,System.String)">
            <summary>
            Determines whether a PropertyDefinitionModel with specific name is included in a ContentTypeModel.
            </summary>
            <param name="contentTypeModel">The content type model.</param>
            <param name="modelName">Name of the PropertyDefinitionModel.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler.ClearCache">
            <summary>
            Clears content type and property definition caches.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler.GetMetaClassName(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
            <summary>
            Get metaclass name from contentTypeModel
            </summary>
            <param name="contentTypeModel">The contentType model</param>
            <returns></returns>
        </member>
        <member name="E:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler.MetaDataChanged">
            <summary>
            Meta data changed event.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.MetaDataChangeEventHandler.AlreadyInitialized">
            <summary>
            Gets flag to indicate whether this handler was initialized or not.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Maps between meta data types and property data types.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper.#ctor(EPiServer.Framework.Serialization.IObjectSerializerFactory,EPiServer.Web.IPermanentLinkMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper"/> class.
            </summary>
            <param name="objectSerializerFactory">The object serializer factory.</param>
            <param name="linkMapper">The link mapper.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper.GetPropertyDataType(Mediachase.MetaDataPlus.Configurator.MetaDataType)">
            <summary>
            Gets the property data type corresponding to a meta data type.
            </summary>
            <param name="metaDataType">The meta data type.</param>
            <returns>The corresponding property data type, or null if none can be found.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper.AssignMetaFieldValueToProperty(EPiServer.Core.PropertyData,System.Object,Mediachase.MetaDataPlus.Configurator.MetaDataType,System.String)">
            <summary>
            Assigns the meta field value to the property.
            </summary>
            <param name="property">The property.</param>
            <param name="metaFieldValue">The meta field value.</param>
            <param name="metaDataType">The type of the meta field.</param>
            <param name="blockPropertyMetaFieldName">The name of the meta field, only needed when working with block properties.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper.SetMetaObjectValueFromProperty(EPiServer.Core.PropertyData,Mediachase.MetaDataPlus.Configurator.MetaField,Mediachase.MetaDataPlus.MetaObject)">
            <summary>
            Sets a property value to a meta field.
            </summary>
            <param name="property">The property to get the value from.</param>
            <param name="metaField">The meta field corresponding to the property.</param>
            <param name="metaObj">The meta object.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper.ShouldBeStoredAsString(EPiServer.Core.PropertyData,System.Object)">
            <summary>
            Returns true only if the <paramref name="property"/> has a <see cref="T:EPiServer.Core.PropertyDataType"/>
            which should be stored as string and the <paramref name="propertyValueForStoring"/> is not
            of a primitive type or a nullable primitive type.
            </summary>
            <param name="property">The property.</param>
            <param name="propertyValueForStoring">The property value in the storage (database) format
            as returned by PropertyData.SaveData.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper.SetDefaultValue(Mediachase.MetaDataPlus.Configurator.MetaField,Mediachase.MetaDataPlus.MetaObject)">
            <summary>
            Sets a valid default value for a required meta field that is not set.
            </summary>
            <param name="metaField">The meta field.</param>
            <param name="metaObj">The meta object to set the value in.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.ParentsInfo">
            <summary>
            Holds information about a parent of a catalog content instance.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.ParentsInfo.ApplicationId">
            <summary>
            Gets or sets the application id.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.ParentsInfo.CatalogId">
            <summary>
            Gets or sets the catalog id.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.ParentsInfo.NodeId">
            <summary>
            Gets or sets the node id.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.ParentsInfo.EntryId">
            <summary>
            Gets or sets the entry id.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter">
            <summary>
            Commits instances of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent"/> to the ECF database.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Persistence.ICatalogContentCommitter">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Describes a class which can save <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> instances to their
            corresponding database format. Specifies what subtype it handles, so the best match
            can be used.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.ICatalogContentCommitter.Save(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Saves the specified content, new or updated.
            </summary>
            <param name="content">The content.</param>
            <returns>The content reference, newly generated if the content was new.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.ICatalogContentCommitter.Delete(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Deletes the specified content
            </summary>
            <param name="content">The content to delete</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Persistence.ICatalogContentCommitter.ForType">
            <summary>
            Gets the type the committer can commit.
            </summary>
            <value>
            For type.
            </value>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.#ctor(Mediachase.Commerce.Catalog.ReferenceConverter,Mediachase.Commerce.Catalog.ICatalogSystem)">
            <summary>
            Initializes a new instance of a catalog content committer.
            </summary>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogContext">The catalog context used when committing.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.Save(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Saves the specified <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent"/> to the ECF database.
            </summary>
            <param name="content">The content to save.</param>
            <returns>The content reference of the saved content.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.CreateNew(EPiServer.Commerce.Catalog.ContentTypes.CatalogContent)">
            <summary>
            Creates a new catalog corresponding to the content.
            </summary>
            <param name="content">The content.</param>
            <returns>The ID of the new catalog.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.CreateCatalogRow(EPiServer.Commerce.Catalog.ContentTypes.CatalogContent)">
            <summary>
            Creates a new catalog row using <paramref name="content"/>.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.GetApplicationId">
            <summary>
            The application id from the current AppContext
            </summary>
            <returns>The current application id.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.ValidateCreateCatalog(EPiServer.Commerce.Catalog.ContentTypes.CatalogContent)">
            <summary>
            Validates if it's possible to create a catalog.
            </summary>
            <param name="content">The content.</param>
            <exception cref="T:EPiServer.Core.EPiServerException">If the parent isn't the root catalog.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.UpdateExisting(EPiServer.Commerce.Catalog.ContentTypes.CatalogContent,System.Int32)">
            <summary>
            Updates an existing catalog.
            </summary>
            <param name="content">The catalog to update.</param>
            <param name="catalogId">The catalog id of the content that is being updated.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.UpdateStaticAttributes(EPiServer.Commerce.Catalog.ContentTypes.CatalogContent,Mediachase.Commerce.Catalog.Dto.CatalogDto)">
            <summary>
            Updates the static attributes on the specified catalog.
            </summary>
            <param name="content">The catalog content containing the values that should be used to update the catalog.</param>
            <param name="catalogDto">The catalog dto that should be updated.</param>
            <returns>The updated catalog dto.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.ValidateName(EPiServer.Commerce.Catalog.ContentTypes.CatalogContent,System.Int32)">
            <summary>
            Validates that the name of the catalog is unique.
            </summary>
            <param name="content">The catalog to validate.</param>
            <param name="catalogId">The id of the catalog.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.Delete(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Deletes a catalog and everything it contains, except for things that are also associated
            with another catalog.
            </summary>
            <param name="content">The catalog to delete</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Persistence.CatalogContentCommitter.ForType">
            <summary>
            Returns the supported type: <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent"/>
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Commits changes for <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase"/> instances to the ECF database.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.Persistence.ParentEvaluator,Mediachase.Commerce.Catalog.Data.UniqueValueGenerator,EPiServer.Commerce.Catalog.Provider.Persistence.MetaDataCommitter,Mediachase.Commerce.Assets.IAssetService,EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter"/> class.
            </summary>
            <param name="catalogContext">The catalog context.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="parentEvaluator">The parent evaluator.</param>
            <param name="uniqueValueGenerator">The unique value generator.</param>
            <param name="metaDataCommitter">The meta data committer.</param>
            <param name="assetService">The asset service.</param>
            <param name="metaClassToContentTypeMap">The meta class to content type map.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.Save(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Saves the specified content, new or updated.
            </summary>
            <param name="content">The content.</param>
            <returns>
            The content reference, newly generated if the content was new.
            </returns>
            <exception cref="T:EPiServer.BaseLibrary.ArgumentException">This class only supports content of the type specified by ForType.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.Delete(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.UpdateExisting(EPiServer.Commerce.Catalog.ContentTypes.NodeContent,System.Int32)">
            <summary>
            Updates an existing node.
            </summary>
            <param name="content">The node.</param>
            <param name="nodeId">The node id.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.CreateNew(EPiServer.Commerce.Catalog.ContentTypes.NodeContent)">
            <summary>
            Creates a new node corresponding to the content.
            </summary>
            <param name="content">The content.</param>
            <returns>The ID of the new node.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.ValidateCode(System.String,System.Int32)">
            <summary>
            Validates the code.
            </summary>
            <param name="code">The code.</param>
            <param name="nodeId">The node Id.</param>
            <exception cref="T:System.ArgumentException">Thrown if the code is not unique.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.CreateNodeRow(EPiServer.Commerce.Catalog.ContentTypes.NodeContent,EPiServer.Commerce.Catalog.Provider.ParentsInfo)">
            <summary>
            Creates a new node row with values from the content and some required defaults.
            </summary>
            <param name="content">The content.</param>
            <param name="parentInfo">The parent info.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.UpdateStaticAttributes(EPiServer.Commerce.Catalog.ContentTypes.NodeContent,Mediachase.Commerce.Catalog.Dto.CatalogNodeDto)">
            <summary>
            Updates the static attributes.
            </summary>
            <param name="content">The content.</param>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.SetSeoData(EPiServer.Commerce.Catalog.ContentTypes.NodeContent,Mediachase.Commerce.Catalog.Dto.CatalogNodeDto)">
            <summary>
            Sets the seo data.
            </summary>
            <param name="content">The content.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.CommitAssets(EPiServer.Commerce.Catalog.ContentTypes.NodeContent,Mediachase.Commerce.Catalog.Dto.CatalogNodeDto)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Commits the assets.
            </summary>
            <param name="content">The content.</param>
            <param name="node">The entry.</param>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Persistence.NodeContentCommitter.ForType">
            <summary>
            Returns the supported type: <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContent"/>
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Persistence.MetaDataCommitter">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Commits content property values to the corresponding meta data plus storage format.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.MetaDataCommitter.#ctor(EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper,Mediachase.Commerce.Markets.IMarketService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Persistence.MetaDataCommitter"/> class.
            </summary>
            <param name="metaDataPropertyMapper">The meta data property mapper.</param>
            <param name="marketService">The market service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.MetaDataCommitter.#ctor(EPiServer.Commerce.Catalog.Provider.MetaDataPropertyMapper,Mediachase.Commerce.Markets.IMarketService,EPiServer.Commerce.Catalog.Provider.MetaDataPropertyConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Persistence.MetaDataCommitter"/> class.
            </summary>
            <param name="metaDataPropertyMapper">The meta data property mapper.</param>
            <param name="marketService">The market service.</param>
            <param name="metaDataPropertyConfiguration">The catalog meta data property configuration.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.MetaDataCommitter.CommitMetaAttributes``1(``0,System.Int32)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            Commits the meta attributes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content">The content.</param>
            <param name="objectId">The object ID.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.MetaDataCommitter.UpdateSerializedMetaData``1(``0,System.Int32,System.Byte[])">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Updates the serialized meta data.
            </summary>
            <param name="content">The content.</param>
            <param name="objectId">The id of the catalog entry.</param>
            <param name="serializedData">The serialized data.</param>
            <returns>Updated serialized data.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.MetaDataCommitter.GetSerializedMetaData``1(``0,System.Int32)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Get the serialized meta data.
            </summary>
            <param name="content">The content.</param>
            <param name="objectId">The id of the catalog entry.</param>
            <returns>Serialized data.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Persistence.ParentEvaluator">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Finds information about the parent (catalog, node...) from the content link.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.ParentEvaluator.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.CatalogContentLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Persistence.ParentEvaluator"/> class.
            </summary>
            <param name="catalogContext">The catalog context.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogContentLoader">The catalog content loader.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.ParentEvaluator.GetParentInfo(EPiServer.Core.ContentReference)">
            <summary>
            gets the parents info node or catalog parent and entry(in the case is based on a product) 
            </summary>
            <param name="parentLink"></param>
            <returns>The parents info</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.ParentEvaluator.GetParentContent(EPiServer.Core.ContentReference,System.String)">
            <summary>
            Gets the contents from the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader"/>
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="language">The content language.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.ParentEvaluator.GetContentsFromLoader(System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.String)">
            <summary>
            Gets the content from the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader"/>
            </summary>
            <param name="contentLinks">The content links.</param>
            <param name="language">The content language.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyConfiguration">
            <summary>
            Keeps information related to properties corresponding to meta fields for catalog content
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.MetaDataPropertyConfiguration.GetReservedNames(System.Type)">
            <summary>
            Gets names of properties for that are treated separately from model
            specific meta data, e.g. "Code" which isn't a meta field but such a
            meta field name would conflict with the Code property.
            </summary>
            <param name="catalogContentModelType">Type of the content model.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.ProviderUtility">
            <summary>
                Utility methods used by the provider classes.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.ProviderUtility.GetBlockName(System.String)">
            <summary>
                Gets the (top)block property name from a meta field name.
                Ex: "EPiBlock_MyBlock_MySubBlock_MyProperty" would return "MyBlock".
            </summary>
            <param name="metaFieldName">The name of the meta field.</param>
            <returns>The block name.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.SaveActionExtensions">
            <summary>
            Extension methods to work with <see cref="T:EPiServer.DataAccess.SaveAction"/> together with <see cref="T:EPiServer.Commerce.Catalog.Provider.ExtendedSaveAction"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.SaveActionExtensions.SetExtendedActionFlag(EPiServer.DataAccess.SaveAction,EPiServer.Commerce.Catalog.Provider.ExtendedSaveAction)">
            <summary>
            Sets the extended action bits on the action.
            </summary>
            <param name="baseAction">The base action.</param>
            <param name="extendedAction">The extended action.</param>
            <returns><see cref="T:EPiServer.DataAccess.SaveAction"/> with the bits from both <paramref name="baseAction"/>
            and <paramref name="extendedAction"/> set.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.SaveActionExtensions.HasExtendedActionFlag(EPiServer.DataAccess.SaveAction,EPiServer.Commerce.Catalog.Provider.ExtendedSaveAction)">
            <summary>
            Determines whether the action has the extended action bit(s) set.
            </summary>
            <param name="action">The action to query.</param>
            <param name="extendedAction">The extended action to query for.</param>
            <returns></returns>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader._mapUserKey">
            <summary>
            Gets or sets the map user key.
            </summary>
            <value>
            The map user key.
            </value>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader.#ctor(EPiServer.IContentLoader,Mediachase.Commerce.Pricing.IPriceService,Mediachase.Commerce.Catalog.ReferenceConverter,Mediachase.Commerce.Catalog.ICatalogSystem)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader"/>.
            </summary>
            <param name="contentLoader">The content loader to fetch proces from.</param>
            <param name="priceService">The price service.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogSystem">The catalog system.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader.#ctor(EPiServer.IContentLoader,Mediachase.Commerce.Pricing.IPriceService,Mediachase.Commerce.Catalog.ReferenceConverter,Mediachase.Commerce.Catalog.ICatalogSystem,Mediachase.Commerce.ICurrentMarket,Mediachase.Commerce.Security.SecurityContext,Mediachase.Commerce.Customers.CustomerContext,Mediachase.Commerce.FrameworkContext)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader"/>.
            </summary>
            <param name="contentLoader">The content loader to fetch proces from.</param>
            <param name="priceService">The price service.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="catalogSystem">The catalog system.</param>
            <param name="currentMarketService">The current market service.</param>
            <param name="securityContext">The security context.</param>
            <param name="customerContext">The customer context.</param>
            <param name="frameworkContext">The framework context.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader.GetDefaultPrice(EPiServer.Core.ContentReference)">
            <summary>
            Gets the default price from the price service.
            </summary>
            <param name="contentLink">The content link for a catalog entry.</param>
            <returns>Price definition for the catalog entry</returns>
            <remarks>This method will get the currency for the current user on current market.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader.GetDefaultPrice(EPiServer.Core.ContentReference,Mediachase.Commerce.Currency)">
            <summary>
            Gets the default price from the price service.
            </summary>
            <param name="contentLink">The content link for a catalog entry.</param>
            <param name="currency">The currency to use when receiving the price.</param>
            <returns>Price definition for the catalog entry</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader.GetCustomerPrices(EPiServer.Core.ContentReference)">
            <summary>
            Gets the prices for the current user.
            </summary>
            <param name="contentLink">The content link for a catalog entry.</param>
            <returns>Price definition for the catalog entry</returns>
            <remarks>This method will get the currency for the current user on current market.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader.GetCustomerPrices(EPiServer.Core.ContentReference,Mediachase.Commerce.Currency,System.Nullable{System.Decimal},System.Nullable{System.Boolean})">
            <summary>
            Gets the prices for the current user.
            </summary>
            <param name="contentLink">The content link for a catalog entry.</param>
            <param name="currency">The currency to use when receiving the price. Use null or Currency.Empty to get the current currency for the user.</param>
            <param name="quantity">The quantity to filter on. If null, prices for all quantities will be returned.</param>
            <param name="returnCustomerPricing"><c>True</c> if customer pricing should be returned. If null, the parameter will be true if user has logged in to the site.</param>
            <returns>Price definition for the catalog entry</returns>
            <remarks>This method will use the current market when receiving the prices.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader.GetPrices(EPiServer.Core.ContentReference,Mediachase.Commerce.MarketId,Mediachase.Commerce.Pricing.CustomerPricing)">
            <summary>
            Gets the prices for the specified <paramref name="contentLink"/>.
            </summary>
            <param name="contentLink">Reference to the content to get prices for.</param>
            <param name="marketId">The market id. Pass emtpy marketId to get prices for all markets.</param>
            <param name="customerPricing">The customer pricing. Pass emtpy customer pricing to get prices for all customers.</param>
            <returns>
            Collection of prices for the content.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader.GetPrices(EPiServer.Core.ContentReference,Mediachase.Commerce.MarketId,System.Collections.Generic.IEnumerable{Mediachase.Commerce.Pricing.CustomerPricing})">
            <summary>
            Gets the prices for the specified <paramref name="contentLink"/>.
            </summary>
            <param name="contentLink">Reference to the content to get prices for.</param>
            <param name="marketId">The market id. Pass emtpy marketId to get prices for all markets.</param>
            <param name="customerPricings">List of the customer pricing. Pass emtpy list to get prices for all customers.</param>
            <returns>
            Collection of prices for the content.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader.GetPrices(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase},Mediachase.Commerce.MarketId,System.Collections.Generic.IEnumerable{Mediachase.Commerce.Pricing.CustomerPricing})">
            <summary>
            Gets the prices from list of entry contents.
            </summary>
            <param name="entryContents">The entry contents.</param>
            <param name="marketId">The market id.</param>
            <param name="customerPricings">List of the customer pricings.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader.GetPrices(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase},Mediachase.Commerce.MarketId,Mediachase.Commerce.Pricing.PriceFilter)">
            <summary>
            Gets the prices from list of entry contents.
            </summary>
            <param name="entryContents">The entry contents.</param>
            <param name="marketId">The market id.</param>
            <param name="priceFilter">The price filter.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ReadOnlyPricingLoader.GetChildrenPrices(EPiServer.Core.ContentReference,Mediachase.Commerce.MarketId,Mediachase.Commerce.Pricing.CustomerPricing,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets the prices of child variants.
            </summary>
            <param name="parentLink">The parent catalog node.</param>
            <param name="marketId">The market id. Pass emtpy marketId to get prices for all markets.</param>
            <param name="customerPricing">The customer pricing. Pass emtpy customer pricing to get prices for all customers.</param>
            <param name="startIndex">The start index of record to retreive.</param>
            <param name="numberOfRecord">The number of record to retreive.</param>
            <param name="total">The number of total record that is available.</param>
            <returns>
            Collection of prices detail of children of a catalog node.
            </returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent">
            <summary>
            Class to store information about Catalog object
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.ContentType">
            <summary>
            Gets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.DefaultCurrency">
            <summary>
            Gets or sets the default currency.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.DefaultLanguage">
            <summary>
            Gets or sets the default language.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.IsPrimary">
            <summary>
            Gets or sets a value indicating whether the catalog is primary.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.WeightBase">
            <summary>
            Gets or sets the weight base.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.LengthBase">
            <summary>
            Gets or sets the length base.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.CatalogLanguages">
            <summary>
            Gets or sets the catalog languages.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.Changed">
            <summary>
            Gets or sets the DateTime when has changed
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.ChangedBy">
            <summary>
            Gets or sets the ChangedBy when has changed
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.Created">
            <summary>
            Gets the date and time when this content instance was created
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.CreatedBy">
            <summary>
            Gets the username of the user that created this content instance.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.Deleted">
            <summary>
            Gets or sets the deleted date.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.DeletedBy">
            <summary>
            Gets or sets who deleted the content.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.Saved">
            <summary>
            Gets the date and time when this content instance was last saved.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.SetChangedOnPublish">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.Changed"/> should be updated on publish.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Commits changes for <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase"/> instances to the ECF database.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.CatalogContentLoader,EPiServer.Commerce.Catalog.Provider.Persistence.ParentEvaluator,Mediachase.Commerce.Catalog.Data.UniqueValueGenerator,EPiServer.Commerce.Catalog.Provider.Persistence.MetaDataCommitter,EPiServer.Commerce.Catalog.Linking.ILinksRepository,Mediachase.Commerce.Assets.IAssetService,EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter"/> class.
            </summary>
            <param name="catalogContext">The catalog context.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentLoader">The content loader.</param>
            <param name="parentEvaluator">The parent evaluator.</param>
            <param name="uniqueValueGenerator">The unique value generator.</param>
            <param name="metaDataCommitter">The meta data committer.</param>
            <param name="linksRepository">The links repository.</param>
            <param name="assetService">The asset service.</param>
            <param name="metaClassToContentTypeMap">The meta class to content type map.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.Save(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Saves the specified content, new or updated.
            </summary>
            <param name="content">The content.</param>
            <returns>
            The content reference, newly generated if the content was new.
            </returns>
            <exception cref="T:EPiServer.BaseLibrary.ArgumentException">This class only supports content of the type specified by ForType.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.Delete(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.UpdateExisting(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,System.Int32)">
            <summary>
            Updates an existing entry.
            </summary>
            <param name="content">The entry.</param>
            <param name="entryId">The entry id.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.CreateNew(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Creates a new entry corresponding to the content.
            </summary>
            <param name="content">The content.</param>
            <returns>The ID of the new entry.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.ValidateCode(System.String,System.Int32)">
            <summary>
            Validates the code.
            </summary>
            <param name="code">The code.</param>
            <param name="entryId">The entry Id.</param>
            <exception cref="T:System.ArgumentException">Thrown if the code is not unique.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.CreateEntryRow(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,EPiServer.Commerce.Catalog.Provider.ParentsInfo)">
            <summary>
            Creates a new entry row with values from the content and some required defaults.
            </summary>
            <param name="content">The content.</param>
            <param name="parentInfo">The parent info.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.UpdateStaticAttributes(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto)">
            <summary>
            Updates the static attributes.
            </summary>
            <param name="content">The content.</param>
            <param name="entry">The entry.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.SetSeoData(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto)">
            <summary>
            Sets the seo data.
            </summary>
            <param name="content">The content.</param>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.SetVariationData(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto)">
            <summary>
            Sets the variation data.
            </summary>
            <param name="content">The content.</param>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.CommitAssets(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Commits the assets.
            </summary>
            <param name="content">The content.</param>
            <param name="entry">The entry.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.UpdateSerializedMetaData(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,Mediachase.Commerce.Catalog.Dto.CatalogEntryDto)">
            <summary>
            Updates the serialized meta data.
            </summary>
            <param name="content">The content.</param>
            <param name="entry">The entry.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.SetRelations(EPiServer.Commerce.Catalog.Provider.ParentsInfo,System.Int32)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Sets the relations to the parent category, if one is selected, and to parent entry
            if the content is a variation of a product or part of a bundle or package.
            </summary>
            <param name="parentsInfo">The parents info.</param>
            <param name="entryId">The entry id.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.Persistence.EntryContentBaseCommitter.ForType">
            <summary>
            Returns the supported type: <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase"/>
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContent">
            <summary>
            Class to store information about CatalogNode object
            </summary>
            <remarks>
            For more information read the <a href="../EPiServer SDK/Knowledge base/Developer Guide/Content Provider/Working with the catalog as IContent.htm">Working with the Catalog as IContent</a> article.
            </remarks>
            <example>
            <para>An example of how to create a Commerce content type:</para>
            <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeSample.cs" />
            </example>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.ResetModified">
            <summary>
            Resets the modified flag.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.ContentType">
            <summary>
            Gets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.SeoUri">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.Code">
            <summary>
            Gets or sets the code.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.MetaClassId">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.SeoInformation">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.CommerceMediaCollection">
            <summary>
            Gets or sets the commerce media for catalog node
            </summary>            
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.LargeThumbnail">
            <summary>
            Large thumbnail url
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.Changed">
            <summary>
            Gets or sets the DateTime when has changed
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.ChangedBy">
            <summary>
            Gets or sets the ChangedBy when has changed
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.Created">
            <summary>
            Gets the date and time when this content instance was created
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.CreatedBy">
            <summary>
            Gets the username of the user that created this content instance.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.Deleted">
            <summary>
            Gets or sets the deleted date.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.DeletedBy">
            <summary>
            Gets or sets who deleted the content.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.Saved">
            <summary>
            Gets the date and time when this content instance was last saved.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.SetChangedOnPublish">
            <summary>
                Gets or sets a value indicating whether the <see cref="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.Changed"/> should be updated on publish.
            </summary>
            <remarks>
                The commerce backend has only one date field, so we cannot differentiate between Saved and Changed.
                Because of this, this property will always return true.
            </remarks>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.Categories">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.NodeContent.IsModified">
            <summary>
            Gets a value indicating whether this instance has been modified after loading.
            </summary>
            <value>
            	<c>true</c> if this instance has been modified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.CatalogContentCommitterHandler">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Commits changes to catalog content to the ECF database using the registered
            <see cref="T:EPiServer.Commerce.Catalog.Provider.Persistence.ICatalogContentCommitter"/> instances.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentCommitterHandler.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Provider.Persistence.ICatalogContentCommitter})">
            <summary>
            Initilizes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentCommitterHandler"/> class.
            </summary>
            <param name="committers">The committers.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentCommitterHandler.Save(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            Use the <see cref="T:EPiServer.IContentRepository"/> to work with content.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentCommitterHandler.Delete(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Deletes the specified content
            </summary>
            <param name="content">The content to delete</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider">
            <summary>
            Content provider for Commerce object
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.DefaultProviderKey">
            <summary>
            Default key of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider"/>, used in the automatic registration of the
            content provider and in in creating <see cref="T:EPiServer.Core.ContentReference"/>s to catalog content in it.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.MasterKeyCachePolicy">
            <summary>
            Used to insert master keys into the cache. <see cref="T:EPiServer.Framework.Cache.IObjectInstanceCache"/> inserts master
            keys internally as nonremovable with no timeout, but the best we can do is to use a long
            timeout.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.#ctor(EPiServer.Construction.ContentFactory,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAbstraction.IContentTypeRepository},EPiServer.Web.TemplateResolver,EPiServer.Web.UrlSegmentHandler,EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.Construction.IFolderIDGenerator,EPiServer.Core.LanguageSelectorFactory,EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore,EPiServer.IContentLoader,EPiServer.Commerce.Catalog.Provider.CatalogContentLoader,EPiServer.Commerce.Catalog.Provider.CatalogContentGuidProvider,EPiServer.Web.Routing.UrlResolver,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory,EPiServer.Commerce.Catalog.Linking.ILinksRepository,EPiServer.Core.Transfer.IContentCopyHandler,Mediachase.Commerce.Pricing.IPriceService,Mediachase.Commerce.Inventory.IWarehouseInventoryService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider"/> class.
            </summary>
            <param name="contentFactory">The content factory.</param>
            <param name="contentTypeRepositoryAccessor">The content type repository accessor.</param>
            <param name="templateResolver">The template resolver.</param>
            <param name="urlSegmentHandler">The URL segment handler.</param>
            <param name="folderIdGenerator">The folder id generator.</param>
            <param name="languageSelectorFactory">The language selector factory.</param>
            <param name="contentStore">The content store.</param>
            <param name="contentLoader">The content loader.</param>
            <param name="catalogContentLoader">The catalog content loader.</param>
            <param name="guidProvider">The guid provider.</param>
            <param name="urlResolver">The url resolver.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="metaClassContentFactory">The meta class content factory.</param>
            <param name="linksRepository">The links repository.</param>
            <param name="contentCopyHandler">The content copy handler.</param>
            <param name="languageBranchRepository">The language branch repository.</param>
            <param name="priceService">The price service.</param>
            <param name="warehouseInventoryService">The warehouse inventory service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.#ctor(EPiServer.Construction.ContentFactory,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAbstraction.IContentTypeRepository},EPiServer.Web.TemplateResolver,EPiServer.Web.UrlSegmentHandler,EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.Construction.IFolderIDGenerator,EPiServer.Core.LanguageSelectorFactory,EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore,EPiServer.IContentLoader,EPiServer.Commerce.Catalog.Provider.CatalogContentLoader,EPiServer.Commerce.Catalog.Provider.CatalogContentGuidProvider,EPiServer.Web.Routing.UrlResolver,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory,EPiServer.Commerce.Catalog.Linking.ILinksRepository,EPiServer.Core.Transfer.IContentCopyHandler,Mediachase.Commerce.Pricing.IPriceService,Mediachase.Commerce.Inventory.IWarehouseInventoryService,EPiServer.Validation.IValidationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider"/> class.
            </summary>
            <param name="contentFactory">The content factory.</param>
            <param name="contentTypeRepositoryAccessor">The content type repository accessor.</param>
            <param name="templateResolver">The template resolver.</param>
            <param name="urlSegmentHandler">The URL segment handler.</param>
            <param name="folderIdGenerator">The folder id generator.</param>
            <param name="languageSelectorFactory">The language selector factory.</param>
            <param name="contentStore">The content store.</param>
            <param name="contentLoader">The content loader.</param>
            <param name="catalogContentLoader">The catalog content loader.</param>
            <param name="guidProvider">The guid provider.</param>
            <param name="urlResolver">The url resolver.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="metaClassContentFactory">The meta class content factory.</param>
            <param name="linksRepository">The links repository.</param>
            <param name="contentCopyHandler">The content copy handler.</param>
            <param name="languageBranchRepository">The language branch repository.</param>
            <param name="priceService">The price service.</param>
            <param name="warehouseInventoryService">The warehouse inventory service.</param>
            <param name="validationService">Validation service dependency</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.#ctor(EPiServer.Construction.ContentFactory,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAbstraction.IContentTypeRepository},EPiServer.Web.TemplateResolver,EPiServer.Web.UrlSegmentHandler,EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.Construction.IFolderIDGenerator,EPiServer.Core.LanguageSelectorFactory,EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore,EPiServer.IContentLoader,EPiServer.Commerce.Catalog.Provider.CatalogContentLoader,Mediachase.Commerce.Catalog.Data.CatalogGuidMapping,EPiServer.Web.Routing.UrlResolver,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.Construction.MetaClassContentFactory,EPiServer.Commerce.Catalog.Linking.ILinksRepository,EPiServer.Core.Transfer.IContentCopyHandler,Mediachase.Commerce.Pricing.IPriceService,Mediachase.Commerce.Inventory.IWarehouseInventoryService,EPiServer.Validation.IValidationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider"/> class.
            </summary>
            <param name="contentFactory">The content factory.</param>
            <param name="contentTypeRepositoryAccessor">The content type repository accessor.</param>
            <param name="templateResolver">The template resolver.</param>
            <param name="urlSegmentHandler">The URL segment handler.</param>
            <param name="folderIdGenerator">The folder id generator.</param>
            <param name="languageSelectorFactory">The language selector factory.</param>
            <param name="contentStore">The content store.</param>
            <param name="contentLoader">The content loader.</param>
            <param name="catalogContentLoader">The catalog content loader.</param>
            <param name="catalogGuidMapping">The catalog Guid mapping DB.</param>
            <param name="urlResolver">The url resolver.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="metaClassContentFactory">The meta class content factory.</param>
            <param name="linksRepository">The links repository.</param>
            <param name="contentCopyHandler">The content copy handler.</param>
            <param name="languageBranchRepository">The language branch repository.</param>
            <param name="priceService">The price service.</param>
            <param name="warehouseInventoryService">The warehouse inventory service.</param>
            <param name="validationService">Validation service dependency</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.#ctor(EPiServer.Construction.ContentFactory,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAbstraction.IContentTypeRepository},EPiServer.Web.TemplateResolver,EPiServer.Web.UrlSegmentHandler,EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.Construction.IFolderIDGenerator,EPiServer.Core.LanguageSelectorFactory,EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore,EPiServer.IContentLoader,EPiServer.Commerce.Catalog.Provider.CatalogContentLoader,Mediachase.Commerce.Catalog.Data.CatalogGuidMapping,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Linking.ILinksRepository,EPiServer.Core.Transfer.IContentCopyHandler,Mediachase.Commerce.Pricing.IPriceService,Mediachase.Commerce.Inventory.IWarehouseInventoryService,EPiServer.Validation.IValidationService,Mediachase.Commerce.Catalog.ICatalogSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider"/> class.
            </summary>
            <param name="contentFactory">The content factory.</param>
            <param name="contentTypeRepositoryAccessor">The content type repository accessor.</param>
            <param name="templateResolver">The template resolver.</param>
            <param name="urlSegmentHandler">The URL segment handler.</param>
            <param name="languageBranchRepository">The language branch repository.</param>
            <param name="folderIdGenerator">The folder id generator.</param>
            <param name="languageSelectorFactory">The language selector factory.</param>
            <param name="contentStore">The content store.</param>
            <param name="contentLoader">The content loader.</param>
            <param name="catalogContentLoader">The catalog content loader.</param>
            <param name="catalogGuidMapping">The catalog Guid mapping DB.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="linksRepository">The links repository.</param>
            <param name="contentCopyHandler">The content copy handler.</param>
            <param name="priceService">The price service.</param>
            <param name="warehouseInventoryService">The warehouse inventory service.</param>
            <param name="validationService">Validation service dependency</param>
            <param name="catalogSystem">The catalog system.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.#ctor(EPiServer.Construction.ContentFactory,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAbstraction.IContentTypeRepository},EPiServer.Web.TemplateResolver,EPiServer.Web.UrlSegmentHandler,EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.Construction.IFolderIDGenerator,EPiServer.Core.LanguageSelectorFactory,EPiServer.Commerce.Catalog.Provider.CatalogContentDraftStore,EPiServer.IContentLoader,EPiServer.Commerce.Catalog.Provider.CatalogContentLoader,Mediachase.Commerce.Catalog.Data.CatalogGuidMapping,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Linking.ILinksRepository,EPiServer.Core.Transfer.IContentCopyHandler,Mediachase.Commerce.Pricing.IPriceService,Mediachase.Commerce.Inventory.IWarehouseInventoryService,EPiServer.Validation.IValidationService,Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider"/> class.
            </summary>
            <param name="contentFactory">The content factory.</param>
            <param name="contentTypeRepositoryAccessor">The content type repository accessor.</param>
            <param name="templateResolver">The template resolver.</param>
            <param name="urlSegmentHandler">The URL segment handler.</param>
            <param name="languageBranchRepository">The language branch repository.</param>
            <param name="folderIdGenerator">The folder id generator.</param>
            <param name="languageSelectorFactory">The language selector factory.</param>
            <param name="contentStore">The content store.</param>
            <param name="contentLoader">The content loader.</param>
            <param name="catalogContentLoader">The catalog content loader.</param>
            <param name="catalogGuidMapping">The catalog Guid mapping DB.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="linksRepository">The links repository.</param>
            <param name="contentCopyHandler">The content copy handler.</param>
            <param name="priceService">The price service.</param>
            <param name="warehouseInventoryService">The warehouse inventory service.</param>
            <param name="validationService">Validation service dependency</param>
            <param name="catalogSystem">The catalog system.</param>
            <param name="objectInstanceCache">The object instance cache.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.LoadContent(EPiServer.Core.ContentReference,EPiServer.Core.ILanguageSelector)">
            <summary>
            Load content for given contentlink.
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="languageSelector">The language selector.</param>
            <returns>An instance of CatalogContent</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.LoadContents(System.Collections.Generic.IList{EPiServer.Core.ContentReference},EPiServer.Core.ILanguageSelector)">
            <summary>
            Loads multiple catalog content instances from their references.
            </summary>
            <param name="contentReferences">The content references.</param>
            <param name="selector">The language selector.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.Save(EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction)">
            <summary>
            Save catalog content to storage with specified action. When publishing or saving new content
            not yet published it will be persisted to the ECF database with the IsActive flag set to true or
            false, respectively. Other versions are saved in the DDS.
            </summary>
            <param name="content">The content.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.ValidateForPublishing(EPiServer.Core.IContent)">
            <summary>
            Validate content before publishing.
            </summary>
            <param name="content">The content.</param>
            <returns>An enumerable with <see cref="T:EPiServer.Validation.ValidationError"/></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.ListDelayedPublish">
            <summary>
            Lists the content versions that are scheduled for publish.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.LoadChildrenReferencesAndTypes(EPiServer.Core.ContentReference,System.String,System.Boolean@)">
            <summary>
            Loads the children references and types.
            </summary>
            <param name="contentLink">The content link to the parent.</param>
            <param name="languageID">The language ID.</param>
            <param name="languageSpecific">Output parameter which will be assigned true to indicate that the
            catalog content provider is multi language capable. </param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.ResolveContent(EPiServer.Core.ContentReference)">
            <summary>
            Tries to resolve a Content from a <see cref="T:EPiServer.Core.ContentReference"/>.
            </summary>
            <param name="contentLink">The content link.</param>
            <returns>
            A <see cref="T:EPiServer.Web.ContentResolveResult"/> with the identifiers for the content or null if no content was matched.
            </returns>
            <remarks>The ContentUri relies on correct routing for the content, if no matching routes are
            registered, it will return a Uri to the root.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.ResolveContent(System.Guid)">
            <summary>
            Tries to resolve a Content from a <see cref="T:System.Guid"/>.
            </summary>
            <param name="contentGuid">The content link.</param>
            <returns>
            A <see cref="T:EPiServer.Web.ContentResolveResult"/> with the identifiers for the content or null if no content was matched.
            </returns>
            <remarks>The ContentUri relies on correct routing for the content, if no matching routes are
            registered, it will return a Uri to the root.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.ListMatchingSegments(EPiServer.Core.ContentReference,System.String)">
            <summary>
            Lists references to all children content items that have matching routing/url segments.
            </summary>
            <param name="parentLink">The parent link.</param>
            <param name="urlSegment">The URL segment.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.ListMatchingDrafts(EPiServer.Core.ContentReference,System.String)">
            <summary>
            Lists drafts matching the <paramref name="parentLink"/> and <paramref name="urlSegment"/>
            </summary>
            <param name="parentLink">The parent link.</param>
            <param name="urlSegment">The url segment.</param>
            <returns>List of matching drafts.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.GetReferencesToContentItems(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
            <summary>
            Gets all references to the specified product content, for example, any entry that uses these content links.
            Override method to get all references to the given items.
            </summary>
            <param name="contentLinks">The content links to check references for.</param>
            <returns>
            A list of items that hold some kind of reference to the specified content.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.Copy(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,System.Boolean,EPiServer.Security.AccessLevel)">
            <summary>
            Copies the specified content to the destination.
            </summary>
            <param name="contentLink">The content link of the content to copy.</param>
            <param name="destinationLink">The destination link.</param>
            <param name="publishOnDestination">if set to <c>true</c> the content will be published at destination.</param>
            <param name="requiredSourceAccess">The required source access.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.CopyPrices(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Copies the prices. This method will be called after content has been copied.
            </summary>
            <param name="source">The content to copy prices from.</param>
            <param name="target">The content which just has been created.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.CopyWarehouseInventories(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Copies the warehouse inventories. This method will be called after content has been copied.
            </summary>
            <param name="source">The content to copy prices from.</param>
            <param name="target">The content which just has been created.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.EnsureCode(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,EPiServer.Core.IContent)">
            <summary>
            Ensures the code will be set to null (to be auto-generated) if this is master language clone, or copy from master language otherwise.
            </summary>
            <param name="clone">The clone.</param>
            <param name="masterLanguageClone">The master language clone.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.Move(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
            <summary>
            Moves the specified content to the destination.
            </summary>
            <param name="contentLink">The content link of the content to move.</param>
            <param name="destinationLink">The destination link.</param>
            <exception cref="T:System.InvalidOperationException">Only catalog entries and nodes can be moved.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.Delete(EPiServer.Core.ContentReference,System.Boolean)">
            <summary>
            Delete a content item from storage.
            </summary>
            <param name="contentLink">A link to the content that should be deleted.</param>
            <param name="forceDelete">Set to <c>true</c> if you want to delete this even if other items reference it.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.SetCacheSettings(EPiServer.Core.IContent,EPiServer.Core.CacheSettings)">
            <summary>
            Adds dependencies to keys from <see cref="T:Mediachase.Data.Provider.MasterCacheKeys"/> to react to changes in the
            entry (with relations) / node / catalog the content is based on
            </summary>
            <param name="content">The content that is about to be added to cache.</param>
            <param name="cacheSettings">The cache settings.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.SetCacheSettings(EPiServer.Core.ContentReference,System.Collections.Generic.IEnumerable{EPiServer.Core.GetChildrenReferenceResult},EPiServer.Core.CacheSettings)">
            <summary>
            Adds dependencies to keys from <see cref="T:Mediachase.Data.Provider.MasterCacheKeys"/>
            to react to item adds/removes and changed relations
            </summary>
            <param name="contentReference"></param>
            <param name="children"></param>
            <param name="cacheSettings"></param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.SetCacheSettings(EPiServer.Core.ContentReference,System.String,System.Collections.Generic.IEnumerable{EPiServer.Core.MatchingSegmentResult},EPiServer.Core.CacheSettings)">
            <summary>
            Adds dependencies to keys from <see cref="T:Mediachase.Data.Provider.MasterCacheKeys"/>
            to react to item adds/removes and changed relations
            </summary>
            <param name="parentLink">The parent link.</param>
            <param name="urlSegment">The URL segment.</param>
            <param name="childrenMatches">The children matches.</param>
            <param name="cacheSettings">The cache settings.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.EnsureMasterKeyDependencies(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Ensures the master key dependencies exist in cache to avoid failed
            inserts with dependencies on these keys. This has to be done manually
            since SetCacheSettings does not provide an option of passing back
            master keys.
            </summary>
            <param name="masterKeys">The master keys.</param>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.ProviderCapabilities">
            <summary>
            Gets the capabilities that this content provider supports.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.ProviderKey">
            <summary>
            Gets the provider key.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.Provider.CatalogContentProvider.VersionRepository">
            <summary>
            Gets the version repository for catalog content.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            Use <see cref="T:EPiServer.IContentRepository"/> instead.
            
            Fetches commerce catalog data as content instances.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Provider.Construction.ICatalogContentBuilder},Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader"/> class.
            </summary>
            <param name="catalogSystem">The catalog system.</param>
            <param name="contentBuilders">The content builders.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="metaClassMap">The meta class map.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Provider.Construction.ICatalogContentBuilder},Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Commerce.Catalog.Provider.MetaClassToContentTypeMap,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader"/> class.
            </summary>
            <param name="catalogSystem">The catalog system.</param>
            <param name="contentBuilders">The content builders.</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="metaClassMap">The meta class map.</param>
            <param name="objectInstanceCache">The object instance cache.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.GetItems``1(System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.String,Mediachase.Commerce.IMarket)">
            <summary>
            Gets the specified content.
            </summary>
            <typeparam name="T"><see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> or a subclass of it.</typeparam>
            <param name="contentLinks">The content links.</param>
            <param name="language">The content language.</param>
            <param name="market">The market filter.</param>
            <returns>A list of instances of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/></returns>
            <remarks>This operation is uncached! Use the
            <see cref="T:EPiServer.IContentRepository"/> for getting content using cache.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.GetItems``1(System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.String)">
            <summary>
            Gets the specified content.
            </summary>
            <typeparam name="T"><see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> or a subclass of it.</typeparam>
            <param name="contentLinks">The content links.</param>
            <param name="language">The content language.</param>
            <returns>A list of instances of <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/></returns>
            <remarks>This operation is uncached! Use the
            <see cref="T:EPiServer.IContentRepository"/> for getting content using cache.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.GetCacheMasterKeys(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Gets the cache master keys from <see cref="T:Mediachase.Data.Provider.MasterCacheKeys"/>
            that this content should depend on.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.GetCatalogEntries(EPiServer.Core.ContentReference,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets references to the child entries of a catalog or catalog node.
            </summary>
            <param name="parentLink">The parent link.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
            <param name="totalCount">Total number of catalog entries</param>
            <returns>A list of <see cref="T:EPiServer.Core.ContentReference"/>s.</returns>
            <remarks>This operation is uncached! Use the
            <see cref="T:EPiServer.IContentRepository"/> for getting content using cache.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.GetCatalogEntries(EPiServer.Core.ContentReference)">
            <summary>
            Gets the catalog entries.
            </summary>
            <param name="parentLink">The parent link.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.GetCatalogNodes(EPiServer.Core.ContentReference)">
            <summary>
            Gets references to the child nodes of a catalog or catalog node.
            </summary>
            <param name="parentLink">The parent link.</param>
            <returns>A list of <see cref="T:EPiServer.Core.ContentReference"/>s.</returns>
            <remarks>This operation is uncached! Use the
            <see cref="T:EPiServer.IContentRepository"/> for getting content using cache.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.GetNodeEntryReferences(System.Int32)">
            <summary>
            Get the children of a catalog node.
            </summary>
            <param name="catalogNodeId">Catalog Node Id</param>
            <returns>List of GetChildrenReferenceResult</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.GetCatalogEntryReferences(System.Int32)">
            <summary>
            Get the direct children of a catalog.
            </summary>
            <param name="catalogId">Catalog Id.</param>
            <returns>List of GetChildrenReferenceResult</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.ConstructCatalogReferences(Mediachase.Commerce.Catalog.Dto.CatalogDto)">
            <summary>
            Constructs the catalog references.
            </summary>
            <param name="catalogDto">The catalog dto.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.ConstructCatalogNodeReferences(System.Int32,System.Int32)">
            <summary>
            Constructs the catalog node references
            </summary>
            <param name="catalogId">Id of catalog.</param>
            <param name="parentNodeId">Id of parent CatalogNode. Must be 0 if we want to add direct children of a Catalog.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.GetFromCache(System.String,EPiServer.Core.ContentReference)">
            <summary>
            Gets the content from cache if present.
            </summary>
            <param name="language">The language.</param>
            <param name="contentLink">The content link.</param>
            <returns>The content from cache or null if not in cache.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.AddToCache(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Caches the content with dependencies to the underlying catalog items.
            </summary>
            <param name="content">The content to cache.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Provider.CatalogContentLoader.GetCatalogContentEvictionPolicy(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Gets an eviction policy with master key dependencies to the entry, node or catalog
            and (in case of entry) parent node relations.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.RootContent">
            <summary>
            Class to store information about the root of CatalogContentBase
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.RootContent.ContentType">
            <summary>
            Gets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.RootContent.ExistingLanguages">
            <summary>
            RootContent will have Master language as ExistingLanguages.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.RootContent.MasterLanguage">
            <summary>
            RootContent will have a MasterLanguage as the site has.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.RootContent.Language">
            <summary>
            For all instance, RootContent will always has Master language as the only one Language
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.PackageContent">
            <summary>
            Class to store information about packages
            </summary>
            <remarks>
            For more information read the <a href="../EPiServer SDK/Knowledge base/Developer Guide/Content Provider/Working with the catalog as IContent.htm">Working with the Catalog as IContent</a> article.
            </remarks>
            <example>
            <para>An example of how to create a Commerce content type:</para>
            <code source="../CodeSamples/EPiServer.Commerce/Catalog/Provider/CatalogContentTypeSample.cs" />
            </example>
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.PackageContent.ClassTypeId">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.PackageContent.MinQuantity">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.PackageContent.MaxQuantity">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.PackageContent.Weight">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.PackageContent.ShippingDimensions">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.PackageContent.TrackInventory">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.PackageContent.InventoryReference">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.PackageContent.TaxCategoryId">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.PackageContent.PriceReference">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Catalog.ContentTypes.PackageContent.PackageReference">
            <summary>
            Gets or sets the package content reference
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.DatabaseVersionValidator">
            <summary>
            Validates the database version against the supported assembly version.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.DatabaseVersionValidator.#ctor(EPiServer.Data.Providers.IDatabaseFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.DatabaseVersionValidator"/> class.
            </summary>
            <param name="databaseFactory">The database factory.</param>
        </member>
        <member name="M:EPiServer.Commerce.DatabaseVersionValidator.ValidateDatabaseVersion">
            <summary>
            Validates the database version.
            </summary>
            <exception cref="T:EPiServer.Core.EPiServerException">
            Will be thrown if the database version not maches the supported version.
            </exception>
        </member>
        <member name="M:EPiServer.Commerce.DatabaseVersionValidator.GetSupportedVersion">
            <summary>
            Gets the supported version for the assembly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.DatabaseVersionValidator.GetDatabaseVersion">
            <summary>
            Gets the database version.
            </summary>
            <returns></returns>
            <exception cref="T:EPiServer.Core.EPiServerException">The stored procedure 'GetContentSchemaVersionNumber' could not return the latest schema version number.</exception>
        </member>
        <member name="M:EPiServer.Commerce.ExpressionHelper.GetFullPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets a string representation of the member expressions in an expressions body possibly
            containing multiple levels.
            Example: Type A has a property TheB of type B which has a property TheC of any type.
            GetFullPropertyName&lt;A&gt;(a => a.TheB.TheC) returns "TheBTheC".
            </summary>
            <typeparam name="T">The type to get a property name for.</typeparam>
            <param name="expression">The expression of the property name to get.</param>
            <returns>The full property path.</returns>
        </member>
        <member name="M:EPiServer.Commerce.ExpressionHelper.GetFullPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Gets a string representation of the member expressions in an expressions body possibly
            containing multiple levels.
            Example: Type A has a property TheB of type B which has a property TheC of any type.
            GetFullPropertyName&lt;A&gt;(a => a.TheB.TheC) returns "TheBTheC".
            </summary>
            <typeparam name="T">The type to get a property name for.</typeparam>
            <param name="expression">The expression of the property name to get.</param>
            <param name="separator">Optional separator between levels, defaults to no separator.</param>
            <returns>The full property path.</returns>
        </member>
        <member name="M:EPiServer.Commerce.ExpressionHelper.GetExpressionPath``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets a string representation of the member expressions in an expressions body possibly
            containing multiple levels.
            Example: Type A has a property TheB of type B which has a property TheC of any type.
            GetFullPropertyName&lt;A&gt;(a => a.TheB.TheC) returns {"TheB", "TheC"}.
            </summary>
            <typeparam name="T">The type to get a property name for.</typeparam>
            <param name="expression">The expression of the property to get the path for.</param>
            <returns>The full property path.</returns>
        </member>
        <member name="M:EPiServer.Commerce.ExpressionHelper.GetExpressionPath(System.Linq.Expressions.Expression)">
            <summary>
            Gets a string representation of the member expressions in an expressions body possibly
            containing multiple levels.
            Example: Type A has a property TheB of type B which has a property TheC of any type.
            Calling this method with the body of the expression a => a.TheB.TheC returns
            {"TheB", "TheC"}.
            </summary>
            <param name="expression">The expression body to get the path for.</param>
            <returns>The full property path.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.AssociatingExtensions">
            <summary>
            Gets the association for a <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IAssociating"/> implementation.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.AssociatingExtensions.GetAssociations(EPiServer.Commerce.Catalog.ContentTypes.IAssociating)">
            <summary>
            Gets the associations
            </summary>
            <param name="associating">The associating implementation</param>
            <returns>Collection of asociations.</returns>
            <remarks>This method uses the <see cref="T:EPiServer.ServiceLocation.ServiceLocator"/> to resolve the <see cref="T:EPiServer.Commerce.Catalog.Linking.LinksRepository"/>, which will be send to the method which contains the associations getter.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.AssociatingExtensions.GetAssociations(EPiServer.Commerce.Catalog.ContentTypes.IAssociating,EPiServer.Commerce.Catalog.Linking.ILinksRepository)">
            <summary>
            Gets the associations
            </summary>
            <param name="associating">The associating implementation</param>
            <param name="linkRepository">the links repository.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.AssociationRepositoryExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Catalog.Linking.IAssociationRepository"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.AssociationRepositoryExtensions.RemoveAssociation(EPiServer.Commerce.Catalog.Linking.IAssociationRepository,EPiServer.Commerce.Catalog.Linking.Association)">
            <summary>
            Removes the association. This is equivalent to calling
            <see cref="M:EPiServer.Commerce.Catalog.Linking.IAssociationRepository.RemoveAssociations(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Association})"/> with one item.
            </summary>
            <param name="associationRepository">The association repository.</param>
            <param name="association">The association to remove.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.AssociationRepositoryExtensions.UpdateAssociation(EPiServer.Commerce.Catalog.Linking.IAssociationRepository,EPiServer.Commerce.Catalog.Linking.Association)">
            <summary>
            Adds or updates the associations for the catalog content specified by the associations
            Source.  This is equivalent to calling <see cref="M:EPiServer.Commerce.Catalog.Linking.IAssociationRepository.UpdateAssociations(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Association})"/> with one
            item.
            </summary>
            <param name="associationRepository">The association repository.</param>
            <param name="association">The association.</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.BundleContentExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.BundleContent"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.BundleContentExtensions.GetEntries(EPiServer.Commerce.Catalog.ContentTypes.BundleContent)">
            <summary>
            Gets the entries included in a bundle.
            </summary>
            <param name="bundle">The bundle.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference"/>s of the bundle entries.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.BundleContentExtensions.GetEntries(EPiServer.Commerce.Catalog.ContentTypes.BundleContent,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets the entries included in a bundle.
            </summary>
            <param name="bundle">The bundle.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference"/>s of the bundle entries.
            </returns>
        </member>
        <member name="M:Mediachase.Commerce.Website.Helpers.CartHelperExtensions.Validate(Mediachase.Commerce.Website.Helpers.CartHelper)">
            <summary>
            Validates the specified cart.
            </summary>
            <param name="cart">The cart to validate.</param>
        </member>
        <member name="M:Mediachase.Commerce.Website.Helpers.CartHelperExtensions.Validate(Mediachase.Commerce.Website.Helpers.CartHelper,Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Validates the specified cart.
            </summary>
            <param name="cart">The cart to validate.</param>
            <param name="catalogSystem">The catalog system.</param>
            <param name="localizationService">The localization service</param>
        </member>
        <member name="M:Mediachase.Commerce.Catalog.Objects.CatalogNodeExtensions.IsAvailable(Mediachase.Commerce.Catalog.Objects.CatalogNode)">
            <summary>
            Determines whether the specified catalog node is available (is active, startdate and enddate are correct)
            </summary>
            <param name="catalogNode">The catalog node.</param>
            <returns>
            	<c>true</c> if the specified catalog node is available; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mediachase.Commerce.Catalog.Dto.CatalogNodeRowExtensions.IsAvailable(Mediachase.Commerce.Catalog.Dto.CatalogNodeDto.CatalogNodeRow)">
            <summary>
            Determines whether the specified catalog node row is available (is active, startdate and enddate are correct)
            </summary>
            <param name="catalogNodeRow">The catalog node row.</param>
            <returns>
            	<c>true</c> if the specified catalog node row is available; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mediachase.Commerce.Catalog.Dto.CatalogRowExtensions.IsAvailable(Mediachase.Commerce.Catalog.Dto.CatalogDto.CatalogRow)">
            <summary>
            Determines whether the specified catalog row is available (is active, startdate and enddate are correct)
            </summary>
            <param name="catalogRow">The catalog row.</param>
            <returns>
            	<c>true</c> if the specified catalog row is available; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mediachase.Commerce.Catalog.Objects.EntryExtensions.IsAvailable(Mediachase.Commerce.Catalog.Objects.Entry)">
            <summary>
            Determines whether the specified catalog entry is available (is active, startdate and enddate are correct)
            </summary>
            <param name="catalogEntry">The catalog entry.</param>
            <returns>
            	<c>true</c> if the specified catalog entry is available; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mediachase.Commerce.Catalog.Objects.EntryExtensions.GetProductLink(Mediachase.Commerce.Catalog.Objects.Entry,System.String)">
            <summary>
            Gets product link URL based on selected language
            </summary>
            <param name="entry">Current catalog entry</param>
            <param name="language">Language selector</param>
            <returns>Product link URL in string format</returns>
        </member>
        <member name="M:Mediachase.Commerce.Catalog.Objects.EntryExtensions.GetProductLink(Mediachase.Commerce.Catalog.Objects.Entry,System.String,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Web.Routing.UrlResolver)">
            <summary>
            Gets product link URL based on selected language
            </summary>
            <param name="entry">Current catalog entry</param>
            <param name="language">Language selector</param>
            <param name="referenceConverter">The reference converter</param>
            <param name="urlResolver">the url resolver</param>
            <returns>Product link URL in string format</returns>
        </member>
        <member name="T:EPiServer.Business.Commerce.Extensions.ExtensionMethods">
            <summary>
            Class that implements a number of extension methods for various object types
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ThumbnailUrlResolver">
            <summary>
            Service to get thumbnail urls for content.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ThumbnailUrlResolver.#ctor(EPiServer.IContentRepository,EPiServer.Web.BlobResolver,EPiServer.Commerce.Catalog.AssetUrlResolver,EPiServer.Web.Routing.UrlResolver)">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.Commerce.Catalog.ThumbnailUrlResolver"/>.
            </summary>
            <param name="contentRepository">The content repository</param>
            <param name="blobResolver">The blob resolver</param>
            <param name="assetUrlResolver">The asset url resolver</param>
            <param name="urlResolver">The url resolver</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ThumbnailUrlResolver.GetThumbnailUrl(EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer,System.String)">
            <summary>
            Get a url to the thumbnail from the asset of the <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IAssetContainer"/>.
            </summary>
            <param name="content">The asset container</param>
            <param name="propertyName">The name of the property to get the asset from.</param>
            <returns>The url for the content's thumbnail.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ThumbnailUrlResolver.GetMediaFromAsset(EPiServer.Commerce.SpecializedProperties.CommerceMedia,EPiServer.IContentRepository)">
            <summary>
            Gets first image content from asset container.
            </summary>
            <param name="commerceMedia">The asset.</param>
            <param name="contentRepository">The content repository.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ThumbnailUrlResolver.HasBlobProperty(EPiServer.Core.IContentImage,System.String)">
            <summary>
            Check the <see cref="T:EPiServer.Core.IContentMedia"/> has property named <paramref name="propName"/> of <see cref="T:EPiServer.Framework.Blobs.Blob"/> type and decorated with <see cref="T:EPiServer.DataAnnotations.ImageDescriptorAttribute"/>
            </summary>
            <param name="mediaContent">The instance of <see cref="T:EPiServer.Core.IContentImage"/> to check</param>
            <param name="propName">Name of the property</param>
            <returns><c>true</c> if there is a blob for this property; otherwise <c>false</c></returns>
        </member>
        <member name="M:Mediachase.Commerce.Inventory.InventoryExtensions.CanPreorder(Mediachase.Commerce.Inventory.IWarehouseInventory,System.DateTime)">
            <summary>
            Determines whether the specified inventory of a catalog entry is available for preorder.
            </summary>
            <param name="warehouseInventory">The warehouse inventory.</param>
            <param name="requestDate">The request date.</param>
            <returns>
            	<c>true</c> if the specified inventory of a catalog entry is available for preorder; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mediachase.Commerce.Inventory.InventoryExtensions.CanBackorder(Mediachase.Commerce.Inventory.IWarehouseInventory,System.DateTime)">
            <summary>
            Determines whether the specified inventory of an entry is available for backorder.
            </summary>
            <param name="warehouseInventory">The warehouse inventory.</param>
            <param name="requestDate">The request date.</param>
            <returns>
            	<c>true</c> if the specified inventory of a catalog entry is available for backorder; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.PackageContentExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.PackageContent"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PackageContentExtensions.GetEntries(EPiServer.Commerce.Catalog.ContentTypes.PackageContent)">
            <summary>
            Gets the entries included in a package.
            </summary>
            <param name="package">The package.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference"/>s of the bundle entries.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PackageContentExtensions.GetEntries(EPiServer.Commerce.Catalog.ContentTypes.PackageContent,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets the entries included in a package.
            </summary>
            <param name="package">The package.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference"/>s of the bundle entries.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Extensions.PageExtensions.RegisterClientScriptFile(System.Web.UI.Page,System.String,System.String)">
            <summary>
            Registers the client script file with this page using key and file relative path
            </summary>
            <param name="page">The asp.net template page</param>
            <param name="key">The unique key identifyer for the script. If an existing key is provided, nothing will be registered</param>
            <param name="rootRelativePath">Relative path of the file</param>
        </member>
        <member name="M:EPiServer.Commerce.Extensions.PageExtensions.RegisterStyleSheetFile(System.Web.UI.Page,System.String,System.String)">
            <summary>
            Registers the CSS file to the header of this page, using key and file relative path.
            This function only works with server side header of HTML page. Otherwise it will do nothing.
            </summary>
            <param name="page">The asp.net template page</param>
            <param name="key">The unique key identifyer for the CSS file. If an existing key is provided, nothing will be registered</param>
            <param name="rootRelativePath">relative path of the file</param>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.ProductContentExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.ProductContent"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.ProductContentExtensions.GetVariants(EPiServer.Commerce.Catalog.ContentTypes.ProductContent)">
            <summary>
            Gets the variants of a product.
            </summary>
            <param name="product">The product.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference"/>s of the product variants.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.ProductContentExtensions.GetVariants(EPiServer.Commerce.Catalog.ContentTypes.ProductContent,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets the variants of a product.
            </summary>
            <param name="product">The product.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference"/>s of the product variants.
            </returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.Linking.RelationRepositoryExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Catalog.Linking.IRelationRepository"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.RelationRepositoryExtensions.RemoveRelation(EPiServer.Commerce.Catalog.Linking.IRelationRepository,EPiServer.Commerce.Catalog.Linking.Relation)">
            <summary>
            Removes the relation. This is equivalent to calling
            <see cref="M:EPiServer.Commerce.Catalog.Linking.IRelationRepository.RemoveRelations(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Relation})"/> with one item.
            </summary>
            <param name="relationRepository">The relation repository.</param>
            <param name="relation">The relation to remove.</param>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.Linking.RelationRepositoryExtensions.UpdateRelation(EPiServer.Commerce.Catalog.Linking.IRelationRepository,EPiServer.Commerce.Catalog.Linking.Relation)">
            <summary>
            Adds or updates the relation for the catalog content specified by the relations
            Source. This is equivalent to calling <see cref="M:EPiServer.Commerce.Catalog.Linking.IRelationRepository.UpdateRelations(System.Collections.Generic.IEnumerable{EPiServer.Commerce.Catalog.Linking.Relation})"/> with one
            item.
            </summary>
            <param name="relationRepository">The relation repository.</param>
            <param name="relation">The relation.</param>
        </member>
        <member name="T:EPiServer.Commerce.Extensions.ServiceLocationHelperExtensions">
            <summary>  
            Makes EPiServer.Commerce services part of the public API.  
            </summary>  
        </member>
        <member name="M:EPiServer.Commerce.Extensions.ServiceLocationHelperExtensions.CurrentMarket(EPiServer.ServiceLocation.ServiceLocationHelper)">
            <summary>  
            Resolves the <see cref="T:Mediachase.Commerce.ICurrentMarket"/> service.
            </summary>  
            <param name="serviceLocationHelper">The service location helper.</param>  
            <returns>An instance of the currently registered <see cref="T:Mediachase.Commerce.ICurrentMarket"/> service.</returns>  
        </member>
        <member name="M:EPiServer.Commerce.Extensions.ServiceLocationHelperExtensions.MarketService(EPiServer.ServiceLocation.ServiceLocationHelper)">
            <summary>  
            Resolves the <see cref="T:Mediachase.Commerce.Markets.IMarketService"/> service.
            </summary>  
            <param name="serviceLocationHelper">The service location helper.</param>  
            <returns>An instance of the currently registered <see cref="T:Mediachase.Commerce.Markets.IMarketService"/> service.</returns>  
        </member>
        <member name="M:EPiServer.Commerce.Extensions.ServiceLocationHelperExtensions.ReferenceConverter(EPiServer.ServiceLocation.ServiceLocationHelper)">
            <summary>  
            Resolves the <see cref="M:EPiServer.Commerce.Extensions.ServiceLocationHelperExtensions.ReferenceConverter(EPiServer.ServiceLocation.ServiceLocationHelper)"/> service.
            </summary>  
            <param name="serviceLocationHelper">The service location helper.</param>  
            <returns>An instance of the currently registered <see cref="M:EPiServer.Commerce.Extensions.ServiceLocationHelperExtensions.ReferenceConverter(EPiServer.ServiceLocation.ServiceLocationHelper)"/> service.</returns>  
        </member>
        <member name="M:EPiServer.Commerce.Extensions.ServiceLocationHelperExtensions.CatalogSystem(EPiServer.ServiceLocation.ServiceLocationHelper)">
            <summary>  
            Resolves the <see cref="T:Mediachase.Commerce.Catalog.ICatalogSystem"/> service.
            </summary>  
            <param name="serviceLocationHelper">The service location helper.</param>  
            <returns>An instance of the currently registered <see cref="T:Mediachase.Commerce.Catalog.ICatalogSystem"/> service.</returns>  
        </member>
        <member name="M:EPiServer.Commerce.Extensions.StringExtensions.FormatContentText(System.String)">
            <summary>
            Formats content text for HTML output
            </summary>
            <param name="text">The text to format</param>
            <returns>The formatted text</returns>
        </member>
        <member name="M:EPiServer.Commerce.Extensions.StringExtensions.JavascriptEncode(System.String)">
            <summary>
            Gets the string that is suitable for use in client script
            </summary>
            <param name="source">The source.</param>
            <returns>The encoded string</returns>
        </member>
        <member name="M:EPiServer.Commerce.Extensions.StringExtensions.StripPreviewText(System.String,System.Int32)">
            <summary>
            Strips a text to a given length without splitting the last word.
            </summary>
            <param name="source">The source string.</param>
            <param name="maxLength">Max length of the text</param>
            <returns>A shortened version of the given string</returns>
            <remarks>Will return empty string if input is null or empty</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Extensions.StringExtensions.ToHtmlEncoded(System.String)">
            <summary>
            Get the string that is suitable for
            display on web page
            </summary>
            <param name="source">The source.</param>
            <returns>the encoded string</returns>
        </member>
        <member name="M:EPiServer.Commerce.Extensions.StringExtensions.ToJavaScriptEncoded(System.String)">
            <summary>
            Get the string that is suitable for
            use in client script
            </summary>
            <param name="source">The source.</param>
            <returns>the encoded string</returns>
        </member>
        <member name="M:EPiServer.Commerce.Extensions.StringExtensions.ToShorten(System.String)">
            <summary>
            If a string is too long (exceed shortStringSize), this function shorten it.
            </summary>
            <param name="source">The source.</param>
            <returns>shorten string</returns>
        </member>
        <member name="M:EPiServer.Commerce.Extensions.StringExtensions.ToShorten(System.String,System.Int32,System.Boolean)">
            <summary>
            If a string is too long (exceed shortStringSize), this function shorten it.
            <remarks>
            If maxsize less or equal 3, we cannot use DotDotDot.
            If source.Length is less than maxSize, we leave the sourse string unchanged.
            </remarks>
            </summary>
            <param name="source">The source.</param>
            <param name="maxSize">Max size of the returned string. If maxSize is negative, return string.Empty</param>
            <param name="useDotDotDot">use trailing ... (triple dot) or not</param>
            <returns>shorten string</returns>
        </member>
        <member name="M:EPiServer.Commerce.Extensions.StringExtensions.ContainsIgnoreCase(System.String,System.String)">
            <summary>
            Determines whether the specified source contains value incasesensitive.
            </summary>
            <param name="source">The source.</param>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified source contains value; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Argument Null Exception when soure is null or value is null</exception>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.VariantContainerExtensions">
            <summary>
            Gets the variant relations for a <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IVariantContainer"/> implementation.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.VariantContainerExtensions.GetVariantRelations(EPiServer.Commerce.Catalog.ContentTypes.IVariantContainer)">
            <summary>
            Gets the variant relations
            </summary>
            <param name="variantContainer">The relating implementation</param>
            <returns>Collection of relations.</returns>
            <remarks>This method uses the <see cref="T:EPiServer.ServiceLocation.ServiceLocator"/> to resolve the <see cref="T:EPiServer.Commerce.Catalog.Linking.LinksRepository"/>, which will be send to the method that contains the relations getter</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.VariantContainerExtensions.GetVariantRelations(EPiServer.Commerce.Catalog.ContentTypes.IVariantContainer,EPiServer.Commerce.Catalog.Linking.ILinksRepository)">
            <summary>
            Gets the variant relations
            </summary>
            <param name="variantContainer">The relating implementation</param>
            <param name="linksRepository">The links repository.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.LoadEntry(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Gets the <see cref="T:Mediachase.Commerce.Catalog.Objects.Entry"/> for the <paramref name="content"></paramref> with <see cref="F:Mediachase.Commerce.Catalog.Managers.CatalogEntryResponseGroup.ResponseGroup.CatalogEntryInfo"/>.
            </summary>
            <param name="content">The content</param>
            <returns>The <see cref="T:Mediachase.Commerce.Catalog.Objects.Entry"/> representing the same data as the <paramref name="content"></paramref>.</returns>
            <remarks><see cref="T:Mediachase.Commerce.Catalog.ICatalogSystem"/> will be used to load the entry. This might result in database round trips.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.LoadEntry(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,Mediachase.Commerce.Catalog.Managers.CatalogEntryResponseGroup.ResponseGroup)">
            <summary>
            Gets the <see cref="T:Mediachase.Commerce.Catalog.Objects.Entry"/> for the <paramref name="content"></paramref>.
            </summary>
            <param name="content">The content</param>
            <param name="responseGroup">The response group, that will be used when loading hte catalog node.</param>
            <returns>The <see cref="T:Mediachase.Commerce.Catalog.Objects.Entry"/> representing the same data as the <paramref name="content"></paramref>.</returns>
            <remarks><see cref="T:Mediachase.Commerce.Catalog.ICatalogSystem"/> will be used to load the entry. This might result in database round trips.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.LoadEntry(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,Mediachase.Commerce.Catalog.Managers.CatalogEntryResponseGroup.ResponseGroup,Mediachase.Commerce.Catalog.ICatalogSystem)">
            <summary>
            Gets the <see cref="T:Mediachase.Commerce.Catalog.Objects.Entry"/> for the <paramref name="content"></paramref>.
            </summary>
            <param name="content">The content</param>
            <param name="responseGroup">The response group, that will be used when loading hte catalog node.</param>
            <param name="catalogSystem">The catalog system.</param>
            <returns>The <see cref="T:Mediachase.Commerce.Catalog.Objects.Entry"/> representing the same data as the <paramref name="content"></paramref>.</returns>
            <remarks><see cref="T:Mediachase.Commerce.Catalog.ICatalogSystem"/> will be used to load the entry. This might result in database round trips.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.IsAvailableInCurrentMarket(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Determines whether the specific content is available in the current market
            </summary>
            <param name="content">The content.</param>
            <returns>
              <c>true</c> if [is available in market] [the specified entry]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.IsAvailableInCurrentMarket(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,Mediachase.Commerce.ICurrentMarket)">
            <summary>
            Determines whether the specific content is available in the current market
            </summary>
            <param name="content">The content.</param>
            <param name="currentMarketService">The current market service.</param>
            <returns>
              <c>true</c> if [is available in market] [the specified entry]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.IsAvailableInMarket(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,Mediachase.Commerce.MarketId)">
            <summary>
            Determines whether the specific content is available in market
            </summary>
            <param name="content">The content.</param>
            <param name="currentMarketId">The current market id.</param>
            <returns>
              <c>true</c> if [is available in market] [the specified entry]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetCategories(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Gets the categories to which the entry is linked.
            </summary>
            <param name="entry">The entry.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference"/>s of the parent categories.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetCategories(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets the categories to which the entry is linked.
            </summary>
            <param name="entry">The entry.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference"/>s of the parent categories.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetParentBundles(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Gets the bundles containing an entry.
            </summary>
            <param name="entry">The entry.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference"/>s of the bundles containing the entry.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetParentBundles(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets the bundles containing an entry.
            </summary>
            <param name="entry">The entry.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference"/>s of the bundles containing the entry.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetParentPackages(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Gets the packages containing an entry.
            </summary>
            <param name="entryContent">The entry.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference"/>s of the packages containing the entry.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetParentPackages(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets the packages containing an entry.
            </summary>
            <param name="entry">The entry.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference"/>s of the packages containing the entry.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetParentProducts(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Gets the parent products of an entry.
            </summary>
            <param name="entry">The entry.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference"/>s of the parent products.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetParentProducts(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets the parent products of an entry.
            </summary>
            <param name="entry">The entry.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference"/>s of the parent products.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetParentEntries(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Gets the parent entries (products, bundles and packages) containing an entry.
            </summary>
            <param name="entry">The entry.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference"/>s of the parent entries.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetParentEntries(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets the parent entries (products, bundles and packages) containing an entry.
            </summary>
            <param name="entry">The entry.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference"/>s of the parent entries.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetRelatedEntries(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Gets the entries that have been associated with the current entry (e.g. accessories,
            cross-sell, up-sell).
            </summary>
            <param name="entry">The entry to get related entries for.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetRelatedEntries(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,System.String)">
            <summary>
            Gets the entries that have been associated with the current entry (e.g. accessories,
            cross-sell, up-sell).
            </summary>
            <param name="entry">The entry to get related entries for.</param>
            <param name="groupName">Association group name (see <see cref="P:EPiServer.Commerce.Catalog.Linking.Association.Group"/>) to filter by,
            or null to not filter by group (include associations of any group).</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetRelatedEntries(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,System.String,System.String)">
            <summary>
            Gets the entries that have been associated with the current entry (e.g. accessories,
            cross-sell, up-sell).
            </summary>
            <param name="entry">The entry to get related entries for.</param>
            <param name="groupName">Association group name (see <see cref="P:EPiServer.Commerce.Catalog.Linking.Association.Group"/>) to filter by,
            or null to not filter by group (include associations of any group).</param>
            <param name="typeId">Association type id (see <see cref="P:EPiServer.Commerce.Catalog.Linking.Association.Group"/>) to filter by,
            or null to not filter by type (include associations of any type).</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.EntryContentBaseExtensions.GetRelatedEntries(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase,System.String,System.String,EPiServer.Commerce.Catalog.Linking.IAssociationRepository)">
            <summary>
            Gets the entries that have been associated with the current entry (e.g. accessories,
            cross-sell, up-sell).
            </summary>
            <param name="entry">The entry to get related entries for.</param>
            <param name="groupName">Association group name (see <see cref="P:EPiServer.Commerce.Catalog.Linking.Association.Group"/>) to filter by,
            or null to not filter by group (include associations of any group).</param>
            <param name="typeId">Association type id (see <see cref="P:EPiServer.Commerce.Catalog.Linking.Association.Group"/>) to filter by,
            or null to not filter by type (include associations of any type).</param>
            <param name="associationRepository">The association repository.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Extensions.DateTimeExtensions">
            <summary>
            Extension methods for <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Extensions.DateTimeExtensions.FitToSqlDateTimeRange(System.DateTime)">
            <summary>
            Truncates a datetime instance so it fits inside the range representable by
            <see cref="T:System.Data.SqlTypes.SqlDateTime"/>
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>The truncated date time.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Extensions.DateTimeExtensions.FormatTimeSince(System.DateTime)">
            <summary>
            Displays the time since an object was sent
            </summary>
            <param name="dateTime">The send time of the object</param>
            <returns>If time is within the current day, the time will be returned as number of hours and minutes,
            else the time will be returned as a short date string</returns>
        </member>
        <member name="M:EPiServer.Commerce.Extensions.DateTimeExtensions.FormatTimeSince(System.DateTime,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Displays the time since an object was sent
            </summary>
            <param name="dateTime">The send time of the object</param>
            <param name="localizationService">The localization service.</param>
            <returns>If time is within the current day, the time will be returned as number of hours and minutes,
            else the time will be returned as a short date string</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContentExtensions">
            <summary>
            Extension methods for <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContent"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.NodeContentExtensions.LoadNode(EPiServer.Commerce.Catalog.ContentTypes.NodeContent)">
            <summary>
            Gets the <see cref="T:Mediachase.Commerce.Catalog.Objects.CatalogNode"/> for the <paramref name="content"></paramref> with <see cref="F:Mediachase.Commerce.Catalog.Managers.CatalogNodeResponseGroup.ResponseGroup.CatalogNodeFull"/>.
            </summary>
            <param name="content">The content</param>
            <returns>The <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContent"/> representing the same data as the instance.</returns>
            <remarks><see cref="T:Mediachase.Commerce.Catalog.ICatalogSystem"/> will be used to load the node. This might result in database round trips.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.NodeContentExtensions.LoadNode(EPiServer.Commerce.Catalog.ContentTypes.NodeContent,Mediachase.Commerce.Catalog.Managers.CatalogNodeResponseGroup.ResponseGroup)">
            <summary>
            Gets the <see cref="T:Mediachase.Commerce.Catalog.Objects.CatalogNode"/> for the <paramref name="content"></paramref>.
            </summary>
            <param name="content">The content</param>
            <param name="responseGroup">The response group, that will be used when loading hte catalog node.</param>
            <returns>The <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContent"/> representing the same data as the instance.</returns>
            <remarks><see cref="T:Mediachase.Commerce.Catalog.ICatalogSystem"/> will be used to load the node. This might result in database round trips.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.NodeContentExtensions.LoadNode(EPiServer.Commerce.Catalog.ContentTypes.NodeContent,Mediachase.Commerce.Catalog.Managers.CatalogNodeResponseGroup.ResponseGroup,Mediachase.Commerce.Catalog.ICatalogSystem)">
            <summary>
            Gets the <see cref="T:Mediachase.Commerce.Catalog.Objects.CatalogNode"/> for the <paramref name="content"></paramref>.
            </summary>
            <param name="content">The content</param>
            <param name="responseGroup">The response group, that will be used when loading hte catalog node.</param>
            <param name="catalogSystem">The catalog system</param>
            <returns>The <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.NodeContent"/> representing the same data as the instance.</returns>
            <remarks><see cref="T:Mediachase.Commerce.Catalog.ICatalogSystem"/> will be used to load the node. This might result in database round trips.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.NodeContentExtensions.GetCategories(EPiServer.Commerce.Catalog.ContentTypes.NodeContent)">
            <summary>
            Gets the categories to which the category is linked (parent categories).
            N.B. This does not include the main parent category (given by the ParentLink of the content).
            </summary>
            <param name="node">The node.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference"/>s of the parent categories.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.NodeContentExtensions.GetCategories(EPiServer.Commerce.Catalog.ContentTypes.NodeContent,EPiServer.Commerce.Catalog.Linking.IRelationRepository)">
            <summary>
            Gets the categories to which the category is linked (parent categories).
            N.B. This does not include the main parent category (given by the ParentLink of the content).
            </summary>
            <param name="node">The node.</param>
            <param name="relationRepository">The relation repository.</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference"/>s of the parent categories.
            </returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions">
            <summary>
            Gets prices for a <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/> implementation.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetDefaultPrice(EPiServer.Commerce.Catalog.ContentTypes.IPricing)">
            <summary>
            Gets the default price from the price service.
            </summary>
            <param name="pricing">The entry implementing <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/>.</param>
            <returns>Price definition for the catalog entry</returns>
            <remarks>This method will get the currency for the current user.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetDefaultPrice(EPiServer.Commerce.Catalog.ContentTypes.IPricing,EPiServer.Commerce.Catalog.ReadOnlyPricingLoader)">
            <summary>
            Gets the default price from the price service.
            </summary>
            <param name="pricing">The entry implementing <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/>.</param>
            <param name="pricingLoader">The pricing loader to use to receive the price.</param>
            <returns>Price definition for the catalog entry</returns>
            <remarks>This method will get the currency for the current user.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetDefaultPrice(EPiServer.Commerce.Catalog.ContentTypes.IPricing,Mediachase.Commerce.Currency)">
            <summary>
            Gets the default price from the price service.
            </summary>
            <param name="pricing">The entry implementing <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/>.</param>
            <param name="currency">The currency to use when receiving the price.</param>
            <returns>Price definition for the catalog entry</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetDefaultPrice(EPiServer.Commerce.Catalog.ContentTypes.IPricing,Mediachase.Commerce.Currency,EPiServer.Commerce.Catalog.ReadOnlyPricingLoader)">
            <summary>
            Gets the default price from the price service.
            </summary>
            <param name="pricing">The entry implementing <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/>.</param>
            <param name="currency">The currency to use when receiving the price.</param>
            <param name="pricingLoader">The pricing loader to use to receive the price.</param>
            <returns>Price definition for the catalog entry</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetCustomerPrices(EPiServer.Commerce.Catalog.ContentTypes.IPricing)">
            <summary>
            Gets the prices for the current user.
            </summary>
            <param name="pricing">The entry implementing <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/>.</param>
            <returns>Price definition for the catalog entry</returns>
            <remarks>This method will get the currency for the current user on current market.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetCustomerPrices(EPiServer.Commerce.Catalog.ContentTypes.IPricing,EPiServer.Commerce.Catalog.ReadOnlyPricingLoader)">
            <summary>
            Gets the prices for the current user.
            </summary>
            <param name="pricing">The entry implementing <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/>.</param>
            <param name="pricingLoader">The pricing loader to use to receive the prices.</param>
            <returns>Price definition for the catalog entry</returns>
            <remarks>This method will get the currency for the current user on current market.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetCustomerPrices(EPiServer.Commerce.Catalog.ContentTypes.IPricing,Mediachase.Commerce.Currency,System.Nullable{System.Decimal},System.Nullable{System.Boolean})">
            <summary>
            Gets the prices for the current user.
            </summary>
            <param name="pricing">The entry implementing <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/>.</param>
            <param name="currency">The currency to use when receiving the price. Use Currency.Empty to get the current currency for the user.</param>
            <param name="quantity">The quantity to filter on. If null, prices for all quantities will be returned.</param>
            <param name="returnCustomerPricing"><c>True</c> if customer pricing should be returned. If null, the parameter will be true if user has logged in to the site.</param>
            <returns>Price definition for the catalog entry</returns>
            <remarks>This method will use the current market when receiving the prices.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetCustomerPrices(EPiServer.Commerce.Catalog.ContentTypes.IPricing,Mediachase.Commerce.Currency,System.Nullable{System.Decimal},System.Nullable{System.Boolean},EPiServer.Commerce.Catalog.ReadOnlyPricingLoader)">
            <summary>
            Gets the prices for the current user.
            </summary>
            <param name="pricing">The entry implementing <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IPricing"/>.</param>
            <param name="currency">The currency to use when receiving the price. Use Currency.Empty to get the current currency for the user.</param>
            <param name="quantity">The quantity to filter on. If null, prices for all quantities will be returned.</param>
            <param name="returnCustomerPricing"><c>True</c> if customer pricing should be returned. If null, the parameter will be true if user has logged in to the site.</param>
            <param name="pricingLoader">The pricing loader to use to receive the prices.</param>
            <returns>Price definition for the catalog entry</returns>
            <remarks>This method will use the current market when receiving the prices.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetPrices(EPiServer.Commerce.Catalog.ContentTypes.IPricing)">
            <summary>
            Gets the prices for all markets for all customers.
            </summary>
            <param name="pricing">The pricing implementation</param>
            <returns>Collection of prices.</returns>
            <remarks>This method uses the <see cref="T:EPiServer.ServiceLocation.ServiceLocator"/> to resolve the <see cref="T:EPiServer.Commerce.Catalog.PricingLoader"/>, which will be send to the method that contains an pricing loader.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetPrices(EPiServer.Commerce.Catalog.ContentTypes.IPricing,Mediachase.Commerce.MarketId,Mediachase.Commerce.Pricing.CustomerPricing)">
            <summary>
            Gets the prices
            </summary>
            <param name="pricing">The pricing implementation</param>
            <param name="marketId">The market to get prices for.</param>
            <param name="customerPricing">The customer pricing type to fetch prices for.</param>
            <returns>Collection of prices.</returns>
            <remarks>This method uses the <see cref="T:EPiServer.ServiceLocation.ServiceLocator"/> to resolve the <see cref="T:EPiServer.Commerce.Catalog.PricingLoader"/>, which will be send to the method that contains an pricing loader.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetPrices(EPiServer.Commerce.Catalog.ContentTypes.IPricing,EPiServer.Commerce.Catalog.ReadOnlyPricingLoader)">
            <summary>
            Gets the prices
            </summary>
            <param name="pricing">The pricing implementation</param>
            <param name="pricingLoader">The pricing loader.</param>
            <returns>Collection of prices.</returns>
            <remarks>This method will not filter on <see cref="T:Mediachase.Commerce.MarketId"/> or <see cref="T:Mediachase.Commerce.Pricing.CustomerPricing"/>.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetPrices(EPiServer.Commerce.Catalog.ContentTypes.IPricing,EPiServer.Commerce.Catalog.ReadOnlyPricingLoader,Mediachase.Commerce.MarketId,Mediachase.Commerce.Pricing.CustomerPricing)">
            <summary>
            Gets the prices
            </summary>
            <param name="pricing">The pricing implementation</param>
            <param name="pricingLoader">The pricing loader.</param>
            <param name="marketId">The market to get prices for.</param>
            <param name="customerPricing">The customer pricing type to fetch prices for.</param>
            <returns>Collection of prices.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.PricingExtensions.GetPrices(EPiServer.Commerce.Catalog.ContentTypes.IPricing,EPiServer.Commerce.Catalog.ReadOnlyPricingLoader,Mediachase.Commerce.MarketId,System.Collections.Generic.IEnumerable{Mediachase.Commerce.Pricing.CustomerPricing})">
            <summary>
            Gets the prices
            </summary>
            <param name="pricing">The pricing implementation</param>
            <param name="pricingLoader">The pricing loader.</param>
            <param name="marketId">The market to get prices for.</param>
            <param name="customerPricings">List of the customer pricing types to fetch prices for.</param>
            <returns>Collection of prices.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.CategorizableExtensions">
            <summary>
            Gets the relations for a <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.ICategorizable"/> implementation.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.CategorizableExtensions.GetNodeRelations(EPiServer.Commerce.Catalog.ContentTypes.ICategorizable)">
            <summary>
            Gets the node relations
            </summary>
            <param name="categorizable">The relating implementation</param>
            <returns>Collection of relations.</returns>
            <remarks>This method uses the <see cref="T:EPiServer.ServiceLocation.ServiceLocator"/> to resolve the <see cref="T:EPiServer.Commerce.Catalog.Linking.LinksRepository"/>, which will be send to the method that contains the relations getter</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.CategorizableExtensions.GetNodeRelations(EPiServer.Commerce.Catalog.ContentTypes.ICategorizable,EPiServer.Commerce.Catalog.Linking.ILinksRepository)">
            <summary>
            Gets the node relations
            </summary>
            <param name="categorizable">The relating implementation</param>
            <param name="linksRepository">The links repository.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Catalog.ContentTypes.StockPlacementExtensions">
            <summary>
            Gets inventories for a <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement"/> implementation.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.StockPlacementExtensions.GetStockPlacement(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement)">
            <summary>
            Gets the inventories
            </summary>
            <param name="stockPlacement">The inventory implementation</param>
            <returns>Collection of prices.</returns>
            <remarks>This method uses the <see cref="T:EPiServer.ServiceLocation.ServiceLocator"/> to resolve the <see cref="T:EPiServer.Commerce.Catalog.InventoryLoader"/>, which will be send to the method that contains an inventory loader.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Catalog.ContentTypes.StockPlacementExtensions.GetStockPlacement(EPiServer.Commerce.Catalog.ContentTypes.IStockPlacement,EPiServer.Commerce.Catalog.InventoryLoader)">
            <summary>
            Gets the inventories
            </summary>
            <param name="stockPlacement">The inventory implementation</param>
            <param name="inventoryLoader">The inventory loader.</param>
            <returns>Collection of prices.</returns>
        </member>
        <member name="T:EPiServer.Business.Commerce.HttpModules.ProfileModule">
            <summary>
            ProfileModule class
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.HttpModules.ProfileModule.WebRequestTimeout">
            <summary>
            Web request timeout, when connecting to Commerce Manager site to generate SSO token.
            We need this timeout since at the first request, the Commerce Manager site could be in
            initializing state.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.HttpModules.ProfileModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.HttpModules.ProfileModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"/> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.HttpModules.ProfileModule.Application_AuthenticateRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the AuthenticateRequest event of the Application control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.HttpModules.ProfileModule.Profile_MigrateAnonymous(System.Object,System.Web.Profile.ProfileMigrateEventArgs)">
            <summary>
            Handles the MigrateAnonymous event of the Profile control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="pe">The <see cref="T:System.Web.Profile.ProfileMigrateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.HttpModules.ProfileModule.MigrateCart(System.String,System.Guid,System.String,Mediachase.Commerce.IMarket)">
            <summary>
            Migrate cart (for a specific <paramref name="market"/>) from anonymous user to logged user.
            </summary>
            <param name="cartName">The name of the cart (Used to be the default name).</param>
            <param name="contactId">Id of current contact.</param>
            <param name="anonymousId">Anonymous identifier for the anonymous profile from which to migrate.</param>
            <param name="market">A market to get cart from. User might have carts in multiple market.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.HttpModules.ProfileModule.Profile_ProfileAutoSaving(System.Object,System.Web.Profile.ProfileAutoSaveEventArgs)">
            <summary>
            Handles the ProfileAutoSaving event of the Profile control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Web.Profile.ProfileAutoSaveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.HttpModules.ProfileModule.GetCurrentMarket">
            <summary>
            Gets the current market.
            </summary>
            <value>The current market.</value>
        </member>
        <member name="T:EPiServer.Commerce.Initialization.InitializationModule">
            <summary>
            Initialization module to handle the initialization of Commerce.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Initialization.InitializationModule.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
            <summary>
            Initializes Commerce using the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.CampaignInfoExtractor">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Helper class to work with campaign item info
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.CampaignInfoExtractor.GetEffectiveValidFrom(EPiServer.Commerce.Marketing.PromotionData,EPiServer.Core.CampaignData)">
            <summary>
            Gets the effective valid from.
            </summary>
            <param name="promotion">The promotion.</param>
            <param name="parentCampaign">The parent campaign.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.CampaignInfoExtractor.GetEffectiveValidUntil(EPiServer.Commerce.Marketing.PromotionData,EPiServer.Core.CampaignData)">
            <summary>
            Gets the effective valid until.
            </summary>
            <param name="promotion">The promotion.</param>
            <param name="parentCampaign">The parent campaign.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.CampaignInfoExtractor.GetEffectiveStatus(EPiServer.Commerce.Marketing.PromotionData,EPiServer.Core.CampaignData)">
            <summary>
            Gets the effective status.
            </summary>
            <param name="promotion">The promotion.</param>
            <param name="parentCampaign">The parent campaign.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.CampaignInfoExtractor.GetStatusFromDates(System.DateTime,System.DateTime)">
            <summary>
            Gets the status from valid dates.
            </summary>
            <param name="validFrom">The valid from.</param>
            <param name="validUntil">The valid until.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.CampaignItemStatus">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Status values for campaign items
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.CampaignItemStatus.NotSet">
            <summary>
            Default value when not set
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.CampaignItemStatus.Active">
            <summary>
            Item active
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.CampaignItemStatus.Pending">
            <summary>
            Item scheduled
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.CampaignItemStatus.Expired">
            <summary>
            Item expired
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.CampaignItemStatus.Inactive">
            <summary>
            Item inactive (includes suspended, deleted or archived items)
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.EntryPromotion">
            <summary>
                NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
                Represents a content based entry promotion item.
            </summary>
            <example>
                <code source="../CodeSamples/EPiServer.Commerce/Marketing/SingleItemPromotionEntrySample.cs" region="SingleItemPromotionEntrySample" lang="cs" />
            </example>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionData">
            <summary>
                NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
                Represents a content based promotion item.
            </summary>
            <example>
                <code source="../CodeSamples/EPiServer.Commerce/Marketing/SingleItemPromotionEntrySample.cs" region="SingleItemPromotionEntrySample" lang="cs" />
            </example>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionData.ValidFrom">
            <summary>
                Gets or sets the time when the promotion starts.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionData.ValidUntil">
            <summary>
                Gets or sets the time when the promotion ends.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionData.IsActive">
            <summary>
                Gets or sets the status of the promotion.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.FulfillmentStatus">
            <summary>
                NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
                The fulfilment level of a promotion. Only promotions with the status Fullfilled will have their rewards applied.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.FulfillmentStatus.NotFulfilled">
            <summary>
                No progress made.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.FulfillmentStatus.SomewhatFulfilled">
            <summary>
                Some progress made.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.FulfillmentStatus.AlmostFulfilled">
            <summary>
                The promotion is almost fulfilled.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Marketing.FulfillmentStatus.Fulfilled">
            <summary>
                The promotion is fulfilled and the reward should be applied.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.IPromotionProcessor">
            <summary>
                NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
                Responsible for evaluation if a promotions is valid for a specific <see cref="T:Mediachase.Commerce.Orders.IOrderGroup"/>
            </summary>
            <example>
                <code source="../CodeSamples/EPiServer.Commerce/Marketing/SingelItemPromotionProcessorSample.cs" region="SingelItemPromotionProcessorSample" lang="cs"/>
            </example>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IPromotionProcessor.Evaluate(Mediachase.Commerce.Orders.IOrderGroup,EPiServer.Commerce.Marketing.PromotionData)">
            <summary>
                Evaluates a promotion.
            </summary>
            <param name="orderGroup">The order group</param>
            <param name="promotionData">The promotion model.</param>
            <returns>The reward for a promotion.</returns>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.IPromotionProcessor.PromotionDataType">
            <summary>
                The type this processor can handle.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.IPromotionEngine">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Evaluates the condition on all active promotions, and gives award to specific orders when the conditions are fullfilled.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IPromotionEngine.Run(Mediachase.Commerce.Orders.IOrderGroup)">
            <summary>
            Checks the condition for all active promotions, and gives awards for the promotions where the condition has been fullfilled.
            </summary>
            <param name="orderGroup">The order group, which will receive rewards.</param>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.IPromotionResult">
            <summary>
                NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
                The result of a promotion evaluation.
            </summary>
            <example>
                <code source="../CodeSamples/EPiServer.Commerce/Marketing/SingleItemPromotionResultSample.cs" region="SingleItemPromotionResultSample" lang="cs" />
            </example>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.IPromotionResult.ApplyReward">
            <summary>
                Applies the reward.
            </summary>
            <returns>Information about the applied rewards</returns>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.IPromotionResult.Description">
            <summary>
                A human readable description of this reward.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.IPromotionResult.Status">
            <summary>
                How fulfilled this promotion is.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.OrderPromotion">
            <summary>
                NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
                Represents a content based order promotion item.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionDateTimeManager">
            <summary>
                NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
                Called when promotions are getting saved.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionDateTimeManager.#ctor(EPiServer.IContentLoader,EPiServer.Core.IContentEvents)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Marketing.PromotionDateTimeManager"/>
            </summary>
            <param name="contentLoader">The promotion loader.</param>
            <param name="contentEvents">The content events.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionDateTimeManager.Register">
            <summary>
            Registrates content events
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionDateTimeManager.Unregister">
            <summary>
            Unregistrates content events.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionDateTimeManager.ManagePromotionDates(System.Object,EPiServer.ContentEventArgs)">
            <summary>
            Manage promotion dates for promotions.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionProcessorBase`1">
            <summary>
                NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
                Responsible for evaluation if a promotions is valid for a specific <see cref="T:Mediachase.Commerce.Orders.IOrderGroup"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorBase`1.Evaluate(Mediachase.Commerce.Orders.IOrderGroup,`0)">
            <summary>
                Evaluates a promotion.
            </summary>
            <param name="orderGroup">The order group</param>
            <param name="promotionData">The promotion model.</param>
            <returns>The reward for a promotion.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorBase`1.Evaluate(Mediachase.Commerce.Orders.IOrderGroup,EPiServer.Commerce.Marketing.PromotionData)">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Marketing.PromotionProcessorBase`1.PromotionDataType">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionProcessorResolver">
            <summary>
                NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
                Finds the supported <see cref="T:EPiServer.Commerce.Marketing.IPromotionProcessor"/> type for a <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/>, and returns an instance of that type.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorResolver.#ctor(EPiServer.Framework.TypeScanner.ITypeScannerLookup,EPiServer.ServiceLocation.IServiceLocator)">
            <summary>
            Creates an instance of the <see cref="T:EPiServer.Commerce.Marketing.PromotionProcessorResolver"/> class.
            </summary>
            <param name="typeScannerLookup">The type scanner.</param>
            <param name="serviceLocator">The Service locator.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorResolver.ValidatePromotionProcessors">
            <summary>
            Validates the registraged promotion processors.
            </summary>
            <exception cref="T:System.InvalidOperationException">Several <see cref="T:EPiServer.Commerce.Marketing.IPromotionProcessor"/> supports the promotion model.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorResolver.ResolveForPromotion(EPiServer.Commerce.Marketing.PromotionData)">
            <summary>
            Finds the supported <see cref="T:EPiServer.Commerce.Marketing.IPromotionProcessor"/> type for the <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/>, and returns an instance of that type.
            </summary>
            <param name="promotionModel">The promotion model.</param>
            <returns>Supported <c><see cref="T:EPiServer.Commerce.Marketing.IPromotionProcessor"/></c> if exist, otherwise <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">promotion model is null.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorResolver.ResolvePromotionProcessor(System.Type)">
            <summary>
            Gets a <see cref="T:EPiServer.Commerce.Marketing.IPromotionProcessor"/> instance for a type if the type implements <see cref="T:EPiServer.Commerce.Marketing.IPromotionProcessor"/>.
            </summary>
            <param name="promotionProcessorType">The type representing the <see cref="T:EPiServer.Commerce.Marketing.IPromotionProcessor"/></param>
            <returns><c><see cref="T:EPiServer.Commerce.Marketing.IPromotionProcessor"/></c> if the type is a promotion processor type.</returns>
            <exception cref="T:System.InvalidOperationException">The type is not a promotion processor type.</exception>
            <exception cref="T:System.ArgumentNullException">The promotion processor type is null.</exception>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionProcessorResolver.GetPromotionProcessorTypesWithModelType">
            <summary>
            List all registered <see cref="T:EPiServer.Commerce.Marketing.IPromotionProcessor"/> types with it's promotion data.
            </summary>
            <returns>A list of <see cref="T:EPiServer.Commerce.Marketing.IPromotionProcessor"/> types with it's promotion data</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.PromotionEngine">
            <summary>
                NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
                Evaluates the condition on all active promotions, and gives award to specific orders when the conditions are fullfilled.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionEngine.#ctor(EPiServer.Commerce.Marketing.PromotionProcessorResolver,EPiServer.IContentLoader,EPiServer.Commerce.Marketing.CampaignInfoExtractor)">
            <summary>
                Initlizes a new instance of <see cref="T:EPiServer.Commerce.Marketing.PromotionEngine"/>
            </summary>
            <param name="promotionProcessorResolver">The resolver used to find the correct processor for a promotion.</param>
            <param name="contentLoader">The content loader used to find the promotions.</param>
            <param name="campaignInfoExtractor">Used to extract informations about campaigns and promotions.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionEngine.Run(Mediachase.Commerce.Orders.IOrderGroup)">
            <summary>
                Checks the condition for all active promotions, and gives awards for the promotions where the condition has been fullfilled.
            </summary>
            <param name="orderGroup">The order group, which will receive rewards.</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionEngine.GetPromotions">
            <summary>
                Gets all promotions.
            </summary>
            <returns>All <see cref="T:EPiServer.Commerce.Marketing.PromotionData"/> for all campaings.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.PromotionEngine.GetCampaignFolderRoot">
            <summary>
                Get the link to the campaing folder root.
            </summary>
            <returns>The link to the campaign folder root.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.BuyNFromCategoryGetCheapestFreeData">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            This promotion type should be used when there are several entries belonging to the same category and the cheapest entry will be free of charge. 
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.BuyNFromCategoryGetCheapestFreeData.Category">
            <summary>
            The category for which the promotion is applied.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.BuyNFromCategoryGetCheapestFreeData.Threshold">
            <summary>
            The promotion will apply if the number of entries are equal or higher than the threshold value.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.BuyNFromCategoryGetCheapestFreeProcessor">
            <summary>
                NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by
                its associated normal version.
                The processor responsible for evaluating if a promotion of type <see cref="T:EPiServer.Commerce.Marketing.Promotions.BuyNFromCategoryGetCheapestFreeData"/> should
                apply a reward to an order group
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyNFromCategoryGetCheapestFreeProcessor.#ctor(EPiServer.IContentLoader)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Marketing.Promotions.BuyNFromCategoryGetCheapestFreeProcessor"/>
            </summary>
            <param name="contentLoader">the content loader service</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyNFromCategoryGetCheapestFreeProcessor.Evaluate(Mediachase.Commerce.Orders.IOrderGroup,EPiServer.Commerce.Marketing.Promotions.BuyNFromCategoryGetCheapestFreeData)">
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <inheritdoc/>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.Promotions.BuyNFromCategoryGetCheapestFreeResult">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            The result of the promotion evaluation.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyNFromCategoryGetCheapestFreeResult.#ctor(EPiServer.Commerce.Marketing.FulfillmentStatus,System.String)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Marketing.Promotions.BuyNFromCategoryGetCheapestFreeResult"/>
            </summary>
            <param name="status">how fulfilled the promotion is</param>
            <param name="description">the human readable description of the reward</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyNFromCategoryGetCheapestFreeResult.#ctor(EPiServer.Commerce.Marketing.FulfillmentStatus,System.String,EPiServer.Core.ContentReference,Mediachase.Commerce.Orders.ILineItem)">
            <summary>
            Creates an instance of <see cref="T:EPiServer.Commerce.Marketing.Promotions.BuyNFromCategoryGetCheapestFreeResult"/>
            </summary>
            <param name="status">how fulfilled the promotion is</param>
            <param name="description">the human readable description of the reward</param>
            <param name="contentReference">the content reference of the affected item</param>
            <param name="affectedItem">the item on which the reward will be applied</param>
        </member>
        <member name="M:EPiServer.Commerce.Marketing.Promotions.BuyNFromCategoryGetCheapestFreeResult.ApplyReward">
            <inheritdoc/>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.BuyNFromCategoryGetCheapestFreeResult.AffectedItem">
            <summary>
            The item on which the reward will be applied
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.BuyNFromCategoryGetCheapestFreeResult.Description">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Commerce.Marketing.Promotions.BuyNFromCategoryGetCheapestFreeResult.Status">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Marketing.SalesCampaign">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Represents a campaign in Commerce, i.e. a campaign which has related promotions (discounts)
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Marketing.SalesCampaign.RevenueGoal">
            <summary>
            Gets or sets the revenue goal.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Marketing.ShippingPromotion">
            <summary>
                NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
                Represents a content based shipping promotion item.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.MetaDataEventManager">
            <summary>
            Represents the event manager, which listen for MetaData updated event from Commerce Manager site, and invoke the appropriated event in front-end site context.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.MetaDataEventManager.#cctor">
            <summary>
            Registers handlers for the updated events that will call any handlers registered on the obsolete events.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.MetaDataEventManager.RaiseObsoleteEvent(System.EventHandler{EPiServer.Commerce.MetaDataUpdateEventArgs},System.Object,Mediachase.MetaDataPlus.MetaDataChangeEventArgs)">
            <summary>
            Raises obsolete event if we have any handlers registered on it.
            </summary>
            <param name="handler">Obsoleted event handler.</param>
            <param name="sender">Event sender object.</param>
            <param name="args">Meta data change event arguments.</param>
        </member>
        <member name="M:EPiServer.Commerce.MetaDataEventManager.AddEvent">
            <summary>
            Register event handler
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.MetaDataEventManager.RaiseEvent(EPiServer.Commerce.MetaDataUpdateEventArgs)">
            <summary>
            Raise event when product is updated
            </summary>
            <param name="e"> Event arguments</param>
        </member>
        <member name="M:EPiServer.Commerce.MetaDataEventManager.Serialize(System.EventArgs)">
            <summary>
            Serialize commerce update event arguments
            </summary>
            <param name="e"> Event arguments</param>
            <returns></returns>           
        </member>
        <member name="M:EPiServer.Commerce.MetaDataEventManager.DeSerialize(System.Byte[])">
            <summary>
            DeSerialize event arguments
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.MetaDataEventManager.IsSelfRaised(EPiServer.Events.EventNotificationEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.MetaDataEventManager.MetaDataUpdatedHandler(System.Object,EPiServer.Events.EventNotificationEventArgs)">
            <summary>
            Handler to call create event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:EPiServer.Commerce.MetaDataEventManager.MetaFieldLinked">
            <summary>
            Occurs when a relation is about to be updated.
            </summary>
        </member>
        <member name="E:EPiServer.Commerce.MetaDataEventManager.MetaFieldUnlinked">
            <summary>
            Occurs when a relation is about to be updated.
            </summary>
        </member>
        <member name="E:EPiServer.Commerce.MetaDataEventManager.MetaFieldUpdated">
            <summary>
            Occurs when a meta field has been updated.
            </summary>
        </member>
        <member name="E:EPiServer.Commerce.MetaDataEventManager.MetaFieldDataLinked">
            <summary>
            Occurs when a relation is about to be updated.
            </summary>
        </member>
        <member name="E:EPiServer.Commerce.MetaDataEventManager.MetaFieldDataUnlinked">
            <summary>
            Occurs when a relation is about to be updated.
            </summary>
        </member>
        <member name="E:EPiServer.Commerce.MetaDataEventManager.MetaFieldDataUpdated">
            <summary>
            Occurs when a meta field has been updated.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.MetaDataUpdateEventArgs">
            <summary>
            Events for metadata update
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.MetaDataUpdateEventArgs.EventType">
            <summary>
            Event type
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.MetaDataUpdateEventArgs.MetaClassName">
            <summary>
            Metaclass name
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.MetaDataUpdateEventArgs.MetaFieldName">
            <summary>
            Metafield name
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Order.OrderGroupProvider`1">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Base provider for <see cref="T:Mediachase.Commerce.Orders.OrderGroup"/>
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Order.IOrderProvider">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Provider for an <see cref="T:Mediachase.Commerce.Orders.IOrderGroup"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderProvider.Load(System.Int32)">
            <summary>
            Loads the order
            </summary>
            <param name="orderGroupId">The order group id</param>
            <returns>The order.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderProvider.Load(System.Guid)">
            <summary>
            Loads the order
            </summary>
            <param name="customerId">The customer guid</param>
            <returns>The order.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderProvider.Save(Mediachase.Commerce.Orders.IOrderGroup)">
            <summary>
            Persist the order group.
            </summary>
            <param name="orderGroup">The order group.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderProvider.SaveAs``1(Mediachase.Commerce.Orders.IOrderGroup)">
            <summary>
            Converts the order to another type and stores the converted order.
            </summary>
            <typeparam name="T">The type the order will convert to.</typeparam>
            <param name="orderGroup">The order</param>
            <returns>The order link representing the converted order.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderProvider.Delete(Mediachase.Commerce.Orders.OrderReference)">
            <summary>
            Deletes an order using an order reference.
            </summary>
            <param name="orderLink">The order link.</param>
        </member>
        <member name="P:EPiServer.Commerce.Order.IOrderProvider.OrderType">
            <summary>
            The order type the provider supports.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.OrderGroupProvider`1.Load(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Order.OrderGroupProvider`1.Load(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Order.OrderGroupProvider`1.Save(Mediachase.Commerce.Orders.IOrderGroup)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Order.OrderGroupProvider`1.SaveAs``1(Mediachase.Commerce.Orders.IOrderGroup)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Order.OrderGroupProvider`1.Delete(Mediachase.Commerce.Orders.OrderReference)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Order.OrderGroupProvider`1.Save(`0)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Order.OrderGroupProvider`1.LoadOrder(System.Int32)">
            <summary>
            Loads an order
            </summary>
            <param name="orderGroupId">The order group id</param>
            <returns>The loaded order.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.OrderGroupProvider`1.LoadOrders(System.Guid)">
            <summary>
            Loads orders for a customer
            </summary>
            <param name="customerId">The customer id</param>
            <returns>The orders.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.OrderGroupProvider`1.SaveAs``1(`0)">
            <summary>
            Converts the order to another type, and saves the object.
            </summary>
            <param name="orderGroup">The order group.</param>
        </member>
        <member name="P:EPiServer.Commerce.Order.OrderGroupProvider`1.OrderType">
            <summary>
            The generic type argument
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Order.PaymentPlanProvider">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Provider for <see cref="T:Mediachase.Commerce.Orders.PaymentPlan"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.PaymentPlanProvider.LoadOrder(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Order.PaymentPlanProvider.LoadOrders(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Order.PaymentPlanProvider.SaveAs``1(Mediachase.Commerce.Orders.PaymentPlan)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Order.PurchaseOrderProvider">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Provider for <see cref="T:Mediachase.Commerce.Orders.PurchaseOrder"/>
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Order.DefaultOrderRepository">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Default repository for <see cref="T:Mediachase.Commerce.Orders.IOrderGroup"/>
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Order.IOrderRepository">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepository.Load(Mediachase.Commerce.Orders.OrderReference)">
            <summary>
            Loads an order.
            </summary>
            <param name="orderLink">The order link.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepository.Load``1(System.Int32)">
            <summary>
            Loads an order.
            </summary>
            <param name="orderGroupId">The order group id</param>
            <returns>The order</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepository.Load(System.Guid)">
            <summary>
            Loads all orders for a customer.
            </summary>
            <param name="customerId">The customer guid</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepository.Save(Mediachase.Commerce.Orders.IOrderGroup)">
            <summary>
            Saves the order.
            </summary>
            <param name="order">The order</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepository.SaveAsPaymentPlan(Mediachase.Commerce.Orders.IOrderGroup)">
            <summary>
            Saves a cart as a <see cref="T:Mediachase.Commerce.Orders.PaymentPlan"/>.
            </summary>
            <param name="cart">The cart</param>
            <returns>The order link of the <see cref="T:Mediachase.Commerce.Orders.PaymentPlan"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepository.SaveAsPurchaseOrder(Mediachase.Commerce.Orders.IOrderGroup)">
            <summary>
            Saves a cart as a <see cref="T:Mediachase.Commerce.Orders.PurchaseOrder"/>.
            </summary>
            <param name="cart">The cart</param>
            <returns>The order link of the <see cref="T:Mediachase.Commerce.Orders.PurchaseOrder"/>.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Order.IOrderRepository.Delete(Mediachase.Commerce.Orders.OrderReference)">
            <summary>
            Deletes an order.
            </summary>
            <param name="orderLink">The order link.</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultOrderRepository.#ctor(EPiServer.ServiceLocation.IServiceLocator,EPiServer.Framework.TypeScanner.ITypeScannerLookup)">
            <summary>
            Creates an instance of the <see cref="T:EPiServer.Commerce.Order.DefaultOrderRepository"/>.
            </summary>
            <param name="serviceLocator">The service locator</param>
            <param name="typeScannerLookup">The type scanner lookup</param>
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultOrderRepository.Load(Mediachase.Commerce.Orders.OrderReference)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultOrderRepository.Load``1(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultOrderRepository.Load(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultOrderRepository.Save(Mediachase.Commerce.Orders.IOrderGroup)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultOrderRepository.Delete(Mediachase.Commerce.Orders.OrderReference)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultOrderRepository.SaveAsPaymentPlan(Mediachase.Commerce.Orders.IOrderGroup)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Order.DefaultOrderRepository.SaveAsPurchaseOrder(Mediachase.Commerce.Orders.IOrderGroup)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.Order.CartProvider">
            <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Provider for <see cref="T:Mediachase.Commerce.Orders.Cart"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Order.CartProvider.LoadOrder(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Order.CartProvider.LoadOrders(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Commerce.Order.CartProvider.SaveAs``1(Mediachase.Commerce.Orders.Cart)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Business.Commerce.PageBase`1">
            <summary>
            Base class for all generic template pages. Extends EPiServer.TemplatePage 
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.PageBase`1.SearchPage">
            <summary>
                Gets Search page
            </summary>
        </member>
        <member name="T:EPiServer.Business.Commerce.Providers.ProductSearchProviderBase">
            <summary>
            ProductSearchProviderBase class
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Providers.ProductSearchProviderBase.SearchArea">
            <summary>
            The static representation of the search area for this provider.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.Providers.ProductSearchProviderBase.Search(EPiServer.Shell.Search.Query)">
            <summary>
            Search in ProductCatalog and return list of result
            </summary>
            <param name="query">input query text and max number of result display</param>
            <returns>IEnumerable<SearchResult/> display total search result</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.Providers.ProductSearchProviderBase.SearchEntriesInCommerce(System.String,Mediachase.Commerce.Website.Search.SearchFilterHelper,System.Int32,System.Boolean,System.TimeSpan)">
            <summary>
            Searches the entries in commerce.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="filter">The filter.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="cacheResults">if set to <c>true</c> [cache results].</param>
            <param name="cacheTimeout">The cache timeout.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.Providers.ProductSearchProviderBase.SearchEntriesInCommerce(System.String,Mediachase.Commerce.Website.Search.SearchFilterHelper,System.Int32,System.Boolean,System.TimeSpan,System.Boolean,System.Boolean)">
            <summary>
            Search Entries in Commerce using ECF API
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="filter">The filter.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="cacheResults">if set to <c>true</c> [cache results].</param>
            <param name="cacheTimeout">The cache timeout.</param>
            <param name="getExpired">If true, catalog entries that are not currently active based on date range will be included; otherwise, they will not.</param>
            <param name="getInactive">If true, inactive catalog entries will be included, otherwise, they will not</param>
            <returns>Return display total search result</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.Providers.ProductSearchProviderBase.TryParseQuery(System.String,System.String@)">
            <summary>
            Tries the parse query.
            </summary>
            <param name="query">The query.</param>
            <param name="marketId">The market id.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.Providers.ProductSearchProviderBase.BindDefaultCatalogs(Mediachase.Commerce.Website.Search.SearchFilterHelper,System.String)">
            <summary>
            Binding Default Catalog to Criteria filter
            </summary>
            <param name="filter"></param>
            <param name="keywords">list keywords to search</param>
            <returns>CatalogEntrySearchCriteria type</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.Providers.ProductSearchProviderBase.CreateSearchResult(Mediachase.Commerce.Catalog.Objects.Entry)">
            <summary>
            Return one Search Result base on entry information
            </summary>
            <param name="entry">entry present one product result</param>
            <returns>SearchResult type</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.Providers.ProductSearchProviderBase.GetAttributeValue(Mediachase.Commerce.Catalog.Objects.Entry,System.String)">
            <summary>
            Safety get the attributeValue of entry
            </summary>
            <param name="entry">entry to get information</param>
            <param name="attributeName">attribute name to get from entry</param>
            <returns>string, which is join of values from attribute value array</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.Providers.ProductSearchProviderBase.GetEditUrl(EPiServer.Core.ContentReference)">
            <summary>
            Return EditUrl for specific contentLink.
            </summary>
            <param name="contentLink">ContentLink to be edited</param>
            <returns>string present edit url</returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.Providers.ProductSearchProviderBase.Area">
            <summary>
            The search area where this provider will search.
            </summary>
            <see cref="F:EPiServer.Business.Commerce.Providers.ProductSearchProviderBase.SearchArea"/>
        </member>
        <member name="P:EPiServer.Business.Commerce.Providers.ProductSearchProviderBase.Category">
            <summary>
            Category display
            </summary>
        </member>
        <member name="T:EPiServer.Business.Commerce.Providers.ProtectedProductSearchProvider">
            <summary>
            Global search for product catalog provider class
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.Providers.ProtectedProductSearchProvider.SearchEntriesInCommerce(System.String,Mediachase.Commerce.Website.Search.SearchFilterHelper,System.Int32,System.Boolean,System.TimeSpan)">
            <summary>
            Search Entries in Commerce using ECF API
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="filter">The filter.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="cacheResults">if set to <c>true</c> [cache results].</param>
            <param name="cacheTimeout">The cache timeout.</param>
            <returns>Return display total search result</returns>
        </member>
        <member name="T:EPiServer.Commerce.Routing.CommerceUrlResolver">
            <summary>
            Adds catalog content codes to permanent links.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Routing.CommerceUrlResolver.ConvertToPermanent(EPiServer.UrlBuilder,EPiServer.Core.IContent)">
            <summary>
            If the content is <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> the code (for entry or node)
            is added to the <see cref="F:EPiServer.Business.Commerce.Constants.ParameterEntryCode"/> querystring argument.
            </summary>
            <param name="url">The URL.</param>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Routing.RequestCacheUrlResolver">
            <summary>
            <see cref="T:EPiServer.Web.Routing.UrlResolver"/> wrapper, with an outgoing request cache. An underlying UrlResolver will be used to perform the resolving of the Url when items not in the cache.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Routing.RequestCacheUrlResolver.#ctor(System.Web.Routing.RouteCollection,EPiServer.IContentLoader,EPiServer.Core.LanguageSelectorFactory,EPiServer.Web.SiteDefinitionRepository,EPiServer.Web.TemplateResolver,EPiServer.Web.IPermanentLinkMapper,EPiServer.ServiceLocation.ServiceAccessor{System.Web.HttpContextBase})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Routing.RequestCacheUrlResolver"/> class.
            </summary>
            <param name="routes">The routes.</param>
            <param name="contentLoader">The content loader.</param>
            <param name="languageSelectorFactory">The language selector factory.</param>
            <param name="siteDefinitionRepository">The site definition repository.</param>
            <param name="templateResolver">The template resolver.</param>
            <param name="permanentLinkMapper">The permanent link mapper.</param>
            <param name="httpContextAccessor">The http context accessor</param>
        </member>
        <member name="M:EPiServer.Commerce.Routing.RequestCacheUrlResolver.GetUrl(EPiServer.Core.ContentReference)">
            <summary>
            Gets the url for a <see cref="T:EPiServer.Core.IContent"/> instance that is given by reference <paramref name="contentLink"/>
            </summary>
            <param name="contentLink">The content.</param>
            <returns></returns>
            <remarks>This version uses a request cache to get the items.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Routing.RequestCacheUrlResolver.GetUrl(EPiServer.Core.ContentReference,System.String)">
            <summary>
            Gets the url for a <see cref="T:EPiServer.Core.IContent"/> instance that is given by reference <paramref name="contentLink"/>
            </summary>
            <param name="contentLink">The content.</param>
            <param name="language">The language.</param>
            <returns></returns>
            <remarks>This version uses a request cache to get the items.</remarks>
        </member>
        <member name="M:EPiServer.Commerce.Routing.RequestCacheUrlResolver.GetUrl(EPiServer.Core.ContentReference,System.String,EPiServer.Web.Routing.VirtualPathArguments)">
            <summary>
            Gets the url for a <see cref="T:EPiServer.Core.IContent"/> instance that is given by argument <paramref name="virtualPathArguments"/>.
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="language">The language.</param>
            <param name="virtualPathArguments">The virtual path arguments.</param>
            <returns></returns>
            <remarks>This version uses a request cache to get the items. </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Routing.RequestCacheUrlResolver.GetVirtualPath(EPiServer.Core.ContentReference,System.String,EPiServer.Web.Routing.VirtualPathArguments,System.Func{System.String})">
            <summary>
            Gets the url for a <see cref="T:EPiServer.Core.IContent"/> instance that is given by reference <paramref name="contentLink"/>
            </summary>
            <param name="contentLink">The content.</param>
            <param name="language">The language.</param>
            <param name="virtualPathArguments">The virtual path arguments.</param>
            <param name="getVirtualPathAction">The action to perform when the item is not in the cache. The result from the action will be cached.</param>
            <returns></returns>
            <remarks>
            This version uses a request cache to get the items.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.Routing.RequestCacheUrlResolver.GetVirtualPath(EPiServer.Core.ContentReference,System.String,EPiServer.Web.ContextMode,System.Func{System.String})">
            <summary>
            Gets the url for a <see cref="T:EPiServer.Core.IContent"/> instance that is given by reference <paramref name="contentLink"/>
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="language">The language.</param>
            <param name="contextMode">The context mode.</param>
            <param name="getVirtualPathAction">The action to perform when the item is not in the cache. The result from the action will be cached.</param>
            <returns></returns>
            <remarks>
            This version uses a request cache to get the items.
            </remarks>
        </member>
        <member name="T:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter">
            <summary>
            Partial router for catalog content, which handles hierarchical structure
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Routing.ICommerceRouter">
            <summary>
            Partial router for commerce
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Routing.ICommerceRouter.CommerceRoot">
            <summary>
            The root content for the partial route.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Routing.ICommerceRouter.RouteStartingPoint">
            <summary>
            The starting point of the partial route. This content link is the node just before the <see cref="P:EPiServer.Commerce.Routing.ICommerceRouter.CommerceRoot"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.#ctor(System.Func{EPiServer.Core.ContentReference},EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.Boolean)">
            <summary>
            Initialize a new instance of <see cref="T:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter"/>
            </summary>
            <param name="routeStartingPoint">A delegate that will return the content the route should be based on.</param>
            <param name="commerceRoot">The root node where this route will look for commerce content when matching route segments.</param>
            <param name="enableOutgoingSeoUri">Enables seo uri for outgoing route.</param>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.#ctor(System.Func{EPiServer.Core.ContentReference},EPiServer.Commerce.Catalog.ContentTypes.RootContent,System.Boolean)">
            <summary>
            Initialize a new instance of <see cref="T:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter"/>
            </summary>
            <param name="routeStartingPoint">A delegate that will return the content the route should be based on.</param>
            <param name="commerceRoot">The root node where this route will look for commerce content when matching route segments.</param>
            <param name="enableOutgoingSeoUri">Enables seo uri for outgoing route.</param>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.#ctor(System.Func{EPiServer.Core.ContentReference},EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.Boolean,EPiServer.IContentLoader,EPiServer.Core.LanguageSelectorFactory,EPiServer.Web.Routing.Segments.IRoutingSegmentLoader)">
            <summary>
            Initialize a new instance of <see cref="T:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter"/>
            </summary>
            <param name="routeStartingPoint">A delegate that will return the content the route should be based on.</param>
            <param name="commerceRoot">The root node where this route will look for commerce content when matching route segments.</param>
            <param name="supportSeoUri">Enables seo uri for the route.</param>
            <param name="contentLoader">The content loader service.</param>
            <param name="languageSelectorFactory">The lanugage selector factory service.</param>
            <param name="routingSegmentLoader">The routing segment loader service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.#ctor(System.Func{EPiServer.Core.ContentReference},EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.Boolean,EPiServer.IContentLoader,EPiServer.Core.LanguageSelectorFactory,EPiServer.Web.Routing.Segments.IRoutingSegmentLoader,EPiServer.Core.IContentVersionRepository)">
            <summary>
            Initialize a new instance of <see cref="T:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter"/>
            </summary>
            <param name="routeStartingPoint">A delegate that will return the content the route should be based on.</param>
            <param name="commerceRoot">The root node where this route will look for commerce content when matching route segments.</param>
            <param name="supportSeoUri">Enables seo uri for the route.</param>
            <param name="contentLoader">The content loader service.</param>
            <param name="languageSelectorFactory">The lanugage selector factory service.</param>
            <param name="routingSegmentLoader">The routing segment loader service.</param>
            <param name="contentVersionRepository">The content version repository.</param>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.#ctor(System.Func{EPiServer.Core.ContentReference},EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.Boolean,EPiServer.IContentLoader,EPiServer.Core.LanguageSelectorFactory,EPiServer.Web.Routing.Segments.IRoutingSegmentLoader,EPiServer.Core.IContentVersionRepository,EPiServer.Web.Routing.Segments.IUrlSegmentRouter,EPiServer.Core.IContentLanguageSettingsHandler)">
            <summary>
            Initialize a new instance of <see cref="T:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter"/>
            </summary>
            <param name="routeStartingPoint">A delegate that will return the content the route should be based on.</param>
            <param name="commerceRoot">The root node where this route will look for commerce content when matching route segments.</param>
            <param name="supportSeoUri">Enables seo uri for the route.</param>
            <param name="contentLoader">The content loader service.</param>
            <param name="languageSelectorFactory">The lanugage selector factory service.</param>
            <param name="routingSegmentLoader">The routing segment loader service.</param>
            <param name="contentVersionRepository">The content version repository.</param>
            <param name="urlSegmentRouter">The url segment router.</param>
            <param name="contentLanguageSettingsHandler">The content language settings handler </param>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.RoutePartial(EPiServer.Core.PageData,EPiServer.Web.Routing.Segments.SegmentContext)">
            <summary>
            Matches a route by traversing the route segments and matching them with the url segments of the commerce content.
            </summary>
            <remarks>
            Only <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/> will be returned. If the route matches any other type of content, that will be ignored.
            </remarks>
            <example>http://mysite/catalog/catalognode/entry</example>
            <param name="content">The content that the page route has been able to route to.</param>
            <param name="segmentContext">The segment context containing the remaining part of url.</param>
            <returns>A <see cref="T:EPiServer.Core.ContentReference"/> to the mathced data or null if the remaining part did not match.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.GetCatalogContentRecursive(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,EPiServer.Web.Routing.Segments.SegmentPair,EPiServer.Web.Routing.Segments.SegmentContext,EPiServer.Core.ILanguageSelector)">
            <summary>
            Finds the commerce content that matches the provided segment context by recursivly going through all segments.
            </summary>
            <param name="catalogContent">The currently active or matched content.</param>
            <param name="segmentPair">The currently active segment.</param>
            <param name="segmentContext">The complete segment context.</param>
            <param name="languageSelector">The requested language.</param>
            <returns>The content that matches the provided segment context.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.FindNextContentInSegmentPair(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,EPiServer.Web.Routing.Segments.SegmentPair,EPiServer.Web.Routing.Segments.SegmentContext,EPiServer.Core.ILanguageSelector)">
            <summary>
            Finds the commerce content that matches one specific segment.
            </summary>
            <param name="catalogContent">The content that matches the previous segment</param>
            <param name="segmentPair">The current segment</param>
            <param name="segmentContext">The complete segment context.</param>
            <param name="languageSelector">The requested language.</param>
            <returns>The content that matches the specified segment</returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.GetCommonDraftContent(EPiServer.Core.ContentReference)">
            <summary>
            Returns the common draft catalog content if no work Id has been specified and if the draft content exists.
            </summary>
            <param name="contentLink">The content link to load common draft for.</param>
            <returns>Returns common draft catalog content if it exists, otherwise return null.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.GetPartialVirtualPath(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RequestContext)">
            <summary>
            Gets a partial virtual path for a content item during routing.
            </summary>
            <param name="content">The content to generate a virtual path for.</param>
            <param name="language">The language to generate the url for.</param>
            <param name="routeValues">The route values.</param>
            <param name="requestContext">The request context.</param>
            <returns>
            A <see cref="T:EPiServer.Web.Routing.PartialRouteData"/> containing the partial virtual path for the content and a <see cref="T:EPiServer.Core.ContentReference"/> to the item to get base path from or null if the remaining part did not match.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.TryGetVirtualPath(System.Web.HttpContextBase,EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase,System.String,System.String@)">
            <summary>
            Tries to retrive the virtual path for the content.
            </summary>
            <param name="context">The http context.</param>
            <param name="content">The content.</param>
            <param name="language">The language.</param>
            <param name="virtualPath">The virtual path to be retrieved.</param>
            <returns>True if the virtual path could be retrieved, false otherwise.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.TryGetRouteSegment(EPiServer.Core.ContentReference,System.String,System.String@)">
            <summary>
            Tries to retrieve the route segment for the content.
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="language">The language.</param>
            <param name="segment">The segment to be retrieved.</param>
            <returns>True if the route segment could be retrieved, false otherwise.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.IsValidRoutedContent(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
            Checks if a content is a valid match for a partial route.
            </summary>
            <param name="content">The content to validate</param>
            <returns><c>true</c> if the content is a valid result for the partial route, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.CommerceRoot">
            <summary>
            The root of the route
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.RouteStartingPoint">
            <summary>
            The content link just before the <see cref="P:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.CommerceRoot"/>
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.Routing.HierarchicalCatalogPartialRouter.EnableOutgoingSeoUri">
            <summary>
            Enables seo uri for outgoing route
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Routing.CatalogRouteHelper">
            <summary>
            Contains helper methods to register routes for commerce catalog items.
            </summary>
            <example>
            The recommended way is to do it in an EPiServer.Framework.IInitializableModule.
            <code source="../CodeSamples/EPiServer.Commerce/Catalog/RegisterRoutingModuleSample.cs" lang="cs" />
            </example>
        </member>
        <member name="M:EPiServer.Commerce.Routing.CatalogRouteHelper.MapDefaultHierarchialRouter(System.Web.Routing.RouteCollection,System.Boolean)">
            <summary>
            Registers a default partial router for catalog content.
            </summary>
            <param name="routes">The route collection.</param>
            <param name="enableOutgoingSeoUri">if set to <c>true</c> the outgoing links for catalog items will use the SEO URL.</param>
        </member>
        <member name="M:EPiServer.Commerce.Routing.CatalogRouteHelper.MapDefaultHierarchialRouter(System.Web.Routing.RouteCollection,System.Func{EPiServer.Core.ContentReference},System.Boolean)">
            <summary>
            Registers a default partial router for catalog content.
            </summary>
            <param name="routes">The route collection.</param>
            <param name="startingPoint">The starting point where the partial route will start.</param>
            <param name="enableOutgoingSeoUri">if set to <c>true</c> the outgoing links for catalog items will use the SEO URL.</param>
        </member>
        <member name="M:EPiServer.Commerce.Routing.CatalogRouteHelper.SetupSeoUriPermanentRedirect">
            <summary>
            Registers an eventhandler to call <see cref="M:EPiServer.Commerce.Routing.SeoRedirectHandler.RedirectToSeoUri(EPiServer.Web.Routing.RoutingEventArgs)"/> when
            a content has been routed, so that <see cref="T:EPiServer.Commerce.Routing.SeoRedirectHandler"/> can make sure
            that any request for commerce content using the hierarchial URL when there is a
            SEO Url for that content will be permanently redirected to the SEO Url.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Routing.RoutingSegmentValidator">
            <summary>
            Validates that the current routing segment is not in conflict with catalog content.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Routing.RoutingSegmentValidator.#ctor(EPiServer.Framework.Localization.LocalizationService,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.IContentRepository,EPiServer.Web.Routing.PartialRouteHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Routing.RoutingSegmentValidator"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
            <param name="contentTypeRepository">The content type repository.</param>
            <param name="contentRepository">The content repository.</param>
            <param name="partialRouteHandler"></param>
        </member>
        <member name="M:EPiServer.Commerce.Routing.RoutingSegmentValidator.Validate(EPiServer.Core.IContent)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Routing.SeoRedirectHandler">
            <summary>
            Handles redirects from hierarchial catalog content URL:s to SEO URI:s
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Routing.SeoRedirectHandler.#ctor(EPiServer.Web.Routing.UrlResolver,EPiServer.Commerce.Routing.SeoUriRouter)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Routing.SeoRedirectHandler"/> class.
            </summary>
            <param name="urlResolver">The URL resolver.</param>
            <param name="seoUriRouter">The seo URI router.</param>
        </member>
        <member name="M:EPiServer.Commerce.Routing.SeoRedirectHandler.RedirectToSeoUri(EPiServer.Web.Routing.RoutingEventArgs)">
            <summary>
            Redirects to seo URI.
            </summary>
            <param name="e">The <see cref="T:EPiServer.Web.Routing.RoutingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:EPiServer.Commerce.Routing.SeoUriRouter">
            <summary>
            Routes a SEO url
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Routing.SeoUriRouter.#ctor(EPiServer.Web.Routing.PartialRouteHandler,EPiServer.IContentLoader,EPiServer.Core.LanguageSelectorFactory,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Core.IContentVersionRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Routing.SeoUriRouter"/> class.
            </summary>
            <param name="partialRouteHandler">The partial route handler</param>
            <param name="contentLoader">The content loader</param>
            <param name="languageSelectorFactory">The language selector factory</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentVersionRepository">The content version repository</param>
        </member>
        <member name="M:EPiServer.Commerce.Routing.SeoUriRouter.#ctor(EPiServer.Web.Routing.PartialRouteHandler,EPiServer.IContentLoader,Mediachase.Commerce.Catalog.ReferenceConverter,EPiServer.Core.IContentVersionRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Routing.SeoUriRouter"/> class.
            </summary>
            <param name="partialRouteHandler">The partial route handler</param>
            <param name="contentLoader">The content loader</param>
            <param name="referenceConverter">The reference converter.</param>
            <param name="contentVersionRepository">The content version repository</param>
        </member>
        <member name="M:EPiServer.Commerce.Routing.SeoUriRouter.GetRouteValues(System.String,EPiServer.Core.ContentReference,EPiServer.Web.Routing.Segments.SegmentContext)">
            <summary>
            Tries to handle a segment value as a simple address.
            </summary>
            <param name="urlSegment">The simple address</param>
            <param name="routeRoot">The route root</param>
            <param name="segmentContext">The segment context</param>
            <returns><c><see cref="T:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues"/></c> if <paramref name="urlSegment"/> was handled, otherwise <c>null</c></returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.SeoUriRouter.SupportedPartialRouters(EPiServer.Core.ContentReference)">
            <summary>
            Gets supported commerce routetrs for content
            </summary>
            <param name="catalogContentLink">The content link to get the supported partial routers for.</param>
            <returns>Collection of supported commerce partial routers</returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.SeoUriRouter.GetLanguage(Mediachase.Commerce.Catalog.Dto.CatalogEntryDto,System.String)">
            <summary>
            Gets the language from the catalog entry dto
            </summary>
            <param name="entry">The catalog entry dto</param>
            <param name="seoUri">The seo uri</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.SeoUriRouter.GetLanguage(Mediachase.Commerce.Catalog.Dto.CatalogNodeDto,System.String)">
            <summary>
            Gets the language from the catalog node dto
            </summary>
            <param name="node">The catalog node dto</param>
            <param name="seoUri">The seo uri</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.SeoUriRouter.GetCatalogContentLink(Mediachase.Commerce.Catalog.Dto.CatalogEntryDto)">
            <summary>
            Gets the content link from a catalog entry dto
            </summary>
            <param name="entry">The catalog entry dto</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.SeoUriRouter.GetCatalogContentLink(Mediachase.Commerce.Catalog.Dto.CatalogNodeDto)">
            <summary>
            Gets the content link from a catalog node dto
            </summary>
            <param name="node">The catalog node dto</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.Routing.SeoUriRouter.GetRouteStartingPoint(EPiServer.Core.ContentReference)">
            <summary>
            Gets the starting point for the route.
            </summary>
            <param name="catalogContentLink">The content link</param>
            <returns>The content link of the starting point, if fund. Otherwise null.</returns>
        </member>
        <member name="P:EPiServer.Commerce.Routing.SeoUriRouter.CatalogSystem">
            <summary>
            The catalog system
            </summary>
        </member>
        <member name="T:EPiServer.Business.Commerce.ScheduledJobs.FullSearchIndexJob">
            <summary>
            job that builds the search indexes incrementally.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.FullSearchIndexJob.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Business.Commerce.ScheduledJobs.FullSearchIndexJob"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.FullSearchIndexJob.Execute">
            <summary>
            Executes the job
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.FullSearchIndexJob.ExecuteInternal">
            <summary>
            Executes the specified context.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.FullSearchIndexJob.IndexApplication(System.String)">
            <summary>
            Indexes the application.
            </summary>
            <param name="applicationName">Name of the application.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.FullSearchIndexJob._SearchManager_SearchIndexMessage(System.Object,Mediachase.Search.SearchIndexEventArgs)">
            <summary>
            Handles the SearchIndexMessage event of the _SearchManager control.
            </summary>
            <param name="source">The source of the event.</param>
            <param name="args">The <see cref="T:Mediachase.Search.SearchIndexEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:EPiServer.Business.Commerce.ScheduledJobs.FullSearchIndexJob.LocalizationService">
            <summary>
            Gets the localization service.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.PaymentPlanJob.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Business.Commerce.ScheduledJobs.PaymentPlanJob"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.PaymentPlanJob.Execute">
            <summary>
            Executes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.PaymentPlanJob.ProcessApplication">
            <summary>
            Processes the application.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.PaymentPlanJob.EnsureDataContext">
            <summary>
            Ensures the data context.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.PaymentPlanJob.ProcessPlan(Mediachase.Commerce.Orders.PaymentPlan)">
            <summary>
            Processes the plan.
            </summary>
            <param name="plan">The plan.</param>
        </member>
        <member name="P:EPiServer.Business.Commerce.ScheduledJobs.PaymentPlanJob.LocalizationService">
            <summary>
            Gets the localization service.
            </summary>
        </member>
        <member name="T:EPiServer.Business.Commerce.ScheduledJobs.RemovedExpiredCartsJob">
            <summary>
            Job that removes carts older than 30 days (or configured value).
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.RemovedExpiredCartsJob.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Business.Commerce.ScheduledJobs.RemovedExpiredCartsJob"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.RemovedExpiredCartsJob.Execute">
            <summary>
            Executes this instance.
            </summary>
            <returns>A string with result message of the scheduled job.</returns>
            <remarks>
            This job will 
            </remarks>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.RemovedExpiredCartsJob.RemoveExpired(System.Int32)">
            <summary>
            Removes the expired.
            </summary>
            <param name="daysOld">The days old.</param>
        </member>
        <member name="P:EPiServer.Business.Commerce.ScheduledJobs.RemovedExpiredCartsJob.LocalizationService">
            <summary>
            Gets the localization service.
            </summary>
        </member>
        <member name="T:EPiServer.Business.Commerce.ScheduledJobs.RotateEncryptionJob">
            <summary>
            job that rotates the encryption keys in sql server.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.RotateEncryptionJob.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Business.Commerce.ScheduledJobs.RotateEncryptionJob"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.RotateEncryptionJob.Execute">
            <summary>
            Executes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.RotateEncryptionJob.EncryptApplication">
            <summary>
            Encrypts the application.
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.ScheduledJobs.RotateEncryptionJob.LocalizationService">
            <summary>
            Gets the localization service.
            </summary>
        </member>
        <member name="T:EPiServer.Business.Commerce.ScheduledJobs.IncrementalSearchIndexJob">
            <summary>
            Job that builds the search indexes incrementally.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.IncrementalSearchIndexJob.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Business.Commerce.ScheduledJobs.IncrementalSearchIndexJob"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.IncrementalSearchIndexJob.Execute">
            <summary>
            Executes the specified context.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.IncrementalSearchIndexJob.IndexApplication(System.String)">
            <summary>
            Indexes the application.
            </summary>
            <param name="applicationName">Name of the application.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.IncrementalSearchIndexJob._SearchManager_SearchIndexMessage(System.Object,Mediachase.Search.SearchIndexEventArgs)">
            <summary>
            Handles the SearchIndexMessage event of the _SearchManager control.
            </summary>
            <param name="source">The source of the event.</param>
            <param name="args">The <see cref="T:Mediachase.Search.SearchIndexEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:EPiServer.Business.Commerce.ScheduledJobs.IncrementalSearchIndexJob.LocalizationService">
            <summary>
            Gets the localization service.
            </summary>
        </member>
        <member name="T:EPiServer.Business.Commerce.ScheduledJobs.SerializeDataIndexJob">
            <summary>
            job that serializes the data in Catalog Meta Data.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.SerializeDataIndexJob.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Business.Commerce.ScheduledJobs.SerializeDataIndexJob"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.SerializeDataIndexJob.Execute">
            <summary>
            Executes the specified context.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.SerializeDataIndexJob.IndexCatalog">
            <summary>
            Indexes the catalog.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.SerializeDataIndexJob.IndexCatalogEntryDto(Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.CatalogEntryRow,System.String[])">
            <summary>
            Indexes the catalog entry dto.
            </summary>
            <param name="entryRow">The entry row.</param>
            <param name="languages">The languages.</param>
        </member>
        <member name="P:EPiServer.Business.Commerce.ScheduledJobs.SerializeDataIndexJob.LocalizationService">
            <summary>
            Gets the localization service.
            </summary>
        </member>
        <member name="T:EPiServer.Business.Commerce.ScheduledJobs.ShipmentReleaseJob">
            <summary>
            job that releases shipments.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.ShipmentReleaseJob.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Business.Commerce.ScheduledJobs.ShipmentReleaseJob"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.ShipmentReleaseJob.Execute">
            <summary>
            Executes the specified context.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ScheduledJobs.ShipmentReleaseJob.ReleaseShipments">
            <summary>
            Releases the shipments.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.ScheduledJobs.ShipmentReleaseJob.LocalizationService">
            <summary>
            Gets the localization service.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Security.RoleNames.CommerceAdmins">
            <summary>
                The name of the role that is allowed to administer commerce content and settings.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Security.RoleNames.CommerceSettingsAdmins">
            <summary>
                The name of the role that is allowed to administer commerce settings.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Security.RoleNames.CatalogManagers">
            <summary>
                The name of the role that is allowed to manage catalogs.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Security.RoleNames.MarketingManagers">
            <summary>
                The name of the role that is allowed to manage marketing.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Security.RoleNames.EPiBetaUsers">
            <summary>
                The name of the role that is allowed to use beta features.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Serialization.Json.CustomerPricingConverter">
            <summary>
                Converts a <see cref="T:Mediachase.Commerce.Pricing.CustomerPricing"/> object to json and back.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.CustomerPricingConverter.CanConvert(System.Type)">
            <summary>
                Determines whether this converter can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this converter can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.CustomerPricingConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes a <see cref="T:Mediachase.Commerce.Pricing.CustomerPricing"/> instance from json.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
            <returns>The currency.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.CustomerPricingConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes a  <see cref="T:Mediachase.Commerce.Pricing.CustomerPricing"/> instance to json.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="T:EPiServer.Commerce.Serialization.Json.CustomerPricingConverter.CustomerPricingDto">
            <summary>
            Class used for serializing and deserializing a <see cref="T:Mediachase.Commerce.Pricing.CustomerPricing"/>
            object. Defines new properties shadowing the old read-only properties. Using
            the original class as base class to get some kind of connection which will
            get some early errors if the base class is changed. However, the base
            class uses a DataContract attribute which prevents the properties from being
            serialized since they dont have a DataMember attributes which is why they
            are added here instead.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Serialization.Json.MoneyConverter">
            <summary>
                Converts a <see cref="T:Mediachase.Commerce.Money"/> object to json and back.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.MoneyConverter.CanConvert(System.Type)">
            <summary>
                Determines whether this converter can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this converter can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.MoneyConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes a <see cref="T:Mediachase.Commerce.Money"/> instance from json.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
            <returns>The currency.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.MoneyConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Not implemented.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="P:EPiServer.Commerce.Serialization.Json.MoneyConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
            <value>
            Always <c>false</c>.
            </value>
        </member>
        <member name="T:EPiServer.Commerce.Serialization.Json.MoneyConverter.MoneyDto">
            <summary>
            DTO class with read-write properties so that it can be used to
            deserialize the data in a <see cref="T:Mediachase.Commerce.Money"/> instance.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Serialization.Json.ItemCollectionConverter">
            <summary>
                Converts a <see cref="T:EPiServer.Commerce.SpecializedProperties.ItemCollection`1"/> object to json and back.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.ItemCollectionConverter.CanConvert(System.Type)">
            <summary>
                Determines whether this converter can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this converter can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.ItemCollectionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes a <see cref="T:Mediachase.Commerce.Currency"/> instance from json.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
            <returns>The currency.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.ItemCollectionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes a  <see cref="T:Mediachase.Commerce.Currency"/> instance to json.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="T:EPiServer.Commerce.Serialization.Json.CurrencyConverter">
            <summary>
                Converts a <see cref="T:Mediachase.Commerce.Currency"/> object to json and back.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.CurrencyConverter.CanConvert(System.Type)">
            <summary>
                Determines whether this converter can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this converter can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.CurrencyConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes a <see cref="T:Mediachase.Commerce.Currency"/> instance from json.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
            <returns>The currency.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.CurrencyConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes a  <see cref="T:Mediachase.Commerce.Currency"/> instance to json.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="T:EPiServer.Commerce.Serialization.TypeResolverDeserializationBinder">
            <summary>
            Uses <see cref="T:EPiServer.Data.Dynamic.TypeResolver"/> to resolve type at deserialization.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.TypeResolverDeserializationBinder.BindToType(System.String,System.String)">
             <summary>
             Uses <see cref="T:EPiServer.Data.Dynamic.TypeResolver"/> to bind type name to type.
             </summary>
            <param name="assemblyName">Is not used in this implementation.</param>
             <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object.</param>
             <returns>The type of the object the formatter creates a new instance of.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Shell.PlugInArea">
            <summary>
            Contains defined plug-in areas for views in EPiServer Commerce.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Shell.PlugInArea.Assets">
            <summary>
            The panel to load additional tools and assets for the catalog view.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Shell.PlugInArea.AssetsDefaultGroup">
            <summary>
            The default group available in the assets panel for the catalog view.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Shell.PlugInArea.NavigationDefaultGroup">
            <summary>
            The default group available in the navigation panel for the catalog view.
            </summary>
        </member>
        <member name="F:EPiServer.Commerce.Shell.PlugInArea.Navigation">
            <summary>
            The navigation panel in the catalog view.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.CommerceMedia.PermanentLinkMapper">
            <summary>
            Gets or sets the permanent link mapper.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.CommerceMedia.AssetLink">
            <summary>
            Gets or sets the string representation of the asset link.
            </summary>
            <value>
            The asset link.
            </value>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.CommerceMedia.AssetKey">
            <summary>
            Gets or sets the string representation of the asset key.
            </summary>
            <value>
            The asset key.
            </value>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.CommerceMedia.AssetType">
            <summary>
            Gets or sets the string representation of the asset type.
            </summary>
            <value>
            The asset type.
            </value>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.CommerceMedia.GroupName">
            <summary>
            Gets or sets the asset group that this asset belongs to.
            </summary>
            <value>
            The asset group.
            </value>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.CommerceMedia.SortOrder">
            <summary>
            Gets or sets the asset sortorder
            </summary>
            <value>
            The asset sortorder
            </value>        
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyDictionarySingle">
            <summary>
                A property type that is used as backing type when you want a meta field that is a single selection dictionary.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.CustomerGroup">
            <summary>
            Represents the customer group.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.CustomerGroup.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.Commerce.SpecializedProperties.CustomerGroup"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.CustomerGroup.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.CustomerGroup.Id">
            <summary>
            Gets or sets the customer group id.
            </summary>
            <value>The customer group id.</value>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.CustomerGroup.Name">
            <summary>
            Gets or sets the customer group name.
            </summary>
            <value>The customer group name.</value>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.DictionarySelectionFactory">
            <summary>
                A selection factory that uses the values from the dictionary of the meta field as <see cref="T:EPiServer.Shell.ObjectEditing.SelectItem"/>
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.DictionarySelectionFactory.GetSelections(EPiServer.Shell.ObjectEditing.ExtendedMetadata)">
            <summary>
                Creates a list of select items from the dictionary of the meta field.
            </summary>
            <param name="metadata">The metadata for a property.</param>
            <returns>A list of selection items.</returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.DictionarySelectionFactory.LoadDictionary(System.String)">
            <summary>
                Load the dictionary from the specified meta field.
            </summary>
            <param name="metaFieldName">The name of the meta field.</param>
            <returns>The dictionary from the meta field.</returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.DictionarySelectionFactory.ShouldHaveEmptyOption(System.String)">
            <summary>
                Determines if an empty select item should be used.
            </summary>
            <param name="metaFieldName">The name of the metafield.</param>
            <returns><c>true</c> if an empty option should be used, otherwise <c>false</c></returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.Inventory.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.Commerce.SpecializedProperties.Inventory"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.Inventory.#ctor(Mediachase.Commerce.Inventory.IWarehouseInventory)">
            <summary>
            Initializes a new instance of <see cref="T:EPiServer.Commerce.SpecializedProperties.Inventory"/> class. 
            </summary>
            <param name="warehouseInventory">the warehouse inventory value to convert from</param>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.Inventory.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.Inventory.ToWarehouseInventory(Mediachase.Commerce.Catalog.CatalogKey)">
            <summary>
            Converts to a <see cref="T:Mediachase.Commerce.Inventory.IWarehouseInventory"/> object.
            </summary>
            <param name="entryKey">The entry key to use on converted objects.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Inventory.AllowBackorder">
            <summary>
            Represents whether to allow backorders.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Inventory.AllowPreorder">
            <summary>
            Represents whether to allow pre-orders.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Inventory.BackorderAvailabilityDate">
            <summary>
            Represents the availability date for the inventory's backorders.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Inventory.BackorderQuantity">
            <summary>
            Represents the inventory's backorder quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Inventory.InStockQuantity">
            <summary>
            Represents the inventory's in-stock quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Inventory.InventoryStatus">
            <summary>
            Represents the inventory's status.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Inventory.PreorderAvailabilityDate">
            <summary>
            Represents the availability date for the inventory's pre-orders.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Inventory.PreorderQuantity">
            <summary>
            Represents the inventory's pre-order quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Inventory.ReorderMinQuantity">
            <summary>
            Represents the inventory's minimum re-order quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Inventory.ReservedQuantity">
            <summary>
            Represents the inventory's reserved quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Inventory.WarehouseCode">
            <summary>
            Represents the unique warehouse code.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.ItemCollection`1">
            <summary>
            Base class for collections used as values in properties.
            </summary>
            <typeparam name="T">The item type.</typeparam>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.SpecializedProperties.ItemCollection`1"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.SpecializedProperties.ItemCollection`1"/> class.
            </summary>
            <param name="items">The items.</param>
            <exception cref="T:System.ArgumentNullException">items</exception>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.IndexOf(`0)">
            <summary>
            Gets the index of the item in the collection.
            </summary>
            <param name="item">The item.</param>
            <returns>
            The index of <paramref name="item"/> if found in the collection; otherwise, -1.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index.
            </summary>
            <param name="index">The zero-based index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.Contains(`0)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if the item is found otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the elements 
            copied from collection. The System.Array must have
            zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>true if success; otherwise false</returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.CreateWritableClone">
            <summary>
            Creates a writable clone of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance and that is writeable.</returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
            <summary>
            Creates a writable clone of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance and that is writeable.</returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.MakeReadOnly">
            <summary>
            Makes the instance read only.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.ToString">
            <summary>
            Gets a string representation of the items by joining them together, using a comma as a separator.
            </summary>
            <returns>A comma separated string of the items in the collection.</returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.ThrowIfReadOnly">
            <summary>
            Throws an exception if the instance is read only.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.IsModified">
            <summary>
            Gets or sets a value indicating whether this instance is modified.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.Count">
            <summary>
            Gets the item count.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.ItemCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Serialization.Json.MarketIdConverter">
            <summary>
                Converts a <see cref="T:Mediachase.Commerce.MarketId"/> object to json and back.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.MarketIdConverter.CanConvert(System.Type)">
            <summary>
                Determines whether this converter can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this converter can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.MarketIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes a <see cref="T:Mediachase.Commerce.Currency"/> instance from json.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
            <returns>The currency.</returns>
        </member>
        <member name="M:EPiServer.Commerce.Serialization.Json.MarketIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes a  <see cref="T:Mediachase.Commerce.Currency"/> instance to json.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.Price">
            <summary>
            Represents a price definition in a catalog entry.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.Price.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.SpecializedProperties.Price"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.Price.#ctor(Mediachase.Commerce.Pricing.IPriceValue)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.SpecializedProperties.Price"/> class.
            </summary>
            <param name="priceValue">The price value to convert from.</param>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.Price.#ctor(Mediachase.Commerce.Pricing.IPriceValue,EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.SpecializedProperties.Price"/> class.
            </summary>
            <param name="entry">tThe entry content base.</param>
            <param name="priceValue">The price value.</param>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.Price.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.Price.ToPriceValue">
            <summary>
            Converts to a <see cref="T:Mediachase.Commerce.Pricing.IPriceValue"/> instance.
            </summary>
            <returns>The converted object.</returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.Price.ToPriceValue(Mediachase.Commerce.Catalog.CatalogKey)">
            <summary>
            To the price value.
            </summary>
            <param name="catalogKey">The catalog key.</param>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Price.CustomerPricing">
            <summary>
            Gets or sets the customer pricing.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Price.MarketId">
            <summary>
            Gets or sets the market id.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Price.MinQuantity">
            <summary>
            Gets or sets the minimum quantity.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Price.UnitPrice">
            <summary>
            Gets or sets the unit price.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Price.ValidFrom">
            <summary>
            Gets or sets the valid from date.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Price.ValidUntil">
            <summary>
            Gets or sets the valid until date.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.Price.EntryContent">
            <summary>
            Gets or sets the entry content base
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PriceDetail.#ctor(Mediachase.Commerce.Pricing.IPriceDetailValue,EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.SpecializedProperties.PriceDetail"/> class.
            </summary>
            <param name="priceDetailValue">The price detail value.</param>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PriceDetail.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PriceDetail.ToPriceDetailValue">
            <summary>
            Converts to a <see cref="T:Mediachase.Commerce.Pricing.IPriceValue"/> instance.
            </summary>
            <returns>The converted object.</returns>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PriceDetail.PriceValueId">
            <summary>
            Gets or sets the price id.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1">
            <summary>
            Abstract base class for creating properties with a value that is a collection of items.
            </summary>
            <typeparam name="T">The type of item in the collection.</typeparam>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.#ctor(EPiServer.Commerce.SpecializedProperties.ItemCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1"/> class.
            </summary>
            <param name="items">The items.</param>
            <exception cref="T:System.ArgumentNullException">items</exception>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.CreateInstance">
            <summary>
            Creates a new instance of the property. Defaults to create from the current type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.ToLongString">
            <summary>
            "Serializes" the item collection to a string using a json serializer from
            <see cref="P:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.SerializerFactory"/>.
            Override this method and <see cref="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.FromLongString(System.String)"/> to user custom serialization.
            </summary>
            <returns>A string representation of the item collection.</returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.FromLongString(System.String)">
            <summary>
            "Deserializes" an item collection from its string representation into this instance
            using a json serializer from <see cref="P:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.SerializerFactory"/>.
            Override this method and <see cref="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.ToLongString"/> to user custom serialization.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.CreateWritableClone">
            <summary>
            Creates a writable clone of the property.
            </summary>
            <returns>A writable copy of the property.</returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.LoadData(System.Object)">
            <summary>
            Sets the internal representation from what is stored in the database. "Deserialize".
            </summary>
            <param name="value">The internal value.</param>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.ParseToObject(System.String)">
            <summary>
            Parses the string representation of the colleciton into a new instance
            of this class.
            </summary>
            <param name="str">The string representation of the collection.</param>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.ParseToSelf(System.String)">
            <summary>
            Parses the string representation of the colleciton into the current instance.
            </summary>
            <param name="str">The string representation of the collection.</param>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.SaveData(EPiServer.Core.PropertyDataCollection)">
            <summary>
            Get the data representation suitable for storing to the database. "Serialize".
            </summary>
            <param name="properties">The properties for the current page.</param>
            <returns>A string representation of the item collection. </returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.SetDefaultValue">
            <summary>
            Sets the default value for this property.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.MakeReadOnly">
            <summary>
            Makes the instance read only.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.Items">
            <summary>
            Gets or sets the collection of items in the property.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.SerializerFactory">
            <summary>
            Gets or sets the serializer factory.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.IsModified">
            <summary>
            Check if property has been modified.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.IsNull">
            <summary>
            Check for null property (no value has been set or the collection is empty).
            </summary>
            <value><c>true</c> if this property is null; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.PropertyValueType">
            <summary>
            Returns the type of the collection by getting the type.
            </summary>
            <remarks>Override this method and return the actual type to be sure.</remarks>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyCollectionBase`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The item collection as an <see cref="T:System.Object"/> instance.
            </value>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.InventoryStatus">
            <summary>
            A list of possible statuses for inventory
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyCommerceMediaCollection">
            <summary>
            Property for storing inventory information.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyCommerceMediaCollection.PropertyValueType">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyCommerceMediaCollectionControl">
            <summary>
            Control for rendering the commerce media collection property
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyCommerceMediaCollectionControl.CreateDefaultControls">
            <summary>
            Creates the default controls for the property. Used when the property is in view mode or in "on page edit" mode       
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyDecimal">
            <summary>
            Property type for storing decimal values
            </summary>
            <remarks>Will store the value in the string column in the database</remarks>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.SpecializedProperties.PropertyDecimal"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.SpecializedProperties.PropertyDecimal"/> class.
            </summary>
            <param name="value">The decimal value.</param>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.SetDefaultValue">
            <summary>
            Sets the default value for this property.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.Parse(System.String)">
            <summary>
            Create a new instance of <see cref="T:EPiServer.Commerce.SpecializedProperties.PropertyDecimal"/> from a string.
            </summary>
            <param name="value">The string to create a <see cref="T:EPiServer.Commerce.SpecializedProperties.PropertyDecimal"/> from.</param>
            <returns>A new instance of <see cref="T:EPiServer.Commerce.SpecializedProperties.PropertyDecimal"/>.</returns>
            <remarks>
            If the string is null or Empty an empty <see cref="T:EPiServer.Commerce.SpecializedProperties.PropertyDecimal"/> is returned. If the string cannot be
            parsed as a decimal an <see cref="T:EPiServer.Core.InvalidPropertyValueException"/> is thrown.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.ParseToObject(System.String)">
            <summary>
            A wrapper for <see cref="M:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.Parse(System.String)"/> to return a generic PropertyData object.
            </summary>
            <param name="value">The value for the new <see cref="T:EPiServer.Commerce.SpecializedProperties.PropertyDecimal"/>.</param>
            <returns>A new instance of <see cref="T:EPiServer.Commerce.SpecializedProperties.PropertyDecimal"/>.</returns>
            <remarks>
            If the string is null or Empty an empty <see cref="T:EPiServer.Commerce.SpecializedProperties.PropertyDecimal"/> is returned. If the string cannot be
            parsed as a decimal an <see cref="T:EPiServer.Core.InvalidPropertyValueException"/> is thrown.
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.ParseToSelf(System.String)">
            <summary>
            Replace the internal decimal with the parsed value.
            </summary>
            <param name="value">The string to parse into this object.</param>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.SaveData(EPiServer.Core.PropertyDataCollection)">
            <summary>
            Prepares the data in a format for persisting ("serialize").
            </summary>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.ToString">
            <summary>
            Get the property's display string.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.CreatePropertyControl">
            <summary>
            Creates the property control. Will use a simple string editing control for the legacy edit mode.
            </summary>
            <returns>A <see cref="T:EPiServer.Web.PropertyControls.PropertyStringControl"/></returns>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.Decimal">
            <summary>
            Get or sets the value of the property typed as a <see cref="P:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.Decimal"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
            <value>The value of the property.</value>
            <remarks>Value returns null if the property has no value defined.</remarks>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.Type">
            <summary>
            Get the data type for this property.
            </summary>
            <value>Returns <see cref="F:EPiServer.Core.PropertyDataType.String"/>.</value>
            <remarks>
            The recommended practice is to use typeof() constructs instead of relying on this property.
            </remarks>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyDecimal.PropertyValueType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the property value.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyDictionaryMultiple">
            <summary>
            A property type that is used as backing type when you want a meta field that is a multiple selection dictionary.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyEmailAddress">
            <summary>
            Property type for storing email addesses
            </summary>
            <remarks>
            Will store the value in the string column in the database
            </remarks>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyEmailAddress.SetDefaultValue">
            <summary>
            Sets the default value for this property.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.SpecializedProperties.PropertyEmailAddress.ValidateEmailAddress(System.String)">
            <summary>
            Validates the email address.
            </summary>
            <param name="email">The email.</param>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyEmailAddress.String">
            <summary>
            Gets or sets the string.
            </summary>
            <value>
            The string.
            </value>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyEmailAddress.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyInventoryCollection">
            <summary>
            Property for storing inventory information.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyInventoryCollection.PropertyValueType">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyInventoryStatus">
            <summary>
            Property that handles inventory status
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyInventoryStatus.PropertyValueType">
            <summary>
                Gets the System.Type of the property value, in this case <see cref="T:EPiServer.Commerce.SpecializedProperties.InventoryStatus"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyMarketCollection">
            <summary>
                A property that can handle a list of markets represented by their ID strings
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyMarketCollection.PropertyValueType">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyPriceType">
            <summary>
                Property for storing price type information.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyPriceType.PropertyValueType">
            <summary>
                Gets the System.Type of the property value, in this case <see cref="T:Mediachase.Commerce.Pricing.CustomerPricing.PriceType"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.SpecializedProperties.PropertyPriceCollection">
            <summary>
            Property for storing price information.
            </summary>
        </member>
        <member name="P:EPiServer.Commerce.SpecializedProperties.PropertyPriceCollection.PropertyValueType">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Commerce.TypeHandlers.MarketIdTypeHandler">
            <summary>
            Handler making MarketId instances beeing stored as string in DDS.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.TypeHandlers.MarketIdTypeHandler.FromDatabaseFormat(System.String,System.Object,System.Type,System.Type)">
            <summary>
            Returns an <see cref="T:Mediachase.Commerce.MarketId"/> instance from the database format.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">The property value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="ownerType">Type of the owner.</param>
            <returns>A <see cref="T:Mediachase.Commerce.IMarket"/> instance</returns>
        </member>
        <member name="M:EPiServer.Commerce.TypeHandlers.MarketIdTypeHandler.MapToDatabaseType(System.Type)">
            <summary>
            Returns the database type as string.
            </summary>
            <param name="type">The type.</param>
            <returns>The type that is stored in database</returns>
        </member>
        <member name="M:EPiServer.Commerce.TypeHandlers.MarketIdTypeHandler.ToDatabaseFormat(System.String,System.Object,System.Type)">
            <summary>
            Returns the <see cref="T:Mediachase.Commerce.MarketId"/> value in the database format.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">The property value.</param>
            <param name="ownerType">Type of the owner.</param>
            <returns>The market id value</returns>
        </member>
        <member name="T:EPiServer.Commerce.TypeHandlers.MarketTypeHandler">
            <summary>
            Handler making IMarket implementations beeing stored as string in DDS.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.TypeHandlers.MarketTypeHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.TypeHandlers.MarketTypeHandler"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.TypeHandlers.MarketTypeHandler.#ctor(Mediachase.Commerce.Markets.IMarketService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.TypeHandlers.MarketTypeHandler"/> class.
            </summary>
            <param name="marketService">The market service</param>
        </member>
        <member name="M:EPiServer.Commerce.TypeHandlers.MarketTypeHandler.FromDatabaseFormat(System.String,System.Object,System.Type,System.Type)">
            <summary>
            Returns an <see cref="T:Mediachase.Commerce.IMarket"/> instance from the database format.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">The property value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="ownerType">Type of the owner.</param>
            <returns>A <see cref="T:Mediachase.Commerce.IMarket"/> instance</returns>
        </member>
        <member name="M:EPiServer.Commerce.TypeHandlers.MarketTypeHandler.MapToDatabaseType(System.Type)">
            <summary>
            Returns the database type as string.
            </summary>
            <param name="type">The type.</param>
            <returns>The type that is stored in database</returns>
        </member>
        <member name="M:EPiServer.Commerce.TypeHandlers.MarketTypeHandler.ToDatabaseFormat(System.String,System.Object,System.Type)">
            <summary>
            Returns the <see cref="T:Mediachase.Commerce.MarketId"/> value in the database format.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">The property value.</param>
            <param name="ownerType">Type of the owner.</param>
            <returns>The market id value</returns>
        </member>
        <member name="T:EPiServer.Commerce.UIHint">
            <summary>
            Contains UI hints available for public use.
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.Validation.CatalogDefaultLanguageValidator">
            <summary>
            Validates the <see cref="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.DefaultLanguage"/> against <see cref="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.CatalogLanguages"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.CatalogDefaultLanguageValidator.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.CatalogDefaultLanguageValidator"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.CatalogDefaultLanguageValidator.Validate(EPiServer.Commerce.Catalog.ContentTypes.CatalogContent)">
            <summary>
            Validates the <see cref="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.CatalogLanguages"/> against <see cref="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.DefaultLanguage"/> on the <paramref name="instance"/>.
            </summary>
            <param name="instance">The <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent"/> containing the <see cref="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.CatalogLanguages"/> and the <see cref="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.DefaultLanguage"/>.</param>
            <returns>Error message if <see cref="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.CatalogLanguages"/> don't contain <see cref="P:EPiServer.Commerce.Catalog.ContentTypes.CatalogContent.DefaultLanguage"/>, otherwise an empty enumerable.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Validation.CampaignDateValidator">
            <summary>
            Validates that valid from on a campaigns is not greater than valid until.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.CampaignDateValidator.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.EntryCodeValidator"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.CampaignDateValidator.Validate(EPiServer.Core.CampaignData)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance that will be validated.</param>
            <returns>A validation error if the valid from date is greater than the valid until date.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Validation.MissingStartingPointLanguageValidator">
            <summary>
                This validator is used to informing the user that there is no route where the starting point is translated to the current language.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.MissingStartingPointLanguageValidator.#ctor(EPiServer.IContentLoader,EPiServer.Web.Routing.PartialRouteHandler,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
                Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.MissingStartingPointLanguageValidator"/> class.
            </summary>
            <param name="contentLoader">The content loader service.</param>
            <param name="partialRouteHandler">The partial route handler.</param>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.MissingStartingPointLanguageValidator.Validate(EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase)">
            <summary>
                Validates the specified <see cref="T:EPiServer.Commerce.Catalog.ContentTypes.CatalogContentBase"/>.
            </summary>
            <param name="instance">The instance.</param>
            <returns>A list of validation errors.</returns>
        </member>
        <member name="T:EPiServer.Commerce.Validation.NodeSeoUrlValidator">
            <summary>
            Represents the validator for Seo Url property of NodeContent.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.NodeSeoUrlValidator.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Framework.Localization.LocalizationService,Mediachase.Commerce.Catalog.ReferenceConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.NodeSeoUrlValidator"/> class.
            </summary>
            <param name="catalogSystem">The catalog system.</param>
            <param name="localizationService">The localization service.</param>
            <param name="referenceConverter">The reference converter, to get CatalogNodeId from NodeContent.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.NodeSeoUrlValidator.Validate(EPiServer.Commerce.Catalog.ContentTypes.NodeContent)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Validation.EntryCodeValidator">
            <summary>
            Represents the validator for Code property of EntryContentBase.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.EntryCodeValidator.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Framework.Localization.LocalizationService,Mediachase.Commerce.Catalog.ReferenceConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.EntryCodeValidator"/> class.
            </summary>
            <param name="catalogSystem">The catalog system.</param>
            <param name="localizationService">The localization service.</param>
            <param name="referenceConverter">The reference converter, to get CatalogEntryId from EntryContentBase.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.EntryCodeValidator.Validate(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Validation.NodeCodeValidator">
            <summary>
            Represents the validator for Code property of NodeContent.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.NodeCodeValidator.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Framework.Localization.LocalizationService,Mediachase.Commerce.Catalog.ReferenceConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.NodeCodeValidator"/> class.
            </summary>
            <param name="catalogSystem">The catalog system.</param>
            <param name="localizationService">The localization service.</param>
            <param name="referenceConverter">The reference converter, to get CatalogEntryId from EntryContentBase.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.NodeCodeValidator.Validate(EPiServer.Commerce.Catalog.ContentTypes.NodeContent)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Validation.EntrySeoUrlValidator">
            <summary>
            Represents the validator for Seo Url property of EntryContentBase.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.EntrySeoUrlValidator.#ctor(Mediachase.Commerce.Catalog.ICatalogSystem,EPiServer.Framework.Localization.LocalizationService,Mediachase.Commerce.Catalog.ReferenceConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.Validation.EntrySeoUrlValidator"/> class.
            </summary>
            <param name="catalogSystem">The catalog system.</param>
            <param name="localizationService">The localization service.</param>
            <param name="referenceConverter">The reference converter, to get CatalogEntryId from EntryContentBase.</param>
        </member>
        <member name="M:EPiServer.Commerce.Validation.EntrySeoUrlValidator.Validate(EPiServer.Commerce.Catalog.ContentTypes.EntryContentBase)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.Validation.ParameterValidator">
            <summary>
            Contains strongly typed validation methods
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.Validation.ParameterValidator.ThrowIfNull``1(System.Linq.Expressions.Expression{System.Func{``0}},``0)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> based on <see paramref="expression"/> if <see paramref="value"/> is <see langword="null"/>.
            </summary>
            <typeparam name="T">The type in the expression</typeparam>
            <param name="expression">An expression containing the property to validate</param>
            <param name="value">the property again</param>
            <example>
            If your property has a parameter named "foo" you can use this:
            <code>ParameterValidator.ThrowIfNull(() =&gt; foo, foo);</code>
            </example>
        </member>
        <member name="M:EPiServer.Commerce.Validation.ParameterValidator.ThrowIfNullOrEmpty(System.Linq.Expressions.Expression{System.Func{System.String}},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> based on <see paramref="expression"/> if <see paramref="value"/> is <see langword="null"/> or empty.
            </summary>
            <param name="expression">An expression containing the property to validate</param>
            <param name="value">the property again</param>
            <example>
            If your property has a string parameter named "foo" you can use this:
            <code>ParameterValidator.ThrowIfNullOrEmpty(() =&gt; foo, foo);</code>
            </example>
        </member>
        <member name="T:EPiServer.Business.Commerce.VirtualPathProviders.AssetFileStream">
            <summary>
            System.IO.Stream implementation for file streams returned by the AssetVirtualFile implemetation. 
            All operations are executed on a wrapped inner stream. 
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetFileStream.UpdateFileLength(System.Int64)">
            <summary>
            Updates the length of the file.
            </summary>
            <remarks>Work with Asset files only</remarks>
            <param name="length">The content size of file.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetFileStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of offset and count is larger than the buffer length. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetFileStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>
            The unsigned byte cast to an Int32, or -1 if at the end of the stream.
            </returns>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"></see> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetFileStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.ArgumentException">The sum of offset and count is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetFileStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">The byte to write to the stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing, or the stream is already closed. </exception>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetFileStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <value></value>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetFileStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <value></value>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetFileStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <value></value>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetFileStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <value></value>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetFileStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <value></value>
            <returns>The current position within the stream.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetSummary.#ctor(EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualFile,Mediachase.Commerce.Assets.FolderElementEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Business.Commerce.VirtualPathProviders.AssetSummary"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="file">The file.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetSummary.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetSummary.AddPropertiesToSummary(Mediachase.BusinessFoundation.Data.Business.EntityObjectProperty)">
            <summary>
            Adds the properties to summary.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetSummary.SaveChanges">
            <summary>
            Saves the changes.
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetSummary.Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
            <value>The dictionary.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetSummary.Author">
            <summary>
            Gets or sets the author.
            </summary>
            <value>The author.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetSummary.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetSummary.Keywords">
            <summary>
            Gets or sets the keywords.
            </summary>
            <value>The keywords.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetSummary.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetSummary.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetSummary.CanPersist">
            <summary>
            Gets a value indicating whether this instance can persist.
            </summary>
            <value>
            	<c>true</c> if this instance can persist; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualDirectory.#ctor(EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualPathProvider,System.String,Mediachase.Commerce.Assets.FolderEntity,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualDirectory"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="virtualPath">The virtual path.</param>
            <param name="folder">The folder.</param>
            <param name="customSummaryPath">The custom summary path.</param>
            <param name="bypassAccessCheck">if set to <c>true</c> [bypass access check].</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualDirectory.GetAssetFileVirtualPath(System.String)">
            <summary>
            Gets the asset file virtual path, modify the file name
            so that it works with CommerceAssetAccessProfile and
            with CMS File Manager
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualDirectory.GetFiles">
            <summary>
            Gets the files inside this directory, after filters applied.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualDirectory.GetDirectories">
            <summary>
            Gets the child directories after filters applied.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualDirectory.CreateFile(System.String)">
            <summary>
            Creates a file in current directory
            </summary>
            <param name="name">The file name to be created.</param>
            <returns>The created file as UnifiedFile</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualDirectory.CreateFile(System.String,System.Guid)">
            <summary>
            Creates a file in current directory with a specified id
            </summary>
            <param name="name">The file name to be created.</param>
            <param name="id">The guid of the file.</param>
            <returns>The created file as UnifiedFile</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualDirectory.CreateSubdirectoryInternal(System.String)">
            <summary>
            Creates the sub directory, under the current folder
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualDirectory.Delete">
            <summary>
            Performs delete action
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualDirectory.CopyTo(System.String)">
            <summary>
            Copies this folder recursively to another folder.
            </summary>
            <param name="newVirtualPath">The new virtual path.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualDirectory.MoveTo(System.String)">
            <summary>
            Moves this folder recursively to another folder.
            </summary>
            <param name="newVirtualPath">The new virtual path.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualDirectory.Search(EPiServer.Web.Hosting.UnifiedSearchQuery)">
            <summary>
            Searches the specified query.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualDirectory.StringSearch(System.String,System.String)">
            <summary>
            Searches in src string for occurance of searchString string by IndexOf.
            </summary>
            <param name="src"></param>
            <param name="searchString"></param>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualDirectory.IsDirectory">
            <summary>
            Gets a value that indicates that this is a virtual resource that should be treated as a directory.
            </summary>
            <value></value>
            <returns>
            Always true.
            </returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualDirectory.IsVersioningSupported">
            <summary>
            Gets a value indicating whether this instance is versioning supported.
            </summary>
            <value>
            	<c>true</c> if this instance is versioning supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualDirectory.IsFirstLevel">
            <summary>
            Gets a value indicating whether this instance is first level.
            </summary>
            <value>
            	<c>true</c> if this instance is first level; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualDirectory.Directories">
            <summary>
            Gets all the directories, no filters applied
            </summary>
            <value>The directories.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualDirectory.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualDirectory.Children">
            <summary>
            Gets the children, all files and directories.
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualDirectory.Files">
            <summary>
            Gets all the files, no filers applied
            </summary>
            <value>The files.</value>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualFile.#ctor(EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualDirectory,EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualPathProvider,System.String,Mediachase.Commerce.Assets.FolderElementEntity,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualFile"/> class.
            </summary>
            <param name="directory">The directory.</param>
            <param name="provider">The provider.</param>
            <param name="virtualPath">The virtual path.</param>
            <param name="file">The asset file.</param>
            <param name="bypassAccessCheck">if set to <c>true</c> [bypass access check].</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualFile.Open">
            <summary>
            Opens this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualFile.Open(System.IO.FileMode)">
            <summary>
            Opens the specified mode.
            </summary>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualFile.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens the specified mode.
            </summary>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <param name="share">The share.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualFile.OpenToWrite">
            <summary>
            Opens stream to write.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualFile.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens the specified mode.
            </summary>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualFile.Delete">
            <summary>
            Performs delete file action
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualFile.CopyTo(System.String,System.Guid)">
            <summary>
            Copies this file to new virtual path
            </summary>
            <param name="newVirtualPath">The new virtual path.</param>
            <param name="fileId">The file id.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualFile.MoveTo(System.String)">
            <summary>
            Moves this file to new virtual path.
            </summary>
            <param name="destVirtualPath">The dest virtual path.</param>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualFile.Changed">
            <summary>
            Gets the changed.
            </summary>
            <value>The changed.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualFile.Created">
            <summary>
            Gets the created.
            </summary>
            <value>The created.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualFile.Name">
            <summary>
            Gets the display name of the virtual file.
            </summary>
            <value></value>
            <returns>
            The display name of the virtual file.
            </returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualFile.Summary">
            <summary>
            Gets the file summary.
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualFile.Length">
            <summary>
            The file content length.
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualFile.IsDirectory">
            <summary>
            Gets a value that indicates that this is a virtual resource that should be treated as a file.
            </summary>
            <value></value>
            <returns>
            Always false.
            </returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualFile.Parent">
            <summary>
            Gets the parent directory of this file.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualFile.PermanentLinkVirtualPath">
            <summary>
            Gets the permanent link virtual path.
            </summary>
            <value>The permanent link virtual path.</value>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualPathProvider.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualPathProvider"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="configParameters">The config parameters.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualPathProvider.GetFile(System.String)">
            <summary>
            Gets the file.
            </summary>
            <param name="virtualPath">The virtual dir.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualPathProvider.FileExists(System.String)">
            <summary>
            Check if file exists.
            </summary>
            <param name="virtualPath">The virtual path of the file.</param>
            <returns>True if the file exists; False otherwise.</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualPathProvider.TryGetFromRequestCache(System.String,EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualFile@)">
            <summary>
            Tries the get file from request cache.
            </summary>
            <param name="virtualPath">The virtual path.</param>
            <param name="file">The file.</param>
            <returns>True if file is in cache; otherwise false</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualPathProvider.AddToRequestCache(System.String,EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualFile)">
            <summary>
            Adds the file to request cache.
            </summary>
            <param name="virtualPath">The virtual path.</param>
            <param name="file">The file.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualPathProvider.GetFileCache">
            <summary>
            Gets the file cache.
            </summary>
            <returns>The file cache.</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualPathProvider.DirectoryExists(System.String)">
            <summary>
            Gets a value that indicates whether a directory exists in the virtual file system.
            </summary>
            <param name="virtualDir">The path to the virtual directory.</param>
            <returns>
            true if the directory exists in the virtual file system; otherwise, false.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualPathProvider.GetDirectory(System.String)">
            <summary>
            Gets a virtual directory from the virtual file system.
            </summary>
            <param name="virtualDir">The path to the virtual directory.</param>
            <returns>
            A descendent of the <see cref="T:System.Web.Hosting.VirtualDirectory"/> class that represents a directory in the virtual file system.
            </returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.VirtualPathProviders.AssetVirtualPathProvider.Root">
            <summary>
            Gets the root folder.
            </summary>
            <value>The root.</value>
        </member>
        <member name="M:EPiServer.Business.Commerce.BaseCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Construct a Tag cloud item collection with the inner list
            </summary>
            <param name="items">The inner list</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.BaseCollection`1.OnClear">
            <summary>
            OnClear event
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.BaseCollection`1.OnInsert(System.Int32,System.Object)">
            <summary>
            OnInsert event
            </summary>
            <param name="index">The index of the insert item</param>
            <param name="value">Insert object</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.BaseCollection`1.OnRemove(System.Int32,System.Object)">
            <summary>
            OnRemove event
            </summary>
            <param name="index">The index of the remove item</param>
            <param name="value">Remove object</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.BaseCollection`1.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            OnSet event
            </summary>
            <param name="index">The index of the item to set</param>
            <param name="oldValue">Old value</param>
            <param name="newValue">New value</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.BaseCollection`1.OnClearComplete">
            <summary>
            Event when Clear() complete
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.BaseCollection`1.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Event when Insert or Add complete
            </summary>
            <param name="index">Index of the inserted/added item</param>
            <param name="value">Inserted/added object</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.BaseCollection`1.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Event when Remove item complete
            </summary>
            <param name="index">Index of the removed item</param>
            <param name="value">Removed object</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.BaseCollection`1.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Event when Set item complete
            </summary>
            <param name="index">Index of the modified item</param>
            <param name="oldValue">Old value</param>
            <param name="newValue">New value</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.BaseCollection`1.Add(`0)">
            <summary>
            Add item to the list
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.BaseCollection`1.Clear">
            <summary>
            Clear items in list
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.BaseCollection`1.Contains(`0)">
            <summary>
            Check if the list contains input item
            </summary>
            <param name="item">Item to check</param>
            <returns>True if the list contains the input item, otherwise false</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.BaseCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type TItem cannot be cast automatically to the type of the destination array./>.
            </exception>
        </member>
        <member name="M:EPiServer.Business.Commerce.BaseCollection`1.Remove(`0)">
            <summary>
            Remove the first occurance item from list
            </summary>
            <param name="item">Item to remove</param>
            <returns>True if the item has been removed, otherwise false</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.BaseCollection`1.GetEnumerator">
            <summary>
            Return an Enumerator
            </summary>
            <returns>An IEnumerator&lt;TItem&gt;</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.BaseCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return an Enumerator
            </summary>
            <returns>An IEnumerator</returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.BaseCollection`1.InnerList">
            <summary>
            Get or set the inner list
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.BaseCollection`1.Item(System.Int32)">
            <summary>
            Get or set value by index
            </summary>
            <param name="index">Index of the item</param>
            <returns>The TItem object</returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.BaseCollection`1.ReadOnly">
            <summary>
            Get or set ReadOnly attribute
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.BaseCollection`1.Count">
            <summary>
            Get the number of elements in list
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.BaseCollection`1.IsReadOnly">
            <summary>
            Get whether the list is read only or not
            </summary>
        </member>
        <member name="T:EPiServer.Business.Commerce.CommerceManagerSettings">
            <summary>
            CommerceManagerSettings class
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.CommerceManagerSettings.GetAppSettings(System.String)">
            <summary>
            Gets the app settings from web.config.
            </summary>
            <param name="key">The key to get setting from.</param>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.CommerceManagerSettings.CommerceManagerLink">
            <summary>
            Gets the commerce manager link.
            </summary>
            <value>The commerce manager link.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.CommerceManagerSettings.ApplicationName">
            <summary>
            Gets the name of the mediachase application.
            </summary>
            <value>The name of the mediachase application.</value>
        </member>
        <member name="T:EPiServer.Business.Commerce.Constants">
            <summary>
            Commerce constants
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.ParameterEntryCode">
            <summary>
            The parameter which is used to pass the Commerce's Entry Code
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.RoutingEntryDto">
            <summary>
            Key into RoutingData.DataTokens to retrieve the current EntryDto
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.DefaultMaxProductsCount">
            <summary>
            Default Max Products displayed on best seller products list
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.PropertyProductListPage">
            <summary>
            Property to indicate the page is a Product List page
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.PropertyProductPage">
            <summary>
            Property to indicate the page is a Product page
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.Separator">
            <summary>
            Underscore Separator
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.PropertyNodeName">
            <summary>
                The property name of the Catalog Node, to point out what catalog node a product Listing page should display
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.PropertyCatalogNode">
            <summary>
                The property name of the Catalog Node, to point out what catalog node a product Listing page should display
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.CheckoutCommandName">
            <summary>
            Check out command name.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.ShoppingCartCommandName">
            <summary>
            Shopping cart command name.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.WishListCommandName">
            <summary>
            Wish list command name.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.EntryViewCommandName">
            <summary>
            Entry view command name.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.NodeViewCommandName">
            <summary>
            Node view command name.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.RegisterCommandName">
            <summary>
            Register command name.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.RecoverPasswordCommandName">
            <summary>
            Recover password command name.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.OrderHistoryCommandName">
            <summary>
            Order history command name.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.AccountCommandName">
            <summary>
            Account command name.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.AccountEditCommandName">
            <summary>
            Account Edit command name
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.ChangePasswordCommandName">
            <summary>
            Change Password command name
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.AddressBookCommandName">
            <summary>
            Change Password command name
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.CompareCommandName">
            <summary>
            Compare command name.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.SearchResultsCommandName">
            <summary>
            Search results command name.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.DibsPaymentCommandName">
            <summary>
            Search results command name.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.ShortenStringDotDotDot">
            <summary>
            Use to represent ... in shorten string
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.ShortenStringSize">
            <summary>
            Default shorten string size
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.MaxWeight">
            <summary>
            The maximum number of tag weight that should be displayed
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.MinWeight">
            <summary>
            The minimum number of tag weight that should be displayed
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.TagCloudPerPage">
            <summary>
            Number of tag cloud items per page in tag cloud management action window.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.ItemPerPage">
            <summary>
            Number of default items per page in any list of Commerce.
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.EveryoneRole">
            <summary>
                Represent string of Everyone role in role provider
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.RegisteredRole">
            <summary>
                Represent string of Registered role in role provider
            </summary>
        </member>
        <member name="F:EPiServer.Business.Commerce.Constants.SingleSignInTokenKey">
            <summary>
            keyname (in the temporary SSO token store), value = "SSO_TOKEN_KEY"
            </summary>
        </member>
        <member name="T:EPiServer.Business.Commerce.CommerceSettings">
            <summary>
            Setting for EPiServer Commerce
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.CommerceSettings.Id">
            <summary>
            Unique identifier
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.CommerceSettings.IsDataConfigured">
            <summary>
            Specifies whether this is the data for EPiServer Commerce Manager has been configured or not(in the first time the site has been loaded)
            </summary>
            <value><c>true</c> if the data for EPiServer Commerce Manager has been configured otherwise, <c>false</c>.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.CommerceSettings.IsSampleDataConfigured">
            <summary>
            Gets or sets a value indicating whether the EPiServer Commerce Sample Site data has been configured (at the first running time of website).
            </summary>
            <value>
            	<c>true</c> if the EPiServer Commerce Sample Site data has been configured; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Business.Commerce.CommerceSettings.ContentRootId">
            <summary>
            Gets or sets ID of the Commerce Content Root
            </summary>
        </member>
        <member name="T:EPiServer.Commerce.VisitorGroupsCriteria.ActiveMarketCriterion">
            <summary>
            Matches the active market.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.VisitorGroupsCriteria.ActiveMarketCriterion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.VisitorGroupsCriteria.ActiveMarketCriterion"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.VisitorGroupsCriteria.ActiveMarketCriterion.#ctor(Mediachase.Commerce.ICurrentMarket)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.VisitorGroupsCriteria.ActiveMarketCriterion"/> class.
            </summary>
            <param name="currentMarketService">The current market service.</param>
        </member>
        <member name="M:EPiServer.Commerce.VisitorGroupsCriteria.ActiveMarketCriterion.IsMatch(System.Security.Principal.IPrincipal,System.Web.HttpContextBase)">
            <summary>
            Determines wheter the current market matches the market set in the criterion.
            </summary>
            <param name="principal">The principal.</param>
            <param name="httpContext">The HTTP context.</param>
            <returns>
              <c>true</c> if the the markets match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:EPiServer.Commerce.VisitorGroupsCriteria.ActiveMarketModel">
            <summary>
            Model used by <see cref="T:EPiServer.Commerce.VisitorGroupsCriteria.ActiveMarketCriterion"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Business.Commerce.VisitorGroupsCriteria.ModelBase">
            <summary>
            Base class for CriterionModel of Commerce, already implement ICloneable
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.ModelBase.Copy">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.ModelBase.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:EPiServer.Commerce.VisitorGroupsCriteria.ActiveMarketModel.MarketId">
            <summary>
            Gets or sets the market id.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CategorySelectionFactory.GetSelectListItems(System.Type)">
            <summary>
            Gets a list op options for all categoreis.
            </summary>
            <param name="property">The type of the property.</param>
            <returns>A list of options for all categoreis on the site</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CountrySelectionFactory.GetSelectListItems(System.Type)">
            <summary>
            Gets a list op options for all Country Name.
            </summary>
            <param name="property">The type of the property.</param>
            <returns>A list of options for all Country Name</returns>
        </member>
        <member name="T:EPiServer.Business.Commerce.VisitorGroupsCriteria.CurrencySelectionFactory">
            <summary>
            Provides a list of Currency to the dropdown.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CurrencySelectionFactory.GetSelectListItems(System.Type)">
            <summary>
            Gets a list op options for all currencies.
            </summary>
            <param name="property">The type of the property.</param>
            <returns>A list of options for all currencies on the site</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerGroupSelectionFactory.GetSelectListItems(System.Type)">
            <summary>
            Gets a list op options for all CustomerGroup.
            </summary>
            <param name="property">The type of the property.</param>
            <returns>A list of options for all CustomerGroup</returns>
        </member>
        <member name="T:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesCriterion">
            <summary>
                Detect users that meets the selected property type and value
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesCriterion.IsMatch(System.Security.Principal.IPrincipal,System.Web.HttpContextBase)">
            <summary>
            Determines whether the specified principal is match.
            </summary>
            <param name="principal">The principal.</param>
            <param name="httpContext">The HTTP context.</param>
            <returns>
            	<c>true</c> if the specified principal is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesCriterion.IsStateMatch(Mediachase.Commerce.Customers.CustomerContact,System.String)">
            <summary>
            Determines whether the state is match.
            </summary>
            <param name="user">The user.</param>
            <param name="state">The state.</param>
            <returns>
            	<c>true</c> if the state is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesCriterion.IsAddressPostalCodeMatch(Mediachase.Commerce.Customers.CustomerContact,System.String)">
            <summary>
            Determines whether the address postal code is match.
            </summary>
            <param name="user">The user.</param>
            <param name="addressPostalCode">The address postal code.</param>
            <returns>
            	<c>true</c> if the address postal code is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesCriterion.IsRegionMatch(Mediachase.Commerce.Customers.CustomerContact,System.String)">
            <summary>
            Determines whether the region is match.
            </summary>
            <param name="user">The user.</param>
            <param name="region">The region.</param>
            <returns>
            	<c>true</c> if the region is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesCriterion.IsCountryMatch(Mediachase.Commerce.Customers.CustomerContact,System.String)">
            <summary>
            Determines whether the country is match.
            </summary>
            <param name="user">The user.</param>
            <param name="country">The country.</param>
            <returns>
            	<c>true</c> if the country is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesCriterion.IsRegistrationSourceMatch(Mediachase.Commerce.Customers.CustomerContact,System.String)">
            <summary>
            Determines whether the registration source is match.
            </summary>
            <param name="user">The user.</param>
            <param name="registrationSource">The registration source.</param>
            <returns>
            	<c>true</c> if the registration source is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesCriterion.IsBirthDateMatch(Mediachase.Commerce.Customers.CustomerContact,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Determines whether the birth date is match.
            </summary>
            <param name="user">The user.</param>
            <param name="fromDate">The birth date1.</param>
            <param name="toDate">The birth date2.</param>
            <returns>
            	<c>true</c> if the birth date is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesCriterion.IsCustomerGroupMatch(Mediachase.Commerce.Customers.CustomerContact,System.String)">
            <summary>
            Determines whether customer group is match.
            </summary>
            <param name="user">The user.</param>
            <param name="customerGroup">The customer group.</param>
            <returns>
            	<c>true</c> if customer group is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesModel.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesModel.PropertyValue">
            <summary>
            Gets or sets the property value.
            </summary>
            <value>The property value.</value>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesModel.PropertyNameSelectionFactory.GetSelectListItems(System.Type)">
            <summary>
            Gets a list op options for all PropertyName.
            </summary>
            <param name="property">The type of the property.</param>
            <returns>A list of options for all PropertyName</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.CustomerPropertiesModel.PropertyNameSelectionFactory.Translate(System.String)">
            <summary>
            Translates the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Commerce.VisitorGroupsCriteria.MarketSelectionFactory">
            <summary>
            <see cref="T:EPiServer.Personalization.VisitorGroups.ISelectionFactory"/> implementation which returns a list of
            available markets.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.VisitorGroupsCriteria.MarketSelectionFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.VisitorGroupsCriteria.MarketSelectionFactory"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Commerce.VisitorGroupsCriteria.MarketSelectionFactory.#ctor(Mediachase.Commerce.Markets.IMarketService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Commerce.VisitorGroupsCriteria.MarketSelectionFactory"/> class.
            </summary>
            <param name="marketService">The market service.</param>
        </member>
        <member name="M:EPiServer.Commerce.VisitorGroupsCriteria.MarketSelectionFactory.GetSelectListItems(System.Type)">
            <summary>
            Gets the select list items corresponding to the markets returned by the
            current <see cref="T:Mediachase.Commerce.Markets.IMarketService"/>.
            </summary>
            <param name="propertyType">Unused.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Business.Commerce.VisitorGroupsCriteria.OrdersFrequencyCriterion">
            <summary>
                Detect users that has placed an order in store <c>X</c> times in the last <c>Y</c> days
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.OrdersFrequencyCriterion.IsMatch(System.Security.Principal.IPrincipal,System.Web.HttpContextBase)">
            <summary>
                Detect users that has placed an order in store <c>X</c> times in the last <c>Y</c> days
            </summary>
            <param name="principal">The principal.</param>
            <param name="httpContext">The HTTP context.</param>
            <returns>
            	<c>true</c> if the is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:EPiServer.Business.Commerce.VisitorGroupsCriteria.OrdersFrequencyModel">
            <summary>
                Storage class for OrdersFrequency criterion
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.OrdersFrequencyModel.OrderTimes">
            <summary>
            Gets or sets the order times.
            </summary>
            <value>The order times.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.OrdersFrequencyModel.NumberOfDays">
            <summary>
            Gets or sets the number of days
            </summary>
            <remarks>When value of days is equal to zero, system will search all orders</remarks>
            <value>The number of days.</value>
        </member>
        <member name="T:EPiServer.Business.Commerce.Exception.ConfigurationException">
            <summary>
                Represents errors that occur during reading configuration.
            </summary>
        </member>
        <member name="T:EPiServer.Business.Commerce.Exception.CommerceException">
            <summary>
                Exception that is thrown by Commerce when a non-fatal error occurs. 
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.CommerceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Constructor initialize Serialization info and Streaming context
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.CommerceException.#ctor(System.String)">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.CommerceException.#ctor(System.String,System.Exception)">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.CommerceException.#ctor(System.String,System.String)">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="languageKey"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.CommerceException.#ctor(System.String,System.String,System.Exception)">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="languageKey"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.CommerceException.#ctor(System.String,System.String,System.String[])">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="languageKey"></param>
            <param name="list"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.CommerceException.#ctor(System.String,System.String,System.Exception,System.String[])">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="languageKey"></param>
            <param name="innerException"></param>
            <param name="list"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.ConfigurationException.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Constructor initialize Serialization info and Streaming context
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.ConfigurationException.#ctor(System.String)">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.ConfigurationException.#ctor(System.String,System.String)">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="languageKey"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.ConfigurationException.#ctor(System.String,System.String,System.Exception)">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="languageKey"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.ConfigurationException.#ctor(System.String,System.String,System.String[])">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="languageKey"></param>
            <param name="list"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.ConfigurationException.#ctor(System.String,System.String,System.Exception,System.String[])">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="languageKey"></param>
            <param name="innerException"></param>
            <param name="list"></param>
        </member>
        <member name="T:EPiServer.Business.Commerce.Exception.TagNotFoundException">
            <summary>
                Represents errors that notifies the Tag object has not been found.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.TagNotFoundException.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.TagNotFoundException.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Business.Commerce.Exception.TagNotFoundException"/> class with the detail tag Id.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.TagNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Constructor initialize Serialization info and Streaming context
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.TagNotFoundException.#ctor(System.String)">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.TagNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.TagNotFoundException.#ctor(System.String,System.String)">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="languageKey"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.TagNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="languageKey"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.TagNotFoundException.#ctor(System.String,System.String,System.String[])">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="languageKey"></param>
            <param name="list"></param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Exception.TagNotFoundException.#ctor(System.String,System.String,System.Exception,System.String[])">
            <summary>
                Constructor
            </summary>
            <param name="message"></param>
            <param name="languageKey"></param>
            <param name="innerException"></param>
            <param name="list"></param>
        </member>
        <member name="T:EPiServer.Business.Commerce.HttpModules.CatalogNodeModule">
            <summary>
            Http Module to set the commerce site context.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.HttpModules.CatalogNodeModule.Dispose">
            <summary>
                Disposes of the resources (other than memory) used by 
                the module that implements <see cref="T:System.Web.IHttpModule"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.HttpModules.CatalogNodeModule.Init(System.Web.HttpApplication)">
            <summary>
                Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"/> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application</param>
        </member>
        <member name="T:EPiServer.Business.Commerce.EventHandlers.EventServiceModule">
            <summary>
            This class listens to Catalog, Node, Entry change events.
            If it sees appropriate events, it forwards those events to frontend site (CMS).
            </summary>
        </member>
        <member name="T:EPiServer.Business.Commerce.PageBase">
            <summary>
            Base class for all template pages. Extends EPiServer.TemplatePage 
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.PageBase.SearchPage">
            <summary>
                Gets Search page
            </summary>
        </member>
        <member name="T:EPiServer.Business.Commerce.ProductEventManager">
            <summary>
            This class has several events which are trigger when Catalog, Catalog node, Catalog entry changed (in Commerce Manager).
            Register to these events helps frontend site know when something happen with Catalog, CatalogNode and CatalogEntry in the backend site (Commerce Manager).
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ProductEventManager.CreateEvent(EPiServer.Business.Commerce.ProductUpdatedEventArgs)">
            <summary>
            Base on the event type, take appropriate handler(s) and invoke them.
            </summary>
            <param name="eventArgs">The <see cref="T:EPiServer.Business.Commerce.ProductUpdatedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.ProductEventManager.CreateEvent(Mediachase.Commerce.Catalog.Events.CatalogContentUpdateEventArgs)">
            <summary>
            Base on the event type, take appropriate handler(s) and invoke them.
            </summary>
            <param name="eventArgs">The <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogContentUpdateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.ProductEventManager.CreateEvent(System.String,EPiServer.Business.Commerce.ProductUpdatedEventArgs)">
            <summary>
            Base on the event type, take appropriate handler(s) and invoke them.
            </summary>
            <param name="eventType"> Base on the event type, take appropriate handler(s) and invoke them. </param>
            <param name="eventArgs">The <see cref="T:EPiServer.Business.Commerce.ProductUpdatedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.ProductEventManager.CreateEvent(System.String,Mediachase.Commerce.Catalog.Events.CatalogContentUpdateEventArgs)">
            <summary>
            Base on the event type, take appropriate handler(s) and invoke them.
            </summary>
            <param name="eventType"> Base on the event type, take appropriate handler(s) and invoke them. </param>
            <param name="eventArgs">The <see cref="T:Mediachase.Commerce.Catalog.Events.CatalogContentUpdateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.ProductEventManager.AddEvent">
            <summary>
            Register event handler
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.ProductEventManager.RaiseEvent(EPiServer.Business.Commerce.ProductUpdatedEventArgs)">
            <summary>
            Raise event when product is updated
            </summary>
            <param name="e"> Event arguments</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.ProductEventManager.RaiseEvent(Mediachase.Commerce.Catalog.Events.CatalogContentUpdateEventArgs)">
            <summary>
            Raise event when product is updated
            </summary>
            <param name="e"> Event arguments</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.ProductEventManager.Serialize(System.EventArgs)">
            <summary>
            Serialize commerce update event arguments
            </summary>
            <param name="e"> Event arguments</param>
            <returns></returns>           
        </member>
        <member name="M:EPiServer.Business.Commerce.ProductEventManager.DeSerialize(System.Byte[])">
            <summary>
            DeSerialize event arguments
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.ProductEventManager.IsSelfRaised(EPiServer.Events.EventNotificationEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.ProductEventManager.CommerceUpdatedHandler(System.Object,EPiServer.Events.EventNotificationEventArgs)">
            <summary>
            Handler to call create event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.RelationUpdating">
            <summary>
            Occurs when a relation is about to be updated.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.RelationUpdated">
            <summary>
            Occurs when a relation is updated.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.RelationDeleted">
            <summary>
            Occurs when relation is deleted.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.AssociationUpdating">
            <summary>
            Occurs when an association is about to be updated.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.AssociationDeleted">
            <summary>
            Occurs when an association is updated.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.AssociationUpdated">
            <summary>
            Occurs when an association is deleted.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.CatalogUpdating">
            <summary>
            Occurs when a catalog is about to be updated.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.CatalogUpdated">
            <summary>
            Occurs when a catalog is updated.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.CatalogDeleted">
            <summary>
            Occurs when a catalog is deleted.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.CatalogNodeUpdating">
            <summary>
            Occurs when a catalog node is about to be updated.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.CatalogNodeUpdated">
            <summary>
            Occurs when a catalog node is updated.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.CatalogNodeDeleted">
            <summary>
            Occurs when a catalog node is deleted.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.CatalogEntryUpdating">
            <summary>
            Occurs when a catalog entry is about to be updated.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.CatalogEntryUpdated">
            <summary>
            Occurs when a catalog entry is updated.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.CatalogEntryDeleted">
            <summary>
            Occurs when a catalog entry is deleted.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.RelationDataUpdating">
            <summary>
            Occurs when a relation is about to be updated.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.RelationDataUpdated">
            <summary>
            Occurs when a relation is updated.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.RelationDataDeleted">
            <summary>
            Occurs when relation is deleted.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.AssociationDataUpdating">
            <summary>
            Occurs when an association is about to be updated.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.AssociationDataDeleted">
            <summary>
            Occurs when an association is updated.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.AssociationDataUpdated">
            <summary>
            Occurs when an association is deleted.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.CatalogDataUpdating">
            <summary>
            Occurs when a catalog is about to be updated.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.CatalogDataUpdated">
            <summary>
            Occurs when a catalog is updated.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.CatalogDataDeleted">
            <summary>
            Occurs when a catalog is deleted.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.NodeUpdating">
            <summary>
            Occurs when a catalog node is about to be updated.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.NodeUpdated">
            <summary>
            Occurs when a catalog node is updated.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.NodeDeleted">
            <summary>
            Occurs when a catalog node is deleted.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.EntryUpdating">
            <summary>
            Occurs when a catalog entry is about to be updated.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.EntryUpdated">
            <summary>
            Occurs when a catalog entry is updated.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.EntryDeleted">
            <summary>
            Occurs when a catalog entry is deleted.
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.ProductEventManager.LanguageConfigurationChanged">
            <summary>
            Occurs when catalog language configuration has changed.
            </summary>
        </member>
        <member name="T:EPiServer.Business.Commerce.ProductUpdatedEventArgs">
            <summary>
            Event arguments for Catalog, Catalog node, Catalog entry changed events.
            </summary>       
            
        </member>
        <member name="P:EPiServer.Business.Commerce.ProductUpdatedEventArgs.CatalogId">
            <summary>
            Gets or sets the catalog dto Id.
            </summary>
            <value>The catalog dto Id.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.ProductUpdatedEventArgs.CatalogNodeId">
            <summary>
            Gets or sets the catalog node dto Id.
            </summary>
            <value>The catalog node dto Id.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.ProductUpdatedEventArgs.CatalogEntryId">
            <summary>
            Gets or sets the catalog entry dto Id.
            </summary>
            <value>The catalog entry dto Id.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.ProductUpdatedEventArgs.CatalogAssociationId">
            <summary>
            Gets or sets the catalog association id.
            </summary>
            <value>The catalog association id.</value>
        </member>
        <member name="T:EPiServer.Business.Commerce.CookieHelper">
            <summary>
            Provides common ways to manage cookie.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.CookieHelper.Encrypt(System.String)">
            <summary>
            Standard DES encryption
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.CookieHelper.Decrypt(System.String)">
            <summary>
            Standard DES decryption
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.CookieHelper.Set(System.String,System.String)">
            <summary>
            Sets the specified value to cookie by key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.CookieHelper.Set(System.String,System.String,System.Boolean)">
            <summary>
            Sets the specified value to cookie by key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="encrypt">if set to <c>true</c> [encrypt].</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.CookieHelper.Get(System.String)">
            <summary>
            Gets value from cookie by key.
            </summary>
            <param name="key">The key.</param>
            <returns>Value that saved in the cookie</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.CookieHelper.Get(System.String,System.Boolean)">
            <summary>
            Gets value from cookie by key.
            </summary>
            <param name="key">The key.</param>
            <param name="decrypt">if set to <c>true</c> [decrypt].</param>
            <returns>Value that saved in the cookie</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.CookieHelper.Remove(System.String)">
            <summary>
            Removes the specified key from cookie.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.CookieHelper.BuildKey(System.String)">
            <summary>
            Build key base on the base key.
            </summary>
            <param name="key">The key.</param>
            <returns>The built key.</returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.CookieHelper.KEY_64">
            <summary>
            8 bytes randomly selected for both the Key and the Initialization Vector
            the IV is used to encrypt the first block of text so that any repetitive 
            patterns are not apparent
            </summary>
            <value>The KEY_64.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.CookieHelper.IV_64">
            <summary>
            Gets the IV_64.
            </summary>
            <value>The IV_64.</value>
        </member>
        <member name="T:EPiServer.Business.Commerce.Providers.ProductSearchProvider">
            <summary>
            SearchProductCatalogProvider class
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.Providers.ProductSearchProvider.SearchEntriesInCommerce(System.String,Mediachase.Commerce.Website.Search.SearchFilterHelper,System.Int32,System.Boolean,System.TimeSpan)">
            <summary>
            Search Entries in Commerce using ECF API
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="filter">The filter.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="cacheResults">if set to <c>true</c> [cache results].</param>
            <param name="cacheTimeout">The cache timeout.</param>
            <returns>Return display total search result</returns>
        </member>
        <member name="T:EPiServer.Business.Commerce.Providers.StaticUrlProvider">
            <summary>
            Provide page mapping for Commerce pages.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.Providers.StaticUrlProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">
            The name of the provider is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The name of the provider has a length of zero.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"/> on a provider after the provider has already been initialized.
            </exception>
        </member>
        <member name="M:EPiServer.Business.Commerce.Providers.StaticUrlProvider.GetLinkFromSettings(System.String)">
            <summary>
            Update links from CommerceSettings.
            </summary>
            <param name="commandName">Name of the command.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.Providers.StaticUrlProvider.GetNodeViewPage">
            <summary>
            Gets the default node view page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.Providers.StaticUrlProvider.GetEntryViewPage">
            <summary>
            Gets the default entry view page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.Providers.StaticUrlProvider.GetTemplateModel(EPiServer.DataAbstraction.ContentType)">
            <summary>
            Gets the template model for a <paramref name="contentType"/>.
            </summary>
            <param name="contentType">ContentType to get template model from.</param>
            <returns>The template model for a <paramref name="contentType"/></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.Providers.StaticUrlProvider.GetExternalLink(System.String,EPiServer.Core.PageReference)">
            <summary>
            Gets the external link.
            </summary>
            <param name="url">The URL.</param>
            <param name="pageRef">The page ref.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.Providers.StaticUrlProvider.GetUrl(System.String,System.Object[])">
            <summary>
            Gets the URL.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="commandParams">The command params.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.Providers.StaticUrlProvider.GetUrl(System.String)">
            <summary>
            Gets the URL.
            </summary>
            <param name="commandName">Name of the command.</param>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.Providers.StaticUrlProvider.Instance">
            <summary>
            Gets the global instance for this URL provider.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="T:EPiServer.Business.Commerce.Services.UserProfile">
            <summary>
            UserProfile object, which stores user information that would be displayed on UI
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.Services.UserProfile.Email">
            <summary>
            Gets or sets the Email.
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.Services.UserProfile.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.Services.UserProfile.BirthDate">
            <summary>
            Gets or sets the birthdate.
            </summary>
            <value>The birthdate.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.Services.UserProfile.Photo">
            <summary>
            Gets or sets the photo.
            </summary>
            <value>The photo.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.Services.UserProfile.InterestsText">
            <summary>
            Gets or sets the interests text.
            </summary>
            <value>The interests text.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.Services.UserProfile.Interests">
            <summary>
            Gets or sets the predefine interests list.
            </summary>
            <value>The interests list.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.Services.UserProfile.Activities">
            <summary>
            String includes club ID and club Header, which was seperated by # character, for example: 27#Golf
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.Services.UserProfile.UserId">
            <summary>
            Id of user having this profile
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.Services.UserProfile.IsAdmin">
            <summary>
            Gets or sets a value indicating whether this user is admin.
            </summary>
            <value><c>true</c> if this user is admin; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.Services.UserProfile.Genders">
            <summary>
            Gets or sets the gender list.
            </summary>
            <value>The gender list.</value>
        </member>
        <member name="M:EPiServer.Business.Commerce.SettingFactory.Create">
            <summary>
            Creates an initializes an instance of the <see cref="T:EPiServer.Business.Commerce.SettingFactory"/> class.
            For use with the service locator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.SettingFactory.GetStore">
            <summary>
            Gets the store for Commerce Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.SettingFactory.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.SettingFactory.Save">
            <summary>
                Save setting to Data store
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.SettingFactory.OnChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Changed"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:EPiServer.Business.Commerce.SettingFactory.Setting">
            <summary>
                Commerce Settings
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.SettingFactory.Instance">
            <summary>
            Get Instance of SettingsFactory
            </summary>
        </member>
        <member name="E:EPiServer.Business.Commerce.SettingFactory.Changed">
            <summary>
            Fired when the settings are changed.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListCriterion.IsMatch(System.Security.Principal.IPrincipal,System.Web.HttpContextBase)">
            <summary>
            Determines whether the specified principal is match.
            </summary>
            <param name="principal">The principal.</param>
            <param name="httpContext">The HTTP context.</param>
            <returns>
            	<c>true</c> if the specified principal is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListCriterion.IsMatchProductPropertyAndValue(System.Guid,System.String,System.String)">
            <summary>
            Determines whether [is match product property and value] [the specified user GUID].
            </summary>
            <param name="userGuid">The user GUID.</param>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if [is match product property and value] [the specified user GUID]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListCriterion.ComparePredefinedProperties(Mediachase.Commerce.Catalog.Dto.CatalogEntryDto,System.String,System.String)">
            <summary>
            Compares the predefined properties.
            </summary>
            <param name="entryDto">The entry dto.</param>
            <param name="pro">The pro.</param>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListCriterion.ComparePredefinedProperty2(Mediachase.Commerce.Catalog.Dto.CatalogEntryDto.CatalogEntryRow,System.String,System.String)">
            <summary>
            Compares the predefined property2.
            </summary>
            <param name="entry">The entry.</param>
            <param name="pro">The pro.</param>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListCriterion.IsMatchProductCategory(System.Guid,System.String)">
            <summary>
            Determines whether [is match product category] [the specified user GUID].
            </summary>
            <param name="userGuid">The user GUID.</param>
            <param name="category">The category.</param>
            <returns>
            	<c>true</c> if [is match product category] [the specified user GUID]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListCriterion.IsMatchBySearchFunc(System.Guid,System.Func{Mediachase.Commerce.Orders.LineItem,System.Boolean})">
            <summary>
            Determines whether [is match by search func] [the specified user GUID].
            </summary>
            <param name="userGuid">The user GUID.</param>
            <param name="searchFunc">The search func.</param>
            <returns>
            	<c>true</c> if [is match by search func] [the specified user GUID]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListCriterion.IsMatchProductCode(System.Guid,System.String)">
            <summary>
            Determines whether [is match product code] [the specified user GUID].
            </summary>
            <param name="userGuid">The user GUID.</param>
            <param name="productName">Name of the product.</param>
            <returns>
            	<c>true</c> if [is match product code] [the specified user GUID]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListModel.ComparisonType">
            <summary>
            Gets or sets the type of the comparison.
            </summary>
            <value>The type of the comparison.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListModel.ProductName">
            <summary>
            Gets or sets the name of the product.
            </summary>
            <value>The name of the product.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListModel.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListModel.Property">
            <summary>
            Gets or sets the property.
            </summary>
            <value>The property.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListModel.PropertyValue">
            <summary>
            Gets or sets the property value.
            </summary>
            <value>The property value.</value>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.ProductInCartOrWishListModel.ComparisonTypeFactory.GetSelectListItems(System.Type)">
            <summary>
            Gets a list op options for all comparision type.
            </summary>
            <param name="property">The type of the property.</param>
            <returns>A list of options for all comparision type</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.StateSelectionFactory.GetSelectListItems(System.Type)">
            <summary>
            Gets a list op options for all State.
            </summary>
            <param name="property">The type of the property.</param>
            <returns>A list of options for all State</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.RecentOrdersCriterion.IsMatch(System.Security.Principal.IPrincipal,System.Web.HttpContextBase)">
            <summary>
            Determines whether the specified principal is match.
            </summary>
            <param name="principal">The principal.</param>
            <param name="httpContext">The HTTP context.</param>
            <returns>
            	<c>true</c> if the specified principal is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:EPiServer.Business.Commerce.VisitorGroupsCriteria.RecentOrdersModel">
            <summary>
            Model to store information for RecentOrdersCriterion
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.RecentOrdersModel.WithinDays">
            <summary>
            Gets or sets the days within which to find the buyer. Zero means all orders will be searched
            </summary>
            <value>The within days.</value>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.RecentSpentCriterion.IsMatch(System.Security.Principal.IPrincipal,System.Web.HttpContextBase)">
            <summary>
            Determines whether the specified principal is match. Return true if this user's orders
            have total greater or equal then the specified total money amount in the last specified number of days.
            </summary>
            <param name="principal">The principal.</param>
            <param name="httpContext">The HTTP context.</param>
            <returns>
            	<c>true</c> if the specified principal is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.RecentSpentModel.Total">
            <summary>
            Gets or sets the amount that users' order totals should be greater than equal to.
            </summary>
            <value>The amount.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.RecentSpentModel.Currency">
            <summary>
            Gets or sets the currency in which the user order is paid.
            </summary>
            <value>The currency.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.RecentSpentModel.Days">
            <summary>
            Gets or sets the number of days to search within.
            </summary>
            <value>The days.</value>
        </member>
        <member name="T:EPiServer.Business.Commerce.VisitorGroupsCriteria.UserOrderCacheManager">
            <summary>
            This class retrieve orders for an user within a number of days, it also provide caching.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.UserOrderCacheManager.#ctor">
            <summary>
            Initializes the <see cref="T:EPiServer.Business.Commerce.VisitorGroupsCriteria.RecentSpentCriterion"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.UserOrderCacheManager.GetPurchaseOrders(System.Int32,System.Security.Principal.IPrincipal)">
            <summary>
            Gets the purchase orders for this user from cache or from database.
            </summary>
            <param name="days">The number of days within which to retrieve user orders.</param>
            <param name="principal">The principal.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.UserOrderCacheManager.GetPurchaseOrders(System.Int32,System.Guid)">
            <summary>
            Gets the purchase orders for this user from cache or from database.
            </summary>
            <param name="days">The number of days within which to retrieve user orders.</param>
            <param name="userId">The user GUID.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.UserOrderCacheManager.OrderWorkflowStarted(System.Object,System.Workflow.Runtime.WorkflowEventArgs)">
            <summary>
            Listen the workflow started event to clear cache.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Workflow.Runtime.WorkflowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.VisitorGroupsCriteria.UserOrderCacheManager.GetUserCacheKey(System.Guid)">
            <summary>
            Gets the user cache key.
            </summary>
            <param name="userGuid">The user GUID.</param>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.VisitorGroupsCriteria.UserOrderCacheManager.CacheDuration">
            <summary>
            Gets the duration of the cache in minutes.
            </summary>
            <value>The duration of the cache.</value>
        </member>
        <member name="T:EPiServer.Business.Commerce.WebControls.MostOrderProductDataSource">
            <summary>
            MostOrderProductDataSource
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.WebControls.MostOrderProductDataSource.#cctor">
            <summary>
            Initializes the <see cref="T:EPiServer.Business.Commerce.WebControls.MostOrderProductDataSource"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.WebControls.MostOrderProductDataSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Business.Commerce.WebControls.MostOrderProductDataSource"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.WebControls.MostOrderProductDataSource.CreateItem(System.Collections.Generic.List{Mediachase.Commerce.Catalog.Objects.Entry})">
            <summary>
            Create a new Entry
            </summary>
            <param name="items"></param>
            <returns>An Entry</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.WebControls.MostOrderProductDataSource.ListItems">
            <summary>
            Get list of entries
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.WebControls.MostOrderProductDataSource.GetCacheKey">
            <summary>
            Gets the cache key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.WebControls.MostOrderProductDataSource.GetBestSellerProducts">
            <summary>
            GetBestSellerProducts
            </summary>
            <returns>List of best seller products</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.WebControls.MostOrderProductDataSource.LoadItem(System.String)">
            <summary>
            Load an Entry
            </summary>
            <param name="key">Entry Code</param>
            <returns>Entry</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.WebControls.MostOrderProductDataSource.SaveItem(Mediachase.Commerce.Catalog.Objects.Entry)">
            <summary>
            Save an Entry (do nothing now)
            </summary>
            <param name="item">Entry</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.WebControls.MostOrderProductDataSource.DeleteItem(Mediachase.Commerce.Catalog.Objects.Entry)">
            <summary>
            Delete an Entry (do nothing now)
            </summary>
            <param name="item">Entry</param>
        </member>
        <member name="P:EPiServer.Business.Commerce.WebControls.MostOrderProductDataSource.EnableCache">
            <summary>
            Gets or sets a value indicating whether [enable cache].
            </summary>
            <value><c>true</c> if [enable cache]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:EPiServer.Business.Commerce.WebControls.MostOrderProductDataSource.MaxProductsCount">
            <summary>
            Max number of products
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.WebControls.MostOrderProductDataSource.FromDate">
            <summary>
            Search best seller products fromDate until now
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.WebControls.MostOrderProductDataSource.CatalogNodeId">
            <summary>
            Get best seller product from a CatalogNode with Id
            </summary>
        </member>
        <member name="T:EPiServer.Business.Commerce.Tags.Tag">
            <summary>
            Represent the Tag
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.Tag.#ctor">
            <summary>
            Construct a Tag
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.Tag.#ctor(System.String)">
            <summary>
            Construct a Tag with the specific tag name
            </summary>
            <param name="name">Tag name</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.Tag.#ctor(System.String,System.Int32)">
            <summary>
            Construct a Tag with the specific tag name
            </summary>
            <param name="name">Tag name</param>
            <param name="tagItemsCount">Tag items count</param>
        </member>
        <member name="P:EPiServer.Business.Commerce.Tags.Tag.TagItemsCount">
            <summary>
            The number of time this Tag has been hit
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.Tags.Tag.Name">
            <summary>
            Tag name
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.Tags.Tag.Id">
            <summary>
            Unique identifier
            </summary>
        </member>
        <member name="T:EPiServer.Business.Commerce.Tags.TagCloud">
            <summary>
            Represents a Tag Cloud
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagCloud.#ctor">
            <summary>
            Constructs a tag cloud
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagCloud.#ctor(EPiServer.Business.Commerce.Tags.TagCloudItem[])">
            <summary>
            Constructs a tag cloud with the specific tag cloud item
            </summary>
            <param name="items">Array of tag cloud item</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagCloud.#ctor(EPiServer.Business.Commerce.Tags.TagCloudItem[],System.Int32,System.Int32)">
            <summary>
            Constructs a tag cloud with the specific tag cloud item, with minimum and maximum of weight
            </summary>
            <param name="items">Array of tag cloud items</param>
            <param name="minWeight">The minimum number of tag weight that should be displayed</param>
            <param name="maxWeight">The maximum number of tag weight that should be displayed</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagCloud.CalculateItemWeight(EPiServer.Business.Commerce.Tags.TagCloudItem)">
            <summary>
            Returns the tag weight
            </summary>
            <param name="item">Input item to calculate weight</param>
            <returns>The item weight</returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.Tags.TagCloud.Items">
            <summary>
            Gets the tag cloud items
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.Tags.TagCloud.MaxWeight">
            <summary>
            The maximum number of tag weights that should be displayed
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.Tags.TagCloud.MinWeight">
            <summary>
            The minimum number of tag weights that should be displayed
            </summary>
        </member>
        <member name="T:EPiServer.Business.Commerce.Tags.TagCloudItem">
            <summary>
            Represents the Tag cloud item
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagCloudItem.#ctor(EPiServer.Business.Commerce.Tags.Tag)">
            <summary>
            Constructs a Tag cloud item
            </summary>
            <param name="tag">Input tag</param>
        </member>
        <member name="P:EPiServer.Business.Commerce.Tags.TagCloudItem.Parent">
            <summary>
            Gets or sets the parent TagCloud
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.Tags.TagCloudItem.InnerTag">
            <summary>
            Gets or sets the Tag object
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.Tags.TagCloudItem.Value">
            <summary>
            Gets the tag value
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.Tags.TagCloudItem.Weight">
            <summary>
            Gets the tag weight
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.Tags.TagCloudItem.LogValue">
            <summary>
            Gets the natural (base e) logarithm of Value + 1.
            </summary>
        </member>
        <member name="T:EPiServer.Business.Commerce.Tags.TagCloudItemCollection">
            <summary>
            Represent the collection of tag cloud
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagCloudItemCollection.#ctor">
            <summary>
            Construct a Tag cloud item collection
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagCloudItemCollection.#ctor(System.Collections.Generic.IList{EPiServer.Business.Commerce.Tags.TagCloudItem})">
            <summary>
            Construct a Tag cloud item collection with the inner list
            </summary>
            <param name="items">The inner list</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagCloudItemCollection.OnClearComplete">
            <summary>
            Event when Clear() complete
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagCloudItemCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Event when Insert or Add complete
            </summary>
            <param name="index">Index of the inserted/added item</param>
            <param name="value">Inserted/added object</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagCloudItemCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Event when Remove item complete
            </summary>
            <param name="index">Index of the removed item</param>
            <param name="value">Removed object</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagCloudItemCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Event when Set item complete
            </summary>
            <param name="index">Index of the modified item</param>
            <param name="oldValue">Old value</param>
            <param name="newValue">New value</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagCloudItemCollection.RecalculateMaxMinItemsCount">
            <summary>
            Recalculates the max min items count.
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.Tags.TagCloudItemCollection.MinTagCloudItemValue">
            <summary>
            Gets the min tag cloud item value.
            </summary>
            <value>The min tag cloud item value.</value>
        </member>
        <member name="T:EPiServer.Business.Commerce.Tags.TagCollection">
            <summary>
            Represent the collection of Tag
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagCollection.#ctor">
            <summary>
            Construct a Tag collection
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagCollection.#ctor(System.Collections.Generic.IList{EPiServer.Business.Commerce.Tags.Tag})">
            <summary>
            Construct a Tag collection with the inner list
            </summary>
            <param name="items">The inner list</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagCollection.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Business.Commerce.Tags.Tag})">
            <summary>
            Construct a Tag collection with the inner IEnumerable
            </summary>
            <param name="items">The inner IEnumerable</param>
        </member>
        <member name="T:EPiServer.Business.Commerce.Tags.TagFactory">
            <summary>
            Represent the Class Factory for the Tag
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagFactory.#ctor">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagFactory.GetStore">
            <summary>
            Gets the store for Tag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagFactory.IncreaseTagsHit(EPiServer.Business.Commerce.Tags.TagCollection)">
            <summary>
            Increase the tags hit, based on the input search string
            </summary>
            <param name="tags">Input Tags to update hit</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagFactory.GetTagCloud">
            <summary>
            Get Tag cloud with the default number of Items, no sort
            </summary>
            <returns>Tag cloud which has a default number of items</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagFactory.GetTagCloud(System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Get Tag cloud, which has a specific number of items inside.
            </summary>
            <param name="numberOfItems">The number of item to return</param>
            <param name="ascendingSort">sort order (order by tagItemCount), give null if you don't want to sort</param>
            <returns>Tag cloud which has a specific number of items</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagFactory.ListTags">
            <summary>
            Gets the tag collection.
            </summary>
            <returns>Collection of Tags</returns>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagFactory.Delete(System.Guid)">
            <summary>
            Delete a tag from database by Tag Guid
            </summary>
            <param name="id">Id of tag to delete</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagFactory.Delete(EPiServer.Business.Commerce.Tags.Tag)">
            <summary>
            Delete a tag from database
            </summary>
            <param name="tag">Tag to delete</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagFactory.Delete(System.Collections.Generic.ICollection{EPiServer.Business.Commerce.Tags.Tag})">
            <summary>
            Delete a list of tag from database
            </summary>
            <param name="tags">Collection of tag to delete</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagFactory.Update(EPiServer.Business.Commerce.Tags.Tag)">
            <summary>
            Update a tag
            </summary>
            <param name="tag">Tag to update</param>
        </member>
        <member name="M:EPiServer.Business.Commerce.Tags.TagFactory.GetTag(System.Guid)">
            <summary>
            Get tag by Id
            </summary>
            <param name="id">Id of tag to get</param>
            <returns>Tag that has the input Id, or null if not found</returns>
        </member>
        <member name="P:EPiServer.Business.Commerce.Tags.TagFactory.Instance">
            <summary>
            Get Instance of TagFactory
            </summary>
        </member>
        <member name="T:EPiServer.Business.Commerce.WebControls.UserControlBase">
            <summary>
                Represents base class for all user control of Commerce
            </summary>
        </member>
        <member name="P:EPiServer.Business.Commerce.WebControls.UserControlBase.SearchPage">
            <summary>
                Gets Search page
            </summary>
        </member>
    </members>
</doc>
