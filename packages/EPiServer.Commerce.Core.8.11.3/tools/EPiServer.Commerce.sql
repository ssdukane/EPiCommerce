-- EPiServer.Commerce database script--


CREATE ROLE [aspnet_Personalization_ReportingAccess];

GO

PRINT N'Creating [aspnet_Personalization_BasicAccess]...';

GO

CREATE ROLE [aspnet_Personalization_BasicAccess]

GO


PRINT N'Creating [aspnet_Personalization_FullAccess]...';


GO
CREATE ROLE [aspnet_Personalization_FullAccess];


GO
PRINT N'Creating [aspnet_Roles_ReportingAccess]...';


GO
CREATE ROLE [aspnet_Roles_ReportingAccess];


GO
PRINT N'Creating [aspnet_Roles_BasicAccess]...';


GO
CREATE ROLE [aspnet_Roles_BasicAccess];


GO
PRINT N'Creating [aspnet_Roles_FullAccess]...';


GO
CREATE ROLE [aspnet_Roles_FullAccess];


GO
PRINT N'Creating [aspnet_Profile_ReportingAccess]...';


GO
CREATE ROLE [aspnet_Profile_ReportingAccess];


GO
PRINT N'Creating [aspnet_Profile_BasicAccess]...';


GO
CREATE ROLE [aspnet_Profile_BasicAccess];


GO
PRINT N'Creating [aspnet_Profile_FullAccess]...';


GO
CREATE ROLE [aspnet_Profile_FullAccess];


GO
PRINT N'Creating [aspnet_Membership_ReportingAccess]...';


GO
CREATE ROLE [aspnet_Membership_ReportingAccess];


GO
PRINT N'Creating [aspnet_Membership_BasicAccess]...';


GO
CREATE ROLE [aspnet_Membership_BasicAccess];


GO
PRINT N'Creating [aspnet_Membership_FullAccess]...';


GO
CREATE ROLE [aspnet_Membership_FullAccess];


GO
PRINT N'Creating [aspnet_WebEvent_FullAccess]...';


GO
CREATE ROLE [aspnet_WebEvent_FullAccess];

GO



EXECUTE sp_addrolemember @rolename = N'aspnet_Personalization_ReportingAccess', @membername = N'aspnet_Personalization_FullAccess';


GO
EXECUTE sp_addrolemember @rolename = N'aspnet_Personalization_BasicAccess', @membername = N'aspnet_Personalization_FullAccess';


GO
EXECUTE sp_addrolemember @rolename = N'aspnet_Roles_ReportingAccess', @membername = N'aspnet_Roles_FullAccess';


GO
EXECUTE sp_addrolemember @rolename = N'aspnet_Roles_BasicAccess', @membername = N'aspnet_Roles_FullAccess';


GO
EXECUTE sp_addrolemember @rolename = N'aspnet_Profile_ReportingAccess', @membername = N'aspnet_Profile_FullAccess';


GO
EXECUTE sp_addrolemember @rolename = N'aspnet_Profile_BasicAccess', @membername = N'aspnet_Profile_FullAccess';


GO
EXECUTE sp_addrolemember @rolename = N'aspnet_Membership_ReportingAccess', @membername = N'aspnet_Membership_FullAccess';


GO
EXECUTE sp_addrolemember @rolename = N'aspnet_Membership_BasicAccess', @membername = N'aspnet_Membership_FullAccess';


GO
PRINT N'Creating [aspnet_Membership_ReportingAccess]...';


GO
CREATE SCHEMA [aspnet_Membership_ReportingAccess]
    AUTHORIZATION [aspnet_Membership_ReportingAccess];


GO
PRINT N'Creating [aspnet_Membership_FullAccess]...';


GO
CREATE SCHEMA [aspnet_Membership_FullAccess]
    AUTHORIZATION [aspnet_Membership_FullAccess];


GO
PRINT N'Creating [aspnet_Membership_BasicAccess]...';


GO
CREATE SCHEMA [aspnet_Membership_BasicAccess]
    AUTHORIZATION [aspnet_Membership_BasicAccess];


GO
PRINT N'Creating [aspnet_WebEvent_FullAccess]...';


GO
CREATE SCHEMA [aspnet_WebEvent_FullAccess]
    AUTHORIZATION [aspnet_WebEvent_FullAccess];


GO
PRINT N'Creating [aspnet_Roles_ReportingAccess]...';


GO
CREATE SCHEMA [aspnet_Roles_ReportingAccess]
    AUTHORIZATION [aspnet_Roles_ReportingAccess];


GO
PRINT N'Creating [aspnet_Roles_FullAccess]...';


GO
CREATE SCHEMA [aspnet_Roles_FullAccess]
    AUTHORIZATION [aspnet_Roles_FullAccess];


GO
PRINT N'Creating [aspnet_Roles_BasicAccess]...';


GO
CREATE SCHEMA [aspnet_Roles_BasicAccess]
    AUTHORIZATION [aspnet_Roles_BasicAccess];


GO
PRINT N'Creating [aspnet_Profile_ReportingAccess]...';


GO
CREATE SCHEMA [aspnet_Profile_ReportingAccess]
    AUTHORIZATION [aspnet_Profile_ReportingAccess];


GO
PRINT N'Creating [aspnet_Profile_FullAccess]...';


GO
CREATE SCHEMA [aspnet_Profile_FullAccess]
    AUTHORIZATION [aspnet_Profile_FullAccess];


GO
PRINT N'Creating [aspnet_Profile_BasicAccess]...';


GO
CREATE SCHEMA [aspnet_Profile_BasicAccess]
    AUTHORIZATION [aspnet_Profile_BasicAccess];


GO
-- EPiServer.Commerce database script--


GO
CREATE SCHEMA [aspnet_Personalization_ReportingAccess]
    AUTHORIZATION [aspnet_Personalization_ReportingAccess];


GO
PRINT N'Creating [aspnet_Personalization_FullAccess]...';


GO
CREATE SCHEMA [aspnet_Personalization_FullAccess]
    AUTHORIZATION [aspnet_Personalization_FullAccess];


GO
PRINT N'Creating [aspnet_Personalization_BasicAccess]...';


GO
CREATE SCHEMA [aspnet_Personalization_BasicAccess]
    AUTHORIZATION [aspnet_Personalization_BasicAccess];


GO

PRINT N'Creating Master Key...';


GO
CREATE MASTER KEY ENCRYPTION BY PASSWORD= N'5F18E937-6F17-4EED-8265-D2CBC9FEA553';


GO

GO

DECLARE @sql NVARCHAR(MAX)
SET @sql = 'CREATE CERTIFICATE [Mediachase_ECF50_MDP] WITH SUBJECT = ''Mediachase Certificate'', START_DATE = N''' + CONVERT(VARCHAR, GETUTCDATE(), 120) + ''', EXPIRY_DATE = N''' + CONVERT(VARCHAR, DATEADD(year, 1, GETUTCDATE()), 120) + '''';
exec sp_executesql @sql

GO
PRINT N'Creating [Mediachase_ECF50_MDP_Key]...';


GO
CREATE SYMMETRIC KEY [Mediachase_ECF50_MDP_Key]
    WITH ALGORITHM = AES_128
    ENCRYPTION BY CERTIFICATE [Mediachase_ECF50_MDP];

GO

GO
PRINT N'Creating [dbo].[udttPromotionInformation]...';


GO
CREATE TYPE [dbo].[udttPromotionInformation] AS TABLE (
    [PromotionInformationId] INT             NULL,
    [ContentReference]       NVARCHAR (100)  NOT NULL,
    [SavedAmount]            DECIMAL (18, 3) NOT NULL,
    [Description]            NVARCHAR (4000) NOT NULL,
    [IsActive]               BIT             NOT NULL);


GO
PRINT N'Creating [dbo].[udttCatalogItemSeo]...';


GO
CREATE TYPE [dbo].[udttCatalogItemSeo] AS TABLE (
    [LanguageCode]   NVARCHAR (50)    NOT NULL,
    [CatalogNodeId]  INT              NULL,
    [CatalogEntryId] INT              NULL,
    [Uri]            NVARCHAR (255)   NOT NULL,
    [ApplicationId]  UNIQUEIDENTIFIER NOT NULL,
    [UriSegment]     NVARCHAR (255)   NULL);


GO
PRINT N'Creating [dbo].[udttContentList]...';


GO
CREATE TYPE [dbo].[udttContentList] AS TABLE (
    [ContentId] INT NULL);


GO
PRINT N'Creating [dbo].[udttInventory]...';


GO
CREATE TYPE [dbo].[udttInventory] AS TABLE (
    [ApplicationId]              UNIQUEIDENTIFIER NULL,
    [CatalogEntryCode]           NVARCHAR (100)   NULL,
    [WarehouseCode]              NVARCHAR (50)    NULL,
    [IsTracked]                  BIT              NULL,
    [PurchaseAvailableQuantity]  DECIMAL (38, 9)  NULL,
    [PreorderAvailableQuantity]  DECIMAL (38, 9)  NULL,
    [BackorderAvailableQuantity] DECIMAL (38, 9)  NULL,
    [PurchaseRequestedQuantity]  DECIMAL (38, 9)  NULL,
    [PreorderRequestedQuantity]  DECIMAL (38, 9)  NULL,
    [BackorderRequestedQuantity] DECIMAL (38, 9)  NULL,
    [PurchaseAvailableUtc]       DATETIME2 (7)    NULL,
    [PreorderAvailableUtc]       DATETIME2 (7)    NULL,
    [BackorderAvailableUtc]      DATETIME2 (7)    NULL,
    [AdditionalQuantity]         DECIMAL (38, 9)  NULL,
    [ReorderMinQuantity]         DECIMAL (38, 9)  NULL);


GO
PRINT N'Creating [dbo].[udttWarehouseCode]...';


GO
CREATE TYPE [dbo].[udttWarehouseCode] AS TABLE (
    [WarehouseCode] NVARCHAR (50) NOT NULL);


GO
PRINT N'Creating [dbo].[udttWarehouse]...';


GO
CREATE TYPE [dbo].[udttWarehouse] AS TABLE (
    [WarehouseId]         INT              NULL,
    [ApplicationId]       UNIQUEIDENTIFIER NOT NULL,
    [Name]                NVARCHAR (255)   NOT NULL,
    [CreatorId]           NVARCHAR (100)   NOT NULL,
    [Created]             DATETIME         NOT NULL,
    [ModifierId]          NVARCHAR (100)   NOT NULL,
    [Modified]            DATETIME         NOT NULL,
    [IsActive]            BIT              NOT NULL,
    [IsPrimary]           BIT              NOT NULL,
    [SortOrder]           INT              NOT NULL,
    [Code]                NVARCHAR (50)    NOT NULL,
    [IsFulfillmentCenter] BIT              NOT NULL,
    [IsPickupLocation]    BIT              NOT NULL,
    [IsDeliveryLocation]  BIT              NOT NULL,
    [FirstName]           NVARCHAR (64)    NULL,
    [LastName]            NVARCHAR (64)    NULL,
    [Organization]        NVARCHAR (80)    NULL,
    [Line1]               NVARCHAR (80)    NULL,
    [Line2]               NVARCHAR (64)    NULL,
    [City]                NVARCHAR (64)    NULL,
    [State]               NVARCHAR (64)    NULL,
    [CountryCode]         NVARCHAR (50)    NULL,
    [CountryName]         NVARCHAR (50)    NULL,
    [PostalCode]          NVARCHAR (20)    NULL,
    [RegionCode]          NVARCHAR (50)    NULL,
    [RegionName]          NVARCHAR (64)    NULL,
    [DaytimePhoneNumber]  NVARCHAR (32)    NULL,
    [EveningPhoneNumber]  NVARCHAR (32)    NULL,
    [FaxNumber]           NVARCHAR (32)    NULL,
    [Email]               NVARCHAR (64)    NULL);


GO
PRINT N'Creating [dbo].[udttWarehouseInventory]...';


GO
CREATE TYPE [dbo].[udttWarehouseInventory] AS TABLE (
    [WarehouseCode]             NVARCHAR (50)    NOT NULL,
    [CatalogEntryCode]          NVARCHAR (100)   NOT NULL,
    [InStockQuantity]           DECIMAL (18)     NOT NULL,
    [ReservedQuantity]          DECIMAL (18)     NOT NULL,
    [ReorderMinQuantity]        DECIMAL (18)     NOT NULL,
    [PreorderQuantity]          DECIMAL (18)     NOT NULL,
    [BackorderQuantity]         DECIMAL (18)     NOT NULL,
    [AllowPreorder]             BIT              NOT NULL,
    [AllowBackorder]            BIT              NOT NULL,
    [InventoryStatus]           INT              NOT NULL,
    [PreorderAvailabilityDate]  DATETIME         NOT NULL,
    [BackorderAvailabilityDate] DATETIME         NOT NULL,
    [ApplicationId]             UNIQUEIDENTIFIER NOT NULL);


GO
PRINT N'Creating [dbo].[udttPriceDetail]...';


GO
CREATE TYPE [dbo].[udttPriceDetail] AS TABLE (
    [PriceValueId]     BIGINT           NOT NULL,
    [ApplicationId]    UNIQUEIDENTIFIER NULL,
    [CatalogEntryCode] NVARCHAR (100)   NULL,
    [MarketId]         NVARCHAR (8)     NULL,
    [CurrencyCode]     NVARCHAR (8)     NULL,
    [PriceTypeId]      INT              NULL,
    [PriceCode]        NVARCHAR (256)   NULL,
    [ValidFrom]        DATETIME         NULL,
    [ValidUntil]       DATETIME         NULL,
    [MinQuantity]      DECIMAL (38, 9)  NULL,
    [UnitPrice]        MONEY            NULL);


GO
PRINT N'Creating [dbo].[udttPriceType]...';


GO
CREATE TYPE [dbo].[udttPriceType] AS TABLE (
    [PriceTypeId]   INT            NOT NULL,
    [PriceTypeName] NVARCHAR (256) NOT NULL);


GO
PRINT N'Creating [dbo].[udttCatalogEntryPrice]...';


GO
CREATE TYPE [dbo].[udttCatalogEntryPrice] AS TABLE (
    [ApplicationId]    UNIQUEIDENTIFIER NOT NULL,
    [CatalogEntryCode] NVARCHAR (100)   NOT NULL,
    [MarketId]         NVARCHAR (8)     NOT NULL,
    [CurrencyCode]     NVARCHAR (8)     NOT NULL,
    [PriceTypeId]      INT              NOT NULL,
    [PriceCode]        NVARCHAR (256)   NOT NULL,
    [ValidFrom]        DATETIME         NOT NULL,
    [ValidUntil]       DATETIME         NULL,
    [MinQuantity]      DECIMAL (38, 9)  NOT NULL,
    [MaxQuantity]      DECIMAL (38, 9)  NULL,
    [UnitPrice]        MONEY            NOT NULL);


GO
PRINT N'Creating [dbo].[udttCustomerPricing]...';


GO
CREATE TYPE [dbo].[udttCustomerPricing] AS TABLE (
    [PriceTypeId] INT            NOT NULL,
    [PriceCode]   NVARCHAR (256) NOT NULL);


GO
PRINT N'Creating [dbo].[udttCatalogKeyAndQuantity]...';


GO
CREATE TYPE [dbo].[udttCatalogKeyAndQuantity] AS TABLE (
    [ApplicationId]    UNIQUEIDENTIFIER NOT NULL,
    [CatalogEntryCode] NVARCHAR (100)   NOT NULL,
    [Quantity]         DECIMAL (38, 9)  NOT NULL);


GO
PRINT N'Creating [dbo].[udttCatalogKey]...';


GO
CREATE TYPE [dbo].[udttCatalogKey] AS TABLE (
    [ApplicationId]    UNIQUEIDENTIFIER NOT NULL,
    [CatalogEntryCode] NVARCHAR (100)   NOT NULL);


GO
PRINT N'Creating [dbo].[udttCompatCurrencyRate]...';


GO
CREATE TYPE [dbo].[udttCompatCurrencyRate] AS TABLE (
    [Operation]        CHAR (1)   NULL,
    [CurrencyRateId]   INT        NULL,
    [AverageRate]      FLOAT (53) NULL,
    [EndOfDayRate]     FLOAT (53) NULL,
    [ModifiedDate]     DATETIME   NULL,
    [FromCurrencyId]   INT        NULL,
    [ToCurrencyId]     INT        NULL,
    [CurrencyRateDate] DATETIME   NULL);


GO
PRINT N'Creating [dbo].[udttCompatCurrency]...';


GO
CREATE TYPE [dbo].[udttCompatCurrency] AS TABLE (
    [Operation]     CHAR (1)         NULL,
    [CurrencyId]    INT              NULL,
    [CurrencyCode]  NVARCHAR (8)     NULL,
    [Name]          NVARCHAR (50)    NULL,
    [ModifiedDate]  DATETIME         NULL,
    [ApplicationId] UNIQUEIDENTIFIER NULL);


GO
PRINT N'Creating [dbo].[udttCatalogNodeList]...';


GO
CREATE TYPE [dbo].[udttCatalogNodeList] AS TABLE (
    [CatalogNodeId] INT NULL);


GO
PRINT N'Creating [dbo].[udttCatalogList]...';


GO
CREATE TYPE [dbo].[udttCatalogList] AS TABLE (
    [CatalogId] INT NULL);


GO
PRINT N'Creating [dbo].[udttEntityList]...';


GO
CREATE TYPE [dbo].[udttEntityList] AS TABLE (
    [EntityId]  INT NULL,
    [SortOrder] INT NULL);


GO
PRINT N'Creating [dbo].[udttOrderGroupId]...';


GO
CREATE TYPE [dbo].[udttOrderGroupId] AS TABLE (
    [OrderGroupId] INT NULL);


GO
PRINT N'Creating [dbo].[udttCountryCode]...';


GO
CREATE TYPE [dbo].[udttCountryCode] AS TABLE (
    [CountryCode] NVARCHAR (8) NULL);


GO
PRINT N'Creating [dbo].[udttLanguageCode]...';


GO
CREATE TYPE [dbo].[udttLanguageCode] AS TABLE (
    [LanguageCode] NVARCHAR (84) NULL);


GO
PRINT N'Creating [dbo].[udttCurrencyCode]...';


GO
CREATE TYPE [dbo].[udttCurrencyCode] AS TABLE (
    [CurrencyCode] NVARCHAR (8) NULL);


GO
PRINT N'Creating [dbo].[PromotionInformation]...';


GO
CREATE TABLE [dbo].[PromotionInformation] (
    [PromotionInformationId] INT             IDENTITY (1, 1) NOT NULL,
    [OrdergroupId]           INT             NOT NULL,
    [ContentReference]       NVARCHAR (100)  NOT NULL,
    [SavedAmount]            DECIMAL (18, 3) NOT NULL,
    [Description]            NVARCHAR (4000) NOT NULL,
    [IsActive]               BIT             NOT NULL,
    CONSTRAINT [PK_PromotionInformationId] PRIMARY KEY NONCLUSTERED ([PromotionInformationId] ASC) ON [PRIMARY]
);


GO
PRINT N'Creating [dbo].[PromotionInformation].[IDX_PromotionInformation_OrderGroupId]...';


GO
CREATE UNIQUE CLUSTERED INDEX [IDX_PromotionInformation_OrderGroupId]
    ON [dbo].[PromotionInformation]([PromotionInformationId] ASC, [OrdergroupId] ASC);


GO
PRINT N'Creating [dbo].[GuidCatalogMapping]...';


GO
CREATE TABLE [dbo].[GuidCatalogMapping] (
    [ContentGuid] UNIQUEIDENTIFIER NOT NULL,
    [CatalogId]   INT              NOT NULL,
    CONSTRAINT [PK_GuidCatalogMapping] PRIMARY KEY NONCLUSTERED ([ContentGuid] ASC)
);


GO
PRINT N'Creating [dbo].[GuidCatalogMapping].[IX_GuidCatalogMapping_CatalogId]...';


GO
CREATE CLUSTERED INDEX [IX_GuidCatalogMapping_CatalogId]
    ON [dbo].[GuidCatalogMapping]([CatalogId] ASC);


GO
PRINT N'Creating [dbo].[GuidNodeMapping]...';


GO
CREATE TABLE [dbo].[GuidNodeMapping] (
    [ContentGuid]   UNIQUEIDENTIFIER NOT NULL,
    [CatalogNodeId] INT              NOT NULL,
    CONSTRAINT [PK_GuidNodeMapping] PRIMARY KEY NONCLUSTERED ([ContentGuid] ASC)
);


GO
PRINT N'Creating [dbo].[GuidNodeMapping].[IX_GuidNodeMapping_CatalogNodeId]...';


GO
CREATE CLUSTERED INDEX [IX_GuidNodeMapping_CatalogNodeId]
    ON [dbo].[GuidNodeMapping]([CatalogNodeId] ASC);


GO
PRINT N'Creating [dbo].[GuidEntryMapping]...';


GO
CREATE TABLE [dbo].[GuidEntryMapping] (
    [ContentGuid]    UNIQUEIDENTIFIER NOT NULL,
    [CatalogEntryId] INT              NOT NULL,
    CONSTRAINT [PK_GuidEntryMapping] PRIMARY KEY NONCLUSTERED ([ContentGuid] ASC)
);


GO
PRINT N'Creating [dbo].[GuidEntryMapping].[IX_GuidEntryMapping_CatalogEntryId]...';


GO
CREATE CLUSTERED INDEX [IX_GuidEntryMapping_CatalogEntryId]
    ON [dbo].[GuidEntryMapping]([CatalogEntryId] ASC);


GO
PRINT N'Creating [dbo].[MarketShippingMethods]...';


GO
CREATE TABLE [dbo].[MarketShippingMethods] (
    [MarketId]         NVARCHAR (8)     NOT NULL,
    [ShippingMethodId] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_MarketShippingMethods] PRIMARY KEY CLUSTERED ([MarketId] ASC, [ShippingMethodId] ASC)
);


GO
PRINT N'Creating [dbo].[CatalogItemAsset]...';


GO
CREATE TABLE [dbo].[CatalogItemAsset] (
    [CatalogNodeId]  INT            NOT NULL,
    [CatalogEntryId] INT            NOT NULL,
    [AssetType]      NVARCHAR (190) NOT NULL,
    [AssetKey]       NVARCHAR (254) NOT NULL,
    [GroupName]      NVARCHAR (100) NULL,
    [SortOrder]      INT            NOT NULL,
    CONSTRAINT [PK_CatalogItemAsset] PRIMARY KEY CLUSTERED ([CatalogNodeId] ASC, [CatalogEntryId] ASC, [AssetType] ASC, [AssetKey] ASC)
);


GO
PRINT N'Creating [dbo].[CatalogItemAsset].[IX_CatalogItemAsset_EntryId]...';


GO
CREATE NONCLUSTERED INDEX [IX_CatalogItemAsset_EntryId]
    ON [dbo].[CatalogItemAsset]([CatalogEntryId] ASC);


GO
PRINT N'Creating [dbo].[CatalogItemAsset].[IX_CatalogItemAsset_NodeId]...';


GO
CREATE NONCLUSTERED INDEX [IX_CatalogItemAsset_NodeId]
    ON [dbo].[CatalogItemAsset]([CatalogNodeId] ASC);


GO
PRINT N'Creating [dbo].[InventoryService]...';


GO
CREATE TABLE [dbo].[InventoryService] (
    [ApplicationId]              UNIQUEIDENTIFIER NOT NULL,
    [CatalogEntryCode]           NVARCHAR (100)   NOT NULL,
    [WarehouseCode]              NVARCHAR (50)    NOT NULL,
    [IsTracked]                  BIT              NOT NULL,
    [PurchaseAvailableQuantity]  DECIMAL (38, 9)  NOT NULL,
    [PreorderAvailableQuantity]  DECIMAL (38, 9)  NOT NULL,
    [BackorderAvailableQuantity] DECIMAL (38, 9)  NOT NULL,
    [PurchaseRequestedQuantity]  DECIMAL (38, 9)  NOT NULL,
    [PreorderRequestedQuantity]  DECIMAL (38, 9)  NOT NULL,
    [BackorderRequestedQuantity] DECIMAL (38, 9)  NOT NULL,
    [PreorderAvailableUtc]       DATETIME2 (7)    NOT NULL,
    [PurchaseAvailableUtc]       DATETIME2 (7)    NOT NULL,
    [BackorderAvailableUtc]      DATETIME2 (7)    NOT NULL,
    [AdditionalQuantity]         DECIMAL (38, 9)  NOT NULL,
    [ReorderMinQuantity]         DECIMAL (38, 9)  NOT NULL,
    CONSTRAINT [PK_ManagedInventory] PRIMARY KEY CLUSTERED ([ApplicationId] ASC, [CatalogEntryCode] ASC, [WarehouseCode] ASC)
);


GO
PRINT N'Creating [dbo].[CatalogNodeAsset]...';


GO
CREATE TABLE [dbo].[CatalogNodeAsset] (
    [CatalogNodeId] INT            NOT NULL,
    [AssetKey]      NVARCHAR (256) NOT NULL,
    [SortOrder]     INT            NULL,
    CONSTRAINT [PK_CatalogNodeAsset] PRIMARY KEY CLUSTERED ([CatalogNodeId] ASC, [AssetKey] ASC)
);


GO
PRINT N'Creating [dbo].[CatalogEntryAsset]...';


GO
CREATE TABLE [dbo].[CatalogEntryAsset] (
    [CatalogEntryId] INT            NOT NULL,
    [AssetKey]       NVARCHAR (256) NOT NULL,
    [SortOrder]      INT            NULL,
    CONSTRAINT [PK_CatalogEntryAsset] PRIMARY KEY CLUSTERED ([CatalogEntryId] ASC, [AssetKey] ASC)
);


GO
PRINT N'Creating [dbo].[CatalogAsset]...';


GO
CREATE TABLE [dbo].[CatalogAsset] (
    [AssetKey]  NVARCHAR (256)  NOT NULL,
    [AssetType] NVARCHAR (4000) NULL,
    [GroupName] NVARCHAR (100)  NULL,
    PRIMARY KEY CLUSTERED ([AssetKey] ASC)
);


GO
PRINT N'Creating [dbo].[AzureCompatible]...';


GO
CREATE TABLE [dbo].[AzureCompatible] (
    [AzureCompatible] BIT NULL
);


GO
PRINT N'Creating [dbo].[AzureCompatible].[IX_AzureCompatible_AzureCompatible]...';


GO
CREATE CLUSTERED INDEX [IX_AzureCompatible_AzureCompatible]
    ON [dbo].[AzureCompatible]([AzureCompatible] ASC);


GO
PRINT N'Creating [dbo].[ApplicationLog]...';


GO
CREATE TABLE [dbo].[ApplicationLog] (
    [LogId]         INT              IDENTITY (1, 1) NOT NULL,
    [Source]        NVARCHAR (100)   NOT NULL,
    [Operation]     NVARCHAR (50)    NOT NULL,
    [ObjectKey]     NVARCHAR (100)   NOT NULL,
    [ObjectType]    NVARCHAR (50)    NOT NULL,
    [Username]      NVARCHAR (50)    NOT NULL,
    [Created]       DATETIME         NOT NULL,
    [Succeeded]     BIT              NOT NULL,
    [IPAddress]     NVARCHAR (50)    NULL,
    [Notes]         NVARCHAR (255)   NULL,
    [ApplicationId] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_ApplicationLog] PRIMARY KEY CLUSTERED ([LogId] ASC)
);


GO
PRINT N'Creating [dbo].[Segment]...';


GO
CREATE TABLE [dbo].[Segment] (
    [SegmentId]        INT              IDENTITY (1, 1) NOT NULL,
    [Name]             NVARCHAR (50)    NOT NULL,
    [DisplayName]      NVARCHAR (50)    NOT NULL,
    [Description]      NVARCHAR (500)   NULL,
    [ApplicationId]    UNIQUEIDENTIFIER NOT NULL,
    [ExpressionFilter] VARBINARY (MAX)  NULL,
    CONSTRAINT [PK_ecf_mktg-Segment] PRIMARY KEY CLUSTERED ([SegmentId] ASC)
);


GO
PRINT N'Creating [dbo].[Segment].[IX_ecf_mktg-Segment]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_ecf_mktg-Segment]
    ON [dbo].[Segment]([Name] ASC);


GO
PRINT N'Creating [dbo].[McBlobStorage]...';


GO
CREATE TABLE [dbo].[McBlobStorage] (
    [uid]           UNIQUEIDENTIFIER NOT NULL,
    [contentType]   NVARCHAR (255)   NULL,
    [ownerType]     NVARCHAR (254)   NULL,
    [ownerKey]      NVARCHAR (254)   NULL,
    [provider]      NVARCHAR (50)    NULL,
    [BlobData]      IMAGE            NULL,
    [fileName]      NVARCHAR (1024)  NULL,
    [fileExtension] NVARCHAR (8)     NULL,
    [allowSearch]   BIT              NULL,
    [created]       DATETIME         NOT NULL,
    [isTemporary]   BIT              NOT NULL
);


GO
PRINT N'Creating [dbo].[McBlobStorage].[IX_McBlobStorage_McBlobStorage]...';


GO
CREATE CLUSTERED INDEX [IX_McBlobStorage_McBlobStorage]
    ON [dbo].[McBlobStorage]([uid] ASC);


GO
PRINT N'Creating [dbo].[SchemaVersion_MarketingSystem]...';


GO
CREATE TABLE [dbo].[SchemaVersion_MarketingSystem] (
    [Major]       INT      NOT NULL,
    [Minor]       INT      NOT NULL,
    [Patch]       INT      NOT NULL,
    [InstallDate] DATETIME NOT NULL
);


GO
PRINT N'Creating [dbo].[SchemaVersion_MarketingSystem].[IX_SchemaVersion_MarketingSystem_Major]...';


GO
CREATE CLUSTERED INDEX [IX_SchemaVersion_MarketingSystem_Major]
    ON [dbo].[SchemaVersion_MarketingSystem]([Major] ASC);


GO
PRINT N'Creating [dbo].[MarketCountries]...';


GO
CREATE TABLE [dbo].[MarketCountries] (
    [MarketId]    NVARCHAR (8) NOT NULL,
    [CountryCode] NVARCHAR (8) NOT NULL,
    CONSTRAINT [PK_MarketCountries] PRIMARY KEY CLUSTERED ([MarketId] ASC, [CountryCode] ASC)
);


GO
PRINT N'Creating [dbo].[Merchant]...';


GO
CREATE TABLE [dbo].[Merchant] (
    [MerchantId]    UNIQUEIDENTIFIER NOT NULL,
    [Name]          NVARCHAR (150)   NOT NULL,
    [ApplicationId] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_Merchant] PRIMARY KEY CLUSTERED ([MerchantId] ASC)
);


GO
PRINT N'Creating [dbo].[CommonSettings]...';


GO
CREATE TABLE [dbo].[CommonSettings] (
    [SettingId]     INT              IDENTITY (1, 1) NOT NULL,
    [ApplicationId] UNIQUEIDENTIFIER NOT NULL,
    [Name]          NVARCHAR (100)   NOT NULL,
    [Value]         NVARCHAR (50)    NULL,
    CONSTRAINT [PK_CommonSettings] PRIMARY KEY CLUSTERED ([SettingId] ASC)
);


GO
PRINT N'Creating [dbo].[SiteSecurity]...';


GO
CREATE TABLE [dbo].[SiteSecurity] (
    [SiteId]    UNIQUEIDENTIFIER NOT NULL,
    [SID]       NVARCHAR (250)   NOT NULL,
    [Scope]     NVARCHAR (50)    NOT NULL,
    [AllowMask] BINARY (8)       NOT NULL,
    [DenyMask]  BINARY (8)       NOT NULL
);


GO
PRINT N'Creating [dbo].[SiteSecurity].[IX_SiteSecurity_SiteId]...';


GO
CREATE CLUSTERED INDEX [IX_SiteSecurity_SiteId]
    ON [dbo].[SiteSecurity]([SiteId] ASC);


GO
PRINT N'Creating [dbo].[SiteSecurity].[IX_SiteSecurity]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SiteSecurity]
    ON [dbo].[SiteSecurity]([SiteId] ASC, [Scope] ASC, [SID] ASC);


GO
PRINT N'Creating [dbo].[PromotionPolicy]...';


GO
CREATE TABLE [dbo].[PromotionPolicy] (
    [PromotionPolicyId] INT IDENTITY (1, 1) NOT NULL,
    [PromotionId]       INT NOT NULL,
    [PolicyId]          INT NOT NULL,
    CONSTRAINT [PK_ecf_mktg-PromotionPolicy] PRIMARY KEY CLUSTERED ([PromotionPolicyId] ASC)
);


GO
PRINT N'Creating [dbo].[MarketLanguages]...';


GO
CREATE TABLE [dbo].[MarketLanguages] (
    [MarketId]     NVARCHAR (8)  NOT NULL,
    [LanguageCode] NVARCHAR (84) NOT NULL,
    CONSTRAINT [PK_MarketLanguages] PRIMARY KEY CLUSTERED ([MarketId] ASC, [LanguageCode] ASC)
);


GO
PRINT N'Creating [dbo].[mcweb_ListViewProfile]...';


GO
CREATE TABLE [dbo].[mcweb_ListViewProfile] (
    [ListViewProfileId] INT              IDENTITY (1, 1) NOT NULL,
    [UserId]            INT              NOT NULL,
    [MetaClassName]     NVARCHAR (50)    NOT NULL,
    [ViewName]          NVARCHAR (50)    NOT NULL,
    [PlaceName]         NVARCHAR (50)    NOT NULL,
    [IsSystem]          BIT              NOT NULL,
    [IsPublic]          BIT              NOT NULL,
    [XSListViewProfile] NTEXT            NOT NULL,
    [UserUid]           UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_mcweb_ListViewProfile] PRIMARY KEY CLUSTERED ([ListViewProfileId] ASC)
);


GO
PRINT N'Creating [dbo].[Site]...';


GO
CREATE TABLE [dbo].[Site] (
    [SiteId]        UNIQUEIDENTIFIER NOT NULL,
    [Name]          NVARCHAR (50)    NOT NULL,
    [Description]   NVARCHAR (255)   NULL,
    [Domain]        NVARCHAR (1000)  NULL,
    [Folder]        NVARCHAR (255)   NOT NULL,
    [IsDefault]     BIT              NOT NULL,
    [IsActive]      BIT              NOT NULL,
    [ApplicationId] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_Site] PRIMARY KEY CLUSTERED ([SiteId] ASC)
);


GO
PRINT N'Creating [dbo].[PromotionLanguage]...';


GO
CREATE TABLE [dbo].[PromotionLanguage] (
    [PromotionLanguageId] INT            IDENTITY (1, 1) NOT NULL,
    [DisplayName]         NVARCHAR (250) NOT NULL,
    [LanguageCode]        NVARCHAR (50)  NOT NULL,
    [PromotionId]         INT            NOT NULL,
    CONSTRAINT [PK_ecf_mktg-PromotionLanguage] PRIMARY KEY CLUSTERED ([PromotionLanguageId] ASC)
);


GO
PRINT N'Creating [dbo].[CurrencyRate]...';


GO
CREATE TABLE [dbo].[CurrencyRate] (
    [CurrencyRateId]   INT        IDENTITY (1, 1) NOT NULL,
    [AverageRate]      FLOAT (53) NULL,
    [EndOfDayRate]     FLOAT (53) NULL,
    [ModifiedDate]     DATETIME   NOT NULL,
    [FromCurrencyId]   INT        NOT NULL,
    [ToCurrencyId]     INT        NOT NULL,
    [CurrencyRateDate] DATETIME   NOT NULL,
    CONSTRAINT [CurrencyRate_PK] PRIMARY KEY CLUSTERED ([CurrencyRateId] ASC)
);


GO
PRINT N'Creating [dbo].[PromotionCondition]...';


GO
CREATE TABLE [dbo].[PromotionCondition] (
    [PromotionConditionId] INT            IDENTITY (1, 1) NOT NULL,
    [PromotionId]          INT            NOT NULL,
    [ExpressionId]         INT            NOT NULL,
    [CatalogName]          NVARCHAR (250) NULL,
    [CatalogNodeId]        NVARCHAR (50)  NULL,
    [CatalogEntryId]       NVARCHAR (250) NULL,
    CONSTRAINT [PK_ecf_mktg-PromotionCondition] PRIMARY KEY CLUSTERED ([PromotionConditionId] ASC)
);


GO
PRINT N'Creating [dbo].[MarketCurrencies]...';


GO
CREATE TABLE [dbo].[MarketCurrencies] (
    [MarketId]     NVARCHAR (8) NOT NULL,
    [CurrencyCode] NVARCHAR (8) NOT NULL,
    CONSTRAINT [PK_MarketCurrencies] PRIMARY KEY CLUSTERED ([MarketId] ASC, [CurrencyCode] ASC)
);


GO
PRINT N'Creating [dbo].[CatalogSecurity]...';


GO
CREATE TABLE [dbo].[CatalogSecurity] (
    [CatalogId] INT            NOT NULL,
    [SID]       NVARCHAR (250) NOT NULL,
    [Scope]     NVARCHAR (50)  NOT NULL,
    [AllowMask] BINARY (8)     NOT NULL,
    [DenyMask]  BINARY (8)     NOT NULL
);


GO
PRINT N'Creating [dbo].[CatalogSecurity].[IX_CatalogSecurity_CatalogId]...';


GO
CREATE CLUSTERED INDEX [IX_CatalogSecurity_CatalogId]
    ON [dbo].[CatalogSecurity]([CatalogId] ASC);


GO
PRINT N'Creating [dbo].[CatalogSecurity].[IX_CatalogSecurity]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CatalogSecurity]
    ON [dbo].[CatalogSecurity]([CatalogId] ASC, [SID] ASC, [Scope] ASC);


GO
PRINT N'Creating [dbo].[aspnet_WebEvent_Events]...';


GO
CREATE TABLE [dbo].[aspnet_WebEvent_Events] (
    [EventId]                CHAR (32)       NOT NULL,
    [EventTimeUtc]           DATETIME        NOT NULL,
    [EventTime]              DATETIME        NOT NULL,
    [EventType]              NVARCHAR (256)  NOT NULL,
    [EventSequence]          DECIMAL (19)    NOT NULL,
    [EventOccurrence]        DECIMAL (19)    NOT NULL,
    [EventCode]              INT             NOT NULL,
    [EventDetailCode]        INT             NOT NULL,
    [Message]                NVARCHAR (1024) NULL,
    [ApplicationPath]        NVARCHAR (256)  NULL,
    [ApplicationVirtualPath] NVARCHAR (256)  NULL,
    [MachineName]            NVARCHAR (256)  NOT NULL,
    [RequestUrl]             NVARCHAR (1024) NULL,
    [ExceptionType]          NVARCHAR (256)  NULL,
    [Details]                NTEXT           NULL,
    PRIMARY KEY CLUSTERED ([EventId] ASC)
);


GO
PRINT N'Creating [dbo].[Application]...';


GO
CREATE TABLE [dbo].[Application] (
    [ApplicationId] UNIQUEIDENTIFIER NOT NULL,
    [Name]          NVARCHAR (200)   NOT NULL,
    [IsActive]      BIT              NOT NULL,
    CONSTRAINT [PK_Aplication] PRIMARY KEY CLUSTERED ([ApplicationId] ASC),
    CONSTRAINT [AX_Application_Name] UNIQUE NONCLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[SchemaVersion_ApplicationSystem]...';


GO
CREATE TABLE [dbo].[SchemaVersion_ApplicationSystem] (
    [Major]       INT      NOT NULL,
    [Minor]       INT      NOT NULL,
    [Patch]       INT      NOT NULL,
    [InstallDate] DATETIME NOT NULL
);


GO
PRINT N'Creating [dbo].[SchemaVersion_ApplicationSystem].[IX_SchemaVersion_ApplicationSystem_Major]...';


GO
CREATE CLUSTERED INDEX [IX_SchemaVersion_ApplicationSystem_Major]
    ON [dbo].[SchemaVersion_ApplicationSystem]([Major] ASC);


GO
PRINT N'Creating [dbo].[Promotion]...';


GO
CREATE TABLE [dbo].[Promotion] (
    [PromotionId]              INT              IDENTITY (1, 1) NOT NULL,
    [Name]                     NVARCHAR (50)    NOT NULL,
    [ApplicationId]            UNIQUEIDENTIFIER NOT NULL,
    [Status]                   NVARCHAR (50)    NOT NULL,
    [StartDate]                DATETIME         NOT NULL,
    [EndDate]                  DATETIME         NOT NULL,
    [CouponCode]               NVARCHAR (50)    NULL,
    [OfferAmount]              MONEY            NOT NULL,
    [OfferType]                INT              NOT NULL,
    [PromotionGroup]           NVARCHAR (50)    NOT NULL,
    [CampaignId]               INT              NOT NULL,
    [ExclusivityType]          NVARCHAR (50)    NOT NULL,
    [Priority]                 INT              NOT NULL,
    [Created]                  DATETIME         NOT NULL,
    [Modified]                 DATETIME         NULL,
    [ModifiedBy]               NVARCHAR (50)    NOT NULL,
    [PromotionType]            NVARCHAR (50)    NOT NULL,
    [PerOrderLimit]            INT              NOT NULL,
    [ApplicationLimit]         INT              NOT NULL,
    [Params]                   VARBINARY (MAX)  NULL,
    [CustomerLimit]            INT              NOT NULL,
    [MaxEntryDiscountQuantity] DECIMAL (18)     NULL,
    CONSTRAINT [PK_ecf_mktg-Promotion] PRIMARY KEY CLUSTERED ([PromotionId] ASC)
);


GO
PRINT N'Creating [dbo].[CatalogNodeSearchResults]...';


GO
CREATE TABLE [dbo].[CatalogNodeSearchResults] (
    [SearchSetId]   UNIQUEIDENTIFIER NOT NULL,
    [CatalogNodeId] INT              NOT NULL,
    [Created]       DATETIME         NULL
);


GO
PRINT N'Creating [dbo].[CatalogNodeSearchResults].[IX_CatalogNodeSearchResults_SearchSetId]...';


GO
CREATE CLUSTERED INDEX [IX_CatalogNodeSearchResults_SearchSetId]
    ON [dbo].[CatalogNodeSearchResults]([SearchSetId] ASC);


GO
PRINT N'Creating [dbo].[GroupPolicy]...';


GO
CREATE TABLE [dbo].[GroupPolicy] (
    [GroupPolicyId] INT           IDENTITY (1, 1) NOT NULL,
    [GroupName]     NVARCHAR (50) NOT NULL,
    [PolicyId]      INT           NOT NULL,
    CONSTRAINT [PK_ecf_mktg-GroupPolicy] PRIMARY KEY CLUSTERED ([GroupPolicyId] ASC)
);


GO
PRINT N'Creating [dbo].[Market]...';


GO
CREATE TABLE [dbo].[Market] (
    [MarketId]            NVARCHAR (8)    NOT NULL,
    [Created]             DATETIME        NOT NULL,
    [Modified]            DATETIME        NOT NULL,
    [IsEnabled]           BIT             NOT NULL,
    [MarketName]          NVARCHAR (50)   NOT NULL,
    [MarketDescription]   NVARCHAR (4000) NOT NULL,
    [DefaultCurrencyCode] NVARCHAR (8)    NOT NULL,
    [DefaultLanguageCode] NVARCHAR (84)   NOT NULL,
    CONSTRAINT [PK_Market] PRIMARY KEY CLUSTERED ([MarketId] ASC),
    CONSTRAINT [AX_Market_MarketName] UNIQUE NONCLUSTERED ([MarketName] ASC)
);


GO
PRINT N'Creating [dbo].[mcmd_SelectedEnumValue]...';


GO
CREATE TABLE [dbo].[mcmd_SelectedEnumValue] (
    [SelectedEnumValueId] INT              IDENTITY (1, 1) NOT NULL,
    [Key]                 UNIQUEIDENTIFIER NOT NULL,
    [TypeName]            NVARCHAR (50)    NOT NULL,
    [Id]                  INT              NOT NULL,
    CONSTRAINT [PK_mcmd_SelectedEnumValue] PRIMARY KEY CLUSTERED ([SelectedEnumValueId] ASC)
);


GO
PRINT N'Creating [dbo].[CatalogNodeRelation]...';


GO
CREATE TABLE [dbo].[CatalogNodeRelation] (
    [CatalogId]    INT NOT NULL,
    [ParentNodeId] INT NOT NULL,
    [ChildNodeId]  INT NOT NULL,
    [SortOrder]    INT NOT NULL,
    CONSTRAINT [PK_CatalogNodeRelation] PRIMARY KEY CLUSTERED ([CatalogId] ASC, [ParentNodeId] ASC, [ChildNodeId] ASC)
);


GO
PRINT N'Creating [dbo].[Policy]...';


GO
CREATE TABLE [dbo].[Policy] (
    [PolicyId]      INT              IDENTITY (1, 1) NOT NULL,
    [Name]          NVARCHAR (50)    NOT NULL,
    [Status]        NVARCHAR (20)    NOT NULL,
    [ExpressionId]  INT              NOT NULL,
    [ApplicationId] UNIQUEIDENTIFIER NOT NULL,
    [IsLocal]       BIT              NOT NULL,
    CONSTRAINT [PK_ecf_mktg-Policy] PRIMARY KEY CLUSTERED ([PolicyId] ASC)
);


GO
PRINT N'Creating [dbo].[MetaStringDictionaryValue]...';


GO
CREATE TABLE [dbo].[MetaStringDictionaryValue] (
    [MetaKey] INT            NOT NULL,
    [Key]     NVARCHAR (100) NOT NULL,
    [Value]   NTEXT          NOT NULL,
    CONSTRAINT [PK_MetaStringDictionaryValue] PRIMARY KEY CLUSTERED ([MetaKey] ASC, [Key] ASC)
);


GO
PRINT N'Creating [dbo].[MetaStringDictionaryValue].[IX_MetaStringDictionaryMetaKey]...';


GO
CREATE NONCLUSTERED INDEX [IX_MetaStringDictionaryMetaKey]
    ON [dbo].[MetaStringDictionaryValue]([MetaKey] ASC);


GO
PRINT N'Creating [dbo].[Currency]...';


GO
CREATE TABLE [dbo].[Currency] (
    [CurrencyCode]        NVARCHAR (8)     NOT NULL,
    [Created]             DATETIME         NOT NULL,
    [Modified]            DATETIME         NOT NULL,
    [CurrencyName]        NVARCHAR (50)    NOT NULL,
    [CompatCurrencyId]    INT              IDENTITY (1, 1) NOT NULL,
    [CompatApplicationId] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_Currency] PRIMARY KEY CLUSTERED ([CurrencyCode] ASC),
    CONSTRAINT [AX_CompatCurrencyId] UNIQUE NONCLUSTERED ([CompatCurrencyId] ASC)
);


GO
PRINT N'Creating [dbo].[mcmd_MetaField]...';


GO
CREATE TABLE [dbo].[mcmd_MetaField] (
    [MetaFieldId]  INT            IDENTITY (1, 1) NOT NULL,
    [MetaClassId]  INT            NOT NULL,
    [Name]         NVARCHAR (50)  NOT NULL,
    [FriendlyName] NVARCHAR (255) NOT NULL,
    [TypeName]     NVARCHAR (50)  NOT NULL,
    [Nullable]     BIT            NOT NULL,
    [DefaultValue] NTEXT          NOT NULL,
    [ReadOnly]     BIT            NOT NULL,
    [XSDataSource] NTEXT          NULL,
    [XSAttributes] NTEXT          NULL,
    [Owner]        NVARCHAR (255) NOT NULL,
    [AccessLevel]  INT            NOT NULL,
    CONSTRAINT [PK_mcmd_MetaField] PRIMARY KEY CLUSTERED ([MetaFieldId] ASC),
    CONSTRAINT [IX_mcmd_MetaField] UNIQUE NONCLUSTERED ([MetaClassId] ASC, [Name] ASC)
);


GO
PRINT N'Creating [dbo].[Expression]...';


GO
CREATE TABLE [dbo].[Expression] (
    [ExpressionId]  INT              IDENTITY (1, 1) NOT NULL,
    [ApplicationId] UNIQUEIDENTIFIER NOT NULL,
    [Name]          NVARCHAR (50)    NOT NULL,
    [Description]   NVARCHAR (250)   NULL,
    [Category]      NVARCHAR (50)    NOT NULL,
    [ExpressionXml] NTEXT            NOT NULL,
    [Created]       DATETIME         NOT NULL,
    [Modified]      DATETIME         NULL,
    [ModifiedBy]    NVARCHAR (50)    NULL,
    CONSTRAINT [PK_ecf_mktg-Expression] PRIMARY KEY CLUSTERED ([ExpressionId] ASC)
);


GO
PRINT N'Creating [dbo].[MetaRule]...';


GO
CREATE TABLE [dbo].[MetaRule] (
    [RuleId]      INT   IDENTITY (1, 1) NOT NULL,
    [MetaClassId] INT   NOT NULL,
    [Data]        IMAGE NULL,
    CONSTRAINT [PK_MetaRule] PRIMARY KEY CLUSTERED ([RuleId] ASC)
);


GO
PRINT N'Creating [dbo].[CatalogNode]...';


GO
CREATE TABLE [dbo].[CatalogNode] (
    [CatalogNodeId]   INT              IDENTITY (1, 1) NOT NULL,
    [CatalogId]       INT              NOT NULL,
    [StartDate]       DATETIME         NOT NULL,
    [EndDate]         DATETIME         NOT NULL,
    [Name]            NVARCHAR (100)   NOT NULL,
    [TemplateName]    NVARCHAR (50)    NULL,
    [Code]            NVARCHAR (100)   NOT NULL,
    [ParentNodeId]    INT              NOT NULL,
    [MetaClassId]     INT              NOT NULL,
    [IsActive]        BIT              NOT NULL,
    [SortOrder]       INT              NOT NULL,
    [ApplicationId]   UNIQUEIDENTIFIER NOT NULL,
    [ContentAssetsID] UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_CatalogItem] PRIMARY KEY CLUSTERED ([CatalogNodeId] ASC),
    CONSTRAINT [IX_CatalogItem] UNIQUE NONCLUSTERED ([Code] ASC, [ApplicationId] ASC)
);


GO
PRINT N'Creating [dbo].[mcmd_MetaFieldMap]...';


GO
CREATE TABLE [dbo].[mcmd_MetaFieldMap] (
    [MetaFieldMapId]  INT           NOT NULL,
    [Name]            NVARCHAR (50) NOT NULL,
    [SrcMetaClassId]  INT           NOT NULL,
    [DestMetaClassId] INT           NOT NULL,
    [XSReferences]    NTEXT         NULL,
    [XSElements]      NTEXT         NULL,
    CONSTRAINT [PK_mcmd_MetaFieldMap] PRIMARY KEY CLUSTERED ([MetaFieldMapId] ASC)
);


GO
PRINT N'Creating [dbo].[CatalogLanguageMap]...';


GO
CREATE TABLE [dbo].[CatalogLanguageMap] (
    [Language]  NVARCHAR (10) NOT NULL,
    [LCID]      INT           NULL,
    [Collation] NVARCHAR (50) NULL
);


GO
PRINT N'Creating [dbo].[CatalogLanguageMap].[IX_CatalogLanguageMap_Language]...';


GO
CREATE CLUSTERED INDEX [IX_CatalogLanguageMap_Language]
    ON [dbo].[CatalogLanguageMap]([Language] ASC);


GO
PRINT N'Creating [dbo].[CampaignSegment]...';


GO
CREATE TABLE [dbo].[CampaignSegment] (
    [CampaignSegmentId] INT IDENTITY (1, 1) NOT NULL,
    [SegmentId]         INT NOT NULL,
    [CampaignId]        INT NOT NULL,
    CONSTRAINT [PK_ecf_mktg-CampaignSegment] PRIMARY KEY CLUSTERED ([CampaignSegmentId] ASC)
);


GO
PRINT N'Creating [dbo].[MetaObjectValue]...';


GO
CREATE TABLE [dbo].[MetaObjectValue] (
    [MetaKey]      INT NOT NULL,
    [MetaClassId]  INT NOT NULL,
    [MetaObjectId] INT NOT NULL,
    CONSTRAINT [PK_MetaObjectValue] PRIMARY KEY CLUSTERED ([MetaKey] ASC)
);


GO
PRINT N'Creating [dbo].[mcmd_MetaClassDataSource]...';


GO
CREATE TABLE [dbo].[mcmd_MetaClassDataSource] (
    [MetaClassDataSourceId] INT           IDENTITY (1, 1) NOT NULL,
    [MetaClassId]           INT           NOT NULL,
    [PrimaryTable]          NVARCHAR (50) NOT NULL,
    [XSExtendedTables]      NTEXT         NULL,
    [XSConditions]          NTEXT         NULL,
    CONSTRAINT [PK_mcmd_MetaClassDataSource] PRIMARY KEY CLUSTERED ([MetaClassDataSourceId] ASC)
);


GO
PRINT N'Creating [dbo].[CatalogLanguage]...';


GO
CREATE TABLE [dbo].[CatalogLanguage] (
    [CatalogId]    INT            NOT NULL,
    [LanguageCode] NVARCHAR (50)  NOT NULL,
    [UriSegment]   NVARCHAR (255) NULL,
    CONSTRAINT [PK_CatalogLanguage] PRIMARY KEY CLUSTERED ([CatalogId] ASC, [LanguageCode] ASC)
);


GO
PRINT N'Creating [dbo].[MetaMultiValueDictionary]...';


GO
CREATE TABLE [dbo].[MetaMultiValueDictionary] (
    [MetaKey]          INT NOT NULL,
    [MetaDictionaryId] INT NOT NULL,
    CONSTRAINT [PK_MetaMultiValueDictionary] PRIMARY KEY CLUSTERED ([MetaKey] ASC, [MetaDictionaryId] ASC)
);


GO
PRINT N'Creating [dbo].[Campaign]...';


GO
CREATE TABLE [dbo].[Campaign] (
    [CampaignId]    INT              IDENTITY (1, 1) NOT NULL,
    [ApplicationId] UNIQUEIDENTIFIER NOT NULL,
    [StartDate]     DATETIME         NOT NULL,
    [EndDate]       DATETIME         NOT NULL,
    [Name]          NVARCHAR (50)    NOT NULL,
    [Created]       DATETIME         NOT NULL,
    [Exported]      DATETIME         NULL,
    [Modified]      DATETIME         NULL,
    [ModifiedBy]    NVARCHAR (50)    NULL,
    [IsActive]      BIT              NOT NULL,
    [IsArchived]    BIT              NOT NULL,
    [Comments]      NVARCHAR (1024)  NULL,
    CONSTRAINT [PK_ecf_mktg-Campaign] PRIMARY KEY CLUSTERED ([CampaignId] ASC)
);


GO
PRINT N'Creating [dbo].[CatalogItemSeo]...';


GO
CREATE TABLE [dbo].[CatalogItemSeo] (
    [LanguageCode]   NVARCHAR (50)    NOT NULL,
    [CatalogNodeId]  INT              NULL,
    [CatalogEntryId] INT              NULL,
    [Uri]            NVARCHAR (255)   NOT NULL,
    [Title]          NVARCHAR (150)   NULL,
    [Description]    NVARCHAR (355)   NULL,
    [Keywords]       NVARCHAR (355)   NULL,
    [ApplicationId]  UNIQUEIDENTIFIER NOT NULL,
    [UriSegment]     NVARCHAR (255)   NULL,
    CONSTRAINT [PK_CatalogItemSeo] PRIMARY KEY CLUSTERED ([Uri] ASC, [ApplicationId] ASC, [LanguageCode] ASC)
);


GO
PRINT N'Creating [dbo].[CatalogItemSeo].[IX_CatalogItemSeo_CatalogEntryId]...';


GO
CREATE NONCLUSTERED INDEX [IX_CatalogItemSeo_CatalogEntryId]
    ON [dbo].[CatalogItemSeo]([CatalogEntryId] ASC);


GO
PRINT N'Creating [dbo].[CatalogItemSeo].[IX_CatalogItemSeo_CatalogNodeId]...';


GO
CREATE NONCLUSTERED INDEX [IX_CatalogItemSeo_CatalogNodeId]
    ON [dbo].[CatalogItemSeo]([CatalogNodeId] ASC);


GO
PRINT N'Creating [dbo].[CatalogItemSeo].[IX_CatalogItemSeo_UniqueSegment_CatalogEntry]...';


GO
CREATE NONCLUSTERED INDEX [IX_CatalogItemSeo_UniqueSegment_CatalogEntry]
    ON [dbo].[CatalogItemSeo]([UriSegment] ASC, [CatalogEntryId] ASC, [ApplicationId] ASC);


GO
PRINT N'Creating [dbo].[MetaKey]...';


GO
CREATE TABLE [dbo].[MetaKey] (
    [MetaKey]      INT           IDENTITY (1, 1) NOT NULL,
    [MetaObjectId] INT           NOT NULL,
    [MetaClassId]  INT           NOT NULL,
    [MetaFieldId]  INT           NOT NULL,
    [Language]     NVARCHAR (20) NULL,
    CONSTRAINT [PK_MetaKey] PRIMARY KEY CLUSTERED ([MetaKey] ASC)
);


GO
PRINT N'Creating [dbo].[MetaKey].[IX_MetaKey_MetaObjectIdMetaClassId]...';


GO
CREATE NONCLUSTERED INDEX [IX_MetaKey_MetaObjectIdMetaClassId]
    ON [dbo].[MetaKey]([MetaObjectId] ASC, [MetaClassId] ASC);


GO
PRINT N'Creating [dbo].[MetaKey].[IX_MetaKey2]...';


GO
CREATE NONCLUSTERED INDEX [IX_MetaKey2]
    ON [dbo].[MetaKey]([MetaObjectId] ASC, [MetaClassId] ASC, [MetaFieldId] ASC);


GO
PRINT N'Creating [dbo].[mcmd_MetaFieldType]...';


GO
CREATE TABLE [dbo].[mcmd_MetaFieldType] (
    [MetaFieldTypeId] INT            IDENTITY (1, 1) NOT NULL,
    [Name]            NVARCHAR (50)  NOT NULL,
    [FriendlyName]    NVARCHAR (255) NOT NULL,
    [McDataType]      INT            NOT NULL,
    [XSViews]         NTEXT          NULL,
    [XSAttributes]    NTEXT          NULL,
    [Owner]           NVARCHAR (255) NOT NULL,
    [AccessLevel]     INT            NOT NULL,
    CONSTRAINT [PK_mcmd_MetaFieldType] PRIMARY KEY CLUSTERED ([MetaFieldTypeId] ASC),
    CONSTRAINT [IX_mcmd_MetaFieldType] UNIQUE NONCLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[WarehouseInventory]...';


GO
CREATE TABLE [dbo].[WarehouseInventory] (
    [WarehouseCode]             NVARCHAR (50)    NOT NULL,
    [CatalogEntryCode]          NVARCHAR (100)   NOT NULL,
    [InStockQuantity]           DECIMAL (18)     NOT NULL,
    [ReservedQuantity]          DECIMAL (18)     NOT NULL,
    [ReorderMinQuantity]        DECIMAL (18)     NOT NULL,
    [PreorderQuantity]          DECIMAL (18)     NOT NULL,
    [BackorderQuantity]         DECIMAL (18)     NOT NULL,
    [AllowPreorder]             BIT              NOT NULL,
    [AllowBackorder]            BIT              NOT NULL,
    [InventoryStatus]           INT              NOT NULL,
    [PreorderAvailabilityDate]  DATETIME         NOT NULL,
    [BackorderAvailabilityDate] DATETIME         NOT NULL,
    [ApplicationId]             UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_WarehouseInventory] PRIMARY KEY CLUSTERED ([WarehouseCode] ASC, [CatalogEntryCode] ASC, [ApplicationId] ASC)
);


GO
PRINT N'Creating [dbo].[mcmd_Module]...';


GO
CREATE TABLE [dbo].[mcmd_Module] (
    [ModuleId]     INT           IDENTITY (1, 1) NOT NULL,
    [Name]         NVARCHAR (50) NOT NULL,
    [XSAttributes] NTEXT         NULL,
    CONSTRAINT [PK_mcmd_Module] PRIMARY KEY CLUSTERED ([ModuleId] ASC)
);


GO
PRINT N'Creating [dbo].[MetaFileValue]...';


GO
CREATE TABLE [dbo].[MetaFileValue] (
    [MetaKey]       INT            NOT NULL,
    [FileName]      NVARCHAR (256) NULL,
    [ContentType]   NVARCHAR (256) NULL,
    [Data]          IMAGE          NULL,
    [Size]          INT            NOT NULL,
    [CreationTime]  DATETIME       NOT NULL,
    [LastWriteTime] DATETIME       NOT NULL,
    [LastReadTime]  DATETIME       NOT NULL,
    CONSTRAINT [PK_MetaFileValue] PRIMARY KEY CLUSTERED ([MetaKey] ASC)
);


GO
PRINT N'Creating [dbo].[CatalogEntrySearchResults_SingleSort]...';


GO
CREATE TABLE [dbo].[CatalogEntrySearchResults_SingleSort] (
    [SearchSetId]    UNIQUEIDENTIFIER NOT NULL,
    [ResultIndex]    INT              NOT NULL,
    [Created]        DATETIME         NOT NULL,
    [CatalogEntryId] INT              NOT NULL,
    [ApplicationId]  UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_CatalogEntrySearchResults_SingleSort] PRIMARY KEY CLUSTERED ([SearchSetId] ASC, [ResultIndex] ASC)
);


GO
PRINT N'Creating [dbo].[CatalogEntrySearchResults_SingleSort].[IX_CatalogEntrySearchResults_SingleSort_Created]...';


GO
CREATE NONCLUSTERED INDEX [IX_CatalogEntrySearchResults_SingleSort_Created]
    ON [dbo].[CatalogEntrySearchResults_SingleSort]([Created] ASC);


GO
PRINT N'Creating [dbo].[ReturnReasonDictionary]...';


GO
CREATE TABLE [dbo].[ReturnReasonDictionary] (
    [ReturnReasonId]   INT              IDENTITY (1, 1) NOT NULL,
    [ReturnReasonText] NVARCHAR (50)    NOT NULL,
    [ApplicationId]    UNIQUEIDENTIFIER NOT NULL,
    [Ordering]         INT              NOT NULL,
    [Visible]          BIT              NULL,
    CONSTRAINT [PK_ReturnReasonDictionary] PRIMARY KEY CLUSTERED ([ReturnReasonText] ASC, [ApplicationId] ASC)
);


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationPerUser]...';


GO
CREATE TABLE [dbo].[aspnet_PersonalizationPerUser] (
    [Id]              UNIQUEIDENTIFIER NOT NULL,
    [PathId]          UNIQUEIDENTIFIER NULL,
    [UserId]          UNIQUEIDENTIFIER NULL,
    [PageSettings]    IMAGE            NOT NULL,
    [LastUpdatedDate] DATETIME         NOT NULL,
    PRIMARY KEY NONCLUSTERED ([Id] ASC)
);


GO
EXECUTE sp_tableoption @TableNamePattern = N'[dbo].[aspnet_PersonalizationPerUser]', @OptionName = N'text in row', @OptionValue = N'6000';


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationPerUser].[aspnet_PersonalizationPerUser_index1]...';


GO
CREATE UNIQUE CLUSTERED INDEX [aspnet_PersonalizationPerUser_index1]
    ON [dbo].[aspnet_PersonalizationPerUser]([PathId] ASC, [UserId] ASC);


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationPerUser].[aspnet_PersonalizationPerUser_ncindex2]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [aspnet_PersonalizationPerUser_ncindex2]
    ON [dbo].[aspnet_PersonalizationPerUser]([UserId] ASC, [PathId] ASC);


GO
PRINT N'Creating [dbo].[mcmd_MetaView]...';


GO
CREATE TABLE [dbo].[mcmd_MetaView] (
    [MetaViewId]        INT            IDENTITY (1, 1) NOT NULL,
    [MetaClassId]       INT            NOT NULL,
    [Card]              NVARCHAR (50)  NOT NULL,
    [Name]              NVARCHAR (50)  NOT NULL,
    [FriendlyName]      NVARCHAR (255) NOT NULL,
    [XSAttributes]      NTEXT          NULL,
    [XSFilters]         NTEXT          NULL,
    [XSSorts]           NTEXT          NULL,
    [XSGroups]          NTEXT          NULL,
    [XSAvailableFields] NTEXT          NULL,
    [Owner]             NVARCHAR (255) NOT NULL,
    [AccessLevel]       INT            NOT NULL,
    CONSTRAINT [PK_mcmd_MetaView] PRIMARY KEY CLUSTERED ([MetaViewId] ASC),
    CONSTRAINT [IX_mcmd_MetaView] UNIQUE NONCLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[CatalogEntrySearchResults]...';


GO
CREATE TABLE [dbo].[CatalogEntrySearchResults] (
    [SearchSetId]    UNIQUEIDENTIFIER NOT NULL,
    [CatalogEntryId] INT              NOT NULL,
    [Created]        DATETIME         NULL,
    [SortOrder]      INT              NULL
);


GO
PRINT N'Creating [dbo].[CatalogEntrySearchResults].[IX_CatalogEntrySearchResults_SearchSetId]...';


GO
CREATE CLUSTERED INDEX [IX_CatalogEntrySearchResults_SearchSetId]
    ON [dbo].[CatalogEntrySearchResults]([SearchSetId] ASC);


GO
PRINT N'Creating [dbo].[MetaDictionaryLocalization]...';


GO
CREATE TABLE [dbo].[MetaDictionaryLocalization] (
    [MetaDictionaryLocalizationId] INT             IDENTITY (1, 1) NOT NULL,
    [MetaDictionaryId]             INT             NOT NULL,
    [Language]                     NVARCHAR (20)   NOT NULL,
    [Value]                        NVARCHAR (2048) NOT NULL,
    [Tag]                          IMAGE           NULL,
    CONSTRAINT [PK_MetaDictionaryLocalization] PRIMARY KEY CLUSTERED ([MetaDictionaryLocalizationId] ASC),
    CONSTRAINT [IX_MetaDictionaryLocalization] UNIQUE NONCLUSTERED ([MetaDictionaryId] ASC, [Language] ASC)
);


GO
PRINT N'Creating [dbo].[JurisdictionRelation]...';


GO
CREATE TABLE [dbo].[JurisdictionRelation] (
    [JurisdictionId]      INT NOT NULL,
    [JurisdictionGroupId] INT NOT NULL,
    CONSTRAINT [PK_JurisdictionRelation] PRIMARY KEY CLUSTERED ([JurisdictionId] ASC, [JurisdictionGroupId] ASC)
);


GO
PRINT N'Creating [dbo].[PickList]...';


GO
CREATE TABLE [dbo].[PickList] (
    [PickListId]    INT           IDENTITY (1, 1) NOT NULL,
    [Name]          NVARCHAR (50) NOT NULL,
    [Created]       DATETIME      NOT NULL,
    [CreatedBy]     NVARCHAR (50) NULL,
    [WarehouseCode] NVARCHAR (50) NULL,
    CONSTRAINT [PK_PickList] PRIMARY KEY CLUSTERED ([PickListId] ASC)
);


GO
PRINT N'Creating [dbo].[PickList].[IX_PickList_WarehouseCode]...';


GO
CREATE NONCLUSTERED INDEX [IX_PickList_WarehouseCode]
    ON [dbo].[PickList]([WarehouseCode] ASC);


GO
PRINT N'Creating [dbo].[CatalogEntryRelation]...';


GO
CREATE TABLE [dbo].[CatalogEntryRelation] (
    [ParentEntryId]  INT            NOT NULL,
    [ChildEntryId]   INT            NOT NULL,
    [RelationTypeId] NVARCHAR (50)  NOT NULL,
    [Quantity]       MONEY          NULL,
    [GroupName]      NVARCHAR (100) NULL,
    [SortOrder]      INT            NOT NULL,
    CONSTRAINT [PK_CatalogEntryRelation] PRIMARY KEY CLUSTERED ([ParentEntryId] ASC, [ChildEntryId] ASC, [RelationTypeId] ASC),
    CONSTRAINT [IX_CatalogEntryRelation] UNIQUE NONCLUSTERED ([RelationTypeId] ASC, [ChildEntryId] ASC, [ParentEntryId] ASC)
);


GO
PRINT N'Creating [dbo].[MetaDictionary]...';


GO
CREATE TABLE [dbo].[MetaDictionary] (
    [MetaDictionaryId] INT             IDENTITY (1, 1) NOT NULL,
    [MetaFieldId]      INT             NOT NULL,
    [Value]            NVARCHAR (2048) NOT NULL,
    [Tag]              IMAGE           NULL,
    CONSTRAINT [PK_MetaDictionary] PRIMARY KEY CLUSTERED ([MetaDictionaryId] ASC)
);


GO
PRINT N'Creating [dbo].[mcmd_MetaEnum]...';


GO
CREATE TABLE [dbo].[mcmd_MetaEnum] (
    [MetaEnumId]   INT            IDENTITY (1, 1) NOT NULL,
    [Id]           INT            NOT NULL,
    [TypeName]     NVARCHAR (50)  NOT NULL,
    [FriendlyName] NVARCHAR (255) NOT NULL,
    [OrderId]      INT            NOT NULL,
    [Owner]        NVARCHAR (255) NOT NULL,
    [AccessLevel]  INT            NOT NULL,
    CONSTRAINT [PK_mcmd_MetaEnum] PRIMARY KEY CLUSTERED ([MetaEnumId] ASC),
    CONSTRAINT [IX_mcmd_MetaEnum] UNIQUE NONCLUSTERED ([Id] ASC, [TypeName] ASC)
);


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAllUsers]...';


GO
CREATE TABLE [dbo].[aspnet_PersonalizationAllUsers] (
    [PathId]          UNIQUEIDENTIFIER NOT NULL,
    [PageSettings]    IMAGE            NOT NULL,
    [LastUpdatedDate] DATETIME         NOT NULL,
    PRIMARY KEY CLUSTERED ([PathId] ASC)
);


GO
EXECUTE sp_tableoption @TableNamePattern = N'[dbo].[aspnet_PersonalizationAllUsers]', @OptionName = N'text in row', @OptionValue = N'6000';


GO
PRINT N'Creating [dbo].[OrderShipmentStatus]...';


GO
CREATE TABLE [dbo].[OrderShipmentStatus] (
    [OrderShipmentStatusId] INT              NOT NULL,
    [Name]                  NVARCHAR (50)    NOT NULL,
    [ApplicationId]         UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_OrderShipmentStatus] PRIMARY KEY CLUSTERED ([OrderShipmentStatusId] ASC, [ApplicationId] ASC)
);


GO
PRINT N'Creating [dbo].[CatalogEntryAssociation]...';


GO
CREATE TABLE [dbo].[CatalogEntryAssociation] (
    [CatalogAssociationId] INT           NOT NULL,
    [CatalogEntryId]       INT           NOT NULL,
    [SortOrder]            INT           NOT NULL,
    [AssociationTypeId]    NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_CatalogEntryAssociation] PRIMARY KEY CLUSTERED ([CatalogAssociationId] ASC, [CatalogEntryId] ASC),
    CONSTRAINT [IX_CatalogEntryAssociation] UNIQUE NONCLUSTERED ([CatalogAssociationId] ASC, [CatalogEntryId] ASC)
);


GO
PRINT N'Creating [dbo].[mcmd_MetaClass]...';


GO
CREATE TABLE [dbo].[mcmd_MetaClass] (
    [MetaClassId]    INT            IDENTITY (1, 1) NOT NULL,
    [Name]           NVARCHAR (50)  NOT NULL,
    [FriendlyName]   NVARCHAR (255) NOT NULL,
    [PluralName]     NVARCHAR (255) NOT NULL,
    [TitleFieldName] NVARCHAR (50)  NOT NULL,
    [XSValidators]   NTEXT          NULL,
    [XSAttributes]   NTEXT          NULL,
    [XSExtensions]   NTEXT          NULL,
    [Owner]          NVARCHAR (255) NOT NULL,
    [AccessLevel]    INT            NOT NULL,
    [XSModules]      NTEXT          NULL,
    CONSTRAINT [PK_mcmd_MetaClass] PRIMARY KEY CLUSTERED ([MetaClassId] ASC),
    CONSTRAINT [IX_mcmd_MetaClass] UNIQUE NONCLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[ReturnFormStatus]...';


GO
CREATE TABLE [dbo].[ReturnFormStatus] (
    [ReturnFormStatusId] INT              NOT NULL,
    [Name]               NVARCHAR (50)    NOT NULL,
    [ApplicationId]      UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_ReturnFormStatus] PRIMARY KEY CLUSTERED ([ReturnFormStatusId] ASC, [ApplicationId] ASC)
);


GO
PRINT N'Creating [dbo].[MetaClassMetaFieldRelation]...';


GO
CREATE TABLE [dbo].[MetaClassMetaFieldRelation] (
    [MetaClassId] INT NOT NULL,
    [MetaFieldId] INT NOT NULL,
    [Weight]      INT NOT NULL,
    [Enabled]     BIT NOT NULL,
    CONSTRAINT [PK_MetaClassMetaFieldRelation] PRIMARY KEY CLUSTERED ([MetaClassId] ASC, [MetaFieldId] ASC)
);


GO
PRINT N'Creating [dbo].[OrderNoteType]...';


GO
CREATE TABLE [dbo].[OrderNoteType] (
    [OrderNoteTypeId] INT              NOT NULL,
    [Name]            NVARCHAR (50)    NOT NULL,
    [ApplicationId]   UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_OrderNoteType] PRIMARY KEY CLUSTERED ([OrderNoteTypeId] ASC, [ApplicationId] ASC)
);


GO
PRINT N'Creating [dbo].[CatalogEntry]...';


GO
CREATE TABLE [dbo].[CatalogEntry] (
    [CatalogEntryId]  INT              IDENTITY (1, 1) NOT NULL,
    [CatalogId]       INT              NOT NULL,
    [StartDate]       DATETIME         NOT NULL,
    [EndDate]         DATETIME         NOT NULL,
    [Name]            NVARCHAR (100)   NOT NULL,
    [TemplateName]    NVARCHAR (50)    NULL,
    [Code]            NVARCHAR (100)   NOT NULL,
    [ClassTypeId]     NVARCHAR (50)    NOT NULL,
    [MetaClassId]     INT              NOT NULL,
    [IsActive]        BIT              NOT NULL,
    [SerializedData]  IMAGE            NULL,
    [ApplicationId]   UNIQUEIDENTIFIER NOT NULL,
    [ContentAssetsID] UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_CatalogEntity] PRIMARY KEY CLUSTERED ([CatalogEntryId] ASC),
    CONSTRAINT [IX_CatalogEntity] UNIQUE NONCLUSTERED ([Code] ASC, [ApplicationId] ASC)
);


GO
PRINT N'Creating [dbo].[mcmd_TmpMetaFile]...';


GO
CREATE TABLE [dbo].[mcmd_TmpMetaFile] (
    [TmpFileId] INT              IDENTITY (1, 1) NOT NULL,
    [Created]   DATETIME         NOT NULL,
    [FileUID]   UNIQUEIDENTIFIER NOT NULL,
    [FileName]  NVARCHAR (255)   NOT NULL,
    [Body]      IMAGE            NULL,
    CONSTRAINT [PK_mcmd_TmpMetaFile] PRIMARY KEY CLUSTERED ([TmpFileId] ASC)
);


GO
PRINT N'Creating [dbo].[JurisdictionGroup]...';


GO
CREATE TABLE [dbo].[JurisdictionGroup] (
    [JurisdictionGroupId] INT              IDENTITY (1, 1) NOT NULL,
    [ApplicationId]       UNIQUEIDENTIFIER NOT NULL,
    [DisplayName]         NVARCHAR (250)   NOT NULL,
    [JurisdictionType]    INT              NOT NULL,
    [Code]                NVARCHAR (50)    NOT NULL,
    CONSTRAINT [PK_JurisdictionGroup] PRIMARY KEY CLUSTERED ([JurisdictionGroupId] ASC)
);


GO
PRINT N'Creating [dbo].[CatalogAssociation]...';


GO
CREATE TABLE [dbo].[CatalogAssociation] (
    [CatalogAssociationId]   INT            IDENTITY (1, 1) NOT NULL,
    [CatalogEntryId]         INT            NOT NULL,
    [AssociationName]        NVARCHAR (150) NOT NULL,
    [AssociationDescription] NVARCHAR (255) NULL,
    [SortOrder]              INT            NOT NULL,
    CONSTRAINT [PK_CatalogRelation] PRIMARY KEY CLUSTERED ([CatalogAssociationId] ASC),
    CONSTRAINT [IX_CatalogAssociation] UNIQUE NONCLUSTERED ([AssociationName] ASC, [CatalogEntryId] ASC)
);


GO
PRINT N'Creating [dbo].[aspnet_Paths]...';


GO
CREATE TABLE [dbo].[aspnet_Paths] (
    [ApplicationId] UNIQUEIDENTIFIER NOT NULL,
    [PathId]        UNIQUEIDENTIFIER NOT NULL,
    [Path]          NVARCHAR (256)   NOT NULL,
    [LoweredPath]   NVARCHAR (256)   NOT NULL,
    PRIMARY KEY NONCLUSTERED ([PathId] ASC)
);


GO
PRINT N'Creating [dbo].[aspnet_Paths].[aspnet_Paths_index]...';


GO
CREATE UNIQUE CLUSTERED INDEX [aspnet_Paths_index]
    ON [dbo].[aspnet_Paths]([ApplicationId] ASC, [LoweredPath] ASC);


GO
PRINT N'Creating [dbo].[mcmd_MetaModelVersionId]...';


GO
CREATE TABLE [dbo].[mcmd_MetaModelVersionId] (
    [Id]        INT              IDENTITY (1, 1) NOT NULL,
    [VersionId] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_mcmd_MetaModelVersionId] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Jurisdiction]...';


GO
CREATE TABLE [dbo].[Jurisdiction] (
    [JurisdictionId]     INT              IDENTITY (1, 1) NOT NULL,
    [DisplayName]        NVARCHAR (100)   NOT NULL,
    [StateProvinceCode]  NVARCHAR (50)    NULL,
    [CountryCode]        NVARCHAR (50)    NOT NULL,
    [JurisdictionType]   INT              NOT NULL,
    [ZipPostalCodeStart] NVARCHAR (50)    NULL,
    [ZipPostalCodeEnd]   NVARCHAR (50)    NULL,
    [City]               NVARCHAR (50)    NULL,
    [District]           NVARCHAR (50)    NULL,
    [County]             NVARCHAR (50)    NULL,
    [GeoCode]            NVARCHAR (255)   NULL,
    [ApplicationId]      UNIQUEIDENTIFIER NOT NULL,
    [Code]               NVARCHAR (50)    NOT NULL,
    CONSTRAINT [PK_TaxRegion] PRIMARY KEY CLUSTERED ([JurisdictionId] ASC)
);


GO
PRINT N'Creating [dbo].[Catalog]...';


GO
CREATE TABLE [dbo].[Catalog] (
    [CatalogId]       INT              IDENTITY (1, 1) NOT NULL,
    [Name]            NVARCHAR (150)   NOT NULL,
    [StartDate]       DATETIME         NULL,
    [EndDate]         DATETIME         NULL,
    [DefaultCurrency] NVARCHAR (128)   NULL,
    [WeightBase]      NVARCHAR (128)   NULL,
    [DefaultLanguage] NVARCHAR (10)    NULL,
    [IsPrimary]       BIT              NOT NULL,
    [IsActive]        BIT              NOT NULL,
    [Created]         DATETIME         NOT NULL,
    [Modified]        DATETIME         NOT NULL,
    [CreatorId]       NVARCHAR (50)    NULL,
    [ModifierId]      NVARCHAR (50)    NULL,
    [SortOrder]       INT              NOT NULL,
    [ApplicationId]   UNIQUEIDENTIFIER NOT NULL,
    [Owner]           NVARCHAR (255)   NULL,
    [LengthBase]      NVARCHAR (128)   NULL,
    CONSTRAINT [PK_Catalog_1] PRIMARY KEY CLUSTERED ([CatalogId] ASC)
);


GO
PRINT N'Creating [dbo].[mcmd_MetaLink]...';


GO
CREATE TABLE [dbo].[mcmd_MetaLink] (
    [LinkId]        INT           IDENTITY (1, 1) NOT NULL,
    [MetaClassName] NVARCHAR (50) NULL,
    [MetaObjectId]  INT           NULL,
    [UID]           NTEXT         NULL,
    CONSTRAINT [PK_mcmd_MetaLink] PRIMARY KEY CLUSTERED ([LinkId] ASC)
);


GO
PRINT N'Creating [dbo].[TaxLanguage]...';


GO
CREATE TABLE [dbo].[TaxLanguage] (
    [TaxLanguageId] INT           IDENTITY (1, 1) NOT NULL,
    [DisplayName]   NVARCHAR (50) NOT NULL,
    [LanguageCode]  NVARCHAR (50) NOT NULL,
    [TaxId]         INT           NOT NULL,
    CONSTRAINT [PK_TaxLanguage] PRIMARY KEY CLUSTERED ([TaxLanguageId] ASC)
);


GO
PRINT N'Creating [dbo].[PriceDetail]...';


GO
CREATE TABLE [dbo].[PriceDetail] (
    [PriceValueId]     BIGINT           IDENTITY (1, 1) NOT NULL,
    [Created]          DATETIME2 (7)    NOT NULL,
    [Modified]         DATETIME2 (7)    NOT NULL,
    [ApplicationId]    UNIQUEIDENTIFIER NOT NULL,
    [CatalogEntryCode] NVARCHAR (100)   NOT NULL,
    [MarketId]         NVARCHAR (8)     NOT NULL,
    [CurrencyCode]     NVARCHAR (8)     NOT NULL,
    [PriceTypeId]      INT              NOT NULL,
    [PriceCode]        NVARCHAR (256)   NOT NULL,
    [ValidFrom]        DATETIME2 (7)    NOT NULL,
    [ValidUntil]       DATETIME2 (7)    NULL,
    [MinQuantity]      DECIMAL (38, 9)  NOT NULL,
    [UnitPrice]        MONEY            NOT NULL,
    CONSTRAINT [PK_PriceDetail] PRIMARY KEY NONCLUSTERED ([PriceValueId] ASC)
);


GO
PRINT N'Creating [dbo].[PriceDetail].[IX_PriceDetail_CatalogEntry]...';


GO
CREATE CLUSTERED INDEX [IX_PriceDetail_CatalogEntry]
    ON [dbo].[PriceDetail]([CatalogEntryCode] ASC, [ApplicationId] ASC);


GO
PRINT N'Creating [dbo].[AssociationType]...';


GO
CREATE TABLE [dbo].[AssociationType] (
    [AssociationTypeId] NVARCHAR (50)  NOT NULL,
    [Description]       NVARCHAR (250) NULL,
    CONSTRAINT [PK_AssociationType] PRIMARY KEY CLUSTERED ([AssociationTypeId] ASC)
);


GO
PRINT N'Creating [dbo].[Affiliate]...';


GO
CREATE TABLE [dbo].[Affiliate] (
    [AffiliateId] UNIQUEIDENTIFIER NOT NULL,
    [Name]        NVARCHAR (50)    NOT NULL,
    [IsActive]    BIT              NOT NULL
);


GO
PRINT N'Creating [dbo].[Affiliate].[IX_Affiliate_AffiliateId]...';


GO
CREATE CLUSTERED INDEX [IX_Affiliate_AffiliateId]
    ON [dbo].[Affiliate]([AffiliateId] ASC);


GO
PRINT N'Creating [dbo].[MetaField]...';


GO
CREATE TABLE [dbo].[MetaField] (
    [MetaFieldId]        INT             IDENTITY (1, 1) NOT NULL,
    [Name]               NVARCHAR (256)  NOT NULL,
    [Namespace]          NVARCHAR (1024) NOT NULL,
    [SystemMetaClassId]  INT             NOT NULL,
    [FriendlyName]       NVARCHAR (256)  NOT NULL,
    [Description]        NTEXT           NULL,
    [DataTypeId]         INT             NOT NULL,
    [Length]             INT             NOT NULL,
    [AllowNulls]         BIT             NOT NULL,
    [MultiLanguageValue] BIT             NOT NULL,
    [AllowSearch]        BIT             NOT NULL,
    [Tag]                IMAGE           NULL,
    [IsEncrypted]        BIT             NOT NULL,
    [IsKeyField]         BIT             NOT NULL,
    CONSTRAINT [PK_MetaField] PRIMARY KEY CLUSTERED ([MetaFieldId] ASC),
    CONSTRAINT [IX_MetaField] UNIQUE NONCLUSTERED ([Name] ASC, [SystemMetaClassId] ASC)
);


GO
PRINT N'Creating [dbo].[Tax]...';


GO
CREATE TABLE [dbo].[Tax] (
    [TaxId]         INT              IDENTITY (1, 1) NOT NULL,
    [TaxType]       INT              NOT NULL,
    [Name]          NVARCHAR (50)    NOT NULL,
    [SortOrder]     INT              NOT NULL,
    [ApplicationId] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [Tax_PK] PRIMARY KEY CLUSTERED ([TaxId] ASC),
    CONSTRAINT [IX_Tax] UNIQUE NONCLUSTERED ([Name] ASC, [ApplicationId] ASC)
);


GO
PRINT N'Creating [dbo].[PriceValue]...';


GO
CREATE TABLE [dbo].[PriceValue] (
    [PriceGroupId] INT             NOT NULL,
    [ValidFrom]    DATETIME        NOT NULL,
    [ValidUntil]   DATETIME        NULL,
    [MinQuantity]  DECIMAL (38, 9) NOT NULL,
    [MaxQuantity]  DECIMAL (38, 9) NULL,
    [UnitPrice]    MONEY           NOT NULL,
    CONSTRAINT [PK_PriceValue] PRIMARY KEY CLUSTERED ([PriceGroupId] ASC, [ValidFrom] ASC, [MinQuantity] ASC)
);


GO
PRINT N'Creating [dbo].[mcmd_MetaIdentifier]...';


GO
CREATE TABLE [dbo].[mcmd_MetaIdentifier] (
    [IdentifierId]  INT            IDENTITY (1, 1) NOT NULL,
    [PeriodKey]     VARCHAR (10)   NOT NULL,
    [TypeName]      NVARCHAR (50)  NOT NULL,
    [MetaClassName] NVARCHAR (50)  NOT NULL,
    [MetaFieldName] NVARCHAR (50)  NOT NULL,
    [Id]            INT            NOT NULL,
    [Value]         NVARCHAR (255) NOT NULL,
    CONSTRAINT [PK_mcmd_MetaIdentifier] PRIMARY KEY CLUSTERED ([IdentifierId] ASC),
    CONSTRAINT [IX_mcmd_MetaIdentifier] UNIQUE NONCLUSTERED ([PeriodKey] ASC, [TypeName] ASC, [MetaClassName] ASC, [MetaFieldName] ASC, [Value] ASC)
);


GO
PRINT N'Creating [dbo].[TaxValue]...';


GO
CREATE TABLE [dbo].[TaxValue] (
    [TaxValueId]          INT              IDENTITY (1, 1) NOT NULL,
    [Percentage]          FLOAT (53)       NOT NULL,
    [TaxId]               INT              NOT NULL,
    [TaxCategory]         NVARCHAR (50)    NOT NULL,
    [JurisdictionGroupId] INT              NOT NULL,
    [SiteId]              UNIQUEIDENTIFIER NULL,
    [AffectiveDate]       DATETIME         NOT NULL,
    CONSTRAINT [TaxValue_PK] PRIMARY KEY CLUSTERED ([TaxValueId] ASC)
);


GO
PRINT N'Creating [dbo].[mcmd_MetaFileContentType]...';


GO
CREATE TABLE [dbo].[mcmd_MetaFileContentType] (
    [ContentTypeId]     INT            IDENTITY (1, 1) NOT NULL,
    [Extension]         NVARCHAR (10)  NULL,
    [ContentTypeString] NVARCHAR (255) NOT NULL,
    [FriendlyName]      NVARCHAR (50)  NULL,
    CONSTRAINT [PK_mcmd_MetaFileContentType] PRIMARY KEY CLUSTERED ([ContentTypeId] ASC)
);


GO
PRINT N'Creating [dbo].[TaxCategory]...';


GO
CREATE TABLE [dbo].[TaxCategory] (
    [TaxCategoryId] INT              IDENTITY (1, 1) NOT NULL,
    [Name]          NVARCHAR (50)    NOT NULL,
    [ApplicationId] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [TaxCategory_PK] PRIMARY KEY CLUSTERED ([TaxCategoryId] ASC)
);


GO
PRINT N'Creating [dbo].[mcmd_MetaFile]...';


GO
CREATE TABLE [dbo].[mcmd_MetaFile] (
    [FileId]   INT              IDENTITY (1, 1) NOT NULL,
    [FileUID]  UNIQUEIDENTIFIER NOT NULL,
    [FileName] NVARCHAR (255)   NOT NULL,
    [Body]     IMAGE            NULL,
    [Length]   AS               (datalength([Body])),
    CONSTRAINT [PK_mcmd_MetaFile] PRIMARY KEY CLUSTERED ([FileId] ASC)
);


GO
PRINT N'Creating [dbo].[mcmd_MetaFile].[IX_mcmd_MetaFile]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_mcmd_MetaFile]
    ON [dbo].[mcmd_MetaFile]([FileUID] ASC);


GO
PRINT N'Creating [dbo].[StateProvince]...';


GO
CREATE TABLE [dbo].[StateProvince] (
    [StateProvinceId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]            NVARCHAR (50) NOT NULL,
    [Ordering]        INT           NULL,
    [Visible]         BIT           NULL,
    [CountryId]       INT           NOT NULL,
    CONSTRAINT [StateProvince_PK] PRIMARY KEY CLUSTERED ([StateProvinceId] ASC)
);


GO
PRINT N'Creating [dbo].[SchemaVersion_BusinessFoundation]...';


GO
CREATE TABLE [dbo].[SchemaVersion_BusinessFoundation] (
    [Major]       INT      NOT NULL,
    [Minor]       INT      NOT NULL,
    [Patch]       INT      NOT NULL,
    [InstallDate] DATETIME NOT NULL
);


GO
PRINT N'Creating [dbo].[SchemaVersion_BusinessFoundation].[IX_SchemaVersion_BusinessFoundation_Major]...';


GO
CREATE CLUSTERED INDEX [IX_SchemaVersion_BusinessFoundation_Major]
    ON [dbo].[SchemaVersion_BusinessFoundation]([Major] ASC);


GO
PRINT N'Creating [dbo].[ShippingRegion]...';


GO
CREATE TABLE [dbo].[ShippingRegion] (
    [ShippingRegionId] INT              IDENTITY (1, 1) NOT NULL,
    [ShippingMethodId] UNIQUEIDENTIFIER NOT NULL,
    [StateProvinceId]  INT              NULL,
    CONSTRAINT [ShippingRegion_PK] PRIMARY KEY CLUSTERED ([ShippingRegionId] ASC)
);


GO
PRINT N'Creating [dbo].[PriceGroup]...';


GO
CREATE TABLE [dbo].[PriceGroup] (
    [PriceGroupId]     INT              IDENTITY (1, 1) NOT NULL,
    [Created]          DATETIME         NOT NULL,
    [Modified]         DATETIME         NOT NULL,
    [ApplicationId]    UNIQUEIDENTIFIER NOT NULL,
    [CatalogEntryCode] NVARCHAR (100)   NOT NULL,
    [MarketId]         NVARCHAR (8)     NOT NULL,
    [CurrencyCode]     NVARCHAR (8)     NOT NULL,
    [PriceTypeId]      INT              NOT NULL,
    [PriceCode]        NVARCHAR (256)   NOT NULL,
    CONSTRAINT [PK_PriceGroup] PRIMARY KEY CLUSTERED ([ApplicationId] ASC, [CatalogEntryCode] ASC, [MarketId] ASC, [CurrencyCode] ASC, [PriceTypeId] ASC, [PriceCode] ASC),
    CONSTRAINT [AX_PriceGroup_PriceGroupId] UNIQUE NONCLUSTERED ([PriceGroupId] ASC)
);


GO
PRINT N'Creating [dbo].[MetaClass]...';


GO
CREATE TABLE [dbo].[MetaClass] (
    [MetaClassId]               INT             IDENTITY (1, 1) NOT NULL,
    [Namespace]                 NVARCHAR (1024) NOT NULL,
    [Name]                      NVARCHAR (256)  NOT NULL,
    [FriendlyName]              NVARCHAR (256)  NOT NULL,
    [IsSystem]                  BIT             NOT NULL,
    [IsAbstract]                BIT             NOT NULL,
    [ParentClassId]             INT             NOT NULL,
    [TableName]                 NVARCHAR (256)  NOT NULL,
    [PrimaryKeyName]            NVARCHAR (256)  NOT NULL,
    [Description]               NTEXT           NULL,
    [FieldListChangedSqlScript] NTEXT           NULL,
    [Tag]                       IMAGE           NULL,
    CONSTRAINT [PK_MetaClass] PRIMARY KEY CLUSTERED ([MetaClassId] ASC),
    CONSTRAINT [IX_MetaClass] UNIQUE NONCLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[PriceType]...';


GO
CREATE TABLE [dbo].[PriceType] (
    [PriceTypeId]   INT            NOT NULL,
    [PriceTypeName] NVARCHAR (256) NOT NULL,
    CONSTRAINT [PK_PriceType] PRIMARY KEY CLUSTERED ([PriceTypeId] ASC)
);


GO
PRINT N'Creating [dbo].[ShippingPaymentRestriction]...';


GO
CREATE TABLE [dbo].[ShippingPaymentRestriction] (
    [ShippingPaymentRestrictionId] INT              IDENTITY (1, 1) NOT NULL,
    [ShippingMethodId]             UNIQUEIDENTIFIER NOT NULL,
    [PaymentMethodId]              UNIQUEIDENTIFIER NOT NULL,
    [RestrictShippingMethods]      BIT              NOT NULL,
    CONSTRAINT [PK_ShippingPaymentRestriction] PRIMARY KEY CLUSTERED ([ShippingPaymentRestrictionId] ASC)
);


GO
PRINT N'Creating [dbo].[WorkflowStatusAccess]...';


GO
CREATE TABLE [dbo].[WorkflowStatusAccess] (
    [StatusAccessId] INT            IDENTITY (1, 1) NOT NULL,
    [StatusId]       INT            NOT NULL,
    [RoleId]         NVARCHAR (256) NOT NULL,
    CONSTRAINT [PK_main_WorkflowStatusAccess] PRIMARY KEY CLUSTERED ([StatusAccessId] ASC)
);


GO
PRINT N'Creating [dbo].[SchemaVersion_PricingSystem]...';


GO
CREATE TABLE [dbo].[SchemaVersion_PricingSystem] (
    [Major]       INT      NOT NULL,
    [Minor]       INT      NOT NULL,
    [Patch]       INT      NOT NULL,
    [InstallDate] DATETIME NOT NULL,
    CONSTRAINT [PK_SchemaVersion_PricingSystem] PRIMARY KEY CLUSTERED ([Major] ASC, [Minor] ASC, [Patch] ASC)
);


GO
PRINT N'Creating [dbo].[aspnet_UsersInRoles]...';


GO
CREATE TABLE [dbo].[aspnet_UsersInRoles] (
    [UserId] UNIQUEIDENTIFIER NOT NULL,
    [RoleId] UNIQUEIDENTIFIER NOT NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC, [RoleId] ASC)
);


GO
PRINT N'Creating [dbo].[aspnet_UsersInRoles].[aspnet_UsersInRoles_index]...';


GO
CREATE NONCLUSTERED INDEX [aspnet_UsersInRoles_index]
    ON [dbo].[aspnet_UsersInRoles]([RoleId] ASC);


GO
PRINT N'Creating [dbo].[ShippingPackage]...';


GO
CREATE TABLE [dbo].[ShippingPackage] (
    [ShippingPackageId] INT              IDENTITY (1, 1) NOT NULL,
    [PackageId]         INT              NOT NULL,
    [ShippingOptionId]  UNIQUEIDENTIFIER NOT NULL,
    [PackageName]       NVARCHAR (100)   NOT NULL,
    CONSTRAINT [ShippingPackage_PK] PRIMARY KEY CLUSTERED ([ShippingPackageId] ASC)
);


GO
PRINT N'Creating [dbo].[WorkflowStatus]...';


GO
CREATE TABLE [dbo].[WorkflowStatus] (
    [StatusId]     INT            IDENTITY (1, 1) NOT NULL,
    [WorkflowId]   INT            NOT NULL,
    [Weight]       INT            NOT NULL,
    [FriendlyName] NVARCHAR (250) NULL,
    CONSTRAINT [PK_main_WorkflowStatus] PRIMARY KEY CLUSTERED ([StatusId] ASC)
);


GO
PRINT N'Creating [dbo].[ShippingMethodParameter]...';


GO
CREATE TABLE [dbo].[ShippingMethodParameter] (
    [ShippingMethodParamterId] INT              IDENTITY (1, 1) NOT NULL,
    [Parameter]                NVARCHAR (50)    NULL,
    [Value]                    NVARCHAR (512)   NULL,
    [ShippingMethodId]         UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_ShippingMethodParameter] PRIMARY KEY CLUSTERED ([ShippingMethodParamterId] ASC)
);


GO
PRINT N'Creating [dbo].[Workflow]...';


GO
CREATE TABLE [dbo].[Workflow] (
    [WorkflowId]    INT              IDENTITY (1, 1) NOT NULL,
    [FriendlyName]  NVARCHAR (250)   NOT NULL,
    [IsDefault]     BIT              NULL,
    [ApplicationId] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_main_Workflow] PRIMARY KEY CLUSTERED ([WorkflowId] ASC)
);


GO
PRINT N'Creating [dbo].[MetaDataType]...';


GO
CREATE TABLE [dbo].[MetaDataType] (
    [DataTypeId]      INT            NOT NULL,
    [Name]            NVARCHAR (256) NOT NULL,
    [FriendlyName]    NVARCHAR (256) NOT NULL,
    [Description]     NTEXT          NULL,
    [Length]          INT            NOT NULL,
    [SqlName]         NVARCHAR (256) NOT NULL,
    [AllowNulls]      BIT            NOT NULL,
    [Variable]        BIT            NOT NULL,
    [IsSQLCommonType] BIT            NOT NULL,
    [DefaultValue]    NVARCHAR (256) NOT NULL,
    CONSTRAINT [PK_MetaDataType] PRIMARY KEY CLUSTERED ([DataTypeId] ASC)
);


GO
PRINT N'Creating [dbo].[SiteLanguage]...';


GO
CREATE TABLE [dbo].[SiteLanguage] (
    [SiteId]       UNIQUEIDENTIFIER NOT NULL,
    [LanguageCode] NVARCHAR (50)    NOT NULL
);


GO
PRINT N'Creating [dbo].[SiteLanguage].[IX_SiteLanguage_SiteId]...';


GO
CREATE CLUSTERED INDEX [IX_SiteLanguage_SiteId]
    ON [dbo].[SiteLanguage]([SiteId] ASC);


GO
PRINT N'Creating [dbo].[ShippingMethodCase]...';


GO
CREATE TABLE [dbo].[ShippingMethodCase] (
    [ShippingMethodCaseId] INT              IDENTITY (1, 1) NOT NULL,
    [Total]                FLOAT (53)       NOT NULL,
    [Charge]               MONEY            NOT NULL,
    [ShippingMethodId]     UNIQUEIDENTIFIER NOT NULL,
    [JurisdictionGroupId]  INT              NULL,
    [StartDate]            DATETIME         NULL,
    [EndDate]              DATETIME         NULL,
    CONSTRAINT [ShippingMethodCase_PK] PRIMARY KEY CLUSTERED ([ShippingMethodCaseId] ASC)
);


GO
PRINT N'Creating [dbo].[MetaAttribute]...';


GO
CREATE TABLE [dbo].[MetaAttribute] (
    [AttrOwnerId]   INT            NOT NULL,
    [AttrOwnerType] INT            NOT NULL,
    [Key]           NVARCHAR (256) NOT NULL,
    [Value]         NTEXT          NOT NULL,
    CONSTRAINT [PK_MetaAttribute] PRIMARY KEY CLUSTERED ([AttrOwnerId] ASC, [AttrOwnerType] ASC, [Key] ASC)
);


GO
PRINT N'Creating [dbo].[aspnet_Roles]...';


GO
CREATE TABLE [dbo].[aspnet_Roles] (
    [ApplicationId]   UNIQUEIDENTIFIER NOT NULL,
    [RoleId]          UNIQUEIDENTIFIER NOT NULL,
    [RoleName]        NVARCHAR (256)   NOT NULL,
    [LoweredRoleName] NVARCHAR (256)   NOT NULL,
    [Description]     NVARCHAR (256)   NULL,
    PRIMARY KEY NONCLUSTERED ([RoleId] ASC)
);


GO
PRINT N'Creating [dbo].[aspnet_Roles].[aspnet_Roles_index1]...';


GO
CREATE UNIQUE CLUSTERED INDEX [aspnet_Roles_index1]
    ON [dbo].[aspnet_Roles]([ApplicationId] ASC, [LoweredRoleName] ASC);


GO
PRINT N'Creating [dbo].[NavigationParams]...';


GO
CREATE TABLE [dbo].[NavigationParams] (
    [Id]         INT            IDENTITY (1, 1) NOT NULL,
    [ItemId]     INT            NOT NULL,
    [Name]       NVARCHAR (256) NULL,
    [Value]      NVARCHAR (256) NULL,
    [IsRequired] BIT            NULL,
    CONSTRAINT [PK_NavigationParams] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[SchemaVersion_MetaDataSystem]...';


GO
CREATE TABLE [dbo].[SchemaVersion_MetaDataSystem] (
    [Major]       INT      NOT NULL,
    [Minor]       INT      NOT NULL,
    [Patch]       INT      NOT NULL,
    [InstallDate] DATETIME NOT NULL
);


GO
PRINT N'Creating [dbo].[SchemaVersion_MetaDataSystem].[IX_SchemaVersion_MetaDataSystem_Major]...';


GO
CREATE CLUSTERED INDEX [IX_SchemaVersion_MetaDataSystem_Major]
    ON [dbo].[SchemaVersion_MetaDataSystem]([Major] ASC);


GO
PRINT N'Creating [dbo].[ShippingMethod]...';


GO
CREATE TABLE [dbo].[ShippingMethod] (
    [ShippingMethodId] UNIQUEIDENTIFIER NOT NULL,
    [ShippingOptionId] UNIQUEIDENTIFIER NOT NULL,
    [ApplicationId]    UNIQUEIDENTIFIER NOT NULL,
    [LanguageId]       NVARCHAR (10)    NOT NULL,
    [IsActive]         BIT              NOT NULL,
    [Name]             NVARCHAR (100)   NOT NULL,
    [Description]      NVARCHAR (255)   NULL,
    [BasePrice]        MONEY            NOT NULL,
    [Currency]         NVARCHAR (50)    NULL,
    [DisplayName]      NVARCHAR (200)   NOT NULL,
    [IsDefault]        BIT              NOT NULL,
    [Ordering]         INT              NULL,
    [Created]          DATETIME         NOT NULL,
    [Modified]         DATETIME         NOT NULL,
    CONSTRAINT [ShippingMethod_PK] PRIMARY KEY CLUSTERED ([ShippingMethodId] ASC),
    CONSTRAINT [IX_ShippingMethod] UNIQUE NONCLUSTERED ([ApplicationId] ASC, [LanguageId] ASC, [Name] ASC)
);


GO
PRINT N'Creating [dbo].[NavigationCommand]...';


GO
CREATE TABLE [dbo].[NavigationCommand] (
    [Id]          INT             IDENTITY (1, 1) NOT NULL,
    [UrlUID]      NVARCHAR (256)  NOT NULL,
    [ItemId]      INT             NULL,
    [Params]      NVARCHAR (1024) NULL,
    [TrigerParam] NVARCHAR (256)  NULL,
    CONSTRAINT [PK_NavigationCommand] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[ShippingOptionParameter]...';


GO
CREATE TABLE [dbo].[ShippingOptionParameter] (
    [ShippingOptionParameterId] INT              IDENTITY (1, 1) NOT NULL,
    [ShippingOptionId]          UNIQUEIDENTIFIER NOT NULL,
    [Parameter]                 NVARCHAR (50)    NOT NULL,
    [Value]                     NVARCHAR (255)   NULL,
    CONSTRAINT [ShippingOptionParameter_PK] PRIMARY KEY CLUSTERED ([ShippingOptionParameterId] ASC)
);


GO
PRINT N'Creating [dbo].[NavigationItems]...';


GO
CREATE TABLE [dbo].[NavigationItems] (
    [ItemId]        INT              IDENTITY (1, 1) NOT NULL,
    [ItemName]      NVARCHAR (256)   NULL,
    [ApplicationId] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_NavigationItems] PRIMARY KEY CLUSTERED ([ItemId] ASC)
);


GO
PRINT N'Creating [dbo].[SchemaVersion_ReportingSystem]...';


GO
CREATE TABLE [dbo].[SchemaVersion_ReportingSystem] (
    [Major]       INT      NOT NULL,
    [Minor]       INT      NOT NULL,
    [Patch]       INT      NOT NULL,
    [InstallDate] DATETIME NOT NULL
);


GO
PRINT N'Creating [dbo].[SchemaVersion_ReportingSystem].[IX_SchemaVersion_ReportingSystem_Major]...';


GO
CREATE CLUSTERED INDEX [IX_SchemaVersion_ReportingSystem_Major]
    ON [dbo].[SchemaVersion_ReportingSystem]([Major] ASC);


GO
PRINT N'Creating [dbo].[ShippingOption]...';


GO
CREATE TABLE [dbo].[ShippingOption] (
    [ShippingOptionId] UNIQUEIDENTIFIER NOT NULL,
    [Name]             NVARCHAR (100)   NOT NULL,
    [Description]      NVARCHAR (600)   NULL,
    [SystemKeyword]    NVARCHAR (30)    NOT NULL,
    [ClassName]        NVARCHAR (500)   NOT NULL,
    [Created]          DATETIME         NOT NULL,
    [Modified]         DATETIME         NOT NULL,
    [ApplicationId]    UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [ShippingOption_PK] PRIMARY KEY CLUSTERED ([ShippingOptionId] ASC),
    CONSTRAINT [IX_ShippingOption] UNIQUE NONCLUSTERED ([ApplicationId] ASC, [SystemKeyword] ASC)
);


GO
PRINT N'Creating [dbo].[main_PageVersion]...';


GO
CREATE TABLE [dbo].[main_PageVersion] (
    [VersionId]  INT              IDENTITY (1, 1) NOT NULL,
    [PageId]     INT              NOT NULL,
    [TemplateId] INT              NOT NULL,
    [VersionNum] INT              NOT NULL,
    [LangId]     INT              NOT NULL,
    [StatusId]   INT              NULL,
    [Created]    DATETIME         NULL,
    [CreatorUID] UNIQUEIDENTIFIER NULL,
    [Edited]     DATETIME         NULL,
    [EditorUID]  UNIQUEIDENTIFIER NULL,
    [StateId]    INT              NULL,
    [Comment]    NVARCHAR (1024)  NULL,
    CONSTRAINT [PK_page_PageVersion] PRIMARY KEY CLUSTERED ([VersionId] ASC)
);


GO
PRINT N'Creating [dbo].[ReportingDates]...';


GO
CREATE TABLE [dbo].[ReportingDates] (
    [DateKey]        INT          NOT NULL,
    [DateFull]       DATETIME     NULL,
    [CharacterDate]  VARCHAR (10) NULL,
    [FullYear]       CHAR (4)     NULL,
    [QuarterNumber]  TINYINT      NULL,
    [WeekNumber]     TINYINT      NULL,
    [WeekDayName]    VARCHAR (10) NULL,
    [MonthDay]       TINYINT      NULL,
    [MonthName]      VARCHAR (12) NULL,
    [YearDay]        SMALLINT     NULL,
    [DateDefinition] VARCHAR (50) NULL,
    [WeekDay]        TINYINT      NULL,
    [MonthNumber]    TINYINT      NULL,
    CONSTRAINT [PK__ReportingDates__7B712C3B] PRIMARY KEY CLUSTERED ([DateKey] ASC),
    CONSTRAINT [IX_ReportingDates] UNIQUE NONCLUSTERED ([DateFull] ASC)
);


GO
PRINT N'Creating [dbo].[main_Templates]...';


GO
CREATE TABLE [dbo].[main_Templates] (
    [TemplateId]    INT              IDENTITY (1, 1) NOT NULL,
    [Name]          NVARCHAR (50)    NOT NULL,
    [FriendlyName]  NVARCHAR (250)   NOT NULL,
    [Path]          NVARCHAR (2048)  NOT NULL,
    [Preview]       IMAGE            NULL,
    [ApplicationId] UNIQUEIDENTIFIER NOT NULL,
    [TemplateType]  NVARCHAR (50)    NOT NULL,
    [LanguageCode]  NVARCHAR (50)    NOT NULL,
    CONSTRAINT [PK_main_Templates] PRIMARY KEY CLUSTERED ([TemplateId] ASC)
);


GO
PRINT N'Creating [dbo].[main_Templates].[IX_main_Templates]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_main_Templates]
    ON [dbo].[main_Templates]([Name] ASC, [LanguageCode] ASC, [TemplateType] ASC, [ApplicationId] ASC);


GO
PRINT N'Creating [dbo].[ShipmentDiscount]...';


GO
CREATE TABLE [dbo].[ShipmentDiscount] (
    [ShipmentDiscountId] INT            IDENTITY (1, 1) NOT NULL,
    [OrderGroupId]       INT            NOT NULL,
    [ShipmentId]         INT            NOT NULL,
    [DiscountId]         INT            NOT NULL,
    [DiscountAmount]     MONEY          NOT NULL,
    [DiscountCode]       NVARCHAR (50)  NULL,
    [DiscountName]       NVARCHAR (50)  NULL,
    [DisplayMessage]     NVARCHAR (100) NULL,
    [DiscountValue]      MONEY          NOT NULL,
    CONSTRAINT [PK_ShipmentDiscount] PRIMARY KEY CLUSTERED ([ShipmentDiscountId] ASC),
    CONSTRAINT [IX_ShipmentDiscount] UNIQUE NONCLUSTERED ([DiscountId] ASC, [ShipmentId] ASC)
);


GO
PRINT N'Creating [dbo].[ShipmentDiscount].[IX_ShipmentDiscountOrderGroupId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ShipmentDiscountOrderGroupId]
    ON [dbo].[ShipmentDiscount]([OrderGroupId] ASC) WITH (ALLOW_PAGE_LOCKS = OFF);


GO
PRINT N'Creating [dbo].[main_PageTreeAccess]...';


GO
CREATE TABLE [dbo].[main_PageTreeAccess] (
    [PageAccessId] INT            IDENTITY (1, 1) NOT NULL,
    [RoleId]       NVARCHAR (256) NOT NULL,
    [PageId]       INT            NOT NULL,
    CONSTRAINT [PK_main_PageTreeAccess] PRIMARY KEY CLUSTERED ([PageAccessId] ASC)
);


GO
PRINT N'Creating [dbo].[ShippingCountry]...';


GO
CREATE TABLE [dbo].[ShippingCountry] (
    [ShippingCountryId] INT              IDENTITY (1, 1) NOT NULL,
    [ShippingMethodId]  UNIQUEIDENTIFIER NOT NULL,
    [CountryId]         INT              NULL,
    CONSTRAINT [PK_ShippingCountry] PRIMARY KEY CLUSTERED ([ShippingCountryId] ASC)
);


GO
PRINT N'Creating [dbo].[aspnet_Profile]...';


GO
CREATE TABLE [dbo].[aspnet_Profile] (
    [UserId]               UNIQUEIDENTIFIER NOT NULL,
    [PropertyNames]        NTEXT            NOT NULL,
    [PropertyValuesString] NTEXT            NOT NULL,
    [PropertyValuesBinary] IMAGE            NOT NULL,
    [LastUpdatedDate]      DATETIME         NOT NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC)
);


GO
EXECUTE sp_tableoption @TableNamePattern = N'[dbo].[aspnet_Profile]', @OptionName = N'text in row', @OptionValue = N'6000';


GO
PRINT N'Creating [dbo].[Shipment]...';


GO
CREATE TABLE [dbo].[Shipment] (
    [ShipmentId]             INT              IDENTITY (1, 1) NOT NULL,
    [OrderFormId]            INT              NOT NULL,
    [OrderGroupId]           INT              NOT NULL,
    [ShippingMethodId]       UNIQUEIDENTIFIER NOT NULL,
    [ShippingAddressId]      NVARCHAR (50)    NULL,
    [ShipmentTrackingNumber] NVARCHAR (128)   NULL,
    [ShipmentTotal]          MONEY            NOT NULL,
    [ShippingDiscountAmount] MONEY            NOT NULL,
    [ShippingMethodName]     NVARCHAR (128)   NULL,
    [Epi_ShippingTax]        MONEY            NULL,
    [Status]                 NVARCHAR (64)    NULL,
    [LineItemIds]            NVARCHAR (MAX)   NULL,
    [WarehouseCode]          NVARCHAR (50)    NULL,
    [PickListId]             INT              NULL,
    [SubTotal]               MONEY            NOT NULL,
    [OperationKeys]          NVARCHAR (MAX)   NULL,
    CONSTRAINT [PK_Shipment] PRIMARY KEY CLUSTERED ([ShipmentId] ASC)
);


GO
PRINT N'Creating [dbo].[Shipment].[IX_Shipment_OrderFormId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Shipment_OrderFormId]
    ON [dbo].[Shipment]([OrderFormId] ASC) WITH (ALLOW_PAGE_LOCKS = OFF);


GO
PRINT N'Creating [dbo].[Shipment].[IX_Shipment_OrderGroupId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Shipment_OrderGroupId]
    ON [dbo].[Shipment]([OrderGroupId] ASC) WITH (ALLOW_PAGE_LOCKS = OFF);


GO
PRINT N'Creating [dbo].[SchemaVersion_OrderSystem]...';


GO
CREATE TABLE [dbo].[SchemaVersion_OrderSystem] (
    [Major]       INT      NOT NULL,
    [Minor]       INT      NOT NULL,
    [Patch]       INT      NOT NULL,
    [InstallDate] DATETIME NOT NULL
);


GO
PRINT N'Creating [dbo].[SchemaVersion_OrderSystem].[IX_SchemaVersion_OrderSystem_Major]...';


GO
CREATE CLUSTERED INDEX [IX_SchemaVersion_OrderSystem_Major]
    ON [dbo].[SchemaVersion_OrderSystem]([Major] ASC);


GO
PRINT N'Creating [dbo].[main_PageTree]...';


GO
CREATE TABLE [dbo].[main_PageTree] (
    [PageId]       INT              IDENTITY (1, 1) NOT NULL,
    [Name]         NVARCHAR (250)   NOT NULL,
    [Outline]      NVARCHAR (2048)  NOT NULL,
    [OutlineLevel] INT              NOT NULL,
    [IsFolder]     BIT              NOT NULL,
    [IsDefault]    BIT              NOT NULL,
    [Order]        INT              NOT NULL,
    [IsPublic]     BIT              NOT NULL,
    [MasterPage]   NVARCHAR (256)   NULL,
    [SiteId]       UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_main_FileTree] PRIMARY KEY CLUSTERED ([PageId] ASC)
);


GO
PRINT N'Creating [dbo].[main_PageState]...';


GO
CREATE TABLE [dbo].[main_PageState] (
    [StateId]       INT              IDENTITY (1, 1) NOT NULL,
    [FriendlyName]  NVARCHAR (250)   NULL,
    [ApplicationId] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_main_PageState] PRIMARY KEY CLUSTERED ([StateId] ASC)
);


GO
PRINT N'Creating [dbo].[PaymentMethodParameter]...';


GO
CREATE TABLE [dbo].[PaymentMethodParameter] (
    [ParameterId]     INT              IDENTITY (1, 1) NOT NULL,
    [PaymentMethodId] UNIQUEIDENTIFIER NOT NULL,
    [Parameter]       NVARCHAR (50)    NOT NULL,
    [Value]           NVARCHAR (4000)  NULL,
    CONSTRAINT [PaymentMethodParameter_PK] PRIMARY KEY CLUSTERED ([ParameterId] ASC),
    CONSTRAINT [IX_PaymentMethodParameter] UNIQUE NONCLUSTERED ([PaymentMethodId] ASC, [Parameter] ASC)
);


GO
PRINT N'Creating [dbo].[main_PageAttributes]...';


GO
CREATE TABLE [dbo].[main_PageAttributes] (
    [Id]               INT             IDENTITY (1, 1) NOT NULL,
    [PageId]           INT             NOT NULL,
    [Title]            NVARCHAR (256)  NULL,
    [MetaKeys]         NVARCHAR (4000) NULL,
    [MetaDescriptions] NVARCHAR (4000) NULL,
    CONSTRAINT [PK_main_PageAttributes] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[MarketPaymentMethods]...';


GO
CREATE TABLE [dbo].[MarketPaymentMethods] (
    [MarketId]        NVARCHAR (8)     NOT NULL,
    [PaymentMethodId] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_MarketPaymentMethods] PRIMARY KEY CLUSTERED ([MarketId] ASC, [PaymentMethodId] ASC)
);


GO
PRINT N'Creating [dbo].[main_MenuItem_Resources]...';


GO
CREATE TABLE [dbo].[main_MenuItem_Resources] (
    [MenuItemResourceId] INT            IDENTITY (1, 1) NOT NULL,
    [MenuItemId]         INT            NOT NULL,
    [LanguageId]         INT            NOT NULL,
    [Text]               NVARCHAR (250) NOT NULL,
    [ToolTip]            NVARCHAR (250) NULL,
    CONSTRAINT [PK_main_MenuItem_Resources] PRIMARY KEY CLUSTERED ([MenuItemResourceId] ASC)
);


GO
PRINT N'Creating [dbo].[Security_SsoTickets]...';


GO
CREATE TABLE [dbo].[Security_SsoTickets] (
    [SsoTicket]       NVARCHAR (64)  NOT NULL,
    [UserName]        NVARCHAR (256) NOT NULL,
    [ApplicationName] NVARCHAR (200) NULL,
    [ExpirationUtc]   DATETIME       NOT NULL,
    [Valid]           BIT            NOT NULL,
    CONSTRAINT [PK_Security_SsoTickets] PRIMARY KEY CLUSTERED ([SsoTicket] ASC)
);


GO
PRINT N'Creating [dbo].[PaymentMethod]...';


GO
CREATE TABLE [dbo].[PaymentMethod] (
    [PaymentMethodId]                UNIQUEIDENTIFIER NOT NULL,
    [ApplicationId]                  UNIQUEIDENTIFIER NULL,
    [Name]                           NVARCHAR (128)   NOT NULL,
    [Description]                    NVARCHAR (255)   NULL,
    [LanguageId]                     NVARCHAR (128)   NOT NULL,
    [SystemKeyword]                  NVARCHAR (30)    NOT NULL,
    [IsActive]                       BIT              NOT NULL,
    [IsDefault]                      BIT              NOT NULL,
    [ClassName]                      NVARCHAR (500)   NOT NULL,
    [PaymentImplementationClassName] NVARCHAR (255)   NULL,
    [SupportsRecurring]              BIT              NOT NULL,
    [Ordering]                       INT              NULL,
    [Created]                        DATETIME         NOT NULL,
    [Modified]                       DATETIME         NOT NULL,
    CONSTRAINT [PK_PaymentOption] PRIMARY KEY CLUSTERED ([PaymentMethodId] ASC),
    CONSTRAINT [IX_PaymentMethod] UNIQUE NONCLUSTERED ([ApplicationId] ASC, [LanguageId] ASC, [SystemKeyword] ASC)
);


GO
PRINT N'Creating [dbo].[main_MenuItem]...';


GO
CREATE TABLE [dbo].[main_MenuItem] (
    [MenuItemId]    INT             IDENTITY (1, 1) NOT NULL,
    [MenuId]        INT             NOT NULL,
    [CommandText]   NVARCHAR (1024) NULL,
    [CommandType]   INT             NULL,
    [Text]          NVARCHAR (250)  NULL,
    [LeftImageUrl]  NVARCHAR (1024) NULL,
    [RightImageUrl] NVARCHAR (1024) NULL,
    [OutlineLevel]  INT             NULL,
    [Outline]       NVARCHAR (2048) NULL,
    [IsVisible]     BIT             NOT NULL,
    [IsInherits]    BIT             NULL,
    [IsRoot]        BIT             NOT NULL,
    [Order]         INT             NOT NULL,
    CONSTRAINT [PK_main_MenuItem] PRIMARY KEY CLUSTERED ([MenuItemId] ASC)
);


GO
PRINT N'Creating [dbo].[Package]...';


GO
CREATE TABLE [dbo].[Package] (
    [PackageId]     INT              IDENTITY (1, 1) NOT NULL,
    [Name]          NVARCHAR (100)   NOT NULL,
    [Description]   NVARCHAR (600)   NULL,
    [Width]         FLOAT (53)       NULL,
    [Height]        FLOAT (53)       NULL,
    [Length]        FLOAT (53)       NULL,
    [ApplicationId] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [Package_PK] PRIMARY KEY CLUSTERED ([PackageId] ASC)
);


GO
PRINT N'Creating [dbo].[main_Menu]...';


GO
CREATE TABLE [dbo].[main_Menu] (
    [MenuId]       INT              IDENTITY (1, 1) NOT NULL,
    [FriendlyName] NVARCHAR (250)   NOT NULL,
    [SiteId]       UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_main_Menu] PRIMARY KEY CLUSTERED ([MenuId] ASC)
);


GO
PRINT N'Creating [dbo].[Security_RoleAssignment]...';


GO
CREATE TABLE [dbo].[Security_RoleAssignment] (
    [SecurityRoleAssignmentId] UNIQUEIDENTIFIER NOT NULL,
    [RoleParticipant]          UNIQUEIDENTIFIER NOT NULL,
    [Role]                     NVARCHAR (255)   NOT NULL,
    [Scope]                    NVARCHAR (MAX)   NULL,
    [CheckMode]                INT              NULL,
    [IsOnlyForOwner]           BIT              NOT NULL,
    CONSTRAINT [PK_Security_RoleAssignment] PRIMARY KEY CLUSTERED ([SecurityRoleAssignmentId] ASC)
);


GO
PRINT N'Creating [dbo].[OrderStatus]...';


GO
CREATE TABLE [dbo].[OrderStatus] (
    [OrderStatusId] INT              NOT NULL,
    [Name]          NVARCHAR (50)    NOT NULL,
    [ApplicationId] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_OrderStatus] PRIMARY KEY CLUSTERED ([OrderStatusId] ASC, [ApplicationId] ASC)
);


GO
PRINT N'Creating [dbo].[SchemaVersion_SecuritySystem]...';


GO
CREATE TABLE [dbo].[SchemaVersion_SecuritySystem] (
    [Major]       INT      NOT NULL,
    [Minor]       INT      NOT NULL,
    [Patch]       INT      NOT NULL,
    [InstallDate] DATETIME NOT NULL
);


GO
PRINT N'Creating [dbo].[SchemaVersion_SecuritySystem].[IX_SchemaVersion_SecuritySystem_Major]...';


GO
CREATE CLUSTERED INDEX [IX_SchemaVersion_SecuritySystem_Major]
    ON [dbo].[SchemaVersion_SecuritySystem]([Major] ASC);


GO
PRINT N'Creating [dbo].[main_LanguageInfo]...';


GO
CREATE TABLE [dbo].[main_LanguageInfo] (
    [LangId]        INT              IDENTITY (1, 1) NOT NULL,
    [LangName]      NVARCHAR (50)    NOT NULL,
    [FriendlyName]  NVARCHAR (50)    NULL,
    [IsDefault]     BIT              NULL,
    [ApplicationId] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_main_LanguageInfo] PRIMARY KEY CLUSTERED ([LangId] ASC)
);


GO
PRINT N'Creating [dbo].[OrderSearchResults]...';


GO
CREATE TABLE [dbo].[OrderSearchResults] (
    [SearchSetId]  UNIQUEIDENTIFIER NOT NULL,
    [OrderGroupId] INT              NOT NULL,
    [Created]      DATETIME         NULL
);


GO
PRINT N'Creating [dbo].[OrderSearchResults].[IX_OrderSearchResults_SearchSetId]...';


GO
CREATE CLUSTERED INDEX [IX_OrderSearchResults_SearchSetId]
    ON [dbo].[OrderSearchResults]([SearchSetId] ASC) WITH (ALLOW_PAGE_LOCKS = OFF);


GO
PRINT N'Creating [dbo].[RolePermission]...';


GO
CREATE TABLE [dbo].[RolePermission] (
    [RolePermissionId] INT              IDENTITY (1, 1) NOT NULL,
    [ApplicationId]    UNIQUEIDENTIFIER NOT NULL,
    [RoleName]         NVARCHAR (256)   NOT NULL,
    [Permission]       NVARCHAR (256)   NOT NULL,
    CONSTRAINT [PK_RolePermission] PRIMARY KEY CLUSTERED ([RolePermissionId] ASC)
);


GO
PRINT N'Creating [dbo].[main_GlobalVariables]...';


GO
CREATE TABLE [dbo].[main_GlobalVariables] (
    [GlobalVariableId] INT              IDENTITY (1, 1) NOT NULL,
    [KEY]              NVARCHAR (250)   NOT NULL,
    [VALUE]            NVARCHAR (1024)  NOT NULL,
    [SiteId]           UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_main_GlobalVariables] PRIMARY KEY CLUSTERED ([GlobalVariableId] ASC)
);


GO
PRINT N'Creating [dbo].[OrderGroupAddress]...';


GO
CREATE TABLE [dbo].[OrderGroupAddress] (
    [OrderGroupAddressId] INT           IDENTITY (1, 1) NOT NULL,
    [OrderGroupId]        INT           NOT NULL,
    [Name]                NVARCHAR (64) NULL,
    [FirstName]           NVARCHAR (64) NULL,
    [LastName]            NVARCHAR (64) NULL,
    [Organization]        NVARCHAR (64) NULL,
    [Line1]               NVARCHAR (80) NULL,
    [Line2]               NVARCHAR (80) NULL,
    [City]                NVARCHAR (64) NULL,
    [State]               NVARCHAR (64) NULL,
    [CountryCode]         NVARCHAR (50) NULL,
    [CountryName]         NVARCHAR (50) NULL,
    [PostalCode]          NVARCHAR (20) NULL,
    [RegionCode]          NVARCHAR (50) NULL,
    [RegionName]          NVARCHAR (64) NULL,
    [DaytimePhoneNumber]  NVARCHAR (32) NULL,
    [EveningPhoneNumber]  NVARCHAR (32) NULL,
    [FaxNumber]           NVARCHAR (32) NULL,
    [Email]               NVARCHAR (64) NULL,
    CONSTRAINT [PK_OrderGroupAddress] PRIMARY KEY CLUSTERED ([OrderGroupAddressId] ASC)
);


GO
PRINT N'Creating [dbo].[OrderGroupAddress].[IX_OrderGroupAddress_OrderGroupId]...';


GO
CREATE NONCLUSTERED INDEX [IX_OrderGroupAddress_OrderGroupId]
    ON [dbo].[OrderGroupAddress]([OrderGroupId] ASC) WITH (ALLOW_PAGE_LOCKS = OFF);


GO
PRINT N'Creating [dbo].[dps_TemporaryStorage]...';


GO
CREATE TABLE [dbo].[dps_TemporaryStorage] (
    [StorageId]     INT              IDENTITY (1, 1) NOT NULL,
    [PageVersionId] INT              NOT NULL,
    [Created]       DATETIME         NOT NULL,
    [Expire]        INT              NULL,
    [PageDocument]  IMAGE            NOT NULL,
    [CreatorUID]    UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_dps_TemporaryStorage] PRIMARY KEY CLUSTERED ([StorageId] ASC)
);


GO
PRINT N'Creating [dbo].[OrderGroup]...';


GO
CREATE TABLE [dbo].[OrderGroup] (
    [OrderGroupId]    INT              IDENTITY (1, 1) NOT NULL,
    [InstanceId]      UNIQUEIDENTIFIER NOT NULL,
    [ApplicationId]   UNIQUEIDENTIFIER NOT NULL,
    [AffiliateId]     UNIQUEIDENTIFIER NULL,
    [Name]            NVARCHAR (64)    NULL,
    [CustomerId]      UNIQUEIDENTIFIER NOT NULL,
    [CustomerName]    NVARCHAR (64)    NULL,
    [AddressId]       NVARCHAR (50)    NULL,
    [ShippingTotal]   MONEY            NOT NULL,
    [HandlingTotal]   MONEY            NOT NULL,
    [TaxTotal]        MONEY            NOT NULL,
    [SubTotal]        MONEY            NOT NULL,
    [Total]           MONEY            NOT NULL,
    [BillingCurrency] NVARCHAR (64)    NULL,
    [Status]          NVARCHAR (64)    NULL,
    [ProviderId]      NVARCHAR (255)   NULL,
    [SiteId]          NVARCHAR (255)   NULL,
    [OwnerOrg]        NVARCHAR (255)   NULL,
    [Owner]           NVARCHAR (255)   NULL,
    [MarketId]        NVARCHAR (8)     NOT NULL,
    CONSTRAINT [PK_PurchaseOrders] PRIMARY KEY CLUSTERED ([OrderGroupId] ASC)
);


GO
PRINT N'Creating [dbo].[OrderGroup].[IX_OrderGroup]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_OrderGroup]
    ON [dbo].[OrderGroup]([InstanceId] ASC);


GO
PRINT N'Creating [dbo].[OrderGroup].[IX_OrderGroup_ApplicationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_OrderGroup_ApplicationId]
    ON [dbo].[OrderGroup]([ApplicationId] ASC)
    INCLUDE([OrderGroupId]);


GO
PRINT N'Creating [dbo].[OrderGroup].[IX_OrderGroup_CustomerIdName]...';


GO
CREATE NONCLUSTERED INDEX [IX_OrderGroup_CustomerIdName]
    ON [dbo].[OrderGroup]([CustomerId] ASC, [Name] ASC, [ApplicationId] ASC);


GO
PRINT N'Creating [dbo].[OrderFormPayment]...';


GO
CREATE TABLE [dbo].[OrderFormPayment] (
    [PaymentId]             INT              IDENTITY (1, 1) NOT NULL,
    [OrderFormId]           INT              NOT NULL,
    [OrderGroupId]          INT              NOT NULL,
    [BillingAddressId]      NVARCHAR (50)    NULL,
    [PaymentMethodId]       UNIQUEIDENTIFIER NOT NULL,
    [PaymentMethodName]     NVARCHAR (128)   NULL,
    [CustomerName]          NVARCHAR (64)    NULL,
    [Amount]                MONEY            NOT NULL,
    [PaymentType]           INT              NOT NULL,
    [ValidationCode]        NVARCHAR (64)    NULL,
    [AuthorizationCode]     NVARCHAR (255)   NULL,
    [TransactionType]       NVARCHAR (255)   NULL,
    [TransactionID]         NVARCHAR (255)   NULL,
    [Status]                NVARCHAR (64)    NULL,
    [ImplementationClass]   NVARCHAR (255)   NOT NULL,
    [ProviderTransactionID] NVARCHAR (255)   NULL,
    CONSTRAINT [PK_OrderFormPayment] PRIMARY KEY CLUSTERED ([PaymentId] ASC)
);


GO
PRINT N'Creating [dbo].[OrderFormPayment].[IX_OrderFormPayment_OrderFormId]...';


GO
CREATE NONCLUSTERED INDEX [IX_OrderFormPayment_OrderFormId]
    ON [dbo].[OrderFormPayment]([OrderFormId] ASC) WITH (ALLOW_PAGE_LOCKS = OFF);


GO
PRINT N'Creating [dbo].[OrderFormPayment].[IX_OrderFormPayment_OrderGroupId]...';


GO
CREATE NONCLUSTERED INDEX [IX_OrderFormPayment_OrderGroupId]
    ON [dbo].[OrderFormPayment]([OrderGroupId] ASC) WITH (ALLOW_PAGE_LOCKS = OFF);


GO
PRINT N'Creating [dbo].[aspnet_Membership]...';


GO
CREATE TABLE [dbo].[aspnet_Membership] (
    [ApplicationId]                          UNIQUEIDENTIFIER NOT NULL,
    [UserId]                                 UNIQUEIDENTIFIER NOT NULL,
    [Password]                               NVARCHAR (128)   NOT NULL,
    [PasswordFormat]                         INT              NOT NULL,
    [PasswordSalt]                           NVARCHAR (128)   NOT NULL,
    [MobilePIN]                              NVARCHAR (16)    NULL,
    [Email]                                  NVARCHAR (256)   NULL,
    [LoweredEmail]                           NVARCHAR (256)   NULL,
    [PasswordQuestion]                       NVARCHAR (256)   NULL,
    [PasswordAnswer]                         NVARCHAR (128)   NULL,
    [IsApproved]                             BIT              NOT NULL,
    [IsLockedOut]                            BIT              NOT NULL,
    [CreateDate]                             DATETIME         NOT NULL,
    [LastLoginDate]                          DATETIME         NOT NULL,
    [LastPasswordChangedDate]                DATETIME         NOT NULL,
    [LastLockoutDate]                        DATETIME         NOT NULL,
    [FailedPasswordAttemptCount]             INT              NOT NULL,
    [FailedPasswordAttemptWindowStart]       DATETIME         NOT NULL,
    [FailedPasswordAnswerAttemptCount]       INT              NOT NULL,
    [FailedPasswordAnswerAttemptWindowStart] DATETIME         NOT NULL,
    [Comment]                                NTEXT            NULL,
    PRIMARY KEY NONCLUSTERED ([UserId] ASC)
);


GO
EXECUTE sp_tableoption @TableNamePattern = N'[dbo].[aspnet_Membership]', @OptionName = N'text in row', @OptionValue = N'3000';


GO
PRINT N'Creating [dbo].[aspnet_Membership].[aspnet_Membership_index]...';


GO
CREATE CLUSTERED INDEX [aspnet_Membership_index]
    ON [dbo].[aspnet_Membership]([ApplicationId] ASC, [LoweredEmail] ASC);


GO
PRINT N'Creating [dbo].[dps_PageDocument]...';


GO
CREATE TABLE [dbo].[dps_PageDocument] (
    [PageId]        INT IDENTITY (1, 1) NOT NULL,
    [PageVersionId] INT NOT NULL,
    CONSTRAINT [PK_dps_PageDocument] PRIMARY KEY CLUSTERED ([PageId] ASC)
);


GO
PRINT N'Creating [dbo].[OrderFormDiscount]...';


GO
CREATE TABLE [dbo].[OrderFormDiscount] (
    [OrderFormDiscountId] INT            IDENTITY (1, 1) NOT NULL,
    [OrderGroupId]        INT            NOT NULL,
    [OrderFormId]         INT            NOT NULL,
    [DiscountId]          INT            NOT NULL,
    [DiscountAmount]      MONEY          NOT NULL,
    [DiscountCode]        NVARCHAR (50)  NULL,
    [DiscountName]        NVARCHAR (50)  NULL,
    [DisplayMessage]      NVARCHAR (100) NULL,
    [DiscountValue]       MONEY          NOT NULL,
    CONSTRAINT [PK_OrderFormDiscount] PRIMARY KEY CLUSTERED ([OrderFormDiscountId] ASC),
    CONSTRAINT [IX_OrderFormDiscount] UNIQUE NONCLUSTERED ([DiscountId] ASC, [OrderFormId] ASC)
);


GO
PRINT N'Creating [dbo].[OrderFormDiscount].[IX_OrderFormDiscount_OrderGroupId]...';


GO
CREATE NONCLUSTERED INDEX [IX_OrderFormDiscount_OrderGroupId]
    ON [dbo].[OrderFormDiscount]([OrderGroupId] ASC) WITH (ALLOW_PAGE_LOCKS = OFF);


GO
PRINT N'Creating [dbo].[OrderForm]...';


GO
CREATE TABLE [dbo].[OrderForm] (
    [OrderFormId]            INT             IDENTITY (1, 1) NOT NULL,
    [OrderGroupId]           INT             NOT NULL,
    [Name]                   NVARCHAR (64)   NULL,
    [BillingAddressId]       NVARCHAR (50)   NULL,
    [DiscountAmount]         MONEY           NOT NULL,
    [SubTotal]               MONEY           NOT NULL,
    [ShippingTotal]          MONEY           NOT NULL,
    [HandlingTotal]          MONEY           NOT NULL,
    [TaxTotal]               MONEY           NOT NULL,
    [Total]                  MONEY           NOT NULL,
    [Status]                 NVARCHAR (64)   NULL,
    [ProviderId]             NVARCHAR (255)  NULL,
    [ReturnComment]          NVARCHAR (1024) NULL,
    [ReturnType]             NVARCHAR (50)   NULL,
    [ReturnAuthCode]         NVARCHAR (255)  NULL,
    [OrigOrderFormId]        INT             NULL,
    [ExchangeOrderGroupId]   INT             NULL,
    [AuthorizedPaymentTotal] MONEY           NOT NULL,
    [CapturedPaymentTotal]   MONEY           NOT NULL,
    CONSTRAINT [PK_OrderInfo] PRIMARY KEY CLUSTERED ([OrderFormId] ASC)
);


GO
PRINT N'Creating [dbo].[OrderForm].[IX_OrderForm_OrderGroupId]...';


GO
CREATE NONCLUSTERED INDEX [IX_OrderForm_OrderGroupId]
    ON [dbo].[OrderForm]([OrderGroupId] ASC) WITH (ALLOW_PAGE_LOCKS = OFF);


GO
PRINT N'Creating [dbo].[dps_Node]...';


GO
CREATE TABLE [dbo].[dps_Node] (
    [NodeId]            INT            IDENTITY (1, 1) NOT NULL,
    [PageId]            INT            NOT NULL,
    [NodeTypeId]        INT            NOT NULL,
    [NodeUID]           NVARCHAR (255) NOT NULL,
    [FactoryUID]        NVARCHAR (255) NOT NULL,
    [FactoryControlUID] NVARCHAR (255) NOT NULL,
    [ControlPlaceId]    NVARCHAR (255) NOT NULL,
    [ControlPlaceIndex] INT            NOT NULL,
    CONSTRAINT [PK_dps_Node] PRIMARY KEY CLUSTERED ([NodeId] ASC)
);


GO
PRINT N'Creating [dbo].[LineItemDiscount]...';


GO
CREATE TABLE [dbo].[LineItemDiscount] (
    [LineItemDiscountId] INT            IDENTITY (1, 1) NOT NULL,
    [OrderGroupId]       INT            NOT NULL,
    [LineItemId]         INT            NOT NULL,
    [DiscountId]         INT            NOT NULL,
    [DiscountAmount]     MONEY          NOT NULL,
    [DiscountCode]       NVARCHAR (50)  NULL,
    [DiscountName]       NVARCHAR (50)  NULL,
    [DisplayMessage]     NVARCHAR (100) NULL,
    [DiscountValue]      MONEY          NOT NULL,
    CONSTRAINT [PK_LineItemDiscount] PRIMARY KEY CLUSTERED ([LineItemDiscountId] ASC),
    CONSTRAINT [IX_LineItemDiscount] UNIQUE NONCLUSTERED ([DiscountId] ASC, [LineItemId] ASC)
);


GO
PRINT N'Creating [dbo].[LineItemDiscount].[IX_LineItem_OrderGroupId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LineItem_OrderGroupId]
    ON [dbo].[LineItemDiscount]([OrderGroupId] ASC) WITH (ALLOW_PAGE_LOCKS = OFF);


GO
PRINT N'Creating [dbo].[LineItemDiscount].[IX_LineItemDiscount_LineItem]...';


GO
CREATE NONCLUSTERED INDEX [IX_LineItemDiscount_LineItem]
    ON [dbo].[LineItemDiscount]([LineItemId] ASC);


GO
PRINT N'Creating [dbo].[dps_NodeType]...';


GO
CREATE TABLE [dbo].[dps_NodeType] (
    [NodeTypeId] INT            IDENTITY (1, 1) NOT NULL,
    [TypeName]   NVARCHAR (255) NOT NULL,
    CONSTRAINT [PK_dps_NodeType] PRIMARY KEY CLUSTERED ([NodeTypeId] ASC)
);


GO
PRINT N'Creating [dbo].[dps_ControlStorage]...';


GO
CREATE TABLE [dbo].[dps_ControlStorage] (
    [ControlStorageId] INT            IDENTITY (1, 1) NOT NULL,
    [ControlId]        INT            NOT NULL,
    [Key]              NVARCHAR (255) NOT NULL,
    [Value]            IMAGE          NULL,
    CONSTRAINT [PK_dps_ControlStorage] PRIMARY KEY CLUSTERED ([ControlStorageId] ASC)
);


GO
PRINT N'Creating [dbo].[LineItem]...';


GO
CREATE TABLE [dbo].[LineItem] (
    [LineItemId]                  INT              IDENTITY (1, 1) NOT NULL,
    [OrderFormId]                 INT              NOT NULL,
    [OrderGroupId]                INT              NOT NULL,
    [Catalog]                     NVARCHAR (255)   NOT NULL,
    [CatalogNode]                 NVARCHAR (255)   NOT NULL,
    [ParentCatalogEntryId]        NVARCHAR (255)   NULL,
    [CatalogEntryId]              NVARCHAR (255)   NOT NULL,
    [Quantity]                    MONEY            NOT NULL,
    [PlacedPrice]                 MONEY            NOT NULL,
    [ListPrice]                   MONEY            NOT NULL,
    [LineItemDiscountAmount]      MONEY            NOT NULL,
    [OrderLevelDiscountAmount]    MONEY            NOT NULL,
    [ShippingAddressId]           NVARCHAR (50)    NOT NULL,
    [ShippingMethodName]          NVARCHAR (128)   NULL,
    [ShippingMethodId]            UNIQUEIDENTIFIER NOT NULL,
    [ExtendedPrice]               MONEY            NOT NULL,
    [Description]                 NVARCHAR (255)   NULL,
    [Status]                      NVARCHAR (64)    NULL,
    [DisplayName]                 NVARCHAR (255)   NULL,
    [AllowBackordersAndPreorders] BIT              NOT NULL,
    [InStockQuantity]             MONEY            NOT NULL,
    [PreorderQuantity]            MONEY            NOT NULL,
    [BackorderQuantity]           MONEY            NOT NULL,
    [InventoryStatus]             INT              NOT NULL,
    [LineItemOrdering]            DATETIME         NULL,
    [ConfigurationId]             NVARCHAR (255)   NULL,
    [MinQuantity]                 MONEY            NOT NULL,
    [MaxQuantity]                 MONEY            NOT NULL,
    [ProviderId]                  NVARCHAR (255)   NULL,
    [ReturnReason]                NVARCHAR (255)   NULL,
    [OrigLineItemId]              INT              NULL,
    [ReturnQuantity]              MONEY            NOT NULL,
    [WarehouseCode]               NVARCHAR (50)    NULL,
    [IsInventoryAllocated]        BIT              NOT NULL,
    CONSTRAINT [PK_OrderItem] PRIMARY KEY CLUSTERED ([LineItemId] ASC)
);


GO
PRINT N'Creating [dbo].[LineItem].[IX_LineItem_OrderFormId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LineItem_OrderFormId]
    ON [dbo].[LineItem]([OrderFormId] ASC) WITH (ALLOW_PAGE_LOCKS = OFF);


GO
PRINT N'Creating [dbo].[LineItem].[IX_LineItem_OrderGroupId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LineItem_OrderGroupId]
    ON [dbo].[LineItem]([OrderGroupId] ASC) WITH (ALLOW_PAGE_LOCKS = OFF);


GO
PRINT N'Creating [dbo].[aspnet_SchemaVersions]...';


GO
CREATE TABLE [dbo].[aspnet_SchemaVersions] (
    [Feature]                 NVARCHAR (128) NOT NULL,
    [CompatibleSchemaVersion] NVARCHAR (128) NOT NULL,
    [IsCurrentVersion]        BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Feature] ASC, [CompatibleSchemaVersion] ASC)
);


GO
PRINT N'Creating [dbo].[dps_Control]...';


GO
CREATE TABLE [dbo].[dps_Control] (
    [ControlId]  INT            IDENTITY (1, 1) NOT NULL,
    [NodeId]     INT            NOT NULL,
    [ControlUID] NVARCHAR (255) NOT NULL,
    CONSTRAINT [PK_dps_Control] PRIMARY KEY CLUSTERED ([ControlId] ASC)
);


GO
PRINT N'Creating [dbo].[Country]...';


GO
CREATE TABLE [dbo].[Country] (
    [CountryId]     INT              IDENTITY (1, 1) NOT NULL,
    [Name]          NVARCHAR (100)   NULL,
    [Ordering]      INT              NULL,
    [Visible]       BIT              NULL,
    [Code]          NVARCHAR (3)     NULL,
    [ApplicationId] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [Country_PK] PRIMARY KEY CLUSTERED ([CountryId] ASC)
);


GO
PRINT N'Creating [dbo].[SchemaVersion]...';


GO
CREATE TABLE [dbo].[SchemaVersion] (
    [Major]       INT      NOT NULL,
    [Minor]       INT      NOT NULL,
    [Patch]       INT      NOT NULL,
    [InstallDate] DATETIME NOT NULL
);


GO
PRINT N'Creating [dbo].[SchemaVersion].[IX_SchemaVersion_Major]...';


GO
CREATE CLUSTERED INDEX [IX_SchemaVersion_Major]
    ON [dbo].[SchemaVersion]([Major] ASC);


GO
PRINT N'Creating [dbo].[OrderGroupLock]...';


GO
CREATE TABLE [dbo].[OrderGroupLock] (
    [OrderLockId]  INT              IDENTITY (1, 1) NOT NULL,
    [CustomerId]   UNIQUEIDENTIFIER NOT NULL,
    [Created]      DATETIME         NOT NULL,
    [OrderGroupId] INT              NOT NULL,
    CONSTRAINT [PK_OrderGroupLock] PRIMARY KEY CLUSTERED ([OrderLockId] ASC)
);


GO
PRINT N'Creating [dbo].[CatalogLog]...';


GO
CREATE TABLE [dbo].[CatalogLog] (
    [LogId]         INT              IDENTITY (1, 1) NOT NULL,
    [Operation]     NVARCHAR (50)    NOT NULL,
    [ObjectKey]     NVARCHAR (100)   NOT NULL,
    [ObjectType]    NVARCHAR (50)    NOT NULL,
    [Username]      NVARCHAR (50)    NOT NULL,
    [Created]       DATETIME         NOT NULL,
    [Succeeded]     BIT              NOT NULL,
    [Notes]         NVARCHAR (255)   NULL,
    [ApplicationId] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_CatalogLog] PRIMARY KEY CLUSTERED ([LogId] ASC)
);


GO
PRINT N'Creating [dbo].[OrderGroupNote]...';


GO
CREATE TABLE [dbo].[OrderGroupNote] (
    [OrderNoteId]  INT              IDENTITY (1, 1) NOT NULL,
    [OrderGroupId] INT              NOT NULL,
    [CustomerId]   UNIQUEIDENTIFIER NOT NULL,
    [Title]        NVARCHAR (255)   NULL,
    [Type]         NVARCHAR (50)    NULL,
    [Detail]       NTEXT            NULL,
    [Created]      DATETIME         NOT NULL,
    [LineItemId]   INT              NULL,
    CONSTRAINT [PK_OrderGroupNote] PRIMARY KEY CLUSTERED ([OrderNoteId] ASC)
);


GO
PRINT N'Creating [dbo].[aspnet_Users]...';


GO
CREATE TABLE [dbo].[aspnet_Users] (
    [ApplicationId]    UNIQUEIDENTIFIER NOT NULL,
    [UserId]           UNIQUEIDENTIFIER NOT NULL,
    [UserName]         NVARCHAR (256)   NOT NULL,
    [LoweredUserName]  NVARCHAR (256)   NOT NULL,
    [MobileAlias]      NVARCHAR (16)    NULL,
    [IsAnonymous]      BIT              NOT NULL,
    [LastActivityDate] DATETIME         NOT NULL,
    PRIMARY KEY NONCLUSTERED ([UserId] ASC)
);


GO
PRINT N'Creating [dbo].[aspnet_Users].[aspnet_Users_Index]...';


GO
CREATE UNIQUE CLUSTERED INDEX [aspnet_Users_Index]
    ON [dbo].[aspnet_Users]([ApplicationId] ASC, [LoweredUserName] ASC);


GO
PRINT N'Creating [dbo].[aspnet_Users].[aspnet_Users_Index2]...';


GO
CREATE NONCLUSTERED INDEX [aspnet_Users_Index2]
    ON [dbo].[aspnet_Users]([ApplicationId] ASC, [LastActivityDate] ASC);


GO
PRINT N'Creating [dbo].[Warehouse]...';


GO
CREATE TABLE [dbo].[Warehouse] (
    [WarehouseId]         INT              IDENTITY (1, 1) NOT NULL,
    [ApplicationId]       UNIQUEIDENTIFIER NOT NULL,
    [Name]                NVARCHAR (255)   NOT NULL,
    [CreatorId]           NVARCHAR (100)   NULL,
    [Created]             DATETIME         NOT NULL,
    [ModifierId]          NVARCHAR (100)   NULL,
    [Modified]            DATETIME         NOT NULL,
    [IsActive]            BIT              NOT NULL,
    [IsPrimary]           BIT              NOT NULL,
    [SortOrder]           INT              NOT NULL,
    [Code]                NVARCHAR (50)    NOT NULL,
    [IsFulfillmentCenter] BIT              NOT NULL,
    [IsPickupLocation]    BIT              NOT NULL,
    [IsDeliveryLocation]  BIT              NOT NULL,
    [FirstName]           NVARCHAR (64)    NULL,
    [LastName]            NVARCHAR (64)    NULL,
    [Organization]        NVARCHAR (64)    NULL,
    [Line1]               NVARCHAR (80)    NULL,
    [Line2]               NVARCHAR (80)    NULL,
    [City]                NVARCHAR (64)    NULL,
    [State]               NVARCHAR (64)    NULL,
    [CountryCode]         NVARCHAR (50)    NULL,
    [CountryName]         NVARCHAR (50)    NULL,
    [PostalCode]          NVARCHAR (20)    NULL,
    [RegionCode]          NVARCHAR (50)    NULL,
    [RegionName]          NVARCHAR (64)    NULL,
    [DaytimePhoneNumber]  NVARCHAR (32)    NULL,
    [EveningPhoneNumber]  NVARCHAR (32)    NULL,
    [FaxNumber]           NVARCHAR (32)    NULL,
    [Email]               NVARCHAR (64)    NULL,
    CONSTRAINT [PK_Warehouse] PRIMARY KEY CLUSTERED ([WarehouseId] ASC),
    CONSTRAINT [IX_Warehouse] UNIQUE NONCLUSTERED ([ApplicationId] ASC, [Code] ASC)
);


GO
PRINT N'Creating [dbo].[Variation]...';


GO
CREATE TABLE [dbo].[Variation] (
    [CatalogEntryId] INT              NOT NULL,
    [ListPrice]      MONEY            NULL,
    [TaxCategoryId]  INT              NOT NULL,
    [TrackInventory] BIT              NOT NULL,
    [MerchantId]     UNIQUEIDENTIFIER NULL,
    [WarehouseId]    INT              NOT NULL,
    [Weight]         FLOAT (53)       NOT NULL,
    [PackageId]      INT              NOT NULL,
    [MinQuantity]    MONEY            NULL,
    [MaxQuantity]    MONEY            NULL,
    [Length]         FLOAT (53)       NOT NULL,
    [Height]         FLOAT (53)       NOT NULL,
    [Width]          FLOAT (53)       NOT NULL,
    CONSTRAINT [PK_ProductVariation] PRIMARY KEY CLUSTERED ([CatalogEntryId] ASC)
);


GO
PRINT N'Creating [dbo].[SiteCatalog]...';


GO
CREATE TABLE [dbo].[SiteCatalog] (
    [CatalogId] INT              NOT NULL,
    [SiteId]    UNIQUEIDENTIFIER NOT NULL
);


GO
PRINT N'Creating [dbo].[SiteCatalog].[IX_SiteCatalog_CatalogId]...';


GO
CREATE CLUSTERED INDEX [IX_SiteCatalog_CatalogId]
    ON [dbo].[SiteCatalog]([CatalogId] ASC);


GO
PRINT N'Creating [dbo].[SiteCatalog].[IX_SiteCatalog]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SiteCatalog]
    ON [dbo].[SiteCatalog]([CatalogId] ASC, [SiteId] ASC);


GO
PRINT N'Creating [dbo].[MarketCampaigns]...';


GO
CREATE TABLE [dbo].[MarketCampaigns] (
    [MarketId]   NVARCHAR (8) NOT NULL,
    [CampaignId] INT          NOT NULL,
    CONSTRAINT [PK_MarketCampaigns] PRIMARY KEY CLUSTERED ([MarketId] ASC, [CampaignId] ASC)
);


GO
PRINT N'Creating [dbo].[SchemaVersion_CatalogSystem]...';


GO
CREATE TABLE [dbo].[SchemaVersion_CatalogSystem] (
    [Major]       INT      NOT NULL,
    [Minor]       INT      NOT NULL,
    [Patch]       INT      NOT NULL,
    [InstallDate] DATETIME NOT NULL
);


GO
PRINT N'Creating [dbo].[SchemaVersion_CatalogSystem].[IX_SchemaVersion_CatalogSystem_Major]...';


GO
CREATE CLUSTERED INDEX [IX_SchemaVersion_CatalogSystem_Major]
    ON [dbo].[SchemaVersion_CatalogSystem]([Major] ASC);


GO
PRINT N'Creating [dbo].[PromotionUsage]...';


GO
CREATE TABLE [dbo].[PromotionUsage] (
    [PromotionUsageId] INT              IDENTITY (1, 1) NOT NULL,
    [OrderGroupId]     INT              NOT NULL,
    [CustomerId]       UNIQUEIDENTIFIER NOT NULL,
    [PromotionId]      INT              NOT NULL,
    [Version]          INT              NOT NULL,
    [Status]           INT              NOT NULL,
    [LastUpdated]      DATETIME         NOT NULL,
    CONSTRAINT [PK_PromotionUsage] PRIMARY KEY CLUSTERED ([PromotionUsageId] ASC)
);


GO
PRINT N'Creating [dbo].[SalePrice]...';


GO
CREATE TABLE [dbo].[SalePrice] (
    [SalePriceId] INT            IDENTITY (1, 1) NOT NULL,
    [ItemCode]    NVARCHAR (100) NULL,
    [SaleType]    INT            NOT NULL,
    [SaleCode]    NVARCHAR (100) NULL,
    [StartDate]   DATETIME       NOT NULL,
    [Currency]    VARCHAR (128)  NOT NULL,
    [MinQuantity] MONEY          NOT NULL,
    [UnitPrice]   MONEY          NOT NULL,
    [EndDate]     DATETIME       NULL,
    CONSTRAINT [PK_SalePrice] PRIMARY KEY CLUSTERED ([SalePriceId] ASC)
);


GO
PRINT N'Creating [dbo].[SalePrice].[IX_SalePrice_ItemCode]...';


GO
CREATE NONCLUSTERED INDEX [IX_SalePrice_ItemCode]
    ON [dbo].[SalePrice]([ItemCode] ASC);


GO
PRINT N'Creating [dbo].[SegmentMember]...';


GO
CREATE TABLE [dbo].[SegmentMember] (
    [SegmentMemberId] INT              IDENTITY (1, 1) NOT NULL,
    [SegmentId]       INT              NOT NULL,
    [PrincipalId]     UNIQUEIDENTIFIER NOT NULL,
    [Exclude]         BIT              NOT NULL,
    CONSTRAINT [PK_ecf_mktg-SegmentMember] PRIMARY KEY CLUSTERED ([SegmentMemberId] ASC)
);


GO
PRINT N'Creating [dbo].[mcweb_FormDocument]...';


GO
CREATE TABLE [dbo].[mcweb_FormDocument] (
    [FormDocumentId]   INT           IDENTITY (1, 1) NOT NULL,
    [MetaClassName]    NVARCHAR (50) NOT NULL,
    [FormDocumentName] NVARCHAR (50) NOT NULL,
    [FormDocumentXml]  NTEXT         NOT NULL,
    [MetaUITypeId]     NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_mcweb_FormDocuments] PRIMARY KEY CLUSTERED ([FormDocumentId] ASC)
);


GO
PRINT N'Creating [dbo].[SegmentCondition]...';


GO
CREATE TABLE [dbo].[SegmentCondition] (
    [PrincipalGroupConditionId] INT IDENTITY (1, 1) NOT NULL,
    [SegmentId]                 INT NOT NULL,
    [ExpressionId]              INT NOT NULL,
    CONSTRAINT [PK_ecf_mktg-SegmentCondition] PRIMARY KEY CLUSTERED ([PrincipalGroupConditionId] ASC)
);


GO
PRINT N'Creating [dbo].[aspnet_Applications]...';


GO
CREATE TABLE [dbo].[aspnet_Applications] (
    [ApplicationName]        NVARCHAR (256)   NOT NULL,
    [LoweredApplicationName] NVARCHAR (256)   NOT NULL,
    [ApplicationId]          UNIQUEIDENTIFIER NOT NULL,
    [Description]            NVARCHAR (256)   NULL,
    PRIMARY KEY NONCLUSTERED ([ApplicationId] ASC),
    UNIQUE NONCLUSTERED ([ApplicationName] ASC),
    UNIQUE NONCLUSTERED ([LoweredApplicationName] ASC)
);


GO
PRINT N'Creating [dbo].[aspnet_Applications].[aspnet_Applications_Index]...';


GO
CREATE CLUSTERED INDEX [aspnet_Applications_Index]
    ON [dbo].[aspnet_Applications]([LoweredApplicationName] ASC);


GO
PRINT N'Creating [dbo].[NodeEntryRelation]...';


GO
CREATE TABLE [dbo].[NodeEntryRelation] (
    [CatalogId]      INT      NOT NULL,
    [CatalogEntryId] INT      NOT NULL,
    [CatalogNodeId]  INT      NOT NULL,
    [SortOrder]      INT      NOT NULL,
    [Modified]       DATETIME NOT NULL,
    CONSTRAINT [PK_NodeEntryRelation] PRIMARY KEY CLUSTERED ([CatalogId] ASC, [CatalogEntryId] ASC, [CatalogNodeId] ASC)
);


GO
PRINT N'Creating [dbo].[DF_CatalogItemAsset_CatalogNodeId]...';


GO
ALTER TABLE [dbo].[CatalogItemAsset]
    ADD CONSTRAINT [DF_CatalogItemAsset_CatalogNodeId] DEFAULT ((0)) FOR [CatalogNodeId];


GO
PRINT N'Creating [dbo].[DF_CatalogItemAsset_CatalogEntryId]...';


GO
ALTER TABLE [dbo].[CatalogItemAsset]
    ADD CONSTRAINT [DF_CatalogItemAsset_CatalogEntryId] DEFAULT ((0)) FOR [CatalogEntryId];


GO
PRINT N'Creating [dbo].[DF_McBlobStorage_created]...';


GO
ALTER TABLE [dbo].[McBlobStorage]
    ADD CONSTRAINT [DF_McBlobStorage_created] DEFAULT (getutcdate()) FOR [created];


GO
PRINT N'Creating [dbo].[DF_McBlobStorage_isTemporary]...';


GO
ALTER TABLE [dbo].[McBlobStorage]
    ADD CONSTRAINT [DF_McBlobStorage_isTemporary] DEFAULT ((1)) FOR [isTemporary];


GO
PRINT N'Creating [dbo].[DF_mcweb_ListViewProfile_PlaceName]...';


GO
ALTER TABLE [dbo].[mcweb_ListViewProfile]
    ADD CONSTRAINT [DF_mcweb_ListViewProfile_PlaceName] DEFAULT (N'') FOR [PlaceName];


GO
PRINT N'Creating [dbo].[DF_mcweb_ListViewProfile_IsSystem]...';


GO
ALTER TABLE [dbo].[mcweb_ListViewProfile]
    ADD CONSTRAINT [DF_mcweb_ListViewProfile_IsSystem] DEFAULT ((0)) FOR [IsSystem];


GO
PRINT N'Creating unnamed constraint on [dbo].[CatalogNodeSearchResults]...';


GO
ALTER TABLE [dbo].[CatalogNodeSearchResults]
    ADD DEFAULT (getutcdate()) FOR [Created];


GO
PRINT N'Creating [dbo].[DF__ecf_mktg-__Modif__3716A457]...';


GO
ALTER TABLE [dbo].[Campaign]
    ADD CONSTRAINT [DF__ecf_mktg-__Modif__3716A457] DEFAULT (getutcdate()) FOR [Modified];


GO
PRINT N'Creating [dbo].[DF_mcmd_MetaFieldType_Owner]...';


GO
ALTER TABLE [dbo].[mcmd_MetaFieldType]
    ADD CONSTRAINT [DF_mcmd_MetaFieldType_Owner] DEFAULT (N'System') FOR [Owner];


GO
PRINT N'Creating [dbo].[DF_mcmd_MetaFieldType_AccessLevel]...';


GO
ALTER TABLE [dbo].[mcmd_MetaFieldType]
    ADD CONSTRAINT [DF_mcmd_MetaFieldType_AccessLevel] DEFAULT ((1)) FOR [AccessLevel];


GO
PRINT N'Creating [dbo].[DF_MetaFileValue_Size]...';


GO
ALTER TABLE [dbo].[MetaFileValue]
    ADD CONSTRAINT [DF_MetaFileValue_Size] DEFAULT ((0)) FOR [Size];


GO
PRINT N'Creating [dbo].[DF_MetaFileValue_CreationTime]...';


GO
ALTER TABLE [dbo].[MetaFileValue]
    ADD CONSTRAINT [DF_MetaFileValue_CreationTime] DEFAULT (getutcdate()) FOR [CreationTime];


GO
PRINT N'Creating [dbo].[DF_MetaFileValue_LastWriteTime]...';


GO
ALTER TABLE [dbo].[MetaFileValue]
    ADD CONSTRAINT [DF_MetaFileValue_LastWriteTime] DEFAULT (getutcdate()) FOR [LastWriteTime];


GO
PRINT N'Creating [dbo].[DF_MetaFileValue_LastReadTime]...';


GO
ALTER TABLE [dbo].[MetaFileValue]
    ADD CONSTRAINT [DF_MetaFileValue_LastReadTime] DEFAULT (getutcdate()) FOR [LastReadTime];


GO
PRINT N'Creating [dbo].[DF_CatalogEntrySearchResults_SingleSort_Created]...';


GO
ALTER TABLE [dbo].[CatalogEntrySearchResults_SingleSort]
    ADD CONSTRAINT [DF_CatalogEntrySearchResults_SingleSort_Created] DEFAULT (getutcdate()) FOR [Created];


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_PersonalizationPerUser]...';


GO
ALTER TABLE [dbo].[aspnet_PersonalizationPerUser]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating [dbo].[DF_mcmd_MetaView_Card]...';


GO
ALTER TABLE [dbo].[mcmd_MetaView]
    ADD CONSTRAINT [DF_mcmd_MetaView_Card] DEFAULT (N'') FOR [Card];


GO
PRINT N'Creating [dbo].[DF__CatalogEn__Creat__0EF836A4]...';


GO
ALTER TABLE [dbo].[CatalogEntrySearchResults]
    ADD CONSTRAINT [DF__CatalogEn__Creat__0EF836A4] DEFAULT (getutcdate()) FOR [Created];


GO
PRINT N'Creating [dbo].[DF_MetaDictionary_Value]...';


GO
ALTER TABLE [dbo].[MetaDictionary]
    ADD CONSTRAINT [DF_MetaDictionary_Value] DEFAULT (N'') FOR [Value];


GO
PRINT N'Creating [dbo].[DF_mcmd_MetaEnum_OrderId]...';


GO
ALTER TABLE [dbo].[mcmd_MetaEnum]
    ADD CONSTRAINT [DF_mcmd_MetaEnum_OrderId] DEFAULT ((0)) FOR [OrderId];


GO
PRINT N'Creating [dbo].[DF_MetaClassMetaFieldRelation_Weight]...';


GO
ALTER TABLE [dbo].[MetaClassMetaFieldRelation]
    ADD CONSTRAINT [DF_MetaClassMetaFieldRelation_Weight] DEFAULT ((0)) FOR [Weight];


GO
PRINT N'Creating [dbo].[DF_MetaClassMetaFieldRelation_Enabled]...';


GO
ALTER TABLE [dbo].[MetaClassMetaFieldRelation]
    ADD CONSTRAINT [DF_MetaClassMetaFieldRelation_Enabled] DEFAULT ((1)) FOR [Enabled];


GO
PRINT N'Creating [dbo].[DF_mcmd_TmpMetaFile_Created]...';


GO
ALTER TABLE [dbo].[mcmd_TmpMetaFile]
    ADD CONSTRAINT [DF_mcmd_TmpMetaFile_Created] DEFAULT (getutcdate()) FOR [Created];


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Paths]...';


GO
ALTER TABLE [dbo].[aspnet_Paths]
    ADD DEFAULT (newid()) FOR [PathId];


GO
PRINT N'Creating [dbo].[DF_mcmd_MetaModelVersionId_VersionId]...';


GO
ALTER TABLE [dbo].[mcmd_MetaModelVersionId]
    ADD CONSTRAINT [DF_mcmd_MetaModelVersionId_VersionId] DEFAULT (newid()) FOR [VersionId];


GO
PRINT N'Creating [dbo].[DF_PriceDetail_PriceCode]...';


GO
ALTER TABLE [dbo].[PriceDetail]
    ADD CONSTRAINT [DF_PriceDetail_PriceCode] DEFAULT ('') FOR [PriceCode];


GO
PRINT N'Creating [dbo].[DF_MetaField_Namespace]...';


GO
ALTER TABLE [dbo].[MetaField]
    ADD CONSTRAINT [DF_MetaField_Namespace] DEFAULT ('') FOR [Namespace];


GO
PRINT N'Creating [dbo].[DF_MetaField_SystemMetaClassId]...';


GO
ALTER TABLE [dbo].[MetaField]
    ADD CONSTRAINT [DF_MetaField_SystemMetaClassId] DEFAULT ((0)) FOR [SystemMetaClassId];


GO
PRINT N'Creating [dbo].[DF_MetaField_Length]...';


GO
ALTER TABLE [dbo].[MetaField]
    ADD CONSTRAINT [DF_MetaField_Length] DEFAULT ((0)) FOR [Length];


GO
PRINT N'Creating [dbo].[DF_MetaField_AllowNulls]...';


GO
ALTER TABLE [dbo].[MetaField]
    ADD CONSTRAINT [DF_MetaField_AllowNulls] DEFAULT ((1)) FOR [AllowNulls];


GO
PRINT N'Creating [dbo].[DF_MetaField_MultiLanguageValue]...';


GO
ALTER TABLE [dbo].[MetaField]
    ADD CONSTRAINT [DF_MetaField_MultiLanguageValue] DEFAULT ((0)) FOR [MultiLanguageValue];


GO
PRINT N'Creating [dbo].[DF_MetaField_Encrypt]...';


GO
ALTER TABLE [dbo].[MetaField]
    ADD CONSTRAINT [DF_MetaField_Encrypt] DEFAULT ((0)) FOR [IsEncrypted];


GO
PRINT N'Creating unnamed constraint on [dbo].[MetaField]...';


GO
ALTER TABLE [dbo].[MetaField]
    ADD DEFAULT ((0)) FOR [IsKeyField];


GO
PRINT N'Creating [dbo].[DF_mcmd_MetaIdentifier_PeriodKey]...';


GO
ALTER TABLE [dbo].[mcmd_MetaIdentifier]
    ADD CONSTRAINT [DF_mcmd_MetaIdentifier_PeriodKey] DEFAULT ('') FOR [PeriodKey];


GO
PRINT N'Creating [dbo].[DF_mcmd_MetaFileContentType_FriendlyName]...';


GO
ALTER TABLE [dbo].[mcmd_MetaFileContentType]
    ADD CONSTRAINT [DF_mcmd_MetaFileContentType_FriendlyName] DEFAULT ('') FOR [FriendlyName];


GO
PRINT N'Creating [dbo].[DF_PriceGroup_PriceCode]...';


GO
ALTER TABLE [dbo].[PriceGroup]
    ADD CONSTRAINT [DF_PriceGroup_PriceCode] DEFAULT ('') FOR [PriceCode];


GO
PRINT N'Creating [dbo].[DF_MetaClass_Namespace]...';


GO
ALTER TABLE [dbo].[MetaClass]
    ADD CONSTRAINT [DF_MetaClass_Namespace] DEFAULT (N'') FOR [Namespace];


GO
PRINT N'Creating [dbo].[DF_MetaClass_FriendlyName]...';


GO
ALTER TABLE [dbo].[MetaClass]
    ADD CONSTRAINT [DF_MetaClass_FriendlyName] DEFAULT (N'') FOR [FriendlyName];


GO
PRINT N'Creating [dbo].[DF_MetaClass_IsSystem]...';


GO
ALTER TABLE [dbo].[MetaClass]
    ADD CONSTRAINT [DF_MetaClass_IsSystem] DEFAULT ((0)) FOR [IsSystem];


GO
PRINT N'Creating [dbo].[DF_MetaClass_IsAbstract]...';


GO
ALTER TABLE [dbo].[MetaClass]
    ADD CONSTRAINT [DF_MetaClass_IsAbstract] DEFAULT ((0)) FOR [IsAbstract];


GO
PRINT N'Creating [dbo].[DF_MetaClass_ParentClassId]...';


GO
ALTER TABLE [dbo].[MetaClass]
    ADD CONSTRAINT [DF_MetaClass_ParentClassId] DEFAULT ((0)) FOR [ParentClassId];


GO
PRINT N'Creating [dbo].[DF_MetaClass_PrimaryKeyName]...';


GO
ALTER TABLE [dbo].[MetaClass]
    ADD CONSTRAINT [DF_MetaClass_PrimaryKeyName] DEFAULT (N'') FOR [PrimaryKeyName];


GO
PRINT N'Creating [dbo].[DF_ShippingPaymentRestriction_RestrictShippingMethods]...';


GO
ALTER TABLE [dbo].[ShippingPaymentRestriction]
    ADD CONSTRAINT [DF_ShippingPaymentRestriction_RestrictShippingMethods] DEFAULT ((0)) FOR [RestrictShippingMethods];


GO
PRINT N'Creating [dbo].[DF_MetaDataType_Length]...';


GO
ALTER TABLE [dbo].[MetaDataType]
    ADD CONSTRAINT [DF_MetaDataType_Length] DEFAULT ((0)) FOR [Length];


GO
PRINT N'Creating [dbo].[DF_MetaDataType_AllowNulls]...';


GO
ALTER TABLE [dbo].[MetaDataType]
    ADD CONSTRAINT [DF_MetaDataType_AllowNulls] DEFAULT ((1)) FOR [AllowNulls];


GO
PRINT N'Creating [dbo].[DF_MetaDataType_Variable]...';


GO
ALTER TABLE [dbo].[MetaDataType]
    ADD CONSTRAINT [DF_MetaDataType_Variable] DEFAULT ((0)) FOR [Variable];


GO
PRINT N'Creating [dbo].[DF_MetaDataType_IsSQLCommonType]...';


GO
ALTER TABLE [dbo].[MetaDataType]
    ADD CONSTRAINT [DF_MetaDataType_IsSQLCommonType] DEFAULT ((1)) FOR [IsSQLCommonType];


GO
PRINT N'Creating [dbo].[DF_MetaDataType_DefaultValue]...';


GO
ALTER TABLE [dbo].[MetaDataType]
    ADD CONSTRAINT [DF_MetaDataType_DefaultValue] DEFAULT (N'') FOR [DefaultValue];


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Roles]...';


GO
ALTER TABLE [dbo].[aspnet_Roles]
    ADD DEFAULT (newid()) FOR [RoleId];


GO
PRINT N'Creating [dbo].[DF_main_FileTree_IsFolder]...';


GO
ALTER TABLE [dbo].[main_PageTree]
    ADD CONSTRAINT [DF_main_FileTree_IsFolder] DEFAULT ((0)) FOR [IsFolder];


GO
PRINT N'Creating [dbo].[DF_main_FileTree_IsDefault]...';


GO
ALTER TABLE [dbo].[main_PageTree]
    ADD CONSTRAINT [DF_main_FileTree_IsDefault] DEFAULT ((0)) FOR [IsDefault];


GO
PRINT N'Creating [dbo].[DF_Security_RoleAssignment_SecurityRoleAssignmentId]...';


GO
ALTER TABLE [dbo].[Security_RoleAssignment]
    ADD CONSTRAINT [DF_Security_RoleAssignment_SecurityRoleAssignmentId] DEFAULT (newid()) FOR [SecurityRoleAssignmentId];


GO
PRINT N'Creating [dbo].[DF_Security_RoleAssignment_IsOnlyForOwner]...';


GO
ALTER TABLE [dbo].[Security_RoleAssignment]
    ADD CONSTRAINT [DF_Security_RoleAssignment_IsOnlyForOwner] DEFAULT ((0)) FOR [IsOnlyForOwner];


GO
PRINT N'Creating [dbo].[DF_main_LanguageInfo_IsDefault]...';


GO
ALTER TABLE [dbo].[main_LanguageInfo]
    ADD CONSTRAINT [DF_main_LanguageInfo_IsDefault] DEFAULT ((0)) FOR [IsDefault];


GO
PRINT N'Creating unnamed constraint on [dbo].[OrderSearchResults]...';


GO
ALTER TABLE [dbo].[OrderSearchResults]
    ADD DEFAULT (getutcdate()) FOR [Created];


GO
PRINT N'Creating [dbo].[DF_dps_TemporaryStorage_PageVersionId]...';


GO
ALTER TABLE [dbo].[dps_TemporaryStorage]
    ADD CONSTRAINT [DF_dps_TemporaryStorage_PageVersionId] DEFAULT ((0)) FOR [PageVersionId];


GO
PRINT N'Creating [dbo].[DF_OrderGroup_MarketId]...';


GO
ALTER TABLE [dbo].[OrderGroup]
    ADD CONSTRAINT [DF_OrderGroup_MarketId] DEFAULT ('DEFAULT') FOR [MarketId];


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Membership]...';


GO
ALTER TABLE [dbo].[aspnet_Membership]
    ADD DEFAULT ((0)) FOR [PasswordFormat];


GO
PRINT N'Creating [dbo].[DF_dps_PageDocument_PageVersionId]...';


GO
ALTER TABLE [dbo].[dps_PageDocument]
    ADD CONSTRAINT [DF_dps_PageDocument_PageVersionId] DEFAULT ((0)) FOR [PageVersionId];


GO
PRINT N'Creating [dbo].[DF_dps_Node_NodeTypeId]...';


GO
ALTER TABLE [dbo].[dps_Node]
    ADD CONSTRAINT [DF_dps_Node_NodeTypeId] DEFAULT ((0)) FOR [NodeTypeId];


GO
PRINT N'Creating [dbo].[DF_dps_Node_NodeUID]...';


GO
ALTER TABLE [dbo].[dps_Node]
    ADD CONSTRAINT [DF_dps_Node_NodeUID] DEFAULT (N'') FOR [NodeUID];


GO
PRINT N'Creating [dbo].[DF_dps_Node_FactoryUID]...';


GO
ALTER TABLE [dbo].[dps_Node]
    ADD CONSTRAINT [DF_dps_Node_FactoryUID] DEFAULT (N'') FOR [FactoryUID];


GO
PRINT N'Creating [dbo].[DF_dps_Node_FactoryControlUID]...';


GO
ALTER TABLE [dbo].[dps_Node]
    ADD CONSTRAINT [DF_dps_Node_FactoryControlUID] DEFAULT (N'') FOR [FactoryControlUID];


GO
PRINT N'Creating [dbo].[DF_dps_Node_ControlPlaceId]...';


GO
ALTER TABLE [dbo].[dps_Node]
    ADD CONSTRAINT [DF_dps_Node_ControlPlaceId] DEFAULT (N'') FOR [ControlPlaceId];


GO
PRINT N'Creating unnamed constraint on [dbo].[LineItem]...';


GO
ALTER TABLE [dbo].[LineItem]
    ADD DEFAULT ((0)) FOR [ReturnQuantity];


GO
PRINT N'Creating [dbo].[DF_LineItem_IsInventoryAllocated]...';


GO
ALTER TABLE [dbo].[LineItem]
    ADD CONSTRAINT [DF_LineItem_IsInventoryAllocated] DEFAULT ((0)) FOR [IsInventoryAllocated];


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Users]...';


GO
ALTER TABLE [dbo].[aspnet_Users]
    ADD DEFAULT (newid()) FOR [UserId];


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Users]...';


GO
ALTER TABLE [dbo].[aspnet_Users]
    ADD DEFAULT (NULL) FOR [MobileAlias];


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Users]...';


GO
ALTER TABLE [dbo].[aspnet_Users]
    ADD DEFAULT ((0)) FOR [IsAnonymous];


GO
PRINT N'Creating [dbo].[DF_Warehouse_Created]...';


GO
ALTER TABLE [dbo].[Warehouse]
    ADD CONSTRAINT [DF_Warehouse_Created] DEFAULT (getutcdate()) FOR [Created];


GO
PRINT N'Creating [dbo].[DF_Warehouse_Modified]...';


GO
ALTER TABLE [dbo].[Warehouse]
    ADD CONSTRAINT [DF_Warehouse_Modified] DEFAULT (getutcdate()) FOR [Modified];


GO
PRINT N'Creating unnamed constraint on [dbo].[Variation]...';


GO
ALTER TABLE [dbo].[Variation]
    ADD DEFAULT (0) FOR [Length];


GO
PRINT N'Creating unnamed constraint on [dbo].[Variation]...';


GO
ALTER TABLE [dbo].[Variation]
    ADD DEFAULT (0) FOR [Height];


GO
PRINT N'Creating unnamed constraint on [dbo].[Variation]...';


GO
ALTER TABLE [dbo].[Variation]
    ADD DEFAULT (0) FOR [Width];


GO
PRINT N'Creating [dbo].[DF_mcweb_FormDocument_MetaUITypeId]...';


GO
ALTER TABLE [dbo].[mcweb_FormDocument]
    ADD CONSTRAINT [DF_mcweb_FormDocument_MetaUITypeId] DEFAULT (N'') FOR [MetaUITypeId];


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Applications]...';


GO
ALTER TABLE [dbo].[aspnet_Applications]
    ADD DEFAULT (newid()) FOR [ApplicationId];


GO
PRINT N'Creating unnamed constraint on [dbo].[NodeEntryRelation]...';


GO
ALTER TABLE [dbo].[NodeEntryRelation]
    ADD DEFAULT (getutcdate()) FOR [Modified];


GO
PRINT N'Creating [dbo].[FK_PromotionInformation_OrderGroup]...';


GO
ALTER TABLE [dbo].[PromotionInformation]
    ADD CONSTRAINT [FK_PromotionInformation_OrderGroup] FOREIGN KEY ([OrdergroupId]) REFERENCES [dbo].[OrderGroup] ([OrderGroupId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_GuidCatalogMapping_Catalog]...';


GO
ALTER TABLE [dbo].[GuidCatalogMapping]
    ADD CONSTRAINT [FK_GuidCatalogMapping_Catalog] FOREIGN KEY ([CatalogId]) REFERENCES [dbo].[Catalog] ([CatalogId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_GuidNodeMapping_CatalogNode]...';


GO
ALTER TABLE [dbo].[GuidNodeMapping]
    ADD CONSTRAINT [FK_GuidNodeMapping_CatalogNode] FOREIGN KEY ([CatalogNodeId]) REFERENCES [dbo].[CatalogNode] ([CatalogNodeId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_GuidEntryMapping_CatalogEntry]...';


GO
ALTER TABLE [dbo].[GuidEntryMapping]
    ADD CONSTRAINT [FK_GuidEntryMapping_CatalogEntry] FOREIGN KEY ([CatalogEntryId]) REFERENCES [dbo].[CatalogEntry] ([CatalogEntryId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_MarketShippingMethods_Market]...';


GO
ALTER TABLE [dbo].[MarketShippingMethods]
    ADD CONSTRAINT [FK_MarketShippingMethods_Market] FOREIGN KEY ([MarketId]) REFERENCES [dbo].[Market] ([MarketId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_MarketShippingMethods_ShippingMethod]...';


GO
ALTER TABLE [dbo].[MarketShippingMethods]
    ADD CONSTRAINT [FK_MarketShippingMethods_ShippingMethod] FOREIGN KEY ([ShippingMethodId]) REFERENCES [dbo].[ShippingMethod] ([ShippingMethodId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ManagedInventory_CatalogEntry]...';


GO
ALTER TABLE [dbo].[InventoryService]
    ADD CONSTRAINT [FK_ManagedInventory_CatalogEntry] FOREIGN KEY ([CatalogEntryCode], [ApplicationId]) REFERENCES [dbo].[CatalogEntry] ([Code], [ApplicationId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ManagedInventory_Warehouse]...';


GO
ALTER TABLE [dbo].[InventoryService]
    ADD CONSTRAINT [FK_ManagedInventory_Warehouse] FOREIGN KEY ([ApplicationId], [WarehouseCode]) REFERENCES [dbo].[Warehouse] ([ApplicationId], [Code]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating unnamed constraint on [dbo].[CatalogNodeAsset]...';


GO
ALTER TABLE [dbo].[CatalogNodeAsset]
    ADD FOREIGN KEY ([CatalogNodeId]) REFERENCES [dbo].[CatalogNode] ([CatalogNodeId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating unnamed constraint on [dbo].[CatalogNodeAsset]...';


GO
ALTER TABLE [dbo].[CatalogNodeAsset]
    ADD FOREIGN KEY ([AssetKey]) REFERENCES [dbo].[CatalogAsset] ([AssetKey]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating unnamed constraint on [dbo].[CatalogEntryAsset]...';


GO
ALTER TABLE [dbo].[CatalogEntryAsset]
    ADD FOREIGN KEY ([CatalogEntryId]) REFERENCES [dbo].[CatalogEntry] ([CatalogEntryId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating unnamed constraint on [dbo].[CatalogEntryAsset]...';


GO
ALTER TABLE [dbo].[CatalogEntryAsset]
    ADD FOREIGN KEY ([AssetKey]) REFERENCES [dbo].[CatalogAsset] ([AssetKey]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ApplicationLog_Application]...';


GO
ALTER TABLE [dbo].[ApplicationLog]
    ADD CONSTRAINT [FK_ApplicationLog_Application] FOREIGN KEY ([ApplicationId]) REFERENCES [dbo].[Application] ([ApplicationId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_MarketCountries_Market]...';


GO
ALTER TABLE [dbo].[MarketCountries]
    ADD CONSTRAINT [FK_MarketCountries_Market] FOREIGN KEY ([MarketId]) REFERENCES [dbo].[Market] ([MarketId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_SiteSecurity_Site]...';


GO
ALTER TABLE [dbo].[SiteSecurity]
    ADD CONSTRAINT [FK_SiteSecurity_Site] FOREIGN KEY ([SiteId]) REFERENCES [dbo].[Site] ([SiteId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ecf_mktg-PromotionPolicy_ecf_mktg-Policy]...';


GO
ALTER TABLE [dbo].[PromotionPolicy]
    ADD CONSTRAINT [FK_ecf_mktg-PromotionPolicy_ecf_mktg-Policy] FOREIGN KEY ([PolicyId]) REFERENCES [dbo].[Policy] ([PolicyId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ecf_mktg-PromotionPolicy_ecf_mktg-Promotion]...';


GO
ALTER TABLE [dbo].[PromotionPolicy]
    ADD CONSTRAINT [FK_ecf_mktg-PromotionPolicy_ecf_mktg-Promotion] FOREIGN KEY ([PromotionId]) REFERENCES [dbo].[Promotion] ([PromotionId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_MarketLanguages_Market]...';


GO
ALTER TABLE [dbo].[MarketLanguages]
    ADD CONSTRAINT [FK_MarketLanguages_Market] FOREIGN KEY ([MarketId]) REFERENCES [dbo].[Market] ([MarketId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ecf_mktg-PromotionLanguage_ecf_mktg-Promotion]...';


GO
ALTER TABLE [dbo].[PromotionLanguage]
    ADD CONSTRAINT [FK_ecf_mktg-PromotionLanguage_ecf_mktg-Promotion] FOREIGN KEY ([PromotionId]) REFERENCES [dbo].[Promotion] ([PromotionId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_CurrencyRate_Currency]...';


GO
ALTER TABLE [dbo].[CurrencyRate]
    ADD CONSTRAINT [FK_CurrencyRate_Currency] FOREIGN KEY ([FromCurrencyId]) REFERENCES [dbo].[Currency] ([CompatCurrencyId]);


GO
PRINT N'Creating [dbo].[FK_CurrencyRate_Currency1]...';


GO
ALTER TABLE [dbo].[CurrencyRate]
    ADD CONSTRAINT [FK_CurrencyRate_Currency1] FOREIGN KEY ([ToCurrencyId]) REFERENCES [dbo].[Currency] ([CompatCurrencyId]);


GO
PRINT N'Creating [dbo].[FK_ecf_mktg-PromotionCondition_ecf_mktg-Expression]...';


GO
ALTER TABLE [dbo].[PromotionCondition]
    ADD CONSTRAINT [FK_ecf_mktg-PromotionCondition_ecf_mktg-Expression] FOREIGN KEY ([ExpressionId]) REFERENCES [dbo].[Expression] ([ExpressionId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ecf_mktg-PromotionCondition_ecf_mktg-Promotion]...';


GO
ALTER TABLE [dbo].[PromotionCondition]
    ADD CONSTRAINT [FK_ecf_mktg-PromotionCondition_ecf_mktg-Promotion] FOREIGN KEY ([PromotionId]) REFERENCES [dbo].[Promotion] ([PromotionId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_MarketCurrencies_Market]...';


GO
ALTER TABLE [dbo].[MarketCurrencies]
    ADD CONSTRAINT [FK_MarketCurrencies_Market] FOREIGN KEY ([MarketId]) REFERENCES [dbo].[Market] ([MarketId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_CatalogSecurity_Catalog]...';


GO
ALTER TABLE [dbo].[CatalogSecurity]
    ADD CONSTRAINT [FK_CatalogSecurity_Catalog] FOREIGN KEY ([CatalogId]) REFERENCES [dbo].[Catalog] ([CatalogId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ecf_mktg-Promotion_ecf_mktg-Campaign]...';


GO
ALTER TABLE [dbo].[Promotion]
    ADD CONSTRAINT [FK_ecf_mktg-Promotion_ecf_mktg-Campaign] FOREIGN KEY ([CampaignId]) REFERENCES [dbo].[Campaign] ([CampaignId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_CatalogNodeSearchResults_CatalogNode]...';


GO
ALTER TABLE [dbo].[CatalogNodeSearchResults]
    ADD CONSTRAINT [FK_CatalogNodeSearchResults_CatalogNode] FOREIGN KEY ([CatalogNodeId]) REFERENCES [dbo].[CatalogNode] ([CatalogNodeId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ecf_mktg-GroupPolicy_ecf_mktg-Policy]...';


GO
ALTER TABLE [dbo].[GroupPolicy]
    ADD CONSTRAINT [FK_ecf_mktg-GroupPolicy_ecf_mktg-Policy] FOREIGN KEY ([PolicyId]) REFERENCES [dbo].[Policy] ([PolicyId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Market_Currency]...';


GO
ALTER TABLE [dbo].[Market]
    ADD CONSTRAINT [FK_Market_Currency] FOREIGN KEY ([DefaultCurrencyCode]) REFERENCES [dbo].[Currency] ([CurrencyCode]);


GO
PRINT N'Creating [dbo].[FK_mcmd_SelectedEnumValue_mcmd_MetaEnum]...';


GO
ALTER TABLE [dbo].[mcmd_SelectedEnumValue]
    ADD CONSTRAINT [FK_mcmd_SelectedEnumValue_mcmd_MetaEnum] FOREIGN KEY ([Id], [TypeName]) REFERENCES [dbo].[mcmd_MetaEnum] ([Id], [TypeName]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_CatalogItemCategory_Catalog]...';


GO
ALTER TABLE [dbo].[CatalogNodeRelation]
    ADD CONSTRAINT [FK_CatalogItemCategory_Catalog] FOREIGN KEY ([CatalogId]) REFERENCES [dbo].[Catalog] ([CatalogId]);


GO
PRINT N'Creating [dbo].[FK_CatalogItemCategory_CatalogItem]...';


GO
ALTER TABLE [dbo].[CatalogNodeRelation]
    ADD CONSTRAINT [FK_CatalogItemCategory_CatalogItem] FOREIGN KEY ([ChildNodeId]) REFERENCES [dbo].[CatalogNode] ([CatalogNodeId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ecf_mktg-Policy_ecf_mktg-Expression]...';


GO
ALTER TABLE [dbo].[Policy]
    ADD CONSTRAINT [FK_ecf_mktg-Policy_ecf_mktg-Expression] FOREIGN KEY ([ExpressionId]) REFERENCES [dbo].[Expression] ([ExpressionId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_mcmd_MetaField_mcmd_MetaClass]...';


GO
ALTER TABLE [dbo].[mcmd_MetaField]
    ADD CONSTRAINT [FK_mcmd_MetaField_mcmd_MetaClass] FOREIGN KEY ([MetaClassId]) REFERENCES [dbo].[mcmd_MetaClass] ([MetaClassId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_CatalogItem_Catalog]...';


GO
ALTER TABLE [dbo].[CatalogNode]
    ADD CONSTRAINT [FK_CatalogItem_Catalog] FOREIGN KEY ([CatalogId]) REFERENCES [dbo].[Catalog] ([CatalogId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_mcmd_MetaFieldMap_mcmd_MetaClass]...';


GO
ALTER TABLE [dbo].[mcmd_MetaFieldMap]
    ADD CONSTRAINT [FK_mcmd_MetaFieldMap_mcmd_MetaClass] FOREIGN KEY ([SrcMetaClassId]) REFERENCES [dbo].[mcmd_MetaClass] ([MetaClassId]);


GO
PRINT N'Creating [dbo].[FK_mcmd_MetaFieldMap_mcmd_MetaClass1]...';


GO
ALTER TABLE [dbo].[mcmd_MetaFieldMap]
    ADD CONSTRAINT [FK_mcmd_MetaFieldMap_mcmd_MetaClass1] FOREIGN KEY ([DestMetaClassId]) REFERENCES [dbo].[mcmd_MetaClass] ([MetaClassId]);


GO
PRINT N'Creating [dbo].[FK_ecf_mktg-CampaignSegment_ecf_mktg-Campaign]...';


GO
ALTER TABLE [dbo].[CampaignSegment]
    ADD CONSTRAINT [FK_ecf_mktg-CampaignSegment_ecf_mktg-Campaign] FOREIGN KEY ([CampaignId]) REFERENCES [dbo].[Campaign] ([CampaignId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ecf_mktg-CampaignSegment_ecf_mktg-Segment]...';


GO
ALTER TABLE [dbo].[CampaignSegment]
    ADD CONSTRAINT [FK_ecf_mktg-CampaignSegment_ecf_mktg-Segment] FOREIGN KEY ([SegmentId]) REFERENCES [dbo].[Segment] ([SegmentId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_mcmd_MetaClassDataSource_mcmd_MetaClass]...';


GO
ALTER TABLE [dbo].[mcmd_MetaClassDataSource]
    ADD CONSTRAINT [FK_mcmd_MetaClassDataSource_mcmd_MetaClass] FOREIGN KEY ([MetaClassId]) REFERENCES [dbo].[mcmd_MetaClass] ([MetaClassId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_CatalogLanguage_Catalog]...';


GO
ALTER TABLE [dbo].[CatalogLanguage]
    ADD CONSTRAINT [FK_CatalogLanguage_Catalog] FOREIGN KEY ([CatalogId]) REFERENCES [dbo].[Catalog] ([CatalogId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_MetaMultiValueDictionary_MetaKey]...';


GO
ALTER TABLE [dbo].[MetaMultiValueDictionary]
    ADD CONSTRAINT [FK_MetaMultiValueDictionary_MetaKey] FOREIGN KEY ([MetaKey]) REFERENCES [dbo].[MetaKey] ([MetaKey]);


GO
PRINT N'Creating [dbo].[FK_WarehouseInventory_Warehouse]...';


GO
ALTER TABLE [dbo].[WarehouseInventory]
    ADD CONSTRAINT [FK_WarehouseInventory_Warehouse] FOREIGN KEY ([ApplicationId], [WarehouseCode]) REFERENCES [dbo].[Warehouse] ([ApplicationId], [Code]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_MetaFileValue_MetaKey]...';


GO
ALTER TABLE [dbo].[MetaFileValue]
    ADD CONSTRAINT [FK_MetaFileValue_MetaKey] FOREIGN KEY ([MetaKey]) REFERENCES [dbo].[MetaKey] ([MetaKey]);


GO
PRINT N'Creating [dbo].[FK_PersPerUser_Paths]...';


GO
ALTER TABLE [dbo].[aspnet_PersonalizationPerUser]
    ADD CONSTRAINT [FK_PersPerUser_Paths] FOREIGN KEY ([PathId]) REFERENCES [dbo].[aspnet_Paths] ([PathId]);


GO
PRINT N'Creating [dbo].[FK_PersPerUser_Users]...';


GO
ALTER TABLE [dbo].[aspnet_PersonalizationPerUser]
    ADD CONSTRAINT [FK_PersPerUser_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_CatalogEntrySearchResults_CatalogEntry]...';


GO
ALTER TABLE [dbo].[CatalogEntrySearchResults]
    ADD CONSTRAINT [FK_CatalogEntrySearchResults_CatalogEntry] FOREIGN KEY ([CatalogEntryId]) REFERENCES [dbo].[CatalogEntry] ([CatalogEntryId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_MetaDictionaryLocalization_MetaDictionary]...';


GO
ALTER TABLE [dbo].[MetaDictionaryLocalization]
    ADD CONSTRAINT [FK_MetaDictionaryLocalization_MetaDictionary] FOREIGN KEY ([MetaDictionaryId]) REFERENCES [dbo].[MetaDictionary] ([MetaDictionaryId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_JurisdictionRelation_Jurisdiction]...';


GO
ALTER TABLE [dbo].[JurisdictionRelation]
    ADD CONSTRAINT [FK_JurisdictionRelation_Jurisdiction] FOREIGN KEY ([JurisdictionId]) REFERENCES [dbo].[Jurisdiction] ([JurisdictionId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_JurisdictionRelation_JurisdictionGroup]...';


GO
ALTER TABLE [dbo].[JurisdictionRelation]
    ADD CONSTRAINT [FK_JurisdictionRelation_JurisdictionGroup] FOREIGN KEY ([JurisdictionGroupId]) REFERENCES [dbo].[JurisdictionGroup] ([JurisdictionGroupId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_CatalogEntryRelation_CatalogEntry]...';


GO
ALTER TABLE [dbo].[CatalogEntryRelation]
    ADD CONSTRAINT [FK_CatalogEntryRelation_CatalogEntry] FOREIGN KEY ([ChildEntryId]) REFERENCES [dbo].[CatalogEntry] ([CatalogEntryId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_CatalogEntryRelation_CatalogEntry1]...';


GO
ALTER TABLE [dbo].[CatalogEntryRelation]
    ADD CONSTRAINT [FK_CatalogEntryRelation_CatalogEntry1] FOREIGN KEY ([ParentEntryId]) REFERENCES [dbo].[CatalogEntry] ([CatalogEntryId]);


GO
PRINT N'Creating [dbo].[FK_MetaDictionary_MetaField]...';


GO
ALTER TABLE [dbo].[MetaDictionary]
    ADD CONSTRAINT [FK_MetaDictionary_MetaField] FOREIGN KEY ([MetaFieldId]) REFERENCES [dbo].[MetaField] ([MetaFieldId]);


GO
PRINT N'Creating [dbo].[FK_PersAllUser_Paths]...';


GO
ALTER TABLE [dbo].[aspnet_PersonalizationAllUsers]
    ADD CONSTRAINT [FK_PersAllUser_Paths] FOREIGN KEY ([PathId]) REFERENCES [dbo].[aspnet_Paths] ([PathId]);


GO
PRINT N'Creating [dbo].[FK_CatalogEntryAssociation_AssociationType]...';


GO
ALTER TABLE [dbo].[CatalogEntryAssociation]
    ADD CONSTRAINT [FK_CatalogEntryAssociation_AssociationType] FOREIGN KEY ([AssociationTypeId]) REFERENCES [dbo].[AssociationType] ([AssociationTypeId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_CatalogEntryAssociation_CatalogAssociation]...';


GO
ALTER TABLE [dbo].[CatalogEntryAssociation]
    ADD CONSTRAINT [FK_CatalogEntryAssociation_CatalogAssociation] FOREIGN KEY ([CatalogAssociationId]) REFERENCES [dbo].[CatalogAssociation] ([CatalogAssociationId]);


GO
PRINT N'Creating [dbo].[FK_CatalogEntryAssociation_CatalogEntry]...';


GO
ALTER TABLE [dbo].[CatalogEntryAssociation]
    ADD CONSTRAINT [FK_CatalogEntryAssociation_CatalogEntry] FOREIGN KEY ([CatalogEntryId]) REFERENCES [dbo].[CatalogEntry] ([CatalogEntryId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_MetaClassMetaFieldRelation_MetaClass]...';


GO
ALTER TABLE [dbo].[MetaClassMetaFieldRelation]
    ADD CONSTRAINT [FK_MetaClassMetaFieldRelation_MetaClass] FOREIGN KEY ([MetaClassId]) REFERENCES [dbo].[MetaClass] ([MetaClassId]);


GO
PRINT N'Creating [dbo].[FK_MetaClassMetaFieldRelation_MetaField]...';


GO
ALTER TABLE [dbo].[MetaClassMetaFieldRelation]
    ADD CONSTRAINT [FK_MetaClassMetaFieldRelation_MetaField] FOREIGN KEY ([MetaFieldId]) REFERENCES [dbo].[MetaField] ([MetaFieldId]);


GO
PRINT N'Creating [dbo].[FK_CatalogEntity_Catalog]...';


GO
ALTER TABLE [dbo].[CatalogEntry]
    ADD CONSTRAINT [FK_CatalogEntity_Catalog] FOREIGN KEY ([CatalogId]) REFERENCES [dbo].[Catalog] ([CatalogId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_CatalogAssociation_CatalogEntry]...';


GO
ALTER TABLE [dbo].[CatalogAssociation]
    ADD CONSTRAINT [FK_CatalogAssociation_CatalogEntry] FOREIGN KEY ([CatalogEntryId]) REFERENCES [dbo].[CatalogEntry] ([CatalogEntryId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Paths_Application]...';


GO
ALTER TABLE [dbo].[aspnet_Paths]
    ADD CONSTRAINT [FK_Paths_Application] FOREIGN KEY ([ApplicationId]) REFERENCES [dbo].[aspnet_Applications] ([ApplicationId]);


GO
PRINT N'Creating [dbo].[FK_TaxLanguage_Tax]...';


GO
ALTER TABLE [dbo].[TaxLanguage]
    ADD CONSTRAINT [FK_TaxLanguage_Tax] FOREIGN KEY ([TaxId]) REFERENCES [dbo].[Tax] ([TaxId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_PriceDetail_CatalogEntry]...';


GO
ALTER TABLE [dbo].[PriceDetail]
    ADD CONSTRAINT [FK_PriceDetail_CatalogEntry] FOREIGN KEY ([CatalogEntryCode], [ApplicationId]) REFERENCES [dbo].[CatalogEntry] ([Code], [ApplicationId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_PriceDetail_Currency]...';


GO
ALTER TABLE [dbo].[PriceDetail]
    ADD CONSTRAINT [FK_PriceDetail_Currency] FOREIGN KEY ([CurrencyCode]) REFERENCES [dbo].[Currency] ([CurrencyCode]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_PriceDetail_Market]...';


GO
ALTER TABLE [dbo].[PriceDetail]
    ADD CONSTRAINT [FK_PriceDetail_Market] FOREIGN KEY ([MarketId]) REFERENCES [dbo].[Market] ([MarketId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_PriceDetail_PriceType]...';


GO
ALTER TABLE [dbo].[PriceDetail]
    ADD CONSTRAINT [FK_PriceDetail_PriceType] FOREIGN KEY ([PriceTypeId]) REFERENCES [dbo].[PriceType] ([PriceTypeId]);


GO
PRINT N'Creating [dbo].[FK_MetaField_MetaDataType]...';


GO
ALTER TABLE [dbo].[MetaField]
    ADD CONSTRAINT [FK_MetaField_MetaDataType] FOREIGN KEY ([DataTypeId]) REFERENCES [dbo].[MetaDataType] ([DataTypeId]);


GO
PRINT N'Creating [dbo].[FK_PriceValue_PriceGroup]...';


GO
ALTER TABLE [dbo].[PriceValue]
    ADD CONSTRAINT [FK_PriceValue_PriceGroup] FOREIGN KEY ([PriceGroupId]) REFERENCES [dbo].[PriceGroup] ([PriceGroupId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_TaxValue_JurisdictionGroup]...';


GO
ALTER TABLE [dbo].[TaxValue]
    ADD CONSTRAINT [FK_TaxValue_JurisdictionGroup] FOREIGN KEY ([JurisdictionGroupId]) REFERENCES [dbo].[JurisdictionGroup] ([JurisdictionGroupId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[Tax_TaxValue_FK1]...';


GO
ALTER TABLE [dbo].[TaxValue]
    ADD CONSTRAINT [Tax_TaxValue_FK1] FOREIGN KEY ([TaxId]) REFERENCES [dbo].[Tax] ([TaxId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_StateProvince_Country]...';


GO
ALTER TABLE [dbo].[StateProvince]
    ADD CONSTRAINT [FK_StateProvince_Country] FOREIGN KEY ([CountryId]) REFERENCES [dbo].[Country] ([CountryId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ShippingRegion_ShippingMethod]...';


GO
ALTER TABLE [dbo].[ShippingRegion]
    ADD CONSTRAINT [FK_ShippingRegion_ShippingMethod] FOREIGN KEY ([ShippingMethodId]) REFERENCES [dbo].[ShippingMethod] ([ShippingMethodId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[StateProvince_ShippingRegion_FK1]...';


GO
ALTER TABLE [dbo].[ShippingRegion]
    ADD CONSTRAINT [StateProvince_ShippingRegion_FK1] FOREIGN KEY ([StateProvinceId]) REFERENCES [dbo].[StateProvince] ([StateProvinceId]);


GO
PRINT N'Creating [dbo].[FK_PriceGroup_CatalogEntry]...';


GO
ALTER TABLE [dbo].[PriceGroup]
    ADD CONSTRAINT [FK_PriceGroup_CatalogEntry] FOREIGN KEY ([CatalogEntryCode], [ApplicationId]) REFERENCES [dbo].[CatalogEntry] ([Code], [ApplicationId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_PriceGroup_Currency]...';


GO
ALTER TABLE [dbo].[PriceGroup]
    ADD CONSTRAINT [FK_PriceGroup_Currency] FOREIGN KEY ([CurrencyCode]) REFERENCES [dbo].[Currency] ([CurrencyCode]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_PriceGroup_Market]...';


GO
ALTER TABLE [dbo].[PriceGroup]
    ADD CONSTRAINT [FK_PriceGroup_Market] FOREIGN KEY ([MarketId]) REFERENCES [dbo].[Market] ([MarketId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_PriceGroup_PriceType]...';


GO
ALTER TABLE [dbo].[PriceGroup]
    ADD CONSTRAINT [FK_PriceGroup_PriceType] FOREIGN KEY ([PriceTypeId]) REFERENCES [dbo].[PriceType] ([PriceTypeId]);


GO
PRINT N'Creating [dbo].[FK_ShippingPaymentRestriction_PaymentMethod]...';


GO
ALTER TABLE [dbo].[ShippingPaymentRestriction]
    ADD CONSTRAINT [FK_ShippingPaymentRestriction_PaymentMethod] FOREIGN KEY ([PaymentMethodId]) REFERENCES [dbo].[PaymentMethod] ([PaymentMethodId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ShippingPaymentRestriction_ShippingMethod]...';


GO
ALTER TABLE [dbo].[ShippingPaymentRestriction]
    ADD CONSTRAINT [FK_ShippingPaymentRestriction_ShippingMethod] FOREIGN KEY ([ShippingMethodId]) REFERENCES [dbo].[ShippingMethod] ([ShippingMethodId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_main_WorkflowStatusAccess_main_WorkflowStatus]...';


GO
ALTER TABLE [dbo].[WorkflowStatusAccess]
    ADD CONSTRAINT [FK_main_WorkflowStatusAccess_main_WorkflowStatus] FOREIGN KEY ([StatusId]) REFERENCES [dbo].[WorkflowStatus] ([StatusId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_UsersInRoles_Roles]...';


GO
ALTER TABLE [dbo].[aspnet_UsersInRoles]
    ADD CONSTRAINT [FK_UsersInRoles_Roles] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[aspnet_Roles] ([RoleId]);


GO
PRINT N'Creating [dbo].[FK_UsersInRoles_Users]...';


GO
ALTER TABLE [dbo].[aspnet_UsersInRoles]
    ADD CONSTRAINT [FK_UsersInRoles_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_ShippingPackage_Package]...';


GO
ALTER TABLE [dbo].[ShippingPackage]
    ADD CONSTRAINT [FK_ShippingPackage_Package] FOREIGN KEY ([PackageId]) REFERENCES [dbo].[Package] ([PackageId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ShippingPackage_ShippingOption]...';


GO
ALTER TABLE [dbo].[ShippingPackage]
    ADD CONSTRAINT [FK_ShippingPackage_ShippingOption] FOREIGN KEY ([ShippingOptionId]) REFERENCES [dbo].[ShippingOption] ([ShippingOptionId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_main_WorkflowStatus_main_Workflow]...';


GO
ALTER TABLE [dbo].[WorkflowStatus]
    ADD CONSTRAINT [FK_main_WorkflowStatus_main_Workflow] FOREIGN KEY ([WorkflowId]) REFERENCES [dbo].[Workflow] ([WorkflowId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ShippingMethodParameter_ShippingMethod]...';


GO
ALTER TABLE [dbo].[ShippingMethodParameter]
    ADD CONSTRAINT [FK_ShippingMethodParameter_ShippingMethod] FOREIGN KEY ([ShippingMethodId]) REFERENCES [dbo].[ShippingMethod] ([ShippingMethodId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_SiteLanguage_Site]...';


GO
ALTER TABLE [dbo].[SiteLanguage]
    ADD CONSTRAINT [FK_SiteLanguage_Site] FOREIGN KEY ([SiteId]) REFERENCES [dbo].[Site] ([SiteId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ShippingMethodCase_JurisdictionGroup]...';


GO
ALTER TABLE [dbo].[ShippingMethodCase]
    ADD CONSTRAINT [FK_ShippingMethodCase_JurisdictionGroup] FOREIGN KEY ([JurisdictionGroupId]) REFERENCES [dbo].[JurisdictionGroup] ([JurisdictionGroupId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[ShippingMethod_ShippingMethodCase_FK1]...';


GO
ALTER TABLE [dbo].[ShippingMethodCase]
    ADD CONSTRAINT [ShippingMethod_ShippingMethodCase_FK1] FOREIGN KEY ([ShippingMethodId]) REFERENCES [dbo].[ShippingMethod] ([ShippingMethodId]);


GO
PRINT N'Creating [dbo].[FK_Roles_Application]...';


GO
ALTER TABLE [dbo].[aspnet_Roles]
    ADD CONSTRAINT [FK_Roles_Application] FOREIGN KEY ([ApplicationId]) REFERENCES [dbo].[aspnet_Applications] ([ApplicationId]);


GO
PRINT N'Creating [dbo].[FK_NavigationParams_NavigationItems]...';


GO
ALTER TABLE [dbo].[NavigationParams]
    ADD CONSTRAINT [FK_NavigationParams_NavigationItems] FOREIGN KEY ([ItemId]) REFERENCES [dbo].[NavigationItems] ([ItemId]);


GO
PRINT N'Creating [dbo].[FK_ShippingMethod_ShippingOption]...';


GO
ALTER TABLE [dbo].[ShippingMethod]
    ADD CONSTRAINT [FK_ShippingMethod_ShippingOption] FOREIGN KEY ([ShippingOptionId]) REFERENCES [dbo].[ShippingOption] ([ShippingOptionId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_NavigationCommand_NavigationItems]...';


GO
ALTER TABLE [dbo].[NavigationCommand]
    ADD CONSTRAINT [FK_NavigationCommand_NavigationItems] FOREIGN KEY ([ItemId]) REFERENCES [dbo].[NavigationItems] ([ItemId]);


GO
PRINT N'Creating [dbo].[FK_ShippingOptionParameter_ShippingOption]...';


GO
ALTER TABLE [dbo].[ShippingOptionParameter]
    ADD CONSTRAINT [FK_ShippingOptionParameter_ShippingOption] FOREIGN KEY ([ShippingOptionId]) REFERENCES [dbo].[ShippingOption] ([ShippingOptionId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_main_PageVersion_main_LanguageInfo]...';


GO
ALTER TABLE [dbo].[main_PageVersion]
    ADD CONSTRAINT [FK_main_PageVersion_main_LanguageInfo] FOREIGN KEY ([LangId]) REFERENCES [dbo].[main_LanguageInfo] ([LangId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_main_PageVersion_main_PageTree]...';


GO
ALTER TABLE [dbo].[main_PageVersion]
    ADD CONSTRAINT [FK_main_PageVersion_main_PageTree] FOREIGN KEY ([PageId]) REFERENCES [dbo].[main_PageTree] ([PageId]);


GO
PRINT N'Creating [dbo].[FK_main_PageVersion_main_Templates]...';


GO
ALTER TABLE [dbo].[main_PageVersion]
    ADD CONSTRAINT [FK_main_PageVersion_main_Templates] FOREIGN KEY ([TemplateId]) REFERENCES [dbo].[main_Templates] ([TemplateId]);


GO
PRINT N'Creating [dbo].[FK_ShipmentDiscount_Shipment]...';


GO
ALTER TABLE [dbo].[ShipmentDiscount]
    ADD CONSTRAINT [FK_ShipmentDiscount_Shipment] FOREIGN KEY ([ShipmentId]) REFERENCES [dbo].[Shipment] ([ShipmentId]);


GO
PRINT N'Creating [dbo].[FK_ShippingCountry_Country]...';


GO
ALTER TABLE [dbo].[ShippingCountry]
    ADD CONSTRAINT [FK_ShippingCountry_Country] FOREIGN KEY ([CountryId]) REFERENCES [dbo].[Country] ([CountryId]);


GO
PRINT N'Creating [dbo].[FK_ShippingCountry_ShippingMethod]...';


GO
ALTER TABLE [dbo].[ShippingCountry]
    ADD CONSTRAINT [FK_ShippingCountry_ShippingMethod] FOREIGN KEY ([ShippingMethodId]) REFERENCES [dbo].[ShippingMethod] ([ShippingMethodId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Profile_Users]...';


GO
ALTER TABLE [dbo].[aspnet_Profile]
    ADD CONSTRAINT [FK_Profile_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_Shipment_OrderForm]...';


GO
ALTER TABLE [dbo].[Shipment]
    ADD CONSTRAINT [FK_Shipment_OrderForm] FOREIGN KEY ([OrderFormId]) REFERENCES [dbo].[OrderForm] ([OrderFormId]);


GO
PRINT N'Creating [dbo].[PaymentMethod_PaymentMethodParameter_FK1]...';


GO
ALTER TABLE [dbo].[PaymentMethodParameter]
    ADD CONSTRAINT [PaymentMethod_PaymentMethodParameter_FK1] FOREIGN KEY ([PaymentMethodId]) REFERENCES [dbo].[PaymentMethod] ([PaymentMethodId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_MarketPaymentMethods_Market]...';


GO
ALTER TABLE [dbo].[MarketPaymentMethods]
    ADD CONSTRAINT [FK_MarketPaymentMethods_Market] FOREIGN KEY ([MarketId]) REFERENCES [dbo].[Market] ([MarketId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_MarketPaymentMethods_PaymentMethod]...';


GO
ALTER TABLE [dbo].[MarketPaymentMethods]
    ADD CONSTRAINT [FK_MarketPaymentMethods_PaymentMethod] FOREIGN KEY ([PaymentMethodId]) REFERENCES [dbo].[PaymentMethod] ([PaymentMethodId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_main_MenuItem_Resources_main_MenuItem]...';


GO
ALTER TABLE [dbo].[main_MenuItem_Resources]
    ADD CONSTRAINT [FK_main_MenuItem_Resources_main_MenuItem] FOREIGN KEY ([MenuItemId]) REFERENCES [dbo].[main_MenuItem] ([MenuItemId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_main_MenuItem_main_Menu]...';


GO
ALTER TABLE [dbo].[main_MenuItem]
    ADD CONSTRAINT [FK_main_MenuItem_main_Menu] FOREIGN KEY ([MenuId]) REFERENCES [dbo].[main_Menu] ([MenuId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_OrderSearchResults_OrderGroup]...';


GO
ALTER TABLE [dbo].[OrderSearchResults]
    ADD CONSTRAINT [FK_OrderSearchResults_OrderGroup] FOREIGN KEY ([OrderGroupId]) REFERENCES [dbo].[OrderGroup] ([OrderGroupId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_OrderGroupAddress_OrderGroup]...';


GO
ALTER TABLE [dbo].[OrderGroupAddress]
    ADD CONSTRAINT [FK_OrderGroupAddress_OrderGroup] FOREIGN KEY ([OrderGroupId]) REFERENCES [dbo].[OrderGroup] ([OrderGroupId]);


GO
PRINT N'Creating [dbo].[FK_OrderFormPayment_OrderForm]...';


GO
ALTER TABLE [dbo].[OrderFormPayment]
    ADD CONSTRAINT [FK_OrderFormPayment_OrderForm] FOREIGN KEY ([OrderFormId]) REFERENCES [dbo].[OrderForm] ([OrderFormId]);


GO
PRINT N'Creating [dbo].[FK_Membership_Applications]...';


GO
ALTER TABLE [dbo].[aspnet_Membership]
    ADD CONSTRAINT [FK_Membership_Applications] FOREIGN KEY ([ApplicationId]) REFERENCES [dbo].[aspnet_Applications] ([ApplicationId]);


GO
PRINT N'Creating [dbo].[FK_Membership_Users]...';


GO
ALTER TABLE [dbo].[aspnet_Membership]
    ADD CONSTRAINT [FK_Membership_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_OrderFormDiscount_OrderForm]...';


GO
ALTER TABLE [dbo].[OrderFormDiscount]
    ADD CONSTRAINT [FK_OrderFormDiscount_OrderForm] FOREIGN KEY ([OrderFormId]) REFERENCES [dbo].[OrderForm] ([OrderFormId]);


GO
PRINT N'Creating [dbo].[FK_OrderForm_OrderGroup]...';


GO
ALTER TABLE [dbo].[OrderForm]
    ADD CONSTRAINT [FK_OrderForm_OrderGroup] FOREIGN KEY ([OrderGroupId]) REFERENCES [dbo].[OrderGroup] ([OrderGroupId]);


GO
PRINT N'Creating [dbo].[FK_dps_Node_dps_NodeType]...';


GO
ALTER TABLE [dbo].[dps_Node]
    ADD CONSTRAINT [FK_dps_Node_dps_NodeType] FOREIGN KEY ([NodeTypeId]) REFERENCES [dbo].[dps_NodeType] ([NodeTypeId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_dps_Node_dps_PageDocument]...';


GO
ALTER TABLE [dbo].[dps_Node]
    ADD CONSTRAINT [FK_dps_Node_dps_PageDocument] FOREIGN KEY ([PageId]) REFERENCES [dbo].[dps_PageDocument] ([PageId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_LineItemDiscount_LineItem]...';


GO
ALTER TABLE [dbo].[LineItemDiscount]
    ADD CONSTRAINT [FK_LineItemDiscount_LineItem] FOREIGN KEY ([LineItemId]) REFERENCES [dbo].[LineItem] ([LineItemId]);


GO
PRINT N'Creating [dbo].[FK_dps_ControlStorage_dps_Control]...';


GO
ALTER TABLE [dbo].[dps_ControlStorage]
    ADD CONSTRAINT [FK_dps_ControlStorage_dps_Control] FOREIGN KEY ([ControlId]) REFERENCES [dbo].[dps_Control] ([ControlId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_LineItem_OrderForm]...';


GO
ALTER TABLE [dbo].[LineItem]
    ADD CONSTRAINT [FK_LineItem_OrderForm] FOREIGN KEY ([OrderFormId]) REFERENCES [dbo].[OrderForm] ([OrderFormId]);


GO
PRINT N'Creating [dbo].[FK_dps_Control_dps_Node]...';


GO
ALTER TABLE [dbo].[dps_Control]
    ADD CONSTRAINT [FK_dps_Control_dps_Node] FOREIGN KEY ([NodeId]) REFERENCES [dbo].[dps_Node] ([NodeId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Users_Applications]...';


GO
ALTER TABLE [dbo].[aspnet_Users]
    ADD CONSTRAINT [FK_Users_Applications] FOREIGN KEY ([ApplicationId]) REFERENCES [dbo].[aspnet_Applications] ([ApplicationId]);


GO
PRINT N'Creating [dbo].[FK_Variation_CatalogEntry]...';


GO
ALTER TABLE [dbo].[Variation]
    ADD CONSTRAINT [FK_Variation_CatalogEntry] FOREIGN KEY ([CatalogEntryId]) REFERENCES [dbo].[CatalogEntry] ([CatalogEntryId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Variation_Merchant]...';


GO
ALTER TABLE [dbo].[Variation]
    ADD CONSTRAINT [FK_Variation_Merchant] FOREIGN KEY ([MerchantId]) REFERENCES [dbo].[Merchant] ([MerchantId]) ON DELETE SET NULL ON UPDATE SET NULL;


GO
PRINT N'Creating [dbo].[FK_SiteCatalog_Catalog]...';


GO
ALTER TABLE [dbo].[SiteCatalog]
    ADD CONSTRAINT [FK_SiteCatalog_Catalog] FOREIGN KEY ([CatalogId]) REFERENCES [dbo].[Catalog] ([CatalogId]);


GO
PRINT N'Creating [dbo].[FK_MarketCampaigns_Campaign]...';


GO
ALTER TABLE [dbo].[MarketCampaigns]
    ADD CONSTRAINT [FK_MarketCampaigns_Campaign] FOREIGN KEY ([CampaignId]) REFERENCES [dbo].[Campaign] ([CampaignId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_MarketCampaigns_Market]...';


GO
ALTER TABLE [dbo].[MarketCampaigns]
    ADD CONSTRAINT [FK_MarketCampaigns_Market] FOREIGN KEY ([MarketId]) REFERENCES [dbo].[Market] ([MarketId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_PromotionUsage_Promotion]...';


GO
ALTER TABLE [dbo].[PromotionUsage]
    ADD CONSTRAINT [FK_PromotionUsage_Promotion] FOREIGN KEY ([PromotionId]) REFERENCES [dbo].[Promotion] ([PromotionId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ecf_mktg-SegmentMember_ecf_mktg-Segment]...';


GO
ALTER TABLE [dbo].[SegmentMember]
    ADD CONSTRAINT [FK_ecf_mktg-SegmentMember_ecf_mktg-Segment] FOREIGN KEY ([SegmentId]) REFERENCES [dbo].[Segment] ([SegmentId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ecf_mktg-SegmentCondition_ecf_mktg-Expression]...';


GO
ALTER TABLE [dbo].[SegmentCondition]
    ADD CONSTRAINT [FK_ecf_mktg-SegmentCondition_ecf_mktg-Expression] FOREIGN KEY ([ExpressionId]) REFERENCES [dbo].[Expression] ([ExpressionId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ecf_mktg-SegmentCondition_ecf_mktg-Segment]...';


GO
ALTER TABLE [dbo].[SegmentCondition]
    ADD CONSTRAINT [FK_ecf_mktg-SegmentCondition_ecf_mktg-Segment] FOREIGN KEY ([SegmentId]) REFERENCES [dbo].[Segment] ([SegmentId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_NodeEntryRelation_Catalog]...';


GO
ALTER TABLE [dbo].[NodeEntryRelation]
    ADD CONSTRAINT [FK_NodeEntryRelation_Catalog] FOREIGN KEY ([CatalogId]) REFERENCES [dbo].[Catalog] ([CatalogId]);


GO
PRINT N'Creating [dbo].[FK_NodeEntryRelation_CatalogEntry]...';


GO
ALTER TABLE [dbo].[NodeEntryRelation]
    ADD CONSTRAINT [FK_NodeEntryRelation_CatalogEntry] FOREIGN KEY ([CatalogEntryId]) REFERENCES [dbo].[CatalogEntry] ([CatalogEntryId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_NodeEntryRelation_CatalogNode]...';


GO
ALTER TABLE [dbo].[NodeEntryRelation]
    ADD CONSTRAINT [FK_NodeEntryRelation_CatalogNode] FOREIGN KEY ([CatalogNodeId]) REFERENCES [dbo].[CatalogNode] ([CatalogNodeId]);


GO
PRINT N'Creating [dbo].[CK_CurrencyRate_NoSelfRate]...';


GO
ALTER TABLE [dbo].[CurrencyRate]
    ADD CONSTRAINT [CK_CurrencyRate_NoSelfRate] CHECK ([FromCurrencyId]<>[ToCurrencyId]);


GO
PRINT N'Creating [dbo].[GuidMapping_NodeInsert]...';


GO
CREATE TRIGGER [GuidMapping_NodeInsert] ON CatalogNode 
    FOR INSERT
	AS
	BEGIN
		IF NOT EXISTS( SELECT g.CatalogNodeId FROM [dbo].[GuidNodeMapping] g INNER JOIN inserted i on g.CatalogNodeId = i.CatalogNodeId)
		BEGIN
			INSERT INTO [dbo].[GuidNodeMapping] (ContentGuid, CatalogNodeId)
			SELECT NEWID(), CatalogNodeId FROM inserted
		END
	END
GO
PRINT N'Creating [dbo].[CategoryDeleteTrigger]...';


GO
CREATE TRIGGER [CategoryDeleteTrigger] ON [dbo].[CatalogNode] 
FOR DELETE 
AS
BEGIN
	DELETE [CatalogNodeRelation] WHERE ParentNodeId IN (SELECT CatalogNodeId FROM [deleted])
END
GO
PRINT N'Creating [dbo].[GuidMapping_EntryInsert]...';


GO
CREATE TRIGGER [GuidMapping_EntryInsert] ON CatalogEntry 
    FOR INSERT 
	AS
	BEGIN
		IF NOT EXISTS( SELECT g.CatalogEntryId FROM [dbo].[GuidEntryMapping] g INNER JOIN inserted i on g.CatalogEntryId = i.CatalogEntryId)
		BEGIN
			INSERT INTO [dbo].[GuidEntryMapping] (ContentGuid, CatalogEntryId)
			SELECT NEWID(), CatalogEntryId FROM inserted
		END
	END
GO
PRINT N'Creating [dbo].[GuidMapping_CatalogInsert]...';


GO
CREATE TRIGGER [GuidMapping_CatalogInsert] ON Catalog
    FOR INSERT 
	AS
	BEGIN
		IF NOT EXISTS( SELECT g.CatalogId FROM [dbo].[GuidCatalogMapping] g INNER JOIN inserted i on g.CatalogId = i.CatalogId)
		BEGIN
			INSERT INTO [dbo].[GuidCatalogMapping] (ContentGuid, CatalogId)
			SELECT NEWID(), CatalogId FROM inserted
		END
	END
GO
PRINT N'Creating [dbo].[mdptr_sys_MetaField_IsKeyField]...';


GO


create trigger dbo.mdptr_sys_MetaField_IsKeyField
on MetaField after insert, update
as
begin
    set nocount on
    if update(SystemMetaClassId)
    begin
        update dst
		set IsKeyField = cast(case when exists(
                select 1
	            from MetaClass mc
	            join INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu on kcu.CONSTRAINT_NAME COLLATE DATABASE_DEFAULT = mc.PrimaryKeyName COLLATE DATABASE_DEFAULT and kcu.CONSTRAINT_SCHEMA COLLATE DATABASE_DEFAULT = 'dbo'
	            where mc.MetaClassId = dst.SystemMetaClassId
	              and kcu.COLUMN_NAME COLLATE DATABASE_DEFAULT = dst.Name COLLATE DATABASE_DEFAULT)
	        then 1 else 0 end as bit)
		from MetaField dst
        where dst.MetaFieldId in (select i.MetaFieldId from inserted i)
        -- do not check for actual value change. updates to MetaClass.PrimaryKeyName will fire this
		-- trigger with "update MetaField set SystemMetaClassId=SystemMetaClassId".
    end
end
GO
PRINT N'Creating [dbo].[mdptr_sys_MetaClass_PrimaryKeyName]...';


GO


create trigger dbo.mdptr_sys_MetaClass_PrimaryKeyName
on MetaClass after insert, update
as
begin
    if update(PrimaryKeyName)
    begin
        update MetaField
        set SystemMetaClassId = SystemMetaClassId -- cause mdptr_sys_MetaField_IsKeyField to fire.
        where SystemMetaClassId in (
            select i.MetaClassId
            from inserted i
            left outer join deleted d on i.MetaClassId = d.MetaClassId
            where (d.MetaClassId is null or i.PrimaryKeyName != d.PrimaryKeyName))
    end
end
GO
PRINT N'Creating [dbo].[main_PageVersion_DeleteTrigger]...';


GO
CREATE TRIGGER [main_PageVersion_DeleteTrigger]
   ON [main_PageVersion]
   FOR DELETE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    delete from [dps_TemporaryStorage] where [PageVersionId] IN (SELECT [VersionId] FROM deleted)
	delete from [dps_PageDocument] where [PageVersionId] IN (SELECT [VersionId] FROM deleted)
END
GO
PRINT N'Creating [dbo].[NodeEntryRelation_UpsertTrigger]...';


GO
CREATE trigger [dbo].[NodeEntryRelation_UpsertTrigger]
	on [dbo].[NodeEntryRelation]
	after update, insert
	as
	begin
		set nocount on
    
		update [dbo].[NodeEntryRelation]
		set [Modified] = GETUTCDATE()
		from [dbo].[NodeEntryRelation] ner
		join inserted
			on ner.[CatalogId] = inserted.[CatalogId]
			and ner.[CatalogEntryId] = inserted.[CatalogEntryId]
			and ner.[CatalogNodeId] = inserted.[CatalogNodeId]
	end
GO
PRINT N'Creating [dbo].[NodeEntryRelation_DeleteTrigger]...';


GO
CREATE trigger [dbo].[NodeEntryRelation_DeleteTrigger]
	on [dbo].[NodeEntryRelation]
	after delete
	as
	begin
		set nocount on
    
		insert into ApplicationLog ([Source], [Operation], [ObjectKey], [ObjectType], [Username], [Created], [Succeeded], [ApplicationId])
		select 'catalog', 'Modified', deleted.CatalogEntryId, 'relation', 'database-trigger', GETUTCDATE(), 1, ISNULL(app.ApplicationId, fallback_app.ApplicationId)
		from deleted
		left outer join Catalog app on deleted.CatalogEntryId = app.CatalogId
		cross join (select top 1 ApplicationId from Application) fallback_app
	end
GO
PRINT N'Creating [dbo].[fn_UriSegmentExistsOnSiblingNodeOrEntry]...';


GO
CREATE FUNCTION [dbo].[fn_UriSegmentExistsOnSiblingNodeOrEntry]
(
    @entityId int,
    @type bit, -- 0 = Node, 1 = Entry
    @UriSegment nvarchar(255),
    @ApplicationId uniqueidentifier,
    @LanguageCode nvarchar(50)
)
RETURNS bit
AS
BEGIN
    DECLARE @RetVal bit
    DECLARE @Count int
    DECLARE @parentId int
    
    -- get the parentId, based on entityId and the entity type
    IF @type = 0 
        SET @parentId = (SELECT ParentNodeId FROM CatalogNode WHERE CatalogNodeId = @entityId)
    ELSE
        SET @parentId = (SELECT CatalogNodeId FROM NodeEntryRelation WHERE CatalogEntryId = @entityId)

    SET @RetVal = 0

    -- check if the UriSegment exists on sibling node
    SET @Count = (
                    SELECT COUNT(S.CatalogNodeId)
                    FROM CatalogItemSeo S WITH (NOLOCK) 
                    INNER JOIN CatalogNode N on N.CatalogNodeId = S.CatalogNodeId AND N.ApplicationId = S.ApplicationId 
                    LEFT JOIN CatalogNodeRelation NR ON N.CatalogNodeId = NR.ChildNodeId 
                    WHERE S.ApplicationId = @ApplicationId 
                        AND LanguageCode = LanguageCode COLLATE DATABASE_DEFAULT 
                        AND S.CatalogNodeId <> @entityId
                        AND (N.ParentNodeId = @parentId OR NR.ParentNodeId = @parentId)
                        AND UriSegment = @UriSegment COLLATE DATABASE_DEFAULT 
                        AND N.IsActive = 1
                )
                
    IF @Count = 0 -- check against sibling entry if only UriSegment does not exist on sibling node
    BEGIN
        -- check if the UriSegment exists on sibling entry
        SET @Count = (
                        SELECT COUNT(S.CatalogEntryId)
                        FROM CatalogItemSeo S WITH (NOLOCK)
                        INNER JOIN CatalogEntry N ON N.CatalogEntryId = S.CatalogEntryId AND N.ApplicationId = S.ApplicationId 
                        LEFT JOIN NodeEntryRelation R ON R.CatalogEntryId = N.CatalogEntryId
                        WHERE 
                            S.ApplicationId = @ApplicationId 
                            AND S.LanguageCode = @LanguageCode COLLATE DATABASE_DEFAULT 
                            AND S.CatalogEntryId <> @entityId 
                            AND R.CatalogNodeId = @parentId  
                            AND UriSegment = @UriSegment COLLATE DATABASE_DEFAULT 
                            AND N.IsActive = 1
                    )
    END

    IF @Count <> 0
    BEGIN
        SET @RetVal = 1
    END

    RETURN @RetVal;
END
GO
PRINT N'Creating [dbo].[ecf_EncodeGuid]...';


GO
CREATE FUNCTION  dbo.ecf_EncodeGuid 
(@objectId int, @contenttype int, @ProviderNameHash binary(4) = 0x66799143)
  RETURNS uniqueidentifier
  AS
  BEGIN
  DECLARE @baseguid uniqueidentifier;
  DECLARE @baseguidbinary binary(16)
  DECLARE @contentId int;
  DECLARE @DataToEncode binary(8);
  DECLARE @first binary(8)
  DECLARE @last binary(8)
  DECLARE @result binary(16)

  --predefined guid
  SET @baseguid = '4b37b783-54b4-4011-a395-65a7165539b7'
  SET @baseguidbinary = CAST(@baseguid AS binary(16))

  --T-SQL only supports XOR on bigint or smaller number. 
  --We need to devide guid to two parts so we can do the xor
  SET @first = SUBSTRING(@baseguidbinary, 1, 8)
  SET @last = SUBSTRING(@baseguidbinary, 9, 8)

  --get the contentId from the objectId and the contenttype. the contenttype is shifted 30 bit
  if (@contenttype = 1)  
  BEGIN
  SET @contenttype = 0x40000000
    END
  else if (@contenttype = 2)
    begin
  SET @contenttype = 0x80000000
    END

  SET @contentId = @objectId | @contenttype

  --get the data we want to store
  --Due to use of BlockCopy in cs code, we need to reverse the int(s) we want to store
  SET @DataToEncode = cast(REVERSE(cast(@contentid as binary(4))) as binary(4)) + cast (0 as binary(4)) 

  --XOR can only work with one of two operand is binary. Another one must be converted.
  SET @first = @first  ^ cast(@DataToEncode as bigint)
 
  SET @DataToEncode =  @ProviderNameHash + cast (0 as binary(4))

  SET @last = @last ^ cast(@DataToEncode as bigint)


  return convert(uniqueidentifier, @first + @last)
  END
GO
PRINT N'Creating [dbo].[fn_GetDaylightSavingsTime]...';


GO
CREATE FUNCTION [dbo].[fn_GetDaylightSavingsTime]
(
 @UTC_Date DATETIME,
 @ST_Offset INT, -- CST = -6, EST = -5
 @DT_Offset INT  -- CDT = -5, EDT = -4
)
RETURNS DATETIME
AS
BEGIN


RETURN 
DATEADD(hh, 
   CASE WHEN YEAR(@UTC_Date) <= 2006 THEN  
                CASE WHEN 
                      @UTC_Date >=  '4/' + CAST(ABS(8 - DATEPART(WEEKDAY,'4/1/' 
    + CAST(YEAR(@UTC_Date) AS VARCHAR))) % 7 + 1 AS VARCHAR) +  '/' 
    + CAST(YEAR(@UTC_Date) AS VARCHAR) + ' 2:00' AND 
                      @UTC_Date < '10/' + CAST(32 - DATEPART(WEEKDAY,'10/31/' 
    + CAST(YEAR(@UTC_Date) AS VARCHAR)) AS VARCHAR) +  '/' 
    + CAST(YEAR(@UTC_Date) AS VARCHAR) + ' 2:00' 
                THEN @DT_Offset ELSE @ST_Offset END
              ELSE
                CASE WHEN 
                      @UTC_Date >= '3/' + CAST(ABS(8 - DATEPART(WEEKDAY,'3/1/' 
    + CAST(YEAR(@UTC_Date) AS VARCHAR))) % 7 + 8 AS VARCHAR) +  '/' 
    + CAST(YEAR(@UTC_Date) AS VARCHAR) + ' 2:00' AND 
                      @UTC_Date < 
                        '11/' + CAST(ABS(8 - DATEPART(WEEKDAY,'11/1/' 
    + CAST(YEAR(@UTC_Date) AS VARCHAR))) % 7 + 1 AS VARCHAR) +  '/' 
    + CAST(YEAR(@UTC_Date) AS VARCHAR) + ' 2:00' 
                THEN @DT_Offset ELSE @ST_Offset END
              END
   , @UTC_Date
   )
END
GO
PRINT N'Creating [dbo].[mdpfn_sys_EncryptDecryptString2]...';


GO
CREATE FUNCTION [dbo].[mdpfn_sys_EncryptDecryptString2]
(
	
	@input varbinary(4000), 
	@encrypt bit
)
RETURNS varbinary(4000)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @RetVal varbinary(4000)

	IF(@input IS NULL)
		RETURN @input

	IF(@encrypt = 1) 
		SELECT @RetVal = EncryptByKey(Key_GUID('Mediachase_ECF50_MDP_Key'), @input) 
	ELSE
		SELECT @RetVal = DecryptByKey(@input)

	RETURN @RetVal;
END
GO
PRINT N'Creating [dbo].[mdpfn_sys_EncryptDecryptString]...';


GO
CREATE FUNCTION [dbo].[mdpfn_sys_EncryptDecryptString]
(
	@input nvarchar(4000),
	@encrypt bit
)
RETURNS nvarchar(4000)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @RetVal nvarchar(4000)

	IF(@input = '' OR @input IS NULL)
		RETURN @input

	IF(@encrypt = 1)
		SELECT @RetVal = CONVERT(nvarchar(4000), EncryptByKey(Key_GUID('Mediachase_ECF50_MDP_Key'), @input) )
	ELSE
		SELECT @RetVal = CONVERT(nvarchar(4000), DecryptByKey(@input))

	RETURN @RetVal;

END
GO
PRINT N'Creating [dbo].[ecf_splitlist_with_rowid]...';


GO
CREATE FUNCTION [dbo].[ecf_splitlist_with_rowid]
(
	@List nvarchar(max)
)
RETURNS 
@ParsedList table
(
	Item nvarchar(100),
	RowId int
)
AS
BEGIN
	DECLARE @Item nvarchar(100), @Pos int, @RowId int
	SET @RowId = 0

	SET @List = LTRIM(RTRIM(@List))+ ','
	SET @Pos = CHARINDEX(',', @List, 1)

	IF REPLACE(@List, ',', '') <> ''
	BEGIN
		WHILE @Pos > 0
		BEGIN
			SET @Item = LTRIM(RTRIM(LEFT(@List, @Pos - 1)))
			IF @Item <> ''
			BEGIN
				SET @RowId = @RowId + 1
				INSERT INTO @ParsedList (Item, RowId) 
				VALUES (CAST(@Item AS nvarchar(100)), @RowId) --Use Appropriate conversion
			END
			SET @List = RIGHT(@List, LEN(@List) - @Pos)
			SET @Pos = CHARINDEX(',', @List, 1)
		END
	END	
	RETURN
END
GO
PRINT N'Creating [dbo].[cms_splitlist]...';


GO
CREATE FUNCTION [dbo].[cms_splitlist]
(
	@List nvarchar(max)
)
RETURNS 
@ParsedList table
(
	Item nvarchar(100)
)
AS
BEGIN
	DECLARE @Item nvarchar(100), @Pos int

	SET @List = LTRIM(RTRIM(@List))+ ','
	SET @Pos = CHARINDEX(',', @List, 1)

	IF REPLACE(@List, ',', '') <> ''
	BEGIN
		WHILE @Pos > 0
		BEGIN
			SET @Item = LTRIM(RTRIM(LEFT(@List, @Pos - 1)))
			IF @Item <> ''
			BEGIN
				INSERT INTO @ParsedList (Item) 
				VALUES (CAST(@Item AS nvarchar(100))) --Use Appropriate conversion
			END
			SET @List = RIGHT(@List, LEN(@List) - @Pos)
			SET @Pos = CHARINDEX(',', @List, 1)

		END
	END	
	RETURN
END
GO
PRINT N'Creating [dbo].[ecf_splitlist]...';


GO
CREATE FUNCTION [dbo].[ecf_splitlist]
(
	@List nvarchar(max)
)
RETURNS 
@ParsedList table
(
	Item nvarchar(100)
)
AS
BEGIN
	DECLARE @Item nvarchar(100), @Pos int

	SET @List = LTRIM(RTRIM(@List))+ ','
	SET @Pos = CHARINDEX(',', @List, 1)

	IF REPLACE(@List, ',', '') <> ''
	BEGIN
		WHILE @Pos > 0
		BEGIN
			SET @Item = LTRIM(RTRIM(LEFT(@List, @Pos - 1)))
			IF @Item <> ''
			BEGIN
				INSERT INTO @ParsedList (Item) 
				VALUES (CAST(@Item AS nvarchar(100))) --Use Appropriate conversion
			END
			SET @List = RIGHT(@List, LEN(@List) - @Pos)
			SET @Pos = CHARINDEX(',', @List, 1)

		END
	END	
	RETURN
END
GO
PRINT N'Creating [dbo].[vw_aspnet_WebPartState_User]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

  CREATE VIEW [dbo].[vw_aspnet_WebPartState_User]
  AS SELECT [dbo].[aspnet_PersonalizationPerUser].[PathId], [dbo].[aspnet_PersonalizationPerUser].[UserId], [DataSize]=DATALENGTH([dbo].[aspnet_PersonalizationPerUser].[PageSettings]), [dbo].[aspnet_PersonalizationPerUser].[LastUpdatedDate]
  FROM [dbo].[aspnet_PersonalizationPerUser]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vw_aspnet_WebPartState_Shared]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

  CREATE VIEW [dbo].[vw_aspnet_WebPartState_Shared]
  AS SELECT [dbo].[aspnet_PersonalizationAllUsers].[PathId], [DataSize]=DATALENGTH([dbo].[aspnet_PersonalizationAllUsers].[PageSettings]), [dbo].[aspnet_PersonalizationAllUsers].[LastUpdatedDate]
  FROM [dbo].[aspnet_PersonalizationAllUsers]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vw_aspnet_WebPartState_Paths]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

  CREATE VIEW [dbo].[vw_aspnet_WebPartState_Paths]
  AS SELECT [dbo].[aspnet_Paths].[ApplicationId], [dbo].[aspnet_Paths].[PathId], [dbo].[aspnet_Paths].[Path], [dbo].[aspnet_Paths].[LoweredPath]
  FROM [dbo].[aspnet_Paths]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vw_aspnet_UsersInRoles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

  CREATE VIEW [dbo].[vw_aspnet_UsersInRoles]
  AS SELECT [dbo].[aspnet_UsersInRoles].[UserId], [dbo].[aspnet_UsersInRoles].[RoleId]
  FROM [dbo].[aspnet_UsersInRoles]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vw_aspnet_Roles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

  CREATE VIEW [dbo].[vw_aspnet_Roles]
  AS SELECT [dbo].[aspnet_Roles].[ApplicationId], [dbo].[aspnet_Roles].[RoleId], [dbo].[aspnet_Roles].[RoleName], [dbo].[aspnet_Roles].[LoweredRoleName], [dbo].[aspnet_Roles].[Description]
  FROM [dbo].[aspnet_Roles]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vw_aspnet_Profiles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

  CREATE VIEW [dbo].[vw_aspnet_Profiles]
  AS SELECT [dbo].[aspnet_Profile].[UserId], [dbo].[aspnet_Profile].[LastUpdatedDate],
      [DataSize]=  DATALENGTH([dbo].[aspnet_Profile].[PropertyNames])
                 + DATALENGTH([dbo].[aspnet_Profile].[PropertyValuesString])
                 + DATALENGTH([dbo].[aspnet_Profile].[PropertyValuesBinary])
  FROM [dbo].[aspnet_Profile]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vw_aspnet_MembershipUsers]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

  CREATE VIEW [dbo].[vw_aspnet_MembershipUsers]
  AS SELECT [dbo].[aspnet_Membership].[UserId],
            [dbo].[aspnet_Membership].[PasswordFormat],
            [dbo].[aspnet_Membership].[MobilePIN],
            [dbo].[aspnet_Membership].[Email],
            [dbo].[aspnet_Membership].[LoweredEmail],
            [dbo].[aspnet_Membership].[PasswordQuestion],
            [dbo].[aspnet_Membership].[PasswordAnswer],
            [dbo].[aspnet_Membership].[IsApproved],
            [dbo].[aspnet_Membership].[IsLockedOut],
            [dbo].[aspnet_Membership].[CreateDate],
            [dbo].[aspnet_Membership].[LastLoginDate],
            [dbo].[aspnet_Membership].[LastPasswordChangedDate],
            [dbo].[aspnet_Membership].[LastLockoutDate],
            [dbo].[aspnet_Membership].[FailedPasswordAttemptCount],
            [dbo].[aspnet_Membership].[FailedPasswordAttemptWindowStart],
            [dbo].[aspnet_Membership].[FailedPasswordAnswerAttemptCount],
            [dbo].[aspnet_Membership].[FailedPasswordAnswerAttemptWindowStart],
            [dbo].[aspnet_Membership].[Comment],
            [dbo].[aspnet_Users].[ApplicationId],
            [dbo].[aspnet_Users].[UserName],
            [dbo].[aspnet_Users].[MobileAlias],
            [dbo].[aspnet_Users].[IsAnonymous],
            [dbo].[aspnet_Users].[LastActivityDate]
  FROM [dbo].[aspnet_Membership] INNER JOIN [dbo].[aspnet_Users]
      ON [dbo].[aspnet_Membership].[UserId] = [dbo].[aspnet_Users].[UserId]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vw_aspnet_Users]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

  CREATE VIEW [dbo].[vw_aspnet_Users]
  AS SELECT [dbo].[aspnet_Users].[ApplicationId], [dbo].[aspnet_Users].[UserId], [dbo].[aspnet_Users].[UserName], [dbo].[aspnet_Users].[LoweredUserName], [dbo].[aspnet_Users].[MobileAlias], [dbo].[aspnet_Users].[IsAnonymous], [dbo].[aspnet_Users].[LastActivityDate]
  FROM [dbo].[aspnet_Users]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vw_aspnet_Applications]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

  CREATE VIEW [dbo].[vw_aspnet_Applications]
  AS SELECT [dbo].[aspnet_Applications].[ApplicationName], [dbo].[aspnet_Applications].[LoweredApplicationName], [dbo].[aspnet_Applications].[ApplicationId], [dbo].[aspnet_Applications].[Description]
  FROM [dbo].[aspnet_Applications]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogEntry_Components]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogEntry_Components]
	@CatalogEntryIds udttContentList readonly,
	@ResponseGroup INT = NULL
AS
BEGIN
	DECLARE @CatalogEntryFull INT
	DECLARE @Associations INT
	DECLARE @Assets INT
	DECLARE @Variations INT

	SET @CatalogEntryFull = 4
	SET @Associations = 8
	SET @Assets = 32
	SET @Variations = 128

	IF ((@ResponseGroup & @Variations = @Variations)
		OR (@ResponseGroup & @CatalogEntryFull = @CatalogEntryFull))
	BEGIN
		SELECT v.*
		FROM Variation v
		INNER JOIN @CatalogEntryIds N ON N.ContentId = v.CatalogEntryId
	
		SELECT m.*
		FROM Merchant m
		INNER JOIN Variation v ON m.MerchantId = v.MerchantId
		INNER JOIN @CatalogEntryIds N ON N.ContentId = v.CatalogEntryId
    END

	IF ((@ResponseGroup & @Associations = @Associations)
		OR (@ResponseGroup & @CatalogEntryFull = @CatalogEntryFull))
	BEGIN
		SELECT a.*
		FROM CatalogAssociation a
		INNER JOIN @CatalogEntryIds N ON N.ContentId = a.CatalogEntryId

	END

	IF ((@ResponseGroup & @Assets = @Assets)
		OR (@ResponseGroup & @CatalogEntryFull = @CatalogEntryFull))
	BEGIN
		SELECT a.*
		FROM CatalogItemAsset a
		INNER JOIN @CatalogEntryIds N ON N.ContentId = a.CatalogEntryId
	END

END
GO
PRINT N'Creating [dbo].[ecf_Load_OrderGroup]...';


GO
CREATE PROCEDURE [dbo].[ecf_Load_OrderGroup]
    @OrderGroupId int
AS
BEGIN

DECLARE @search_condition nvarchar(max)

-- Return GroupIds.
SELECT @OrderGroupId AS [OrderGroupId]

-- Prevent any queries if order group doesn't exist
IF NOT EXISTS(SELECT OrderGroupId from OrderGroup G WHERE G.OrderGroupId = @OrderGroupId)
	RETURN;

-- Return Order Form Collection
SELECT 'OrderForm' TableName, OE.*, O.*
	FROM [OrderFormEx] OE 
		INNER JOIN OrderForm O ON O.OrderFormId = OE.ObjectId 
		WHERE O.OrderGroupId = @OrderGroupId

if(@@ROWCOUNT = 0)
	RETURN;

-- Return Order Form Collection
SELECT 'OrderGroupAddress' TableName, OE.*, O.*
	FROM [OrderGroupAddressEx] OE 
		INNER JOIN OrderGroupAddress O ON O.OrderGroupAddressId = OE.ObjectId  
		WHERE O.OrderGroupId = @OrderGroupId

-- Return Shipment Collection
SELECT 'Shipment' TableName, SE.*, S.*
	FROM [ShipmentEx] SE 
		INNER JOIN Shipment S ON S.ShipmentId = SE.ObjectId 
		WHERE S.OrderGroupId = @OrderGroupId

-- Return Line Item Collection
SELECT 'LineItem' TableName, LE.*, L.*
	FROM [LineItemEx] LE 
		INNER JOIN LineItem L ON L.LineItemId = LE.ObjectId 
		WHERE L.OrderGroupId = @OrderGroupId

-- Return Order Form Payment Collection

SET @search_condition = N'''INNER JOIN OrderFormPayment O ON O.PaymentId = T.ObjectId WHERE O.OrderGroupId = ' + CAST(@OrderGroupId AS NVARCHAR) + ''''

DECLARE @metaclassid int
DECLARE @parentclassid int
DECLARE @parentmetaclassid int
DECLARE @rowNum int
DECLARE @maxrows int
DECLARE @tablename nvarchar(120)
DECLARE @name nvarchar(120)
DECLARE @procedurefull nvarchar(max)

SET @parentmetaclassid = (SELECT MetaClassId from [MetaClass] WHERE Name = N'orderformpayment' and TableName = N'orderformpayment')

SELECT top 1 @metaclassid = MetaClassId, @tablename = TableName, @parentclassid = ParentClassId, @name = Name from [MetaClass]
	SELECT @maxRows = count(*) from [MetaClass]
	SET @rowNum = 0
	WHILE @rowNum < @maxRows
	BEGIN
		SET @rowNum = @rowNum + 1
		IF (@parentclassid = @parentmetaclassid)
		BEGIN
			SET @procedurefull = N'mdpsp_avto_' + @tablename + N'_Search NULL, ' + N'''''''' + @tablename + N''''''+  ' TableName, [O].*'' ,'  + @search_condition
			EXEC (@procedurefull)
		END
		SELECT top 1 @metaclassid = MetaClassId, @tablename = TableName, @parentclassid = ParentClassId, @name = Name from [MetaClass] where MetaClassId > @metaclassid
	END

-- Return Order Form Discount Collection
SELECT 'OrderFormDiscount' TableName, D.* 
	FROM [OrderFormDiscount] D 
		WHERE D.OrderGroupId = @OrderGroupId

-- Return Line Item Discount Collection
SELECT 'LineItemDiscount' TableName, D.* 
	FROM [LineItemDiscount] D 
		WHERE D.OrderGroupId = @OrderGroupId

-- Return Shipment Discount Collection
SELECT 'ShipmentDiscount' TableName, D.* 
	FROM [ShipmentDiscount] D 
		WHERE D.OrderGroupId = @OrderGroupId
		
-- Return OrderGroupNote Collection
SELECT 'OrderGroupNote' TableName, 
		G.OrderNoteId, 
		G.CustomerId, 
		G.Created, 
		G.OrderGroupId, 
		G.Detail,
		G.LineItemId,
		G.Title,
		G.Type 
	FROM [OrderGroupNote] G
		WHERE G.OrderGroupId = @OrderGroupId

-- assign random local variable to set @@rowcount attribute to 1
declare @temp as int
set @temp = 1

END
GO
PRINT N'Creating [dbo].[ecf_Load_ShoppingCart_OrderGroupId]...';


GO
CREATE PROCEDURE [dbo].[ecf_Load_ShoppingCart_OrderGroupId]
    @OrderGroupId int
AS
BEGIN
	IF(EXISTS(SELECT OrderGroupId from OrderGroup where OrderGroupId = @OrderGroupId))
	BEGIN
		exec [dbo].[ecf_Load_OrderGroup] @OrderGroupId
	
		-- Return Purchase Order Details
		DECLARE @search_condition nvarchar(max)

		SET @search_condition = N'INNER JOIN OrderGroup OG ON OG.OrderGroupId = T.ObjectId WHERE [T].[ObjectId] = ' + CAST(@OrderGroupId AS VARCHAR)
		exec mdpsp_avto_OrderGroup_ShoppingCart_Search NULL, '''OrderGroup'' TableName, [OG].*', @search_condition
	END
END
GO
PRINT N'Creating [dbo].[ecf_Load_PaymentPlan_OrderGroupId]...';


GO
CREATE PROCEDURE [dbo].[ecf_Load_PaymentPlan_OrderGroupId]
    @OrderGroupId int
AS
BEGIN
	IF(EXISTS(SELECT OrderGroupId from OrderGroup where OrderGroupId = @OrderGroupId))
	BEGIN
		exec [dbo].[ecf_Load_OrderGroup] @OrderGroupId

		-- Return Purchase Order Details
		DECLARE @search_condition nvarchar(max)

		SET @search_condition = N'INNER JOIN OrderGroup OG ON OG.OrderGroupId = T.ObjectId WHERE [T].[ObjectId] = ' + CAST(@OrderGroupId AS VARCHAR)
		exec mdpsp_avto_OrderGroup_PaymentPlan_Search NULL, '''OrderGroup'' TableName, [OG].*', @search_condition
	END
END
GO
PRINT N'Creating [dbo].[ecf_Load_PurchaseOrder_OrderGroupId]...';


GO
CREATE PROCEDURE [dbo].[ecf_Load_PurchaseOrder_OrderGroupId]
    @OrderGroupId int
AS
BEGIN
	IF(EXISTS(SELECT OrderGroupId from OrderGroup where OrderGroupId = @OrderGroupId))
		BEGIN
		exec [dbo].[ecf_Load_OrderGroup] @OrderGroupId

		-- Return Purchase Order Details
		DECLARE @search_condition nvarchar(max)

		SET @search_condition = N'INNER JOIN OrderGroup OG ON OG.OrderGroupId = T.ObjectId WHERE [T].[ObjectId] = ' + CAST(@OrderGroupId AS VARCHAR)
		exec mdpsp_avto_OrderGroup_PurchaseOrder_Search NULL, '''OrderGroup'' TableName, [OG].*', @search_condition
	END
END
GO
PRINT N'Creating [dbo].[PromotionsInformationList]...';


GO
CREATE PROCEDURE [dbo].[PromotionsInformationList]
	@OrderGroupId int
AS
BEGIN
	SELECT
		   PromotionInformation.PromotionInformationId as PromotionInformationId,
		   PromotionInformation.ContentReference AS ContentReference,
		   PromotionInformation.SavedAmount AS SavedAmount,
		   PromotionInformation.Description AS Description,
		   PromotionInformation.IsActive AS IsActive
	   FROM dbo.PromotionInformation
	WHERE PromotionInformation.OrdergroupId = @OrderGroupId
	
END
GO
PRINT N'Creating [dbo].[PromotionsInformationDelete]...';


GO
CREATE PROCEDURE [dbo].[PromotionsInformationDelete]
	@OrderGroupId INT
AS
BEGIN
	DELETE FROM PromotionInformation
		WHERE PromotionInformation.OrdergroupId = @OrderGroupId
END
GO
PRINT N'Creating [dbo].[PromotionsInformationSave]...';


GO
CREATE PROCEDURE [dbo].[PromotionsInformationSave]
	@OrderGroupId int,
	@PromotionsInformation dbo.udttPromotionInformation readonly
AS
BEGIN
	MERGE dbo.PromotionInformation as existingpromos
	USING @PromotionsInformation as promos
	ON promos.PromotionInformationId = existingpromos.PromotionInformationId
	WHEN MATCHED THEN 
		UPDATE SET existingpromos.SavedAmount = promos.SavedAmount, 
		existingpromos.Description = promos.Description, 
		existingpromos.IsActive = promos.IsActive, 
		existingpromos.ContentReference = promos.ContentReference
	WHEN NOT MATCHED THEN 
		INSERT (OrderGroupId, ContentReference, SavedAmount, Description, IsActive)
		VALUES(@OrderGroupId, promos.ContentReference, promos.SavedAmount, promos.Description, promos.IsActive);
END
GO
PRINT N'Creating [dbo].[ecf_CatalogNodeItemSeo_ValidateUriSegment]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogNodeItemSeo_ValidateUriSegment]
	@CatalogItemSeo dbo.udttCatalogItemSeo readonly
AS
BEGIN
	-- validate Node Uri segment and return invalid record
	SELECT t.[LanguageCode], t.[CatalogNodeId], t.[CatalogEntryId], t.[Uri], t.[ApplicationId], '' AS [UriSegment] 
	FROM @CatalogItemSeo t
	WHERE (t.CatalogNodeId > 0 AND dbo.fn_UriSegmentExistsOnSiblingNodeOrEntry(t.CatalogNodeId, 0, t.UriSegment, t.ApplicationId, t.LanguageCode) = 1)
			OR
			(t.CatalogEntryId > 0 AND dbo.fn_UriSegmentExistsOnSiblingNodeOrEntry(t.CatalogEntryId, 1, t.UriSegment, t.ApplicationId, t.LanguageCode) = 1)
END
GO
PRINT N'Creating [dbo].[ecf_CatalogNodeItemSeo_ValidateUri]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogNodeItemSeo_ValidateUri]
	@CatalogItemSeo dbo.udttCatalogItemSeo readonly
AS
BEGIN
	-- validate Node Uri and return invalid record
	SELECT t.[LanguageCode], t.[CatalogNodeId], t.[CatalogEntryId], '' AS [Uri], t.[ApplicationId], t.[UriSegment] 
	FROM @CatalogItemSeo t
	INNER JOIN CatalogItemSeo c ON
		t.ApplicationId = c.ApplicationId
		AND t.LanguageCode = c.LanguageCode COLLATE DATABASE_DEFAULT
		AND t.Uri = c.Uri COLLATE DATABASE_DEFAULT
	-- check against both entry and node
	WHERE c.CatalogEntryId > 0 OR t.CatalogNodeId <> c.CatalogNodeId
END
GO
PRINT N'Creating [dbo].[ecf_CatalogNodeItemSeo_ValidateUriAndUriSegment]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogNodeItemSeo_ValidateUriAndUriSegment]
	@CatalogItemSeo dbo.udttCatalogItemSeo readonly
AS
BEGIN
	-- validate Node Uri and Uri Segment, then return invalid record
	DECLARE @ValidSeoUri dbo.udttCatalogItemSeo
	DECLARE @ValidUriSegment dbo.udttCatalogItemSeo
	
	INSERT INTO @ValidSeoUri ([LanguageCode], [CatalogNodeId], [CatalogEntryId], [Uri], [ApplicationId], [UriSegment] ) 
		EXEC [ecf_CatalogNodeItemSeo_ValidateUri] @CatalogItemSeo		
	
	INSERT INTO @ValidUriSegment ([LanguageCode], [CatalogNodeId], [CatalogEntryId], [Uri], [ApplicationId], [UriSegment] ) 
		EXEC [ecf_CatalogNodeItemSeo_ValidateUriSegment] @CatalogItemSeo

	MERGE @ValidSeoUri as U
	USING @ValidUriSegment as S
	ON 
		U.ApplicationId = S.ApplicationId AND 
		U.LanguageCode = S.LanguageCode COLLATE DATABASE_DEFAULT AND 
		U.CatalogNodeId = S.CatalogNodeId
	WHEN MATCHED -- update the UriSegment for existing row in #ValidSeoUri
		THEN UPDATE SET U.UriSegment = S.UriSegment
	WHEN NOT MATCHED BY TARGET -- insert new record if the record is does not exist in #ValidSeoUri table (source table)
		THEN INSERT VALUES(S.LanguageCode, S.CatalogNodeId, S.CatalogEntryId, S.Uri, S.ApplicationId, S.UriSegment)
	;

	SELECT * FROM @ValidSeoUri
END
GO
PRINT N'Creating [dbo].[ecf_CatalogEntryItemSeo_ValidateUriSegment]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogEntryItemSeo_ValidateUriSegment]
	@CatalogItemSeo dbo.udttCatalogItemSeo readonly
AS
BEGIN
	-- validate Entry Uri Segment and return invalid record
	SELECT t.[LanguageCode], t.[CatalogNodeId], t.[CatalogEntryId], t.[Uri], t.[ApplicationId], '' AS [UriSegment] 
	FROM @CatalogItemSeo t
	INNER JOIN CatalogItemSeo c ON
		t.ApplicationId = c.ApplicationId
		AND t.LanguageCode = c.LanguageCode COLLATE DATABASE_DEFAULT
		AND t.CatalogEntryId <> c.CatalogEntryId -- check against entry only
		AND t.UriSegment = c.UriSegment COLLATE DATABASE_DEFAULT
END
GO
PRINT N'Creating [dbo].[ecf_CatalogEntryItemSeo_ValidateUri]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogEntryItemSeo_ValidateUri]
	@CatalogItemSeo dbo.udttCatalogItemSeo readonly
AS
BEGIN
	-- validate Entry Uri and return invalid record
	SELECT t.[LanguageCode], t.[CatalogNodeId], t.[CatalogEntryId], '' AS [Uri], t.[ApplicationId], t.[UriSegment] 
	FROM @CatalogItemSeo t
	INNER JOIN CatalogItemSeo c ON
		t.ApplicationId = c.ApplicationId
		AND t.LanguageCode = c.LanguageCode COLLATE DATABASE_DEFAULT
		AND t.Uri = c.Uri COLLATE DATABASE_DEFAULT
	-- check against both entry and node
	WHERE c.CatalogNodeId > 0 OR t.CatalogEntryId <> c.CatalogEntryId
END
GO
PRINT N'Creating [dbo].[ecf_CatalogEntryItemSeo_ValidateUriAndUriSegment]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogEntryItemSeo_ValidateUriAndUriSegment]
	@CatalogItemSeo dbo.udttCatalogItemSeo readonly
AS
BEGIN
	-- validate Entry Uri and Uri Segment, then return invalid record
	DECLARE @ValidSeoUri dbo.udttCatalogItemSeo
	DECLARE @ValidUriSegment dbo.udttCatalogItemSeo
	
	INSERT INTO @ValidSeoUri ([LanguageCode], [CatalogNodeId], [CatalogEntryId], [Uri], [ApplicationId], [UriSegment] ) 
		EXEC [ecf_CatalogEntryItemSeo_ValidateUri] @CatalogItemSeo		
	
	INSERT INTO @ValidUriSegment ([LanguageCode], [CatalogNodeId], [CatalogEntryId], [Uri], [ApplicationId], [UriSegment] ) 
		EXEC [ecf_CatalogEntryItemSeo_ValidateUriSegment] @CatalogItemSeo

	MERGE @ValidSeoUri as U
	USING @ValidUriSegment as S
	ON 
		U.ApplicationId = S.ApplicationId AND 
		U.LanguageCode = S.LanguageCode COLLATE DATABASE_DEFAULT AND 
		U.CatalogEntryId = S.CatalogEntryId
	WHEN MATCHED -- update the UriSegment for existing row in #ValidSeoUri
		THEN UPDATE SET U.UriSegment = S.UriSegment
	WHEN NOT MATCHED BY TARGET -- insert new record if the record is does not exist in #ValidSeoUri table (source table)
		THEN INSERT VALUES(S.LanguageCode, S.CatalogNodeId, S.CatalogEntryId, S.Uri, S.ApplicationId, S.UriSegment)
	;

	SELECT * FROM @ValidSeoUri
END
GO
PRINT N'Creating [dbo].[ecf_CatalogEntry_Full]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogEntry_Full]
    @CatalogEntryId int
AS
BEGIN
	select v.*
	from Variation v
	where v.CatalogEntryId = @CatalogEntryId
	
	select m.*
	from Merchant m
	join Variation v on m.MerchantId = v.MerchantId
	where v.CatalogEntryId = @CatalogEntryId

	SELECT CA.* from [CatalogAssociation] CA
	WHERE
		CA.CatalogEntryId = @CatalogEntryId
	ORDER BY CA.SortOrder

	SELECT A.* from [CatalogItemAsset] A
	WHERE
		A.CatalogEntryId = @CatalogEntryId
END
GO
PRINT N'Creating [dbo].[ecf_CatalogEntry_ListSimple]...';


GO
create procedure dbo.ecf_CatalogEntry_ListSimple
    @CatalogEntries dbo.udttEntityList readonly
as
begin
    select n.*
	from CatalogEntry n
	join @CatalogEntries r on n.CatalogEntryId = r.EntityId
	order by r.SortOrder
end
GO
PRINT N'Creating [dbo].[ecf_GenerateReportingDates]...';


GO
CREATE PROCEDURE ecf_GenerateReportingDates
@EndDate DATE
AS
BEGIN
	DECLARE @StartDate DATE
	SET @StartDate = (SELECT MAX(DateFull) FROM [dbo].[ReportingDates])

	--If there is no reporting date yet, make sure to add the current date.
	IF (@StartDate IS NULL)
		SET @StartDate = GETDATE()
	ELSE
	--We will add the start date as the day after the max date in ReportingDates
		SET @StartDate = DATEADD(day, 1, @StartDate)

	IF (@EndDate > @StartDate)
	BEGIN
		CREATE TABLE #ReportingDates (ReportingDate Datetime2);
		WITH ReportingDates_CTE(Date) AS		
		( 
			SELECT @StartDate 
			UNION ALL
			SELECT DateAdd(day,1,ReportingDates_CTE.Date) FROM ReportingDates_CTE WHERE ReportingDates_CTE.Date <= @EndDate
		)
		
		INSERT INTO #ReportingDates
		SELECT * FROM ReportingDates_CTE OPTION (MAXRECURSION 32767);


		INSERT INTO [dbo].[ReportingDates] 
		(DateKey, DateFull, CharacterDate, FullYear, QuarterNumber, WeekNumber, WeekDayName, MonthDay, MonthName, YearDay, 
		DateDefinition, WeekDay, MonthNumber)

		SELECT cast (REPLACE(convert(varchar, ReportingDate, 102), '.', '') as int), 
				 ReportingDate,
				 convert(varchar, ReportingDate, 101),
				 YEAR(ReportingDate),
				 MONTH(ReportingDate) / 3,
				 DATEPART(wk, ReportingDate),
				 DATENAME(dw, ReportingDate),
				 DAY(ReportingDate),
				 DATENAME(month, ReportingDate),
				 DATEPART(dy, ReportingDate),
				 DATENAME(month, ReportingDate) + CAST(DAY(ReportingDate) AS varchar) + ',   
		           ' + CAST(YEAR(ReportingDate) AS varchar),
				 DATEPART(dw, ReportingDate),
				 MONTH(ReportingDate)
				 FROM #ReportingDates

		DROP TABLE #ReportingDates
	END
END
GO
PRINT N'Creating [dbo].[ecf_NodeEntryRelations]...';


GO
CREATE PROCEDURE [dbo].[ecf_NodeEntryRelations]
	@ContentList udttContentList readonly
AS
BEGIN
	Select NodeEntryRelation.CatalogId, CatalogEntryId, CatalogNodeId
	FROM NodeEntryRelation
	INNER JOIN @ContentList as idTable on idTable.ContentId = NodeEntryRelation.CatalogEntryId
	ORDER BY SortOrder
END
GO
PRINT N'Creating [dbo].[ecf_GuidMappingNode_FindGuids]...';


GO
CREATE PROCEDURE [dbo].[ecf_GuidMappingNode_FindGuids]
	@ContentList udttContentList readonly
AS
BEGIN
	select GuidNodeMapping.CatalogNodeId as Id, ContentGuid
	from dbo.GuidNodeMapping
	INNER JOIN @ContentList as idTable on idTable.ContentId = GuidNodeMapping.CatalogNodeId	
END
GO
PRINT N'Creating [dbo].[ecf_GuidMappingEntry_FindGuids]...';


GO
CREATE PROCEDURE [dbo].[ecf_GuidMappingEntry_FindGuids]
	@ContentList udttContentList readonly
AS
BEGIN
	select GuidEntryMapping.CatalogEntryId as Id, ContentGuid
	from dbo.GuidEntryMapping
	INNER JOIN @ContentList as idTable on idTable.ContentId = GuidEntryMapping.CatalogEntryId	
END
GO
PRINT N'Creating [dbo].[ecf_GuidMappingCatalog_FindGuids]...';


GO
CREATE PROCEDURE [dbo].[ecf_GuidMappingCatalog_FindGuids]
	@ContentList udttCatalogList readonly
AS
BEGIN
	select GuidCatalogMapping.CatalogId as Id, ContentGuid
	from dbo.GuidCatalogMapping
	INNER JOIN @ContentList as idTable on idTable.CatalogId = GuidCatalogMapping.CatalogId
END
GO
PRINT N'Creating [dbo].[ecf_CatalogNode_GetChildrenEntries]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogNode_GetChildrenEntries]
	@CatalogNodeId int
AS
BEGIN
    SELECT ner.CatalogId, ce.MetaClassId, ner.CatalogEntryId, ce.ClassTypeId, ner.CatalogNodeId, ner.SortOrder
	FROM [dbo].NodeEntryRelation ner
	INNER JOIN [dbo].CatalogEntry ce
	ON ner.CatalogEntryId = ce.CatalogEntryId
	WHERE ner.CatalogNodeId = @CatalogNodeId
	ORDER BY ner.SortOrder, ce.Name

END
GO
PRINT N'Creating [dbo].[ecf_Catalog_GetChildrenEntries]...';


GO
CREATE PROCEDURE [dbo].[ecf_Catalog_GetChildrenEntries]
	@CatalogId int
AS
BEGIN
	SELECT ce.CatalogId, ce.MetaClassId, ce.CatalogEntryId, ClassTypeId, 0 as CatalogNodeId, 0 as SortOrder
	FROM [dbo].CatalogEntry ce
	WHERE ce.CatalogId = @CatalogId
		AND NOT EXISTS(SELECT * FROM NodeEntryRelation R WHERE R.CatalogId = @CatalogId and CE.CatalogEntryId = R.CatalogEntryId)
	ORDER BY ce.Name
END
GO
PRINT N'Creating [dbo].[ecf_CatalogItem_AssetKey]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogItem_AssetKey]
	@ApplicationId uniqueidentifier,
	@AssetKey nvarchar(254)
AS
BEGIN
	SELECT A.* from [CatalogItemAsset] A
		LEFT OUTER JOIN [CatalogEntry] CE ON CE.CatalogEntryId = A.CatalogEntryId
		LEFT OUTER JOIN [CatalogNode] CN ON CN.CatalogNodeId = A.CatalogNodeId
	WHERE
		(CE.ApplicationId = @ApplicationId OR CN.ApplicationId = @ApplicationId) AND
		A.AssetKey = @AssetKey
END
GO
PRINT N'Creating [dbo].[ecf_GuidMappingNode_FindGuid]...';


GO
CREATE PROCEDURE [dbo].[ecf_GuidMappingNode_FindGuid]
    @CatalogEntityId int
AS
BEGIN
	SELECT ContentGuid
		FROM dbo.GuidNodeMapping
	WHERE CatalogNodeId = @CatalogEntityId
	
END
GO
PRINT N'Creating [dbo].[ecf_GuidMappingEntry_FindGuid]...';


GO
CREATE PROCEDURE [dbo].[ecf_GuidMappingEntry_FindGuid]
    @CatalogEntityId int
AS
BEGIN
	SELECT ContentGuid
		FROM dbo.GuidEntryMapping
	WHERE CatalogEntryId = @CatalogEntityId
END
GO
PRINT N'Creating [dbo].[ecf_GuidMappingCatalog_FindGuid]...';


GO
CREATE PROCEDURE [dbo].[ecf_GuidMappingCatalog_FindGuid]
   @CatalogEntityId int
AS
BEGIN
	SELECT ContentGuid
		FROM dbo.GuidCatalogMapping
	WHERE CatalogId = @CatalogEntityId
	
END
GO
PRINT N'Creating [dbo].[ecf_GuidMappingEntry_Insert]...';


GO
CREATE PROCEDURE [dbo].[ecf_GuidMappingEntry_Insert]
	@ContentGuid uniqueidentifier,
	@CatalogEntryId int
AS
BEGIN
	IF EXISTS(SELECT(1) FROM CatalogEntry WHERE CatalogEntryId = @CatalogEntryId)
	BEGIN
		DELETE 
		FROM dbo.GuidEntryMapping 
		WHERE CatalogEntryId = @CatalogEntryId 
	
		INSERT INTO dbo.GuidEntryMapping (ContentGuid, CatalogEntryId)
		VALUES (@ContentGuid, @CatalogEntryId)	
	END
END
GO
PRINT N'Creating [dbo].[ecf_GuidMappingNode_Insert]...';


GO
CREATE PROCEDURE [dbo].[ecf_GuidMappingNode_Insert]
	@ContentGuid uniqueidentifier,
	@CatalogNodeId int
AS
BEGIN
	IF EXISTS(SELECT(1) FROM CatalogNode WHERE CatalogNodeId = @CatalogNodeId)
	BEGIN
		DELETE 
		FROM dbo.GuidNodeMapping 
		WHERE CatalogNodeId = @CatalogNodeId
	
		INSERT INTO dbo.GuidNodeMapping (ContentGuid, CatalogNodeId)
		VALUES (@ContentGuid, @CatalogNodeId)	
	END
END
GO
PRINT N'Creating [dbo].[ecf_GuidMappingCatalog_Insert]...';


GO
CREATE PROCEDURE [dbo].[ecf_GuidMappingCatalog_Insert]
	@ContentGuid uniqueidentifier,
	@CatalogId int
AS
BEGIN
	IF EXISTS(SELECT(1) FROM Catalog WHERE CatalogId = @CatalogId)
	BEGIN
		DELETE 
		FROM dbo.GuidCatalogMapping 
		WHERE CatalogId = @CatalogId 
	
		INSERT INTO dbo.GuidCatalogMapping (ContentGuid, CatalogId)
		VALUES (@ContentGuid, @CatalogId)	
	END
END
GO
PRINT N'Creating [dbo].[ecf_GuidMapping_FindEntity]...';


GO
CREATE PROCEDURE [dbo].[ecf_GuidMapping_FindEntity]
    @ContentGuid uniqueidentifier
AS
BEGIN
	SELECT CatalogId,2
		FROM dbo.GuidCatalogMapping
	WHERE ContentGuid = @ContentGuid
	UNION
	SELECT CatalogNodeId,1
		FROM dbo.GuidNodeMapping
	WHERE ContentGuid = @ContentGuid
	UNION
	SELECT CatalogEntryId,0
		FROM dbo.GuidEntryMapping
	WHERE ContentGuid = @ContentGuid

END
GO
PRINT N'Creating [dbo].[ecf_AllCatalogEntry_CatalogId]...';


GO
CREATE PROCEDURE [dbo].[ecf_AllCatalogEntry_CatalogId]
    @CatalogId int
AS
BEGIN
	
	SELECT N.* from [CatalogEntry] N
	WHERE
		N.CatalogId = @CatalogId 

END
GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadDictionarySingleItemUsages]...';


GO
CREATE PROCEDURE dbo.[mdpsp_sys_LoadDictionarySingleItemUsages]
@MetaFieldId int,
@MetaDictionaryId int
as
begin

DECLARE @metaClassTableName nvarchar(256)
DECLARE @sqlQuery nvarchar(max)
DECLARE @metaFieldName nvarchar(256)
DECLARE @multipleLanguage bit
DECLARE @rowcount int

SET @metaFieldName = (SELECT top 1 Name from dbo.MetaField where MetaFieldId = @MetaFieldId)
SET @multipleLanguage = (SELECT top 1 MultiLanguageValue from dbo.MetaField where MetaFieldId = @MetaFieldId)

DECLARE metaclass_table CURSOR FOR 
SELECT TableName
FROM dbo.MetaClass m
INNER JOIN dbo.MetaClassMetaFieldRelation r
ON m.MetaClassId = r.MetaClassId
WHERE r.MetaFieldId = @MetaFieldId

SET @sqlQuery = ''
SET @rowcount = 0

OPEN metaclass_table

FETCH NEXT FROM metaclass_table 
INTO @metaClassTableName


WHILE @@FETCH_STATUS = 0
BEGIN
	if (@multipleLanguage = 1)
		SET @metaClassTableName = @metaClassTableName + '_Localization'
	SET @sqlQuery = 'SELECT @rowcount = Count(ObjectId) FROM ' + @metaClassTableName + ' where [' +  @metaFieldName +  '] =  ''' + cast(@MetaDictionaryId as varchar(20)) + ''''
	EXEC sp_executesql @sqlQuery, N'@rowcount int output', @rowcount output
	if (@rowcount > 0)
		BREAK

FETCH NEXT FROM metaclass_table 
    INTO @metaClassTableName

	
END 
CLOSE metaclass_table;
DEALLOCATE metaclass_table;

SELECT @rowcount

END
GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadDictionaryMultiItemUsages]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_LoadDictionaryMultiItemUsages]
(
	@MetaDictionaryId	int
)
AS
BEGIN
  SELECT COUNT(MetaObjectId) from MetaKey mk 
  join MetaMultiValueDictionary d on mk.MetaKey = d.MetaKey
  where d.MetaDictionaryId = @MetaDictionaryId
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Inventory_AdjustInventory]...';


GO
CREATE PROCEDURE [dbo].[ecf_Inventory_AdjustInventory]
    @changes [dbo].[udttInventory] READONLY
AS
BEGIN
    if exists (
        select 1 from @changes src 
        where not exists (select 1 from [dbo].[InventoryService] dst where dst.[ApplicationId] = src.[ApplicationId] and dst.[CatalogEntryCode] = src.[CatalogEntryCode] and dst.[WarehouseCode] = src.[WarehouseCode]))
    begin
        raiserror('unmatched key found in update set', 16, 1)
    end
    else
    begin
        update dst
        set      
            [PurchaseAvailableQuantity] = dst.[PurchaseAvailableQuantity] + src.[PurchaseAvailableQuantity],
            [PreorderAvailableQuantity] = dst.[PreorderAvailableQuantity] + src.[PreorderAvailableQuantity],
            [BackorderAvailableQuantity] = dst.[BackorderAvailableQuantity] + src.[BackorderAvailableQuantity],
            [PurchaseRequestedQuantity] = dst.[PurchaseRequestedQuantity] + src.[PurchaseRequestedQuantity],
            [PreorderRequestedQuantity] = dst.[PreorderRequestedQuantity] + src.[PreorderRequestedQuantity],
            [BackorderRequestedQuantity] = dst.[BackorderRequestedQuantity] + src.[BackorderRequestedQuantity]
        from [dbo].[InventoryService] dst
        join (
            select 
                [ApplicationId], [CatalogEntryCode], [WarehouseCode],
                SUM([PurchaseAvailableQuantity]) as [PurchaseAvailableQuantity],
                SUM([PreorderAvailableQuantity]) as [PreorderAvailableQuantity],
                SUM([BackorderAvailableQuantity]) as [BackorderAvailableQuantity],
                SUM([PurchaseRequestedQuantity]) as [PurchaseRequestedQuantity],
                SUM([PreorderRequestedQuantity]) as [PreorderRequestedQuantity],
                SUM([BackorderRequestedQuantity]) as [BackorderRequestedQuantity]
            from @changes
            group by [ApplicationId], [CatalogEntryCode], [WarehouseCode]) src 
          on dst.[ApplicationId] = src.[ApplicationId] and dst.[CatalogEntryCode] = src.[CatalogEntryCode] and dst.[WarehouseCode] = src.[WarehouseCode]
    end
END
GO
PRINT N'Creating [dbo].[ecf_Inventory_DeleteInventory]...';


GO
CREATE PROCEDURE [dbo].[ecf_Inventory_DeleteInventory]
    @partialKeys [dbo].[udttInventory] READONLY
AS
BEGIN
    delete mi
    from [dbo].[InventoryService] mi
    where exists (
        select 1 
        from @partialKeys keys 
        where mi.[ApplicationId] = keys.[ApplicationId]
          and mi.[CatalogEntryCode] = isnull(keys.[CatalogEntryCode], mi.[CatalogEntryCode])
          and mi.[WarehouseCode] = isnull(keys.[WarehouseCode], mi.[WarehouseCode]))
END
GO
PRINT N'Creating [dbo].[ecf_Inventory_DeleteWarehouse]...';


GO
CREATE PROCEDURE [dbo].[ecf_Inventory_DeleteWarehouse]
    @ApplicationId UNIQUEIDENTIFIER,
    @Code NVARCHAR(50)
AS
BEGIN    
    delete from [dbo].[Warehouse]
    where [ApplicationId] = @ApplicationId and [Code] = @Code
END
GO
PRINT N'Creating [dbo].[ecf_Inventory_UpdateInventory]...';


GO
CREATE PROCEDURE [dbo].[ecf_Inventory_UpdateInventory]
    @inventory [dbo].[udttInventory] READONLY
AS
BEGIN
    if exists (
        select 1 from @inventory 
        group by [ApplicationId], [CatalogEntryCode], [WarehouseCode] 
        having COUNT(*) > 1)
    begin
        raiserror('duplicate key found in update set', 16, 1)
    end
    else if exists (
        select 1 from @inventory src 
        where not exists (select 1 from [dbo].[InventoryService] dst where dst.[ApplicationId] = src.[ApplicationId] and dst.[CatalogEntryCode] = src.[CatalogEntryCode] and dst.[WarehouseCode] = src.[WarehouseCode]))
    begin
        raiserror('unmatched key found in update set', 16, 1)
    end
    else
    begin
        update dst
        set      
            [IsTracked] = src.[IsTracked],
            [PurchaseAvailableQuantity] = src.[PurchaseAvailableQuantity],
            [PreorderAvailableQuantity] = src.[PreorderAvailableQuantity],
            [BackorderAvailableQuantity] = src.[BackorderAvailableQuantity],
            [PurchaseRequestedQuantity] = src.[PurchaseRequestedQuantity],
            [PreorderRequestedQuantity] = src.[PreorderRequestedQuantity],
            [BackorderRequestedQuantity] = src.[BackorderRequestedQuantity],
            [PurchaseAvailableUtc] = src.[PurchaseAvailableUtc],
            [PreorderAvailableUtc] = src.[PreorderAvailableUtc],
            [BackorderAvailableUtc] = src.[BackorderAvailableUtc],
            [AdditionalQuantity] = src.[AdditionalQuantity],
            [ReorderMinQuantity] = src.[ReorderMinQuantity]
        from [dbo].[InventoryService] dst
        join @inventory src on dst.[ApplicationId] = src.[ApplicationId] and dst.[CatalogEntryCode] = src.[CatalogEntryCode] and dst.[WarehouseCode] = src.[WarehouseCode]
    end
END
GO
PRINT N'Creating [dbo].[ecf_Inventory_InsertInventory]...';


GO
CREATE PROCEDURE [dbo].[ecf_Inventory_InsertInventory]
    @inventory [dbo].[udttInventory] READONLY
AS
BEGIN
    insert into [dbo].[InventoryService]
    (          
        [ApplicationId],
        [CatalogEntryCode],
        [WarehouseCode],
        [IsTracked],
        [PurchaseAvailableQuantity],
        [PreorderAvailableQuantity],
        [BackorderAvailableQuantity],
        [PurchaseRequestedQuantity],
        [PreorderRequestedQuantity],
        [BackorderRequestedQuantity],
        [PurchaseAvailableUtc],
        [PreorderAvailableUtc],
        [BackorderAvailableUtc],
        [AdditionalQuantity],
        [ReorderMinQuantity]
    )
    select
        src.[ApplicationId],
        src.[CatalogEntryCode],
        src.[WarehouseCode],
        src.[IsTracked],
        src.[PurchaseAvailableQuantity],
        src.[PreorderAvailableQuantity],
        src.[BackorderAvailableQuantity],
        src.[PurchaseRequestedQuantity],
        src.[PreorderRequestedQuantity],
        src.[BackorderRequestedQuantity],
        src.[PurchaseAvailableUtc],
        src.[PreorderAvailableUtc],
        src.[BackorderAvailableUtc],
        src.[AdditionalQuantity],
        src.[ReorderMinQuantity]
    from @inventory src
END
GO
PRINT N'Creating [dbo].[ecf_Inventory_SaveInventory]...';


GO
CREATE PROCEDURE [dbo].[ecf_Inventory_SaveInventory]
    @inventory [dbo].[udttInventory] READONLY
AS
BEGIN
    merge into [dbo].[InventoryService] dst
    using @inventory src
    on (dst.[ApplicationId] = src.[ApplicationId] and dst.[CatalogEntryCode] = src.[CatalogEntryCode] and dst.[WarehouseCode] = src.[WarehouseCode])
    when matched then
        update set      
            [IsTracked] = src.[IsTracked],
            [PurchaseAvailableQuantity] = src.[PurchaseAvailableQuantity],
            [PreorderAvailableQuantity] = src.[PreorderAvailableQuantity],
            [BackorderAvailableQuantity] = src.[BackorderAvailableQuantity],
            [PurchaseRequestedQuantity] = src.[PurchaseRequestedQuantity],
            [PreorderRequestedQuantity] = src.[PreorderRequestedQuantity],
            [BackorderRequestedQuantity] = src.[BackorderRequestedQuantity],
            [PurchaseAvailableUtc] = src.[PurchaseAvailableUtc],
            [PreorderAvailableUtc] = src.[PreorderAvailableUtc],
            [BackorderAvailableUtc] = src.[BackorderAvailableUtc],
            [AdditionalQuantity] = src.[AdditionalQuantity],
            [ReorderMinQuantity] = src.[ReorderMinQuantity]
    when not matched then 
        insert (
            [ApplicationId],
            [CatalogEntryCode],
            [WarehouseCode],
            [IsTracked],
            [PurchaseAvailableQuantity],
            [PreorderAvailableQuantity],
            [BackorderAvailableQuantity],
            [PurchaseRequestedQuantity],
            [PreorderRequestedQuantity],
            [BackorderRequestedQuantity],
            [PurchaseAvailableUtc],
            [PreorderAvailableUtc],
            [BackorderAvailableUtc],
            [AdditionalQuantity],
            [ReorderMinQuantity]
        ) values (
            src.[ApplicationId],
            src.[CatalogEntryCode],
            src.[WarehouseCode],
            src.[IsTracked],
            src.[PurchaseAvailableQuantity],
            src.[PreorderAvailableQuantity],
            src.[BackorderAvailableQuantity],
            src.[PurchaseRequestedQuantity],
            src.[PreorderRequestedQuantity],
            src.[BackorderRequestedQuantity],
            src.[PurchaseAvailableUtc],
            src.[PreorderAvailableUtc],
            src.[BackorderAvailableUtc],
            src.[AdditionalQuantity],
            src.[ReorderMinQuantity]
        );
END
GO
PRINT N'Creating [dbo].[ecf_Inventory_QueryInventoryPaged]...';


GO
CREATE PROCEDURE [dbo].[ecf_Inventory_QueryInventoryPaged]
    @offset int,
    @count int,
    @partialKeys [dbo].[udttInventory] READONLY
AS
BEGIN
    declare @results table (
        [ApplicationId] uniqueidentifier,
        [CatalogEntryCode] nvarchar(100),
        [WarehouseCode] nvarchar(50),
        [IsTracked] bit,
        [PurchaseAvailableQuantity] decimal(38, 9),
        [PreorderAvailableQuantity] decimal(38, 9),
        [BackorderAvailableQuantity] decimal(38, 9),
        [PurchaseRequestedQuantity] decimal(38, 9),
        [PreorderRequestedQuantity] decimal(38, 9),
        [BackorderRequestedQuantity] decimal(38, 9),
        [PurchaseAvailableUtc] datetime2,
        [PreorderAvailableUtc] datetime2,
        [BackorderAvailableUtc] datetime2,
        [AdditionalQuantity] decimal(38, 9),
        [ReorderMinQuantity] decimal(38, 9),
        [RowNumber] int,
        [TotalCount] int
    )

    insert into @results (
        [ApplicationId],
        [CatalogEntryCode],
        [WarehouseCode],
        [IsTracked],
        [PurchaseAvailableQuantity],
        [PreorderAvailableQuantity],
        [BackorderAvailableQuantity],
        [PurchaseRequestedQuantity],
        [PreorderRequestedQuantity],
        [BackorderRequestedQuantity],
        [PurchaseAvailableUtc],
        [PreorderAvailableUtc],
        [BackorderAvailableUtc],
        [AdditionalQuantity],
        [ReorderMinQuantity],
        [RowNumber],
        [TotalCount]
    )
    select
        [ApplicationId], 
        [CatalogEntryCode], 
        [WarehouseCode], 
        [IsTracked], 
        [PurchaseAvailableQuantity], 
        [PreorderAvailableQuantity], 
        [BackorderAvailableQuantity], 
        [PurchaseRequestedQuantity], 
        [PreorderRequestedQuantity], 
        [BackorderRequestedQuantity], 
        [PurchaseAvailableUtc],
        [PreorderAvailableUtc],
        [BackorderAvailableUtc],
        [AdditionalQuantity],
        [ReorderMinQuantity],
        [RowNumber],
        [RowNumber] + [ReverseRowNumber] - 1 as [TotalCount]
    from (
        select 
            ROW_NUMBER() over (order by [ApplicationId], [CatalogEntryCode], [WarehouseCode]) as [RowNumber],
            ROW_NUMBER() over (order by [ApplicationId] desc, [CatalogEntryCode] desc, [WarehouseCode] desc) as [ReverseRowNumber],
            [ApplicationId], 
            [CatalogEntryCode], 
            [WarehouseCode], 
            [IsTracked], 
            [PurchaseAvailableQuantity], 
            [PreorderAvailableQuantity], 
            [BackorderAvailableQuantity], 
            [PurchaseRequestedQuantity], 
            [PreorderRequestedQuantity], 
            [BackorderRequestedQuantity], 
            [PurchaseAvailableUtc],
            [PreorderAvailableUtc],
            [BackorderAvailableUtc],
            [AdditionalQuantity],
            [ReorderMinQuantity]
        from [dbo].[InventoryService] mi
        where exists (
            select 1 
            from @partialKeys keys 
            where mi.[ApplicationId] = keys.[ApplicationId]
              and mi.[CatalogEntryCode] = isnull(keys.[CatalogEntryCode], mi.[CatalogEntryCode])
              and mi.[WarehouseCode] = isnull(keys.[WarehouseCode], mi.[WarehouseCode]))
    ) paged
    where @offset < [RowNumber] and [RowNumber] <= (@offset + @count)

    if not exists (select 1 from @results)
    begin
        select COUNT(*) as TotalCount
        from [dbo].[InventoryService] mi
        where exists (
            select 1 
            from @partialKeys keys 
            where mi.[ApplicationId] = keys.[ApplicationId]
              and mi.[CatalogEntryCode] = isnull(keys.[CatalogEntryCode], mi.[CatalogEntryCode])
              and mi.[WarehouseCode] = isnull(keys.[WarehouseCode], mi.[WarehouseCode]))
    end
    else
    begin
        select top 1 [TotalCount] from @results
    end
       
    select 
        [ApplicationId], 
        [CatalogEntryCode], 
        [WarehouseCode], 
        [IsTracked], 
        [PurchaseAvailableQuantity], 
        [PreorderAvailableQuantity], 
        [BackorderAvailableQuantity], 
        [PurchaseRequestedQuantity], 
        [PreorderRequestedQuantity], 
        [BackorderRequestedQuantity], 
        [PurchaseAvailableUtc],
        [PreorderAvailableUtc],
        [BackorderAvailableUtc],
        [AdditionalQuantity],
        [ReorderMinQuantity]
    from @results
    order by [RowNumber]
END
GO
PRINT N'Creating [dbo].[ecf_Inventory_QueryInventory]...';


GO
CREATE PROCEDURE [dbo].[ecf_Inventory_QueryInventory]
    @partialKeys [dbo].[udttInventory] READONLY
AS
BEGIN
    select
        [ApplicationId], 
        [CatalogEntryCode], 
        [WarehouseCode], 
        [IsTracked], 
        [PurchaseAvailableQuantity], 
        [PreorderAvailableQuantity], 
        [BackorderAvailableQuantity], 
        [PurchaseRequestedQuantity], 
        [PreorderRequestedQuantity], 
        [BackorderRequestedQuantity], 
        [PurchaseAvailableUtc],
        [PreorderAvailableUtc],
        [BackorderAvailableUtc],
        [AdditionalQuantity],
        [ReorderMinQuantity]
    from [dbo].[InventoryService] mi
    where exists (
        select 1 
        from @partialKeys keys 
        where mi.[ApplicationId] = keys.[ApplicationId]
          and mi.[CatalogEntryCode] = isnull(keys.[CatalogEntryCode], mi.[CatalogEntryCode])
          and mi.[WarehouseCode] = isnull(keys.[WarehouseCode], mi.[WarehouseCode]))
    order by [ApplicationId], [CatalogEntryCode], [WarehouseCode]
END
GO
PRINT N'Creating [dbo].[ecf_Inventory_ListInventory]...';


GO
CREATE PROCEDURE [dbo].[ecf_Inventory_ListInventory]
    @ApplicationId uniqueidentifier
AS
BEGIN
    select
        [ApplicationId], 
        [CatalogEntryCode], 
        [WarehouseCode], 
        [IsTracked], 
        [PurchaseAvailableQuantity], 
        [PreorderAvailableQuantity], 
        [BackorderAvailableQuantity], 
        [PurchaseRequestedQuantity], 
        [PreorderRequestedQuantity], 
        [BackorderRequestedQuantity], 
        [PurchaseAvailableUtc],
        [PreorderAvailableUtc],
        [BackorderAvailableUtc],
        [AdditionalQuantity],
        [ReorderMinQuantity]
    from [dbo].[InventoryService]
    where [ApplicationId] = @ApplicationId
    order by [CatalogEntryCode], [WarehouseCode]
END
GO
PRINT N'Creating [dbo].[ecf_Inventory_GetInventory]...';


GO
CREATE PROCEDURE [dbo].[ecf_Inventory_GetInventory]
    @ApplicationId uniqueidentifier,
    @CatalogEntryCode nvarchar(100),
    @WarehouseCode nvarchar(50)
AS
BEGIN
    select
        [ApplicationId], 
        [CatalogEntryCode], 
        [WarehouseCode], 
        [IsTracked], 
        [PurchaseAvailableQuantity], 
        [PreorderAvailableQuantity], 
        [BackorderAvailableQuantity], 
        [PurchaseRequestedQuantity], 
        [PreorderRequestedQuantity], 
        [BackorderRequestedQuantity], 
        [PurchaseAvailableUtc],
        [PreorderAvailableUtc],
        [BackorderAvailableUtc],
        [AdditionalQuantity],
        [ReorderMinQuantity]
    from [dbo].[InventoryService]
    where [ApplicationId] = @ApplicationId and [CatalogEntryCode] = @CatalogEntryCode and [WarehouseCode] = @WarehouseCode
END
GO
PRINT N'Creating [dbo].[ecf_Inventory_UpdateWarehouse]...';


GO
CREATE PROCEDURE [dbo].[ecf_Inventory_UpdateWarehouse]
    @ApplicationId UNIQUEIDENTIFIER,
    @Name NVARCHAR(255),
    @CreatorId NVARCHAR(100),
    @Created DATETIME,
    @ModifierId NVARCHAR(100),
    @Modified DATETIME,
    @IsActive BIT,
    @IsPrimary BIT,
    @SortOrder INT,
    @Code NVARCHAR(50),
    @IsFulfillmentCenter BIT,
    @IsPickupLocation BIT,
    @IsDeliveryLocation BIT,
    @FirstName NVARCHAR(64),
    @LastName NVARCHAR(64),
    @Organization NVARCHAR(64),
    @Line1 NVARCHAR(80),
    @Line2 NVARCHAR(80),
    @City NVARCHAR(64),
    @State NVARCHAR(64),
    @CountryCode NVARCHAR(50),
    @CountryName NVARCHAR(50),
    @PostalCode NVARCHAR(20),
    @RegionCode NVARCHAR(50),
    @RegionName NVARCHAR(64),
    @DaytimePhoneNumber NVARCHAR(32),
    @EveningPhoneNumber NVARCHAR(32),
    @FaxNumber NVARCHAR(32),
    @Email NVARCHAR(64)
AS
BEGIN    
    update dbo.Warehouse
    set 
        [ApplicationId] = @ApplicationId,
        [Name] = @Name,
        [CreatorId] = @CreatorId,
        [Created] = @Created,
        [ModifierId] = @ModifierId,
        [Modified] = @Modified,
        [IsActive] = @IsActive,
        [IsPrimary] = @IsPrimary,
        [SortOrder] = @SortOrder,
        [Code] = @Code,
        [IsFulfillmentCenter] = @IsFulfillmentCenter,
        [IsPickupLocation] = @IsPickupLocation,
        [IsDeliveryLocation] = @IsDeliveryLocation,
        [FirstName] = @FirstName,
        [LastName] = @LastName,
        [Organization] = @Organization,
        [Line1] = @Line1,
        [Line2] = @Line2,
        [City] = @City,
        [State] = @State,
        [CountryCode] = @CountryCode,
        [CountryName] = @CountryName,
        [PostalCode] = @PostalCode,
        [RegionCode] = @RegionCode,
        [RegionName] = @RegionName,
        [DaytimePhoneNumber] = @DaytimePhoneNumber,
        [EveningPhoneNumber] = @EveningPhoneNumber,
        [FaxNumber] = @FaxNumber,
        [Email] = @Email
    where [ApplicationId] = @ApplicationId and [Code] = @Code    
END
GO
PRINT N'Creating [dbo].[ecf_Inventory_InsertWarehouse]...';


GO
CREATE PROCEDURE [dbo].[ecf_Inventory_InsertWarehouse]
    @ApplicationId UNIQUEIDENTIFIER,
    @Name NVARCHAR(255),
    @CreatorId NVARCHAR(100),
    @Created DATETIME,
    @ModifierId NVARCHAR(100),
    @Modified DATETIME,
    @IsActive BIT,
    @IsPrimary BIT,
    @SortOrder INT,
    @Code NVARCHAR(50),
    @IsFulfillmentCenter BIT,
    @IsPickupLocation BIT,
    @IsDeliveryLocation BIT,
    @FirstName NVARCHAR(64),
    @LastName NVARCHAR(64),
    @Organization NVARCHAR(64),
    @Line1 NVARCHAR(80),
    @Line2 NVARCHAR(80),
    @City NVARCHAR(64),
    @State NVARCHAR(64),
    @CountryCode NVARCHAR(50),
    @CountryName NVARCHAR(50),
    @PostalCode NVARCHAR(20),
    @RegionCode NVARCHAR(50),
    @RegionName NVARCHAR(64),
    @DaytimePhoneNumber NVARCHAR(32),
    @EveningPhoneNumber NVARCHAR(32),
    @FaxNumber NVARCHAR(32),
    @Email NVARCHAR(64)
AS
BEGIN    
    insert into [dbo].[Warehouse] (
        [ApplicationId],
        [Name],
        [CreatorId],
        [Created],
        [ModifierId],
        [Modified],
        [IsActive],
        [IsPrimary],
        [SortOrder],
        [Code],
        [IsFulfillmentCenter],
        [IsPickupLocation],
        [IsDeliveryLocation],
        [FirstName],
        [LastName],
        [Organization],
        [Line1],
        [Line2],
        [City],
        [State],
        [CountryCode],
        [CountryName],
        [PostalCode],
        [RegionCode],
        [RegionName],
        [DaytimePhoneNumber],
        [EveningPhoneNumber],
        [FaxNumber],
        [Email]
    ) values (
        @ApplicationId,
        @Name,
        @CreatorId,
        @Created,
        @ModifierId,
        @Modified,
        @IsActive,
        @IsPrimary,
        @SortOrder,
        @Code,
        @IsFulfillmentCenter,
        @IsPickupLocation,
        @IsDeliveryLocation,
        @FirstName,
        @LastName,
        @Organization,
        @Line1,
        @Line2,
        @City,
        @State,
        @CountryCode,
        @CountryName,
        @PostalCode,
        @RegionCode,
        @RegionName,
        @DaytimePhoneNumber,
        @EveningPhoneNumber,
        @FaxNumber,
        @Email
    )
END
GO
PRINT N'Creating [dbo].[ecf_Inventory_SaveWarehouse]...';


GO
CREATE PROCEDURE [dbo].[ecf_Inventory_SaveWarehouse]
    @ApplicationId UNIQUEIDENTIFIER,
    @Name NVARCHAR(255),
    @CreatorId NVARCHAR(100),
    @Created DATETIME,
    @ModifierId NVARCHAR(100),
    @Modified DATETIME,
    @IsActive BIT,
    @IsPrimary BIT,
    @SortOrder INT,
    @Code NVARCHAR(50),
    @IsFulfillmentCenter BIT,
    @IsPickupLocation BIT,
    @IsDeliveryLocation BIT,
    @FirstName NVARCHAR(64),
    @LastName NVARCHAR(64),
    @Organization NVARCHAR(64),
    @Line1 NVARCHAR(80),
    @Line2 NVARCHAR(80),
    @City NVARCHAR(64),
    @State NVARCHAR(64),
    @CountryCode NVARCHAR(50),
    @CountryName NVARCHAR(50),
    @PostalCode NVARCHAR(20),
    @RegionCode NVARCHAR(50),
    @RegionName NVARCHAR(64),
    @DaytimePhoneNumber NVARCHAR(32),
    @EveningPhoneNumber NVARCHAR(32),
    @FaxNumber NVARCHAR(32),
    @Email NVARCHAR(64)
AS
BEGIN
    if exists (select 1 from [dbo].[Warehouse] where [ApplicationId] = @ApplicationId and [Code] = @Code)
    begin
        exec [dbo].[ecf_Inventory_UpdateWarehouse]
            @ApplicationId,
            @Name,
            @CreatorId,
            @Created,
            @ModifierId,
            @Modified,
            @IsActive,
            @IsPrimary,
            @SortOrder,
            @Code,
            @IsFulfillmentCenter,
            @IsPickupLocation,
            @IsDeliveryLocation,
            @FirstName,
            @LastName,
            @Organization,
            @Line1,
            @Line2,
            @City,
            @State,
            @CountryCode,
            @CountryName,
            @PostalCode,
            @RegionCode,
            @RegionName,
            @DaytimePhoneNumber,
            @EveningPhoneNumber,
            @FaxNumber,
            @Email
    end
    else
    begin
        exec [dbo].[ecf_Inventory_InsertWarehouse]
            @ApplicationId,
            @Name,
            @CreatorId,
            @Created,
            @ModifierId,
            @Modified,
            @IsActive,
            @IsPrimary,
            @SortOrder,
            @Code,
            @IsFulfillmentCenter,
            @IsPickupLocation,
            @IsDeliveryLocation,
            @FirstName,
            @LastName,
            @Organization,
            @Line1,
            @Line2,
            @City,
            @State,
            @CountryCode,
            @CountryName,
            @PostalCode,
            @RegionCode,
            @RegionName,
            @DaytimePhoneNumber,
            @EveningPhoneNumber,
            @FaxNumber,
            @Email
    end
END
GO
PRINT N'Creating [dbo].[ecf_Inventory_ListWarehouses]...';


GO
CREATE PROCEDURE [dbo].[ecf_Inventory_ListWarehouses]
    @ApplicationId uniqueidentifier
AS
BEGIN
    select
        [WarehouseId],
        [ApplicationId],
        [Name],
        [CreatorId],
        [Created],
        [ModifierId],
        [Modified],
        [IsActive],
        [IsPrimary],
        [SortOrder],
        [Code],
        [IsFulfillmentCenter],
        [IsPickupLocation],
        [IsDeliveryLocation],
        [FirstName],
        [LastName],
        [Organization],
        [Line1],
        [Line2],
        [City],
        [State],
        [CountryCode],
        [CountryName],
        [PostalCode],
        [RegionCode],
        [RegionName],
        [DaytimePhoneNumber],
        [EveningPhoneNumber],
        [FaxNumber],
        [Email]
    from [dbo].[Warehouse]
    where [ApplicationId] = @ApplicationId
END
GO
PRINT N'Creating [dbo].[ecf_Inventory_GetWarehouse]...';


GO
CREATE PROCEDURE [dbo].[ecf_Inventory_GetWarehouse]
    @ApplicationId uniqueidentifier,
    @Code nvarchar(50)
AS
BEGIN
    select
        [WarehouseId],
        [ApplicationId],
        [Name],
        [CreatorId],
        [Created],
        [ModifierId],
        [Modified],
        [IsActive],
        [IsPrimary],
        [SortOrder],
        [Code],
        [IsFulfillmentCenter],
        [IsPickupLocation],
        [IsDeliveryLocation],
        [FirstName],
        [LastName],
        [Organization],
        [Line1],
        [Line2],
        [City],
        [State],
        [CountryCode],
        [CountryName],
        [PostalCode],
        [RegionCode],
        [RegionName],
        [DaytimePhoneNumber],
        [EveningPhoneNumber],
        [FaxNumber],
        [Email]
    from [dbo].[Warehouse]
    where [ApplicationId] = @ApplicationId and [Code] = @Code
END
GO
PRINT N'Creating [dbo].[ecf_OrderGroupLock_GetByOrderGroupId]...';


GO
CREATE PROCEDURE [dbo].[ecf_OrderGroupLock_GetByOrderGroupId]
@OrderGroupId AS Int
AS
BEGIN
SET NOCOUNT ON;

SELECT top 1 [t01].[OrderLockId] AS [OrderLockId], [t01].[CustomerId] AS [CustomerId], [t01].[Created] AS [Created], [t01].[OrderGroupId] AS [OrderGroupId]
FROM [OrderGroupLock] AS [t01]
WHERE ([t01].[OrderGroupId]=@OrderGroupId)

END
GO
PRINT N'Creating [dbo].[ecf_OrderGroupLock_ListByCustomerId]...';


GO
CREATE PROCEDURE [dbo].[ecf_OrderGroupLock_ListByCustomerId]
@CustomerId AS Uniqueidentifier
AS
BEGIN
SET NOCOUNT ON;

SELECT [t01].[OrderLockId] AS [OrderLockId], [t01].[CustomerId] AS [CustomerId], [t01].[Created] AS [Created], [t01].[OrderGroupId] AS [OrderGroupId]
FROM [OrderGroupLock] AS [t01]
WHERE [t01].[CustomerId]=@CustomerId

END
GO
PRINT N'Creating [dbo].[cms_NavigationItemsUpdate]...';


GO
CREATE PROCEDURE [dbo].[cms_NavigationItemsUpdate]
(
	@ItemId int,
	@ItemName nvarchar(256) = NULL
)
AS
	SET NOCOUNT ON
	
	UPDATE [NavigationItems]
	SET
		[ItemName] = @ItemName
	WHERE 
		[ItemId] = @ItemId

	RETURN @@Error
GO
PRINT N'Creating [dbo].[mdpsp_sys_CheckReplaceUser]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_CheckReplaceUser]
	@OldUserId AS nvarchar(100),
	@Retval AS INT OUTPUT
AS
	SET NOCOUNT ON

	SET @Retval = 0

	DECLARE classall_cursor CURSOR FOR
		SELECT MetaClassId, TableName FROM MetaClass WHERE IsSystem =0 AND IsAbstract = 0

	DECLARE @MetaClassId	INT
	DECLARE @TableName		NVARCHAR(255)

	OPEN classall_cursor
	FETCH NEXT FROM classall_cursor INTO @MetaClassId, @TableName

	DECLARE @SQLString NVARCHAR(500)

	WHILE(@@FETCH_STATUS = 0 AND @Retval = 0)
	BEGIN

		SET @SQLString  = N'IF EXISTS(SELECT TOP 1 * FROM ' + @TableName  + ' WHERE CreatorId = @OldUserId) SELECT 1'
		EXEC sp_executesql @SQLString, N'@OldUserId AS nvarchar(100)', @OldUserId = @OldUserId
		IF @@ROWCOUNT <> 0
		BEGIN
			SET @Retval = 1
			BREAK
		END

		SET @SQLString  = N'IF EXISTS(SELECT TOP 1 * FROM ' + @TableName  + ' WHERE ModifierId = @OldUserId) SELECT 1'
		EXEC sp_executesql @SQLString, N'@OldUserId AS nvarchar(100)', @OldUserId = @OldUserId
		IF @@ROWCOUNT <> 0
		BEGIN
			SET @Retval = 1
			BREAK
		END

		FETCH NEXT FROM classall_cursor INTO @MetaClassId, @TableName
	END

	CLOSE classall_cursor
	DEALLOCATE classall_cursor
RETURN
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Setup_RemoveAllRoleMembers]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[aspnet_Setup_RemoveAllRoleMembers]
    @name   sysname
AS
BEGIN
    CREATE TABLE #aspnet_RoleMembers
    (
        Group_name      sysname,
        Group_id        smallint,
        Users_in_group  sysname,
        User_id         smallint
    )
	
	IF (SELECT AzureCompatible FROM dbo.AzureCompatible) = 0
		INSERT INTO #aspnet_RoleMembers EXEC sp_helpuser @name
	ELSE
	BEGIN
		INSERT INTO #aspnet_RoleMembers
		select Role_name = substring(r.name, 1, 25), Role_id = r.principal_id,
		   Users_in_role = substring(u.name, 1, 25), Userid = u.principal_id
		from sys.database_principals u, sys.database_principals r, sys.database_role_members m
		where r.name = @name
			and r.principal_id = m.role_principal_id
			and u.principal_id = m.member_principal_id
		order by 1, 2
	END

    DECLARE @user_id smallint
    DECLARE @cmd nvarchar(500)
    DECLARE c1 cursor FORWARD_ONLY FOR
        SELECT User_id FROM #aspnet_RoleMembers

    OPEN c1

    FETCH c1 INTO @user_id
    WHILE (@@fetch_status = 0)
    BEGIN
        SET @cmd = 'EXEC sp_droprolemember ' + '''' + @name + ''', ''' + USER_NAME(@user_id) + ''''
        EXEC (@cmd)
        FETCH c1 INTO @user_id
    END

    CLOSE c1
    DEALLOCATE c1
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[cms_NavigationItemsSelectByName]...';


GO
CREATE PROCEDURE [cms_NavigationItemsSelectByName]
(
	@ApplicationId uniqueidentifier,
	@ItemName nvarchar(256)
)
AS	
	SELECT [ItemId], [ItemName], [ApplicationId] FROM [NavigationItems]
	WHERE 
		[ApplicationId] = @ApplicationId AND 
		[ItemName] = @ItemName
GO
PRINT N'Creating [dbo].[mdpsp_sys_AddMultiValueDictionary]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_AddMultiValueDictionary]
	@MetaKey	INT,
	@MetaDictionaryId	INT
AS
	-- Step 0. Prepare
	SET NOCOUNT ON

BEGIN TRAN

	INSERT INTO MetaMultiValueDictionary (MetaKey, MetaDictionaryId) VALUES (@MetaKey, @MetaDictionaryId)

COMMIT TRAN
RETURN

ERR:
ROLLBACK TRAN
RETURN
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Setup_RestorePermissions]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].aspnet_Setup_RestorePermissions
    @name   sysname
AS
BEGIN
    DECLARE @object sysname
    DECLARE @protectType char(10)
    DECLARE @action varchar(60)
    DECLARE @grantee sysname
    DECLARE @cmd nvarchar(500)
    DECLARE c1 cursor FORWARD_ONLY FOR
        SELECT Object, ProtectType, [Action], Grantee FROM #aspnet_Permissions where Object = @name

    OPEN c1

    FETCH c1 INTO @object, @protectType, @action, @grantee
    WHILE (@@fetch_status = 0)
    BEGIN
        SET @cmd = @protectType + ' ' + @action + ' on ' + @object + ' TO [' + @grantee + ']'
        EXEC (@cmd)
        FETCH c1 INTO @object, @protectType, @action, @grantee
    END

    CLOSE c1
    DEALLOCATE c1
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[cms_NavigationItemsSelectAll]...';


GO
CREATE PROCEDURE [cms_NavigationItemsSelectAll]
	@ApplicationId uniqueidentifier
AS	
	SELECT [ItemId], [ItemName], [ApplicationId]
	FROM [NavigationItems]
	WHERE [ApplicationId] = @ApplicationId
GO
PRINT N'Creating [dbo].[mdpsp_sys_AddMetaStringDictionary]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_AddMetaStringDictionary]
	@MetaKey	INT,
	@Key		NVARCHAR(512),
	@Value		NTEXT
AS
	-- Step 0. Prepare
	SET NOCOUNT ON

BEGIN TRAN

	INSERT INTO MetaStringDictionaryValue (MetaKey, [Key], [Value]) VALUES (@MetaKey, @Key, @Value)

COMMIT TRAN
RETURN

ERR:
ROLLBACK TRAN
RETURN
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Warehouse_Delete]...';


GO


CREATE PROCEDURE dbo.ecf_Warehouse_Delete
	@ApplicationId UNIQUEIDENTIFIER,
	@WarehouseId INT
AS
BEGIN
	BEGIN TRY
    DECLARE @initialTranCount INT = @@TRANCOUNT
    IF @initialTranCount = 0 BEGIN TRANSACTION
    
    DELETE FROM dbo.Warehouse
    WHERE ApplicationId = @ApplicationId AND WarehouseId = @WarehouseId
    
    IF @initialTranCount = 0 COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
    DECLARE @msg NVARCHAR(4000), @severity INT, @state INT
    SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE()    
    IF @initialTranCount = 0 ROLLBACK TRANSACTION   
    RAISERROR(@msg, @severity, @state)
	END CATCH
END
GO
PRINT N'Creating [dbo].[cms_NavigationItemsSelect]...';


GO

CREATE PROCEDURE [dbo].[cms_NavigationItemsSelect]
(
	@ItemId int
)
AS
	SET NOCOUNT ON
	
	SELECT 		[ItemId],
		[ItemName] FROM [NavigationItems]
	WHERE 
		[ItemId] = @ItemId
GO
PRINT N'Creating [dbo].[mdpsp_sys_AddMetaDictionary]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_AddMetaDictionary]
	@MetaFieldId	INT,
	@Language	NVARCHAR(20)=NULL,
	@DefaultValue	NVARCHAR(2048),
	@DefaultTag	IMAGE=NULL,
	@Value		NVARCHAR(2048),
	@Tag		IMAGE=NULL,
	@Retval	INT OUT
AS
	SET NOCOUNT ON
	SET @Retval = -1

BEGIN TRAN
	DECLARE @MultiLanguageValue BIT
	SELECT @MultiLanguageValue = MultiLanguageValue FROM MetaField WHERE MetaFieldId = @MetaFieldId

	IF  @MultiLanguageValue = 1
	BEGIN
		INSERT INTO MetaDictionary (MetaFieldId, [Value], Tag) VALUES (@MetaFieldId, @DefaultValue, @DefaultTag)
		IF @@ERROR <> 0 GOTO ERR
		SET @Retval = @@IDENTITY

		IF @Language IS NOT NULL
		BEGIN
			IF EXISTS(SELECT * FROM MetaDictionaryLocalization WHERE MetaDictionaryId = @Retval AND Language = @Language)
				UPDATE MetaDictionaryLocalization SET Value = @Value, Tag = @Tag WHERE MetaDictionaryId = @Retval AND Language = @Language
			ELSE
				INSERT INTO MetaDictionaryLocalization (MetaDictionaryId, Language,  Value, Tag) VALUES (@Retval, @Language, @Value, @Tag)
			IF @@ERROR <> 0 GOTO ERR
		END
	END
	ELSE
	BEGIN
		INSERT INTO MetaDictionary (MetaFieldId, [Value], Tag) VALUES (@MetaFieldId, @Value, @Tag)
		IF @@ERROR <> 0 GOTO ERR
		SET @Retval = @@IDENTITY
	END

	COMMIT TRAN
RETURN

ERR:
	SET @Retval = -1
	ROLLBACK TRAN
RETURN
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Warehouse_Save]...';


GO


CREATE PROCEDURE dbo.ecf_Warehouse_Save
	@Warehouse udttWarehouse READONLY
AS
BEGIN
	BEGIN TRY
	DECLARE @initialTranCount INT = @@TRANCOUNT
    IF @initialTranCount = 0 BEGIN TRANSACTION

    IF (SELECT arg.WarehouseId FROM @Warehouse arg) IS NULL
		BEGIN 
			SET IDENTITY_INSERT dbo.Warehouse OFF
			INSERT INTO dbo.Warehouse
			(ApplicationId, Name, CreatorId, Created, ModifierId, Modified, IsActive, IsPrimary, SortOrder, Code,
			 IsFulfillmentCenter, IsPickupLocation, IsDeliveryLocation,
			 FirstName, LastName, Organization, Line1, Line2, City, [State], CountryCode, CountryName,
			 PostalCode, RegionCode, RegionName, DaytimePhoneNumber, EveningPhoneNumber, FaxNumber, Email)
			SELECT arg.ApplicationId, arg.Name, arg.CreatorId, arg.Created, arg.ModifierId, arg.Modified,
				arg.IsActive, arg.IsPrimary, arg.SortOrder, arg.Code, arg.IsFulfillmentCenter, arg.IsPickupLocation, arg.IsDeliveryLocation, 
				arg.FirstName, arg.LastName, arg.Organization, arg.Line1, arg.Line2, arg.City, arg.[State], arg.CountryCode, arg.CountryName,
				arg.PostalCode, arg.RegionCode, arg.RegionName, arg.DaytimePhoneNumber, arg.EveningPhoneNumber,
				arg.FaxNumber, arg.Email
			FROM @Warehouse AS arg
		END
    ELSE
		BEGIN    
			UPDATE [dbo].[Warehouse]
			SET Name = arg.Name, Code = arg.Code, ModifierId = arg.ModifierId, Modified = arg.Modified,
			SortOrder = arg.SortOrder, IsActive = arg.IsActive, IsPrimary = arg.IsPrimary,
			IsFulfillmentCenter = arg.IsFulfillmentCenter, IsPickupLocation = arg.IsPickupLocation, IsDeliveryLocation = arg.IsDeliveryLocation, 
			FirstName = arg.FirstName, LastName = arg.LastName, Organization = arg.Organization, Line1 = arg.Line1, Line2 = arg.Line2, City = arg.City,
			[State] = arg.[State], CountryCode = arg.CountryCode, CountryName = arg.CountryName,
			PostalCode = arg.PostalCode, RegionCode = arg.RegionCode, RegionName = arg.RegionName,
			DaytimePhoneNumber = arg.DaytimePhoneNumber, EveningPhoneNumber = arg.EveningPhoneNumber,
			FaxNumber = arg.FaxNumber, Email = arg.Email
			FROM @Warehouse arg
			INNER JOIN dbo.Warehouse w
			ON w.WarehouseId = arg.WarehouseId
		END
		
    IF @initialTranCount = 0 COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
    DECLARE @msg NVARCHAR(4000), @severity INT, @state INT
    SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE()    
    IF @initialTranCount = 0 ROLLBACK TRANSACTION   
    RAISERROR(@msg, @severity, @state)
	END CATCH
END
GO
PRINT N'Creating [dbo].[aspnet_WebEvent_LogEvent]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_WebEvent_LogEvent
        @EventId         char(32),
        @EventTimeUtc    datetime,
        @EventTime       datetime,
        @EventType       nvarchar(256),
        @EventSequence   decimal(19,0),
        @EventOccurrence decimal(19,0),
        @EventCode       int,
        @EventDetailCode int,
        @Message         nvarchar(1024),
        @ApplicationPath nvarchar(256),
        @ApplicationVirtualPath nvarchar(256),
        @MachineName    nvarchar(256),
        @RequestUrl      nvarchar(1024),
        @ExceptionType   nvarchar(256),
        @Details         ntext
AS
BEGIN
    INSERT
        dbo.aspnet_WebEvent_Events
        (
            EventId,
            EventTimeUtc,
            EventTime,
            EventType,
            EventSequence,
            EventOccurrence,
            EventCode,
            EventDetailCode,
            Message,
            ApplicationPath,
            ApplicationVirtualPath,
            MachineName,
            RequestUrl,
            ExceptionType,
            Details
        )
    VALUES
    (
        @EventId,
        @EventTimeUtc,
        @EventTime,
        @EventType,
        @EventSequence,
        @EventOccurrence,
        @EventCode,
        @EventDetailCode,
        @Message,
        @ApplicationPath,
        @ApplicationVirtualPath,
        @MachineName,
        @RequestUrl,
        @ExceptionType,
        @Details
    )
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[cms_NavigationItemsInsert]...';


GO
CREATE PROCEDURE [cms_NavigationItemsInsert]
(
	@ItemName nvarchar(256) = NULL,
	@ApplicationId uniqueidentifier,
	@retval int = NULL output
)
AS
	SET NOCOUNT ON

	INSERT INTO [NavigationItems]
	(
		[ItemName],
		[ApplicationId]
	)
	VALUES
	(
		@ItemName,
		@ApplicationId
	)

	SELECT @retval = SCOPE_IDENTITY()

	SET NOCOUNT OFF

	RETURN @@Error
GO
PRINT N'Creating [dbo].[mdpsp_sys_AddMetaAttribute]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_AddMetaAttribute]
	@AttrOwnerId		INT,
	@AttrOwnerType	INT,
	@Key			NVARCHAR(256),
	@Value			NTEXT
AS
	IF ( (SELECT COUNT(*) FROM MetaAttribute WHERE AttrOwnerId = @AttrOwnerId AND AttrOwnerType = @AttrOwnerType AND [Key] = @Key) = 0)
	BEGIN
		-- Insert
		INSERT INTO MetaAttribute (AttrOwnerId, AttrOwnerType, [Key], [Value] ) VALUES (@AttrOwnerId, @AttrOwnerType, @Key, @Value)
	END
	ELSE
	BEGIN
		-- Update
		UPDATE MetaAttribute SET [Value] = @Value  WHERE AttrOwnerId = @AttrOwnerId AND AttrOwnerType = @AttrOwnerType AND [Key] = @Key
	END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Warehouse_GetByCode]...';


GO


CREATE PROCEDURE dbo.ecf_Warehouse_GetByCode
	@ApplicationId UNIQUEIDENTIFIER,
	@Code NVARCHAR(50)
AS
BEGIN
	SELECT * FROM Warehouse
	WHERE ApplicationId = @ApplicationId AND Code = @Code
END
GO
PRINT N'Creating [dbo].[cms_NavigationItemsDelete]...';


GO

create PROCEDURE [dbo].[cms_NavigationItemsDelete]
(
	@ItemId int
)
AS
	SET NOCOUNT ON

	DELETE 
	FROM   [NavigationItems]
	WHERE  
		[ItemId] = @ItemId

	RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_Warehouse_GetById]...';


GO


CREATE PROCEDURE dbo.ecf_Warehouse_GetById
	@ApplicationId UNIQUEIDENTIFIER,
	@WarehouseId INT
AS
BEGIN
	SELECT * FROM Warehouse
	WHERE ApplicationId = @ApplicationId AND WarehouseId = @WarehouseId
END
GO
PRINT N'Creating [dbo].[cms_NavigationCommandUpdate]...';


GO

create PROCEDURE [dbo].[cms_NavigationCommandUpdate]
(
	@Id int,
	@UrlUID nvarchar(256),
	@ItemId int = NULL,
	@Params nvarchar(1024) = NULL,
	@TrigerParam nvarchar(256) = NULL
)
AS
	SET NOCOUNT ON
	
	UPDATE [NavigationCommand]
	SET
		[UrlUID] = @UrlUID,
		[ItemId] = @ItemId,
		[Params] = @Params,
		[TrigerParam] = @TrigerParam
	WHERE 
		[Id] = @Id

	RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_Warehouse_List]...';


GO


CREATE PROCEDURE dbo.ecf_Warehouse_List
	@ApplicationId UNIQUEIDENTIFIER
AS
BEGIN
	SELECT * FROM Warehouse
	WHERE ApplicationId = @ApplicationId
END
GO
PRINT N'Creating [dbo].[cms_NavigationCommandSelectByPageId]...';


GO

CREATE PROCEDURE [dbo].[cms_NavigationCommandSelectByPageId]
(
	@UrlUID int
)
AS
	SET NOCOUNT ON
	
	SELECT 		[Id],
		[UrlUID],
		[ItemId],
		[Params],
		[TrigerParam] FROM [NavigationCommand]
	WHERE 
		[UrlUID] = @UrlUID
GO
PRINT N'Creating [dbo].[ecf_WarehouseInventory_DeleteInventories]...';


GO


CREATE PROCEDURE [dbo].[ecf_WarehouseInventory_DeleteInventories]
	@ApplicationId UNIQUEIDENTIFIER,
	@CatalogKeys udttCatalogKey READONLY,
	@WarehouseCodes udttWarehouseCode READONLY
AS
BEGIN
    DECLARE
		@filterCatalogKeys BIT = CASE WHEN EXISTS (SELECT 1 FROM @CatalogKeys) THEN 1 ELSE 0 END,
		@filterWarehouseCodes BIT = CASE WHEN EXISTS (SELECT 1 FROM @WarehouseCodes) THEN 1 ELSE 0 END

	BEGIN TRY
    DECLARE @initialTranCount INT = @@TRANCOUNT
    IF @initialTranCount = 0 BEGIN TRANSACTION
    
    DELETE WI
	FROM [WarehouseInventory] AS WI
	JOIN @CatalogKeys ck ON @filterCatalogKeys = 0 OR (WI.ApplicationId = ck.ApplicationId AND WI.CatalogEntryCode = ck.CatalogEntryCode)
	JOIN @WarehouseCodes wCode ON @filterWarehouseCodes = 0 OR WI.WarehouseCode = wCode.WarehouseCode
	WHERE WI.ApplicationId = @ApplicationId
    
    IF @initialTranCount = 0 COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
    DECLARE @msg NVARCHAR(4000), @severity INT, @state INT
    SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE()    
    IF @initialTranCount = 0 ROLLBACK TRANSACTION   
    RAISERROR(@msg, @severity, @state)
	END CATCH
END
GO
PRINT N'Creating [dbo].[cms_NavigationCommandSelectByItemId]...';


GO

CREATE PROCEDURE [dbo].[cms_NavigationCommandSelectByItemId]
(
	@ItemId int
)
AS
	SET NOCOUNT ON
	
	SELECT 		[Id],
		[UrlUID],
		[ItemId],
		[Params],
		[TrigerParam] FROM [NavigationCommand]
	WHERE 
		[ItemId] = @ItemId
GO
PRINT N'Creating [dbo].[ecf_WarehouseInventory_DeleteWarehouseInventories]...';


GO


CREATE PROCEDURE dbo.ecf_WarehouseInventory_DeleteWarehouseInventories
	@ApplicationId UNIQUEIDENTIFIER,
	@WarehouseCode NVARCHAR(50)
AS
BEGIN
	BEGIN TRY
    DECLARE @initialTranCount INT = @@TRANCOUNT
    IF @initialTranCount = 0 BEGIN TRANSACTION
    
    DELETE FROM dbo.WarehouseInventory
    WHERE ApplicationId = @ApplicationId AND WarehouseCode = @WarehouseCode
    
    IF @initialTranCount = 0 COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
    DECLARE @msg NVARCHAR(4000), @severity INT, @state INT
    SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE()    
    IF @initialTranCount = 0 ROLLBACK TRANSACTION   
    RAISERROR(@msg, @severity, @state)
	END CATCH
END
GO
PRINT N'Creating [dbo].[cms_NavigationCommandSelect]...';


GO

CREATE PROCEDURE [dbo].[cms_NavigationCommandSelect]
(
	@Id int
)
AS
	SET NOCOUNT ON
	
	SELECT 		[Id],
		[UrlUID],
		[ItemId],
		[Params],
		[TrigerParam] FROM [NavigationCommand]
	WHERE 
		[Id] = @Id
GO
PRINT N'Creating [dbo].[ecf_WarehouseInventory_DeleteCatalogEntryInventories]...';


GO


CREATE PROCEDURE dbo.ecf_WarehouseInventory_DeleteCatalogEntryInventories
	@CatalogKeys udttCatalogKey READONLY
AS
BEGIN
	BEGIN TRY
    DECLARE @initialTranCount INT = @@TRANCOUNT
    IF @initialTranCount = 0 BEGIN TRANSACTION
    
    DELETE WI
    FROM @CatalogKeys AS ck
    JOIN dbo.WarehouseInventory WI ON ck.ApplicationId = WI.ApplicationId AND ck.CatalogEntryCode = WI.CatalogEntryCode
    
    IF @initialTranCount = 0 COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
    DECLARE @msg NVARCHAR(4000), @severity INT, @state INT
    SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE()    
    IF @initialTranCount = 0 ROLLBACK TRANSACTION   
    RAISERROR(@msg, @severity, @state)
	END CATCH
END
GO
PRINT N'Creating [dbo].[cms_NavigationCommandInsert]...';


GO

CREATE PROCEDURE [dbo].[cms_NavigationCommandInsert]
(
	@UrlUID nvarchar(256),
	@ItemId int = NULL,
	@Params nvarchar(1024) = NULL,
	@TrigerParam nvarchar(256) = NULL,
	@retval INT OUTPUT
)
AS
	SET NOCOUNT ON

	INSERT INTO [NavigationCommand]
	(
		[UrlUID],
		[ItemId],
		[Params],
		[TrigerParam]
	)
	VALUES
	(
		@UrlUID,
		@ItemId,
		@Params,
		@TrigerParam
	)

	SELECT @retval = SCOPE_IDENTITY();

	RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_WarehouseInventory_DeleteInventory]...';


GO


CREATE PROCEDURE dbo.ecf_WarehouseInventory_DeleteInventory
	@CatalogKeys udttCatalogKey READONLY,
	@WarehouseCode NVARCHAR(50)
AS
BEGIN
	BEGIN TRY
    DECLARE @initialTranCount INT = @@TRANCOUNT
    IF @initialTranCount = 0 BEGIN TRANSACTION
    
    DELETE WI
    FROM @CatalogKeys AS ck
    JOIN dbo.WarehouseInventory WI ON ck.ApplicationId = WI.ApplicationId AND ck.CatalogEntryCode = WI.CatalogEntryCode
    WHERE WI.WarehouseCode = @WarehouseCode
    
    IF @initialTranCount = 0 COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
    DECLARE @msg NVARCHAR(4000), @severity INT, @state INT
    SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE()    
    IF @initialTranCount = 0 ROLLBACK TRANSACTION   
    RAISERROR(@msg, @severity, @state)
	END CATCH
END
GO
PRINT N'Creating [dbo].[cms_NavigationCommandDelete]...';


GO

create PROCEDURE [dbo].[cms_NavigationCommandDelete]
(
	@Id int
)
AS
	SET NOCOUNT ON

	DELETE 
	FROM   [NavigationCommand]
	WHERE  
		[Id] = @Id

	RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_WarehouseInventory_DeleteAllInventory]...';


GO


CREATE PROCEDURE dbo.ecf_WarehouseInventory_DeleteAllInventory
	@ApplicationId UNIQUEIDENTIFIER
AS
BEGIN
	BEGIN TRY
    DECLARE @initialTranCount INT = @@TRANCOUNT
    IF @initialTranCount = 0 BEGIN TRANSACTION
    
    DELETE FROM WarehouseInventory
    WHERE ApplicationId = @ApplicationId
    
    IF @initialTranCount = 0 COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
    DECLARE @msg NVARCHAR(4000), @severity INT, @state INT
    SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE()    
    IF @initialTranCount = 0 ROLLBACK TRANSACTION   
    RAISERROR(@msg, @severity, @state)
	END CATCH
END
GO
PRINT N'Creating [dbo].[cms_NavigationCommandAll]...';


GO
CREATE PROCEDURE [cms_NavigationCommandAll]
	@ApplicationId uniqueidentifier
AS
	SELECT NC.[Id], NC.[UrlUID], NC.[ItemId], NC.[Params], NC.[TrigerParam] FROM [NavigationCommand] NC
	INNER JOIN [NavigationItems] NI ON NC.[ItemId]=NI.[ItemId]	
	WHERE NI.[ApplicationId] = @ApplicationId
GO
PRINT N'Creating [dbo].[ecf_WarehouseInventory_SaveInventories]...';


GO


CREATE PROCEDURE dbo.ecf_WarehouseInventory_SaveInventories
	@Inventories udttWarehouseInventory READONLY
AS
BEGIN
	BEGIN TRY
    DECLARE @initialTranCount INT = @@TRANCOUNT
    IF @initialTranCount = 0 BEGIN TRANSACTION
    
    DELETE WI
	FROM WarehouseInventory AS WI
	JOIN @Inventories arg ON 
			arg.ApplicationId = WI.ApplicationId 
		AND arg.CatalogEntryCode = WI.CatalogEntryCode 
		AND arg.WarehouseCode = WI.WarehouseCode

	INSERT INTO dbo.WarehouseInventory 
	(WarehouseCode, CatalogEntryCode, InStockQuantity, ReservedQuantity, 
	 ReorderMinQuantity, PreorderQuantity, BackorderQuantity, AllowPreorder, 
	 AllowBackorder, InventoryStatus, PreorderAvailabilityDate, BackorderAvailabilityDate, ApplicationId)
	SELECT arg.WarehouseCode, arg.CatalogEntryCode, arg.InStockQuantity, arg.ReservedQuantity, 
	 arg.ReorderMinQuantity, arg.PreorderQuantity, arg.BackorderQuantity, arg.AllowPreorder, 
	 arg.AllowBackorder, arg.InventoryStatus, arg.PreorderAvailabilityDate, arg.BackorderAvailabilityDate, arg.ApplicationId
	FROM @Inventories AS arg
    
    IF @initialTranCount = 0 COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
    DECLARE @msg NVARCHAR(4000), @severity INT, @state INT
    SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE()    
    IF @initialTranCount = 0 ROLLBACK TRANSACTION   
    RAISERROR(@msg, @severity, @state)
	END CATCH
END
GO
PRINT N'Creating [dbo].[cms_menu_MenuUpdate]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[cms_menu_MenuUpdate]
	@MenuId int,
	@FriendlyName nvarchar(250)
 AS
UPDATE dbo.main_Menu
	SET [FriendlyName] = @FriendlyName
	WHERE [MenuId] = @MenuId
UPDATE dbo.main_MenuItem 
	SET [Text] = @FriendlyName
	WHERE [MenuId] = @MenuId AND [IsRoot] = 1
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_WarehouseInventory_GetCatalogEntryInventories]...';


GO


CREATE PROCEDURE dbo.ecf_WarehouseInventory_GetCatalogEntryInventories
	@CatalogKeys udttCatalogKey READONLY
AS
BEGIN
	SELECT WI.WarehouseCode,
		WI.CatalogEntryCode,
		WI.InStockQuantity,
		WI.ReservedQuantity,
		WI.ReorderMinQuantity,
		WI.PreorderQuantity,
		WI.BackorderQuantity,
		WI.AllowPreorder,
		WI.AllowBackorder,
		WI.InventoryStatus,
		WI.PreorderAvailabilityDate,
		WI.BackorderAvailabilityDate,
		WI.ApplicationId
	FROM @CatalogKeys AS ck
	JOIN [WarehouseInventory] AS WI ON ck.ApplicationId = WI.ApplicationId AND ck.CatalogEntryCode = WI.CatalogEntryCode
	JOIN [Warehouse] AS W ON WI.WarehouseCode = W.Code AND W.ApplicationId = WI.ApplicationId
	ORDER BY W.SortOrder
END
GO
PRINT N'Creating [dbo].[cms_menu_MenuItemGetAllRoot]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[cms_menu_MenuItemGetAllRoot]
	@SiteId uniqueidentifier
 AS
SELECT I.[MenuItemId], I.[Text], I.[CommandText], I.[CommandType], I.[Outline], I.[OutlineLevel], I.[IsRoot], I.[IsVisible], I.[MenuId], I.[LeftImageUrl], I.[RightImageUrl], I.[IsInherits], I.[Order], M.[SiteId]
	FROM dbo.main_MenuItem I
	INNER JOIN main_Menu M ON M.MenuId = I.MenuId
	where M.SiteId = @SiteId AND [IsRoot] = 1
	ORDER BY [Order]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_WarehouseInventory_GetWarehouseInventories]...';


GO


CREATE PROCEDURE dbo.ecf_WarehouseInventory_GetWarehouseInventories
	@ApplicationId UNIQUEIDENTIFIER,
	@WarehouseCode NVARCHAR(50)
AS
BEGIN
	SELECT WI.WarehouseCode,
		WI.CatalogEntryCode,
		WI.InStockQuantity,
		WI.ReservedQuantity,
		WI.ReorderMinQuantity,
		WI.PreorderQuantity,
		WI.BackorderQuantity,
		WI.AllowPreorder,
		WI.AllowBackorder,
		WI.InventoryStatus,
		WI.PreorderAvailabilityDate,
		WI.BackorderAvailabilityDate,
		WI.ApplicationId
	FROM [WarehouseInventory] AS WI
	JOIN [Warehouse] AS W ON WI.WarehouseCode = W.Code
	WHERE WI.ApplicationId = @ApplicationId
	AND WI.WarehouseCode = @WarehouseCode
	ORDER BY W.SortOrder
	
END
GO
PRINT N'Creating [dbo].[cms_menu_MenuGetByName]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[cms_menu_MenuGetByName]
	@FriendlyName nvarchar(250),
	@SiteId uniqueidentifier
 AS
SELECT [MenuId],[FriendlyName]
	FROM dbo.main_Menu
	WHERE ([FriendlyName] = @FriendlyName) AND ([SiteId] = @SiteId)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_WarehouseInventory_GetInventories]...';


GO


CREATE PROCEDURE [dbo].[ecf_WarehouseInventory_GetInventories]
	@ApplicationId UNIQUEIDENTIFIER,
	@CatalogKeys udttCatalogKey READONLY,
	@WarehouseCodes udttWarehouseCode READONLY
AS
BEGIN

    DECLARE
		@filterCatalogKeys BIT = CASE WHEN EXISTS (SELECT 1 FROM @CatalogKeys) THEN 1 ELSE 0 END,
		@filterWarehouseCodes BIT = CASE WHEN EXISTS (SELECT 1 FROM @WarehouseCodes) THEN 1 ELSE 0 END

	SELECT 
		WI.WarehouseCode,
		WI.CatalogEntryCode,
		WI.InStockQuantity,
		WI.ReservedQuantity,
		WI.ReorderMinQuantity,
		WI.PreorderQuantity,
		WI.BackorderQuantity,
		WI.AllowPreorder,
		WI.AllowBackorder,
		WI.InventoryStatus,
		WI.PreorderAvailabilityDate,
		WI.BackorderAvailabilityDate,
		WI.ApplicationId
	FROM [WarehouseInventory] AS WI
	JOIN [Warehouse] AS W ON WI.ApplicationId = W.ApplicationId 
							AND	WI.WarehouseCode = W.Code
        LEFT JOIN @WarehouseCodes as WC ON WI.WarehouseCode = WC.WarehouseCode
		LEFT JOIN @CatalogKeys as CK ON WI.CatalogEntryCode = CK.CatalogEntryCode
										AND	WI.ApplicationId = CK.ApplicationId 
	WHERE WI.ApplicationId = @ApplicationId
	AND (@filterWarehouseCodes = 0 OR WC.WarehouseCode is not NULL)
	AND (@filterCatalogKeys = 0 OR CK.CatalogEntryCode is not NULL)
	ORDER BY W.SortOrder, WI.CatalogEntryCode
END
GO
PRINT N'Creating [dbo].[cms_menu_MenuGetById]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[cms_menu_MenuGetById]
	@MenuId int
AS
SELECT [MenuId],[FriendlyName]
	FROM dbo.main_Menu
	WHERE ([MenuId] = @MenuId)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[main_PageVersionUpdate]...';


GO
CREATE PROCEDURE [dbo].[main_PageVersionUpdate] 
	@VersionId INT,
	@TemplateId INT,
	@LangId INT,
	@OldStatusId INT,
	@NewStatusId INT,
	@EditorUID UNIQUEIDENTIFIER,
	@StateId INT,
	@Comment NVARCHAR(1024),
	@retval INT OUTPUT
AS
BEGIN
	DECLARE @PageId INT
	DECLARE @VersionNum INT
	DECLARE @Created DATETIME
	DECLARE @CreatorUID uniqueidentifier

	SELECT @PageId = [PageId], @VersionNum = [VersionNum], @Created = [Created], @CreatorUID = [CreatorUID]
		FROM [dbo].[main_PageVersion]
	WHERE [VersionId] = @VersionId

	-- update old page status
	UPDATE [dbo].[main_PageVersion] SET
		[VersionNum] = @VersionNum + 1,
		[TemplateId] = @TemplateId,
		[StatusId] = @NewStatusId,
		[LangId] = @LangId,
		[Edited] = GETUTCDATE(),
		[EditorUID] = @EditorUID,
		[StateId] = @StateId,
		[Comment] = @Comment
	WHERE [VersionId] = @VersionId
END
GO
PRINT N'Creating [dbo].[ecf_WarehouseInventory_GetInventory]...';


GO


CREATE PROCEDURE dbo.ecf_WarehouseInventory_GetInventory
	@CatalogKeys udttCatalogKey READONLY,
	@WarehouseCode NVARCHAR(50)
AS
BEGIN
	SELECT WI.WarehouseCode,
		WI.CatalogEntryCode,
		WI.InStockQuantity,
		WI.ReservedQuantity,
		WI.ReorderMinQuantity,
		WI.PreorderQuantity,
		WI.BackorderQuantity,
		WI.AllowPreorder,
		WI.AllowBackorder,
		WI.InventoryStatus,
		WI.PreorderAvailabilityDate,
		WI.BackorderAvailabilityDate,
		WI.ApplicationId
	FROM @CatalogKeys AS ck
	JOIN [WarehouseInventory] AS WI ON ck.ApplicationId = WI.ApplicationId AND ck.CatalogEntryCode = WI.CatalogEntryCode
	JOIN [Warehouse] AS W ON WI.WarehouseCode = W.Code
	WHERE WI.WarehouseCode = @WarehouseCode
	ORDER BY W.SortOrder
END
GO
PRINT N'Creating [dbo].[cms_menu_MenuDelete]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[cms_menu_MenuDelete]
	@MenuId int
 AS
DELETE FROM dbo.main_Menu
	WHERE [MenuId] = @MenuId
DELETE FROM dbo.main_MenuItem
	WHERE [MenuId] = @MenuId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[main_PageVersionGetByUserId]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_PageVersionGetByUserId] 
	@UserId uniqueidentifier

AS
 BEGIN
	SELECT [VersionId], [TemplateId], [VersionNum], [LangId],pv.[StatusId], [Created], [CreatorUID], [Edited], [EditorUID], [StateId], [Comment]
	FROM [dbo].[main_PageVersion] pv
	INNER JOIN WorkflowStatusAccess wsa ON pv.StatusId = wsa.StatusId
	INNER JOIN aspnet_Roles r ON wsa.RoleId = r.RoleName
	INNER JOIN aspnet_UsersInRoles uin ON r.RoleId = uin.RoleId
	INNER JOIN aspnet_Users u ON u.UserId = uin.UserId
	WHERE u.UserId = @UserId
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_WarehouseInventory_GetAllInventories]...';


GO


CREATE PROCEDURE dbo.ecf_WarehouseInventory_GetAllInventories
	@ApplicationId UNIQUEIDENTIFIER
AS
BEGIN
	SELECT WI.WarehouseCode,
		WI.CatalogEntryCode,
		WI.InStockQuantity,
		WI.ReservedQuantity,
		WI.ReorderMinQuantity,
		WI.PreorderQuantity,
		WI.BackorderQuantity,
		WI.AllowPreorder,
		WI.AllowBackorder,
		WI.InventoryStatus,
		WI.PreorderAvailabilityDate,
		WI.BackorderAvailabilityDate,
		WI.ApplicationId
	FROM [WarehouseInventory] AS WI
	JOIN [Warehouse] AS W ON WI.WarehouseCode = W.Code
	WHERE WI.ApplicationId = @ApplicationId
	ORDER BY W.SortOrder
	
END
GO
PRINT N'Creating [dbo].[cms_menu_MenuAdd]...';


GO
CREATE PROCEDURE [dbo].[cms_menu_MenuAdd]
	@FriendlyName nvarchar(250),
	@SiteId uniqueidentifier,
	@retval int output
 AS
	INSERT INTO [main_Menu]
		([FriendlyName], [SiteId]) VALUES (@FriendlyName, @SiteId)
	SET @retval = SCOPE_IDENTITY()
	--add new virtual root to main_MenuItem
	INSERT INTO [main_MenuItem]
		([MenuId], [CommandType], [Text], [Order], [Outline], [OutlineLevel], [IsRoot], [IsVisible], [IsInherits])
	VALUES 
		(@retval, 0, @FriendlyName, 0, '.', 0, 1, 0, 0)
GO
PRINT N'Creating [dbo].[main_PageVersionGetByStatusId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[main_PageVersionGetByStatusId] 
	@PageId INT,
	@StatusId INT
AS
 BEGIN
	SELECT [VersionId], [TemplateId], [VersionNum], [LangId], [StatusId], [Created], [CreatorUID], [Edited], [EditorUID], [StateId], [Comment]
	FROM [dbo].[main_PageVersion]
	WHERE [PageId] = @PageId and [StatusId] = @StatusId
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[cms_menu_LoadBySiteId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[cms_menu_LoadBySiteId]
	@SiteId uniqueidentifier
 AS

SELECT M.* FROM main_Menu M WHERE M.[SiteId] = @SiteId

SELECT I.* FROM main_MenuItem I INNER JOIN main_Menu M ON M.MenuId = I.MenuId WHERE M.[SiteId] = @SiteId

SELECT R.* FROM main_MenuItem_Resources R INNER JOIN main_MenuItem I ON R.MenuItemId = I.MenuItemId INNER JOIN main_Menu M ON M.MenuId = I.MenuId WHERE M.[SiteId] = @SiteId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[main_PageVersionGetByStateId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[main_PageVersionGetByStateId] 
	@PageId INT,
	@StateId INT
AS
 BEGIN
	SELECT [VersionId], [TemplateId], [VersionNum], [LangId], [StatusId], [Created], [CreatorUID], [Edited], [EditorUID], [StateId], [Comment]
	FROM [dbo].[main_PageVersion]
	WHERE [PageId] = @PageId and [StateId] = @StateId
	ORDER BY StatusId DESC
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[cms_menu_LoadByMenuItemId]...';


GO
CREATE PROCEDURE [dbo].[cms_menu_LoadByMenuItemId]
	@MenuItemId int
AS
SELECT M.* FROM main_Menu M 
INNER JOIN main_MenuItem I ON M.[MenuId]=I.[MenuId]
WHERE I.[MenuItemId] = @MenuItemId

SELECT I.* FROM main_MenuItem I WHERE I.[MenuItemId] = @MenuItemId

SELECT R.* FROM main_MenuItem_Resources R 
INNER JOIN main_MenuItem I ON R.MenuItemId = I.MenuItemId 
WHERE I.[MenuItemId] = @MenuItemId
GO
PRINT N'Creating [dbo].[main_PageVersionGetByPageId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[main_PageVersionGetByPageId] 
	@PageId INT	
AS
 BEGIN
	SELECT [VersionId], [TemplateId], [VersionNum], [LangId], [StatusId], [Created], [CreatorUID], [Edited], [EditorUID], [StateId], [Comment]
	FROM [dbo].[main_PageVersion]
	WHERE [PageId] = @PageId
	ORDER BY StatusId DESC
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Currency_Modify]...';


GO

create procedure dbo.ecf_Currency_Modify
    @Currency udttCompatCurrency readonly,
    @CurrencyRate udttCompatCurrencyRate readonly
as
begin
    begin try
        declare @initialTranCount int = @@TRANCOUNT
        if @initialTranCount = 0 begin transaction
        
        declare @identitymap table (Placeholder int, Actual int)

        delete from CurrencyRate
        where CurrencyRateId in (select CurrencyRateId from @CurrencyRate where Operation = 'D')

        delete from Currency
        where CompatCurrencyId in (select CurrencyId from @Currency where Operation = 'D')

        update tgt
        set
            Modified = isnull(src.ModifiedDate, GETUTCDATE()),
            CurrencyName = src.Name,
            CompatApplicationId = src.ApplicationId
        from @Currency src
        join Currency tgt on src.CurrencyId = tgt.CompatCurrencyId
        where src.Operation = 'U'

        insert into Currency (CurrencyCode, Created, Modified, CurrencyName, CompatApplicationId)
        select CurrencyCode, isnull(ModifiedDate, GETUTCDATE()), isnull(ModifiedDate, GETUTCDATE()), Name, ApplicationId
        from @Currency
        where Operation = 'I'

        if (@@rowcount > 0)
        begin
            insert into @identitymap (Placeholder, Actual)
            select src.CurrencyId, tgt.CompatCurrencyId
            from @Currency src
            join Currency tgt on src.CurrencyCode = tgt.CurrencyCode
            where Operation = 'I'
        end

        update tgt
        set
            AverageRate = src.AverageRate,
            EndOfDayRate = src.EndOfDayRate,
            ModifiedDate = isnull(src.ModifiedDate, GETUTCDATE()),
            FromCurrencyId = isnull(fromId.Actual, src.FromCurrencyId),
            ToCurrencyId = isnull(toId.Actual, src.ToCurrencyId),
            CurrencyRateDate = src.CurrencyRateDate
        from @CurrencyRate src
        left outer join @identitymap fromId on src.FromCurrencyId = fromId.Placeholder
        left outer join @identitymap toId on src.ToCurrencyId = toId.Placeholder
        join CurrencyRate tgt on src.CurrencyRateId = tgt.CurrencyRateId
        where src.Operation = 'U'

        insert into CurrencyRate (AverageRate, EndOfDayRate, ModifiedDate, FromCurrencyId, ToCurrencyId, CurrencyRateDate)
        select
            src.AverageRate,
            src.EndOfDayRate, 
            isnull(src.ModifiedDate, GETUTCDATE()),
            isnull(fromId.Actual, src.FromCurrencyId), 
            isnull(toId.Actual, src.ToCurrencyId), 
            src.CurrencyRateDate
        from @CurrencyRate src
        left outer join @identitymap fromId on src.FromCurrencyId = fromId.Placeholder
        left outer join @identitymap toId on src.ToCurrencyId = toId.Placeholder
        where src.Operation = 'I'

        if @initialTranCount = 0 commit transaction
    end try
    begin catch
        declare @msg nvarchar(4000), @severity int, @state int
        select @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE()
        if @initialTranCount = 0 rollback transaction
        raiserror(@msg, @severity, @state)
    end catch
end
GO
PRINT N'Creating [dbo].[cms_menu_LoadById]...';


GO
CREATE PROCEDURE [dbo].[cms_menu_LoadById]
	@MenuId int
 AS
SELECT M.* FROM main_Menu M WHERE M.[MenuId] = @MenuId

SELECT I.* FROM main_MenuItem I INNER JOIN main_Menu M ON M.MenuId = I.MenuId WHERE M.[MenuId] = @MenuId

SELECT R.* FROM main_MenuItem_Resources R INNER JOIN main_MenuItem I ON R.MenuItemId = I.MenuItemId INNER JOIN main_Menu M ON M.MenuId = I.MenuId WHERE M.[MenuId] = @MenuId
GO
PRINT N'Creating [dbo].[main_PageVersionGetByLangIdAndStatusId]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_PageVersionGetByLangIdAndStatusId]
	@PageId INT,
	@LangId INT,
	@StatusId INT
AS
 BEGIN
	SELECT [VersionId], [TemplateId], [VersionNum], [LangId], [StatusId], [Created], [CreatorUID], [Edited], [EditorUID], [StateId], [Comment]
	FROM [dbo].[main_PageVersion]
	WHERE ([PageId] = @PageId) and ([LangId] = @LangId)  and ([StatusId] = @StatusId)
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Currency_CurrencyId]...';


GO

create procedure dbo.ecf_Currency_CurrencyId
    @ApplicationId uniqueidentifier,
    @CurrencyId int
as
begin
    select
        CompatCurrencyId as CurrencyId,
        CurrencyCode,
        CurrencyName as Name,
        Modified as ModifiedDate,
        CompatApplicationId as ApplicationId
    from dbo.Currency
    where CompatApplicationId = @ApplicationId
      and CompatCurrencyId = @CurrencyId

    select
        cr.CurrencyRateId,
        cr.AverageRate,
        cr.EndOfDayRate,
        cr.ModifiedDate,
        cr.FromCurrencyId,
        cr.ToCurrencyId,
        cr.CurrencyRateDate
    from dbo.CurrencyRate cr        
    where (FromCurrencyId = @CurrencyId or ToCurrencyId = @CurrencyId)
      and exists (select 1 from dbo.Currency c where c.CompatCurrencyId = @CurrencyId and c.CompatApplicationId = @ApplicationId)
end
GO
PRINT N'Creating [dbo].[cms_LanguageInfoLoadAll]...';


GO
CREATE PROCEDURE [dbo].[cms_LanguageInfoLoadAll]
	@ApplicationId uniqueidentifier	
 AS
SELECT [LangId],[LangName], [FriendlyName], [IsDefault], ApplicationId
	FROM dbo.main_LanguageInfo
	where ApplicationId = @ApplicationId
GO
PRINT N'Creating [dbo].[main_PageVersionGetByLangId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[main_PageVersionGetByLangId]
	@PageId INT,
	@LangId INT
AS
 BEGIN
	SELECT [VersionId], [TemplateId], [VersionNum], [LangId], [StatusId], [Created], [CreatorUID], [Edited], [EditorUID], [StateId], [Comment]
	FROM [dbo].[main_PageVersion]
	WHERE ([PageId] = @PageId) and ([LangId] = @LangId)
	ORDER BY StatusId DESC
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Currency_Code]...';


GO

create procedure dbo.ecf_Currency_Code
    @ApplicationId uniqueidentifier,
    @CurrencyCode nvarchar(8)
as
begin
    select
        CompatCurrencyId as CurrencyId,
        CurrencyCode,
        CurrencyName as Name,
        Modified as ModifiedDate,
        CompatApplicationId as ApplicationId
    from dbo.Currency
    where CompatApplicationId = @ApplicationId
      and CurrencyCode = @CurrencyCode

    select
        cr.CurrencyRateId,
        cr.AverageRate,
        cr.EndOfDayRate,
        cr.ModifiedDate,
        cr.FromCurrencyId,
        cr.ToCurrencyId,
        cr.CurrencyRateDate
    from dbo.CurrencyRate cr    
    where exists (select 1 from dbo.Currency c where c.CompatCurrencyId = cr.FromCurrencyId and c.CompatApplicationId = @ApplicationId and c.CurrencyCode = @CurrencyCode)
       or exists (select 1 from dbo.Currency c where c.CompatCurrencyId = cr.ToCurrencyId and c.CompatApplicationId = @ApplicationId and c.CurrencyCode = @CurrencyCode)
end
GO
PRINT N'Creating [dbo].[cms_LanguageInfo_Update]...';


GO
CREATE PROCEDURE [dbo].[cms_LanguageInfo_Update] 
	@LangId as int,
	@LangName as varchar(50),
	@FriendlyName as varchar(50),
	@IsDefault as bit,
	@ApplicationId uniqueidentifier
AS
UPDATE dbo.main_LanguageInfo
	SET LangName = @LangName, FriendlyName = @FriendlyName, IsDefault = @IsDefault, ApplicationId = @ApplicationId
	WHERE LangId = @LangId
GO
PRINT N'Creating [dbo].[main_PageVersionGetById]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[main_PageVersionGetById] 
	@VersionId INT
AS
 BEGIN
	SELECT [PageId], [TemplateId], [VersionNum], [LangId], [StatusId], [Created], [CreatorUID],[Edited], [EditorUID], [StateId], [Comment]
	FROM [dbo].[main_PageVersion]
	WHERE [VersionId] = @VersionId
	ORDER BY StatusId DESC
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Currency]...';


GO

create procedure dbo.ecf_Currency
    @ApplicationId uniqueidentifier
as
begin
    select
        CompatCurrencyId as CurrencyId,
        CurrencyCode,
        CurrencyName as Name,
        Modified as ModifiedDate,
        CompatApplicationId as ApplicationId
    from Currency
    where CompatApplicationId = @ApplicationId
    
    select
        cr.CurrencyRateId,
        cr.AverageRate,
        cr.EndOfDayRate,
        cr.ModifiedDate,
        cr.FromCurrencyId,
        cr.ToCurrencyId,
        cr.CurrencyRateDate
    from CurrencyRate cr
    where exists (select 1 from Currency c where c.CompatCurrencyId = cr.FromCurrencyId and c.CompatApplicationId = @ApplicationId)
      and exists (select 1 from Currency c where c.CompatCurrencyId = cr.ToCurrencyId and c.CompatApplicationId = @ApplicationId)
end
GO
PRINT N'Creating [dbo].[cms_LanguageInfo_LoadById]...';


GO
CREATE PROCEDURE [dbo].[cms_LanguageInfo_LoadById] 
	@LangId int
AS
 BEGIN
	SELECT [LangId] as LangId, [LangName] as LangName, [FriendlyName] as FriendlyName, [IsDefault] as IsDefault, ApplicationId
		FROM dbo.main_LanguageInfo
		WHERE @LangId = LangId
 END
GO
PRINT N'Creating [dbo].[main_PageVersionDelete]...';


GO
CREATE PROCEDURE [dbo].[main_PageVersionDelete] 
	@PageVersionId int
AS
 BEGIN
	DELETE FROM [main_PageVersion] WHERE [VersionId] = @PageVersionId
 END
GO
PRINT N'Creating [dbo].[ecf_PriceDetail_ReplacePrices]...';


GO


create procedure [dbo].[ecf_PriceDetail_ReplacePrices]
    @CatalogKeys udttCatalogKey readonly,
    @PriceValues udttCatalogEntryPrice readonly
as
begin
    begin try
        declare @initialTranCount int = @@TRANCOUNT
        if @initialTranCount = 0 begin transaction
    
        delete from PriceDetail
        where exists (select 1 from @CatalogKeys ck where ck.ApplicationId = PriceDetail.ApplicationId and ck.CatalogEntryCode = PriceDetail.CatalogEntryCode)
     
        insert into PriceDetail (Created, Modified, ApplicationId, CatalogEntryCode, MarketId, CurrencyCode, PriceTypeId, PriceCode, ValidFrom, ValidUntil, MinQuantity, UnitPrice)
        select GETUTCDATE(), GETUTCDATE(), ApplicationId, CatalogEntryCode, MarketId, CurrencyCode, PriceTypeId, PriceCode, ValidFrom, ValidUntil, MinQuantity, UnitPrice
        from @PriceValues
                
        if @initialTranCount = 0 commit transaction
    end try
    begin catch
        declare @msg nvarchar(4000), @severity int, @state int
        select @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE()
        if @initialTranCount = 0 rollback transaction
        raiserror(@msg, @severity, @state)
    end catch
end
GO
PRINT N'Creating [dbo].[cms_LanguageInfo_GetByLangName]...';


GO
CREATE PROCEDURE [dbo].[cms_LanguageInfo_GetByLangName] 
	@langName varchar(50),
	@ApplicationId uniqueidentifier
AS
 BEGIN
	SELECT [LangId], [LangName], [FriendlyName], [IsDefault], ApplicationId
	FROM main_LanguageInfo
	WHERE LangName = @langName and ApplicationId = @ApplicationId
 END
GO
PRINT N'Creating [dbo].[main_PageVersionAddDraft]...';


GO
CREATE PROCEDURE [dbo].[main_PageVersionAddDraft] 
	@PageId int,
	@TemplateId int,
	@LangId int,
	@CreatorUID uniqueidentifier,
	@retval int output
AS
 BEGIN
	INSERT INTO [dbo].[main_PageVersion]
	([PageId], [TemplateId], [VersionNum], [LangId], [StatusId], [Created], [CreatorUID], [Edited], [EditorUID], [StateId], [Comment]) VALUES
	(@PageId, @TemplateId, 0, @LangId, -1, GETUTCDATE(), @CreatorUID, GETUTCDATE(), @CreatorUID, 1, N'')
	set @retval = SCOPE_IDENTITY()
 END
GO
PRINT N'Creating [dbo].[ecf_PriceDetail_Save]...';


GO


create procedure [dbo].[ecf_PriceDetail_Save]
    @priceValues udttPriceDetail readonly
as
begin
    begin try
        declare @initialTranCount int = @@TRANCOUNT
        if @initialTranCount = 0 begin transaction

        declare @results table (PriceValueId bigint)
        declare @affectedEntries table (ApplicationId uniqueidentifier, CatalogEntryCode nvarchar(100))

        insert into @affectedEntries (ApplicationId, CatalogEntryCode)
        select distinct ApplicationId, CatalogEntryCode
        from dbo.PriceDetail
        where PriceValueId in (select PriceValueId from @priceValues where ApplicationId is null)

        delete from dbo.PriceDetail
        where PriceValueId in (select PriceValueId from @priceValues where ApplicationId is null)
                
        insert into @results (PriceValueId)
        select dst.PriceValueId
        from dbo.PriceDetail dst
        join @priceValues src on dst.PriceValueId = src.PriceValueId
        where src.PriceValueId > 0

        ;with update_effects as (
            select 
                dst.ApplicationId as ApplicationIdBefore, 
                dst.CatalogEntryCode as CatalogEntryCodeBefore,
                src.ApplicationId as ApplicationIdAfter,
                src.CatalogEntryCode as CatalogEntryCodeAfter
            from dbo.PriceDetail dst
            join @priceValues src on dst.PriceValueId = src.PriceValueId
        )
        insert into @affectedEntries (ApplicationId, CatalogEntryCode)
        select ApplicationIdBefore, CatalogEntryCodeBefore from update_effects
        union
        select ApplicationIdAfter, CatalogEntryCodeAfter from update_effects

        update dst
        set
            Modified = GETUTCDATE(),
            ApplicationId = src.ApplicationId, 
            CatalogEntryCode = src.CatalogEntryCode,
            MarketId = src.MarketId,
            CurrencyCode = src.CurrencyCode,
            PriceTypeId = src.PriceTypeId,
            PriceCode = src.PriceCode,
            ValidFrom = src.ValidFrom,
            ValidUntil = src.ValidUntil,
            MinQuantity = src.MinQuantity,
            UnitPrice = src.UnitPrice
        from dbo.PriceDetail dst
        join @priceValues src on dst.PriceValueId = src.PriceValueId
        where src.PriceValueId > 0

        declare @applicationId uniqueidentifier
        declare @catalogEntryCode nvarchar(100)
        declare @marketId nvarchar(8)
        declare @currencyCode nvarchar(8)
        declare @priceTypeId int
        declare @priceCode nvarchar(256)
        declare @validFrom datetime
        declare @validUntil datetime
        declare @minQuantity decimal(38,9)
        declare @unitPrice money
        declare inserted_prices cursor local for
            select ApplicationId, CatalogEntryCode, MarketId, CurrencyCode, PriceTypeId, PriceCode, ValidFrom, ValidUntil, MinQuantity, UnitPrice
            from @priceValues
            where PriceValueId <= 0
        open inserted_prices
        while 1=1
        begin
            fetch next from inserted_prices into @applicationId, @catalogEntryCode, @marketId, @currencyCode, @priceTypeId, @priceCode, @validFrom, @validUntil, @minQuantity, @unitPrice
            if @@FETCH_STATUS != 0 break

            insert into dbo.PriceDetail (Created, Modified, ApplicationId, CatalogEntryCode, MarketId, CurrencyCode, PriceTypeId, PriceCode, ValidFrom, ValidUntil, MinQuantity, UnitPrice)
            values (GETUTCDATE(), GETUTCDATE(), @applicationId, @catalogEntryCode, @marketId, @currencyCode, @priceTypeId, @priceCode, @validFrom, @validUntil, @minQuantity, @unitPrice)

            insert into @results (PriceValueId) 
            values (SCOPE_IDENTITY())

            insert into @affectedEntries (ApplicationId, CatalogEntryCode)
            values (@applicationId, @catalogEntryCode)
        end
        close inserted_prices

        select 
            PriceValueId,
            Created,
            Modified,
            ApplicationId,
            CatalogEntryCode,
            MarketId,
            CurrencyCode,
            PriceTypeId,
            PriceCode,
            ValidFrom,
            ValidUntil,
            MinQuantity,
            UnitPrice
        from PriceDetail
        where PriceValueId in (select PriceValueId from @results)

        select
            pd.PriceValueId,
            pd.Created,
            pd.Modified,
            ae.ApplicationId,
            ae.CatalogEntryCode,
            pd.MarketId,
            pd.CurrencyCode,
            pd.PriceTypeId,
            pd.PriceCode,
            pd.ValidFrom,
            pd.ValidUntil,
            pd.MinQuantity,
            pd.UnitPrice
        from (select distinct ApplicationId, CatalogEntryCode from @affectedEntries) ae
        left outer join PriceDetail pd on ae.ApplicationId = pd.ApplicationId and ae.CatalogEntryCode = pd.CatalogEntryCode

        if @initialTranCount = 0 commit transaction
    end try
    begin catch
        declare @msg nvarchar(4000), @severity int, @state int
        select @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE()
        if @initialTranCount = 0 rollback transaction
        raiserror(@msg, @severity, @state)
    end catch
end
GO
PRINT N'Creating [dbo].[cms_LanguageInfo_Delete]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO

create PROCEDURE [dbo].[cms_LanguageInfo_Delete]
	@LangId int
 AS
DELETE FROM dbo.main_LanguageInfo
	WHERE [LangId] = @LangId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[main_PageVersionAdd2]...';


GO
CREATE PROCEDURE [dbo].[main_PageVersionAdd2] 
	@ApplicationId uniqueidentifier,
	@PageId int,
	@TemplateId int,
	@VersionNum int,
	@LangId int,
	@StatusId int,
	@Created datetime,
	@CreatorUID uniqueidentifier,
	@Edited datetime,
	@EditorUID uniqueidentifier,
	@StateId int,
	@Comment nvarchar(1024),
	@retval int output
AS
 BEGIN
	declare @statusToInsert int

	set @statusToInsert = @StatusId

	DECLARE @WorkFlowId INT
	SELECT @WorkFlowId = [WorkflowId] FROM [Workflow] WHERE ApplicationId = @ApplicationId AND IsDefault = 1

	if(not exists(select null from [WorkflowStatus] where [StatusId]=@StatusId and [WorkflowId]=@WorkflowId)) 
	begin
		-- if status doesn't exist, insert status with weight 0
		SELECT @statusToInsert = [Weight] FROM [WorkflowStatus] WHERE ([Weight] = 0) AND ([WorkflowId] = @WorkFlowId)
	end
	
	INSERT INTO [dbo].[main_PageVersion]
	([PageId], [TemplateId], [VersionNum], [LangId], [StatusId], [Created], [CreatorUID], [Edited], [EditorUID], [StateId], [Comment]) VALUES
	(@PageId, @TemplateId, @VersionNum, @LangId, @statusToInsert, @Created, @CreatorUID, @Edited, @EditorUID, @StateId, @Comment)
	set @retval = SCOPE_IDENTITY()
 END
GO
PRINT N'Creating [dbo].[ecf_PriceDetail_List]...';


GO


create procedure [dbo].[ecf_PriceDetail_List]
    @catalogEntryId int = null,
    @catalogNodeId int = null,
    @MarketId nvarchar(8),
    @CurrencyCodes udttCurrencyCode readonly,
    @CustomerPricing udttCustomerPricing readonly,
    @totalCount int output,
    @pagingOffset int = null,
    @pagingCount int = null
as
begin
    declare @filterCurrencies bit = case when exists (select 1 from @CurrencyCodes) then 1 else 0 end
    declare @filterCustomerPricing bit = case when exists (select 1 from @CustomerPricing) then 1 else 0 end
    if (@pagingOffset is null and @pagingCount is null)
    begin
        set @totalCount = -1

        ;with specified_entries as (
            select @catalogEntryId as CatalogEntryId
            where @catalogEntryId is not null
            union
            select CatalogEntryId
            from NodeEntryRelation
            where CatalogNodeId = @catalogNodeId
        ),
        returned_entries as (
            select ce.CatalogEntryId, ce.ApplicationId, ce.Code
            from specified_entries se
            join CatalogEntry ce on se.CatalogEntryId = ce.CatalogEntryId
            union all
            select ce.CatalogEntryId, ce.ApplicationId, ce.Code
            from specified_entries se
            join CatalogEntryRelation cer
                on se.CatalogEntryId = cer.ParentEntryId
                and cer.RelationTypeId in ('ProductVariation')
            join CatalogEntry ce on cer.ChildEntryId = ce.CatalogEntryId
        )
        select
            pd.PriceValueId,
            pd.Created,
            pd.Modified,
            pd.ApplicationId,
            pd.CatalogEntryCode,
            pd.MarketId,
            pd.CurrencyCode,
            pd.PriceTypeId,
            pd.PriceCode,
            pd.ValidFrom,
            pd.ValidUntil,
            pd.MinQuantity,
            pd.UnitPrice
        from PriceDetail pd
        where exists (select 1 from returned_entries re where pd.ApplicationId = re.ApplicationId and pd.CatalogEntryCode = re.Code)
        and (@MarketId = '' or pd.MarketId = @MarketId)
        and (@filterCurrencies = 0 or pd.CurrencyCode in (select CurrencyCode from @CurrencyCodes))
        and (@filterCustomerPricing = 0 or exists (select 1 from @CustomerPricing cp where cp.PriceTypeId = pd.PriceTypeId and cp.PriceCode = pd.PriceCode))
        order by CatalogEntryCode, ApplicationId
    end
    else
    begin
        declare @ordered_results table (
            ordering int not null,
            PriceValueId bigint not null,
            Created datetime not null,
            Modified datetime not null,
            ApplicationId uniqueidentifier not null,
            CatalogEntryCode nvarchar(100) not null,
            MarketId nvarchar(8) not null,
            CurrencyCode nvarchar(8) not null,
            PriceTypeId int not null,
            PriceCode nvarchar(256) not null,
            ValidFrom datetime not null,
            ValidUntil datetime null,
            MinQuantity decimal(38,9) not null,
            UnitPrice money not null
        )

        ;with specified_entries as (
            select @catalogEntryId as CatalogEntryId
            where @catalogEntryId is not null
            union
            select CatalogEntryId
            from NodeEntryRelation
            where CatalogNodeId = @catalogNodeId
        ),
        returned_entries as (
            select ce.CatalogEntryId, ce.ApplicationId, ce.Code
            from specified_entries se
            join CatalogEntry ce on se.CatalogEntryId = ce.CatalogEntryId
            union all
            select ce.CatalogEntryId, ce.ApplicationId, ce.Code
            from specified_entries se
            join CatalogEntryRelation cer
                on se.CatalogEntryId = cer.ParentEntryId
                and cer.RelationTypeId in ('ProductVariation')
            join CatalogEntry ce on cer.ChildEntryId = ce.CatalogEntryId
        )
        insert into @ordered_results (
            ordering,
            PriceValueId,
            Created,
            Modified,
            ApplicationId,
            CatalogEntryCode,
            MarketId,
            CurrencyCode,
            PriceTypeId,
            PriceCode,
            ValidFrom,
            ValidUntil,
            MinQuantity,
            UnitPrice
        )
        select
            --we order by price code, market id and currency code to make the similar prices near each others.
            ROW_NUMBER() over (ORDER BY pd.CatalogEntryCode, pd.ApplicationId, pd.PriceCode, pd.MarketId, pd.CurrencyCode) - 1, -- arguments are zero-based.
            pd.PriceValueId,
            pd.Created,
            pd.Modified,
            pd.ApplicationId,
            pd.CatalogEntryCode,
            pd.MarketId,
            pd.CurrencyCode,
            pd.PriceTypeId,
            pd.PriceCode,
            pd.ValidFrom,
            pd.ValidUntil,
            pd.MinQuantity,
            pd.UnitPrice
        from PriceDetail pd
        where exists (select 1 from returned_entries re where pd.ApplicationId = re.ApplicationId and pd.CatalogEntryCode = re.Code)
        and (@MarketId = '' or pd.MarketId = @MarketId)
        and (@filterCurrencies = 0 or pd.CurrencyCode in (select CurrencyCode from @CurrencyCodes))
        and (@filterCustomerPricing = 0 or exists (select 1 from @CustomerPricing cp where cp.PriceTypeId = pd.PriceTypeId and cp.PriceCode = pd.PriceCode))
        select @totalCount = count(*) from @ordered_results

        select
            PriceValueId,
            Created,
            Modified,
            ApplicationId,
            CatalogEntryCode,
            MarketId,
            CurrencyCode,
            PriceTypeId,
            PriceCode,
            ValidFrom,
            ValidUntil,
            MinQuantity,
            UnitPrice
        from @ordered_results
        where @pagingOffset <= ordering and ordering < (@pagingOffset + @pagingCount)
        order by ordering
    end
end
GO
PRINT N'Creating [dbo].[cms_LanguageInfo_Add]...';


GO
CREATE PROCEDURE [cms_LanguageInfo_Add]
	@LangName varchar(50),
	@FriendlyName varchar(50),
	@IsDefault bit,
	@ApplicationId uniqueidentifier,
	@retval int output
 AS
INSERT INTO [main_LanguageInfo]
	([LangName], [FriendlyName], [IsDefault], [ApplicationId]) VALUES (@LangName, @FriendlyName, @IsDefault, @ApplicationId)
SET @retval = SCOPE_IDENTITY()
GO
PRINT N'Creating [dbo].[main_PageVersionAdd]...';


GO
CREATE PROCEDURE [dbo].[main_PageVersionAdd] 
	@ApplicationId uniqueidentifier,
	@PageId int,
	@TemplateId int,
	@LangId int,
--	@StatusId int,
	@CreatorUID uniqueidentifier,
	@StateId int,
	@Comment nvarchar(1024),
	@retval int output
AS
 BEGIN
	DECLARE @WorkFlowId INT 
	DECLARE @WorkFlowStatus INT 
	SELECT @WorkFlowId = [WorkflowId] FROM [Workflow] WHERE ApplicationId = @ApplicationId AND IsDefault = 1 
	SELECT @WorkFlowStatus = [StatusId] FROM [WorkflowStatus] WHERE ([Weight] = 0) AND ([WorkflowId] = @WorkFlowId)
	
	INSERT INTO [dbo].[main_PageVersion]
	([PageId], [TemplateId], [VersionNum], [LangId], [StatusId], [Created], [CreatorUID], [Edited], [EditorUID], [StateId], [Comment]) VALUES
	(@PageId, @TemplateId, 0, @LangId, @WorkFlowStatus, GETUTCDATE(), @CreatorUID, GETUTCDATE(), @CreatorUID, @StateId, @Comment)
	set @retval = SCOPE_IDENTITY()
 END
GO
PRINT N'Creating [dbo].[ecf_PriceDetail_Get]...';


GO


create procedure [dbo].[ecf_PriceDetail_Get]
    @priceValueId bigint
as
begin
    select
        pd.PriceValueId,
        pd.Created,
        pd.Modified,
        pd.ApplicationId,
        pd.CatalogEntryCode,
        pd.MarketId,
        pd.CurrencyCode,
        pd.PriceTypeId,
        pd.PriceCode,
        pd.ValidFrom,
        pd.ValidUntil,
        pd.MinQuantity,
        pd.UnitPrice
    from PriceDetail pd
    where pd.PriceValueId = @priceValueId
end
GO
PRINT N'Creating [dbo].[cms_GlobalVariablesUpdate]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[cms_GlobalVariablesUpdate]
	@GlobalVariableId int,
	@Key nvarchar(250),
	@SiteId uniqueidentifier,
	@Value nvarchar(1024)
 AS
UPDATE dbo.main_GlobalVariables
	SET
	[KEY] = @Key,
	[VALUE] = @Value,
	[SiteId] = @SiteId
	WHERE [GlobalVariableId] = @GlobalVariableId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[main_PageTreeAccess_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_PageTreeAccess_Update] 
	@PageAccessId INT,
	@RoleId NVARCHAR(256),
	@PageId INT
AS
 BEGIN
	UPDATE [main_PageTreeAccess] SET
		[RoleId] = @RoleId,
		[PageId] = @PageId
	WHERE [PageAccessId] = @PageAccessId
	
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Pricing_EnsurePriceTypes]...';


GO


create procedure [dbo].[ecf_Pricing_EnsurePriceTypes]
    @PriceTypes udttPriceType readonly
as
begin
    begin try
        declare @initialTranCount int = @@TRANCOUNT
        if @initialTranCount = 0 begin transaction

        merge into dbo.PriceType tpt
        using (select distinct [PriceTypeId], [PriceTypeName] from @PriceTypes) src
        on (    tpt.PriceTypeId = src.PriceTypeId)
        when matched then update set tpt.PriceTypeName = src.PriceTypeName
        when not matched then insert ([PriceTypeId], [PriceTypeName])
            values (src.[PriceTypeId], src.[PriceTypeName]);

        if @initialTranCount = 0 commit transaction
    end try
    begin catch
        declare @msg nvarchar(4000), @severity int, @state int
        select @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE()
        if @initialTranCount = 0 rollback transaction
        raiserror(@msg, @severity, @state)
    end catch
end
GO
PRINT N'Creating [dbo].[cms_GlobalVariablesLoadByKey]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[cms_GlobalVariablesLoadByKey]
	@Key nvarchar(250),
	@SiteId uniqueidentifier
 AS
SELECT [GlobalVariableId],[KEY],[VALUE]
	FROM  dbo.main_GlobalVariables
	WHERE [KEY] = @Key and SiteId = @SiteId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[main_PageTreeAccess_GetByRoleIdPageId]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_PageTreeAccess_GetByRoleIdPageId] 
	@RoleId NVARCHAR(256),
	@PageId INT
AS
 BEGIN
	SELECT [PageAccessId] as PageAccessId, [RoleId] as RoleId, [PageId] as PageId FROM [main_PageTreeAccess]
	WHERE [PageId] = @PageId and [RoleId] = @RoleId
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Pricing_SetCatalogEntryPrices]...';


GO


create procedure dbo.ecf_Pricing_SetCatalogEntryPrices
    @CatalogKeys udttCatalogKey readonly,
    @PriceValues udttCatalogEntryPrice readonly
as
begin
    begin try
        declare @initialTranCount int = @@TRANCOUNT
        if @initialTranCount = 0 begin transaction

        delete pv
        from @CatalogKeys ck
        join dbo.PriceGroup pg on ck.ApplicationId = pg.ApplicationId and ck.CatalogEntryCode = pg.CatalogEntryCode
        join dbo.PriceValue pv on pg.PriceGroupId = pv.PriceGroupId

        merge into dbo.PriceGroup tgt
        using (select distinct ApplicationId, CatalogEntryCode, MarketId, CurrencyCode, PriceTypeId, PriceCode from @PriceValues) src
        on (    tgt.ApplicationId = src.ApplicationId
            and tgt.CatalogEntryCode = src.CatalogEntryCode
            and tgt.MarketId = src.MarketId
            and tgt.CurrencyCode = src.CurrencyCode
            and tgt.PriceTypeId = src.PriceTypeId
            and tgt.PriceCode = src.PriceCode)
        when matched then update set Modified = GETUTCDATE()
        when not matched then insert (Created, Modified, ApplicationId, CatalogEntryCode, MarketId, CurrencyCode, PriceTypeId, PriceCode)
            values (GETUTCDATE(), GETUTCDATE(), src.ApplicationId, src.CatalogEntryCode, src.MarketId, src.CurrencyCode, src.PriceTypeId, src.PriceCode);

        insert into dbo.PriceValue (PriceGroupId, ValidFrom, ValidUntil, MinQuantity, MaxQuantity, UnitPrice)
        select pg.PriceGroupId, src.ValidFrom, src.ValidUntil, src.MinQuantity, src.MaxQuantity, src.UnitPrice
        from @PriceValues src
        left outer join PriceGroup pg
            on  src.ApplicationId = pg.ApplicationId
            and src.CatalogEntryCode = pg.CatalogEntryCode
            and src.MarketId = pg.MarketId
            and src.CurrencyCode = pg.CurrencyCode
            and src.PriceTypeId = pg.PriceTypeId
            and src.PriceCode = pg.PriceCode

        delete tgt
        from dbo.PriceGroup tgt
        join @CatalogKeys ck on tgt.ApplicationId = ck.ApplicationId and tgt.CatalogEntryCode = ck.CatalogEntryCode
        where not exists (select 1 from dbo.PriceValue pv where pv.PriceGroupId = tgt.PriceGroupId)

        if @initialTranCount = 0 commit transaction
    end try
    begin catch
        declare @msg nvarchar(4000), @severity int, @state int
        select @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE()
        if @initialTranCount = 0 rollback transaction
        raiserror(@msg, @severity, @state)
    end catch
end
GO
PRINT N'Creating [dbo].[ecf_CatalogEntryAssocations]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogEntryAssocations]
    @CatalogEntries dbo.udttEntityList readonly
AS
BEGIN
	SELECT CA.* FROM [CatalogAssociation] CA
	WHERE
		CA.CatalogEntryId IN (SELECT EntityId FROM  @CatalogEntries)
	
	SELECT CEA.* FROM [CatalogEntryAssociation] CEA
	INNER JOIN [CatalogAssociation] CA ON CA.CatalogAssociationId = CEA.CatalogAssociationId
	WHERE
		CA.CatalogEntryId IN (SELECT EntityId FROM  @CatalogEntries)
		
	SELECT * FROM [AssociationType]
END
GO
PRINT N'Creating [dbo].[cms_GlobalVariablesDelete]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[cms_GlobalVariablesDelete]
	@GlobalVariableId int
 AS
DELETE FROM dbo.main_GlobalVariables
	WHERE [GlobalVariableId] = @GlobalVariableId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[main_PageTreeAccess_GetByPageId]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_PageTreeAccess_GetByPageId] 
	@PageId INT
AS
 BEGIN
	SELECT [PageAccessId] as PageAccessId, [RoleId] as RoleId, [PageId] as PageId FROM [main_PageTreeAccess]
	WHERE [PageId] = @PageId
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Pricing_GetCatalogEntryPrices]...';


GO


create procedure dbo.ecf_Pricing_GetCatalogEntryPrices
    @CatalogKeys udttCatalogKey readonly
as
begin
    select pg.ApplicationId, pg.CatalogEntryCode, pg.MarketId, pg.CurrencyCode, pg.PriceTypeId, pg.PriceCode, pv.ValidFrom, pv.ValidUntil, pv.MinQuantity, pv.UnitPrice
    from @CatalogKeys ck
    join PriceGroup pg on ck.ApplicationId = pg.ApplicationId and ck.CatalogEntryCode = pg.CatalogEntryCode
    join PriceValue pv on pg.PriceGroupId = pv.PriceGroupId
end
GO
PRINT N'Creating [dbo].[ecf_CatalogNode_GetDeleteResults]...';


GO

create procedure dbo.ecf_CatalogNode_GetDeleteResults
    @CatalogId int,
    @CatalogNodeId int
as
begin
    declare @affectedNodes table (CatalogNodeId int, IsDelete int)
    declare @affectedEntries table (CatalogEntryId int, IsDelete int)
    
    ;with all_catalog_relations as
    (
        select ParentNodeId, CatalogNodeId as ChildNodeId, 1 as IsDelete from CatalogNode where CatalogId = @CatalogId
        union
        select ParentNodeId, ChildNodeId, 0 as IsDelete from CatalogNodeRelation where CatalogId = @CatalogId
    ),
    affected_nodes as
    (
        select
            cn.CatalogNodeId,
            1 as IsDelete,
            '|' + CAST(@CatalogNodeId as nvarchar(4000)) + '|' as CurrentNodePath
        from CatalogNode cn
        where cn.CatalogNodeId = @CatalogNodeId
        union all
        select 
            cn.CatalogNodeId,          
            case when cte.IsDelete = 1 and r.IsDelete = 1 then 1 else 0 end,            
            cte.CurrentNodePath + CAST(r.ChildNodeId as nvarchar(4000)) + '|'
        from affected_nodes cte
        join all_catalog_relations r on cte.CatalogNodeId = r.ParentNodeId and CHARINDEX(cast(r.ChildNodeId as nvarchar(4000)), cte.CurrentNodePath) = 0
        join CatalogNode cn on r.ChildNodeId = cn.CatalogNodeId
    )
    insert into @affectedNodes (CatalogNodeId, IsDelete)
    select n.CatalogNodeId, MAX(n.IsDelete)
    from affected_nodes n
    group by n.CatalogNodeId

    -- @result.IsCatalogEntry is always 0 at this point, joins do not need to specify that they are joining to nodes.
    insert into @affectedEntries (CatalogEntryId, IsDelete)
    select
        ce.CatalogEntryId, 
        MIN(isnull(ce_parent_nodeinfo.IsDelete, 0)) as IsDelete
    from @affectedNodes ns
    join NodeEntryRelation all_affected_node_relations on ns.CatalogNodeId = all_affected_node_relations.CatalogNodeId
    join CatalogEntry ce on all_affected_node_relations.CatalogEntryId = ce.CatalogEntryId
    join NodeEntryRelation ce_parents on ce.CatalogEntryId = ce_parents.CatalogEntryId
    left outer join @affectedNodes ce_parent_nodeinfo on ce_parents.CatalogNodeId = ce_parent_nodeinfo.CatalogNodeId
    group by ce.CatalogEntryId, ce.MetaClassId, ce.ApplicationId

    -- return entry updates, entry deletes, and node deletes; not node updates.
    -- node update rows only exist to populate the entry updates.
    select CatalogEntryId as EntityId, cast(1 as bit) as IsCatalogEntry, cast(IsDelete as bit) as IsDelete
    from @affectedEntries
    union all
    select CatalogNodeId, cast(0 as bit) as IsCatalogEntry, cast(IsDelete as bit) as IsDelete
    from @affectedNodes
    where IsDelete = 1    
end
GO
PRINT N'Creating [dbo].[cms_GlobalVariablesAdd]...';


GO
CREATE PROCEDURE [cms_GlobalVariablesAdd]
	@Key nvarchar(250),
	@Value nvarchar(1024),
	@SiteId uniqueidentifier,
	@retval int output
 AS
INSERT INTO [main_GlobalVariables]
	([KEY],[VALUE], SiteId) VALUES (@Key,@Value, @SiteId)
SET @retval = SCOPE_IDENTITY()
GO
PRINT N'Creating [dbo].[main_PageTreeAccess_GetById]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_PageTreeAccess_GetById] 
	@PageAccessId INT
AS
 BEGIN
	SELECT [PageAccessId] as PageAccessId, [RoleId] as RoleId, [PageId] as PageId FROM [main_PageTreeAccess]
	WHERE [PageAccessId] = @PageAccessId
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Pricing_GetPrices]...';


GO

create procedure dbo.ecf_Pricing_GetPrices
    @MarketId nvarchar(8),
    @ValidOn datetime,
    @CatalogKeysAndQuantities udttCatalogKeyAndQuantity readonly,
    @CurrencyCodes udttCurrencyCode readonly,
    @CustomerPricing udttCustomerPricing readonly,
    @ReturnCustomerPricing bit = 0,
    @ReturnQuantities bit = 0
as
begin
    declare @filterCurrencies bit = case when exists (select 1 from @CurrencyCodes) then 1 else 0 end
    declare @filterCustomerPricing bit = case when exists (select 1 from @CustomerPricing) then 1 else 0 end

    select
        pg.ApplicationId,
        pg.CatalogEntryCode,
        pg.MarketId,
        pg.CurrencyCode,
        case when @ReturnCustomerPricing = 1 then pg.PriceTypeId else null end as PriceTypeId,
        case when @ReturnCustomerPricing = 1 then pg.PriceCode else null end as PriceCode,
        pv.ValidFrom,
        pv.ValidUntil,
        pv.MinQuantity,
        min(pv.UnitPrice) as UnitPrice
    from @CatalogKeysAndQuantities ckaq
    join PriceGroup pg on ckaq.ApplicationId = pg.ApplicationId and ckaq.CatalogEntryCode = pg.CatalogEntryCode
    join PriceValue pv on pg.PriceGroupId = pv.PriceGroupId
    where
		(@MarketId = '' or pg.MarketId = @MarketId)
        and (@filterCurrencies = 0 or pg.CurrencyCode in (select CurrencyCode from @CurrencyCodes))
        and (@filterCustomerPricing = 0 or exists (select 1 from @CustomerPricing cp where cp.PriceTypeId = pg.PriceTypeId and cp.PriceCode = pg.PriceCode))
        and pv.ValidFrom <= @ValidOn
        and (pv.ValidUntil is null or @ValidOn < pv.ValidUntil)
        and (@ReturnQuantities = 1 or (pv.MinQuantity <= ckaq.Quantity and ckaq.Quantity < ISNULL(pv.MaxQuantity, ckaq.Quantity+1)))
    group by pg.ApplicationId, pg.CatalogEntryCode, pg.MarketId, pg.CurrencyCode,
        case when @ReturnCustomerPricing = 1 then pg.PriceTypeId else null end,
        case when @ReturnCustomerPricing = 1 then pg.PriceCode else null end,
        pv.ValidFrom, pv.ValidUntil, pv.MinQuantity
end
GO
PRINT N'Creating [dbo].[ecf_CatalogNode_List]...';


GO

create procedure dbo.ecf_CatalogNode_List
    @CatalogNodes udttEntityList readonly
as
begin
    select *
    from CatalogNode
    where CatalogNodeId in (select EntityId from @CatalogNodes)
    
    select *
    from CatalogItemSeo
    where CatalogNodeId in (select EntityId from @CatalogNodes)
end
GO
PRINT N'Creating [dbo].[cms_fs_FileTreeUpdate]...';


GO
CREATE PROCEDURE [dbo].[cms_fs_FileTreeUpdate]
	@PageId int,
	@Name nvarchar(250),
	@IsPublic bit,
	@IsFolder bit,
	@IsDefault bit,
	@MasterPage nvarchar(256),
	@SiteId uniqueidentifier
 AS
DECLARE @OutlineOld nvarchar(2048)
DECLARE @OutlineNew nvarchar(2048)
DECLARE @NameOld nvarchar(250)
--get old Outline
SELECT @OutlineOld = [Outline], @NameOld = [Name]
	FROM dbo.main_PageTree
	WHERE [PageId] = @PageId

IF @NameOld <> @Name
BEGIN
--exclude old file name 
	SET @OutlineNew = REVERSE(@OutlineOld)
	PRINT @OutlineNew
	SET @OutlineNew = SUBSTRING(@OutlineNew,2,LEN(@OutlineNew) )
	PRINT @OutlineNew
	SET @OutlineNew = SUBSTRING(@OutlineNew,CHARINDEX('/',@OutlineNew) ,LEN(@OutlineNew) - LEN(@NameOld) + 1)
	SET @OutlineNew = REVERSE(@OutlineNew)
	--finish new outline
	SET @OutlineNew = @OutlineNew + @Name
	IF (SELECT [IsFolder] FROM dbo.main_PageTree WHERE [PageId] = @PageId) = 1
		SET @OutlineNew = @OutlineNew + '/'
	--replace old outline and update
	UPDATE dbo.main_PageTree 
		SET 
		[Name] = @Name,
		[Outline] = REPLACE([Outline],@OutlineOld,@OutlineNew),
		[IsPublic] = @IsPublic,
		[IsDefault] = @IsDefault,
		[MasterPage] = @MasterPage,
		[SiteId] = @SiteId
		WHERE ([PageId] = @PageId) 
	--replace old outline in child outline
	UPDATE dbo.main_PageTree 
		SET [Outline] = REPLACE([Outline],@OutlineOld,@OutlineNew)
		WHERE ([Outline] LIKE @OutlineOld + '%') AND [SiteId]=@SiteId
END
ELSE
BEGIN
	UPDATE dbo.main_PageTree 
		SET 
		[Name] = @Name,
		[IsPublic] = @IsPublic,
		[IsDefault] = @IsDefault,
		[MasterPage] = @MasterPage,
		[SiteId] = @SiteId
		WHERE ([PageId] = @PageId)
END
GO
PRINT N'Creating [dbo].[main_PageTreeAccess_GetAll]...';


GO
CREATE PROCEDURE [main_PageTreeAccess_GetAll]
	@SiteId uniqueidentifier
AS
BEGIN
	SELECT PTA.[PageAccessId], PTA.[RoleId], PTA.[PageId] FROM [main_PageTreeAccess] PTA
	INNER JOIN [main_PageTree] PT ON PT.[PageId] = PTA.[PageId]
	WHERE PT.[SiteId] = @SiteId
END
GO
PRINT N'Creating [dbo].[ecf_CatalogRelation_NodeDelete]...';


GO


create procedure dbo.ecf_CatalogRelation_NodeDelete
    @CatalogEntries dbo.udttEntityList readonly,
    @CatalogNodes dbo.udttEntityList readonly
as
begin
    select * from CatalogNodeRelation cnr where 0=1
    
    select *
    from CatalogEntryRelation
    where ParentEntryId in (select EntityId from @CatalogEntries)
       or ChildEntryId in (select EntityId from @CatalogEntries)
       
    select CatalogId, CatalogEntryId, CatalogNodeId, SortOrder
    from NodeEntryRelation
    where CatalogEntryId in (select EntityId from @CatalogEntries)
       or CatalogNodeId in (select EntityId from @CatalogNodes)
end
GO
PRINT N'Creating [dbo].[cms_fs_FileTreeLoadParentAll]...';


GO
CREATE PROCEDURE [dbo].[cms_fs_FileTreeLoadParentAll] 
	@PageId int
AS
DECLARE @FolderOutline nvarchar(2048)
DECLARE @OutlineLevel int
DECLARE @SiteId uniqueidentifier
--get folder outline
SELECT @FolderOutline = [Outline],@OutlineLevel = [OutlineLevel], @SiteId = SiteId
	FROM dbo.main_PageTree
	WHERE [PageId] = @PageId
--get all files in folder
SELECT [PageId], [Name], [Outline], [OutlineLevel], [IsFolder], [IsDefault], [Order], [IsPublic], isnull([MasterPage], '') as MasterPage, SiteId
	FROM dbo.main_PageTree
	WHERE (@FolderOutline LIKE [Outline] + '%') AND SiteId = @SiteId
	ORDER BY [OutlineLevel]
GO
PRINT N'Creating [dbo].[main_PageTreeAccess_Delete]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[main_PageTreeAccess_Delete] 
	@PageAccessId INT
AS
 BEGIN
	DELETE FROM [main_PageTreeAccess] WHERE [PageAccessId] = @PageAccessId
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogRelationByChildEntryId]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogRelationByChildEntryId]
	@ApplicationId uniqueidentifier,
	@ChildEntryId int
AS
BEGIN
	select top 0 * from CatalogNodeRelation

	SELECT CER.* FROM CatalogEntryRelation CER
	INNER JOIN CatalogEntry CE ON CE.CatalogEntryId = CER.ChildEntryId
	WHERE
		CE.ApplicationId = @ApplicationId AND
		CER.ChildEntryId = @ChildEntryId
	ORDER BY CER.SortOrder
	
	select top 0 CatalogId, CatalogEntryId, CatalogNodeId, SortOrder from NodeEntryRelation
END
GO
PRINT N'Creating [dbo].[cms_fs_FileTreeLoadParent]...';


GO
CREATE PROCEDURE [dbo].[cms_fs_FileTreeLoadParent] 
	@PageId int
AS
DECLARE @FolderOutline nvarchar(2048)
DECLARE @OutlineLevel int
DECLARE @SiteId uniqueidentifier
--get folder outline
SELECT @FolderOutline = [Outline],@OutlineLevel = [OutlineLevel], @SiteId = SiteId
	FROM dbo.main_PageTree
	WHERE [PageId] = @PageId
--get all files in folder
SELECT [PageId], [Name], [Outline], [OutlineLevel], [IsFolder], [IsDefault], [Order], [IsPublic], isnull([MasterPage], '') as MasterPage, SiteId
	FROM dbo.main_PageTree
	WHERE (@FolderOutline LIKE [Outline] + '%')   AND ([OutlineLevel] = @OutlineLevel - 1) and SiteId = @SiteId
GO
PRINT N'Creating [dbo].[main_PageTreeAccess_Add]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[main_PageTreeAccess_Add] 
	@RoleId NVARCHAR(256),
	@PageId INT,
	@retval INT OUTPUT
AS
 BEGIN
	INSERT INTO [main_PageTreeAccess] (RoleId, PageId)
	VALUES (@RoleId, @PageId)
	SET @retval = @@IDENTITY
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Paths_CreatePath]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Paths_CreatePath
    @ApplicationId UNIQUEIDENTIFIER,
    @Path           NVARCHAR(256),
    @PathId         UNIQUEIDENTIFIER OUTPUT
AS
BEGIN
    BEGIN TRANSACTION
    IF (NOT EXISTS(SELECT * FROM dbo.aspnet_Paths WHERE LoweredPath = LOWER(@Path) AND ApplicationId = @ApplicationId))
    BEGIN
        INSERT dbo.aspnet_Paths (ApplicationId, Path, LoweredPath) VALUES (@ApplicationId, @Path, LOWER(@Path))
    END
    COMMIT TRANSACTION
    SELECT @PathId = PathId FROM dbo.aspnet_Paths WHERE LOWER(@Path) = LoweredPath AND ApplicationId = @ApplicationId
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[cms_fs_FileTreeLoadByOutlineAll]...';


GO
CREATE PROCEDURE [dbo].[cms_fs_FileTreeLoadByOutlineAll] 
	@outline nvarchar(2048),
	@SiteId uniqueidentifier
AS
 begin
	SELECT [PageId], [Name], [Outline], [OutlineLevel], [IsFolder], [IsDefault], [Order], [IsPublic] , isnull([MasterPage], '') as MasterPage 
		FROM dbo.main_PageTree
		WHERE ([Outline] LIKE @outline) and SiteId = @SiteId
 end
GO
PRINT N'Creating [dbo].[main_PageAttributesUpdate]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_PageAttributesUpdate] 
	@PageId INT,
	@Title NVARCHAR(256),
	@MetaKeys NVARCHAR(4000),
	@MetaDescriptions NVARCHAR(4000)
AS
 BEGIN
	UPDATE [main_PageAttributes] SET
		[Title] = @Title,
		[MetaKeys] = @MetaKeys,
		[MetaDescriptions] = @MetaDescriptions
	WHERE [PageId] = @PageId
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Personalization_GetApplicationId]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Personalization_GetApplicationId (
    @ApplicationName NVARCHAR(256),
    @ApplicationId UNIQUEIDENTIFIER OUT)
AS
BEGIN
    SELECT @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_TaxCategory_Name]...';


GO
CREATE PROCEDURE [dbo].[ecf_TaxCategory_Name]
    @ApplicationId uniqueidentifier,
	@Name nvarchar(50)
AS
BEGIN
	
	SELECT T.* from [TaxCategory] T
	WHERE
		T.[ApplicationId] = @ApplicationId and T.[Name] = @Name
END
GO
PRINT N'Creating [dbo].[cms_fs_FileTreeLoadByOutline]...';


GO
CREATE PROCEDURE [dbo].[cms_fs_FileTreeLoadByOutline] 
	@Outline nvarchar(2048),
	@SiteId uniqueidentifier
AS
--Get page OR default folder page
IF (SELECT  [IsFolder] FROM dbo.main_PageTree WHERE [Outline] LIKE @Outline and SiteId = @SiteId) = 1 
BEGIN
	DECLARE @FolderOutlineLevel int
	SELECT @FolderOutlineLevel = [OutlineLevel]
		FROM dbo.main_PageTree
		WHERE  [Outline] LIKE @Outline and SiteId = @SiteId
	SELECT [PageId], [Name], [Outline], [OutlineLevel], [IsFolder], [IsDefault], [Order], [IsPublic], isnull([MasterPage], '') as MasterPage 
		FROM dbo.main_PageTree
		WHERE ([Outline] LIKE @Outline+'%' AND [IsDefault] = 1)  AND ([OutlineLevel] = @FolderOutlineLevel + 1) and SiteId = @SiteId
END
ELSE
BEGIN
	SELECT [PageId], [Name], [Outline], [OutlineLevel], [IsFolder], [IsDefault], [Order], [IsPublic]
		FROM dbo.main_PageTree
		WHERE ([Outline] LIKE @Outline) and SiteId = @SiteId
END
GO
PRINT N'Creating [dbo].[main_PageAttributesGetByPageId]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_PageAttributesGetByPageId] 
	@PageId INT
AS
 BEGIN
	SELECT [Id] as Id, [PageId] as PageId, [Title] as Title, [MetaKeys] as MetaKeys, [MetaDescriptions] as MetaDescriptions
		FROM [main_PageAttributes] WHERE [PageId] = @PageId
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_TaxCategory_TaxCategoryId]...';


GO
CREATE PROCEDURE [dbo].[ecf_TaxCategory_TaxCategoryId]
    @ApplicationId uniqueidentifier,
	@TaxCategoryId int
AS
BEGIN
	
	SELECT T.* from [TaxCategory] T
	WHERE
		T.[ApplicationId] = @ApplicationId and T.[TaxCategoryId] = @TaxCategoryId
END
GO
PRINT N'Creating [dbo].[cms_fs_FileTreeLoadById]...';


GO
CREATE PROCEDURE [dbo].[cms_fs_FileTreeLoadById] 
	@PageId int
AS
SELECT [PageId], [Name], [Outline], [OutlineLevel], [IsFolder], [IsDefault], [Order], [IsPublic], isnull([MasterPage], '') as MasterPage, [SiteId]
	FROM dbo.main_PageTree
	WHERE [PageId] = @PageId
GO
PRINT N'Creating [dbo].[main_PageAttributesGetById]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_PageAttributesGetById] 
	@Id INT
AS
 BEGIN
	SELECT [Id] as Id, [Title] as Title, [MetaKeys] as MetaKeys, [MetaDescriptions] as MetaDescriptions
		FROM [main_PageAttributes] WHERE [Id] = @Id
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_TaxCategory]...';


GO
CREATE PROCEDURE [dbo].[ecf_TaxCategory]
    @ApplicationId uniqueidentifier
AS
BEGIN
	
	SELECT T.* from [TaxCategory] T
	WHERE
		T.ApplicationId = @ApplicationId
	ORDER BY T.[Name]
END
GO
PRINT N'Creating [dbo].[cms_fs_FileTreeLoadByFolderId]...';


GO
CREATE PROCEDURE [dbo].[cms_fs_FileTreeLoadByFolderId] 
	@FolderId int
AS
DECLARE @FolderOutline nvarchar(2048)
DECLARE @SiteId uniqueidentifier
DECLARE @OutlineLevel int
--get folder outline
SELECT @SiteId = SiteId, @FolderOutline = [Outline],@OutlineLevel = [OutlineLevel]
	FROM dbo.main_PageTree
	WHERE [PageId] = @FolderId
--get all files in folder
SELECT [PageId], [Name], [Outline], [OutlineLevel], [IsFolder], [IsDefault], [Order], [IsPublic], isnull([MasterPage], '') as MasterPage, [SiteId]
	FROM dbo.main_PageTree
	WHERE ([Outline] LIKE @FolderOutline + '%') AND ([PageId] != @FolderId)  AND ([OutlineLevel] = @OutlineLevel + 1) AND SiteId = @SiteId
	ORDER BY [Name]
GO
PRINT N'Creating [dbo].[main_PageAttributesDeleteByPageId]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_PageAttributesDeleteByPageId] 
	@PageId INT
AS
 BEGIN
	DELETE FROM [main_PageAttributes] WHERE [PageId] = @PageId
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogLog]...';


GO
CREATE PROCEDURE ecf_CatalogLog
	@ApplicationId uniqueidentifier,
	@Created datetime = null,
	@Operation nvarchar(50) = null,
	@ObjectType nvarchar(50) = null,
    @StartingRec int,
	@NumRecords int
AS
BEGIN
	SET NOCOUNT ON;
	WITH OrderedLogs AS 
	(
		select *, row_number() over(order by LogId) as RowNumber from CatalogLog where COALESCE(@Operation, Operation) = Operation and COALESCE(@ObjectType, ObjectType) = ObjectType and COALESCE(@Created, Created) <= Created
	),
	OrderedLogsCount(TotalCount) as
	(
		select count(LogId) from OrderedLogs
	)
	select LogId, Operation, ObjectKey, ObjectType, Username, Created, Succeeded, Notes, ApplicationId, TotalCount from OrderedLogs, OrderedLogsCount
	where RowNumber between @StartingRec and @StartingRec+@NumRecords-1
	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[cms_fs_FileTreeLoadAllFolders]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[cms_fs_FileTreeLoadAllFolders] 
	@SiteId uniqueidentifier
AS
SELECT [PageId], [Name], [Outline], [OutlineLevel], [IsFolder], [IsDefault], [Order], [IsPublic], SiteId
	FROM dbo.main_PageTree
	WHERE [IsFolder] = 1 and SiteId = @SiteId
	ORDER BY [Order]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[main_PageAttributesDelete]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_PageAttributesDelete] 
	@Id INT
AS
 BEGIN
	DELETE FROM [main_PageAttributes] WHERE [Id] = @Id
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogEntry_SearchInsertList]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogEntry_SearchInsertList]
	@SearchSetId uniqueidentifier,
	@List nvarchar(max)
AS
BEGIN
	SET NOCOUNT ON;
	INSERT INTO [CatalogEntrySearchResults]
           ([SearchSetId]
           ,[CatalogEntryId]
           ,[Created]
           ,[SortOrder])
     select @SearchSetId, L.Item, GETUTCDATE(), L.RowId
     from ecf_splitlist_with_rowid(@List) L
     inner join CatalogEntry E ON E.CatalogEntryId = L.Item
     ORDER BY L.RowId

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[cms_fs_FileTreeLoadAll]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[cms_fs_FileTreeLoadAll] 
	@SiteId uniqueidentifier
AS
BEGIN
	SELECT [PageId], [Name], [Outline], [OutlineLevel], [IsFolder], [IsDefault], [Order], [IsPublic], isnull([MasterPage], ''), SiteId FROM
		dbo.[main_PageTree]
	where SiteId = @SiteId
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[main_PageAttributesAdd]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_PageAttributesAdd] 
	@PageId INT,
	@Title NVARCHAR(256),
	@MetaKeys NVARCHAR(4000),
	@MetaDescriptions NVARCHAR(4000),
	@retval INT OUTPUT
AS
 BEGIN
	INSERT INTO [main_PageAttributes] ([PageId], [Title], [MetaKeys], [MetaDescriptions])
		VALUES (@PageId, @Title, @MetaKeys, @MetaDescriptions)
	SET @retval = @@IDENTITY
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogAssociation_CatalogId]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogAssociation_CatalogId]
	@CatalogId int
AS
BEGIN
	SELECT CA.* from [CatalogAssociation] CA
	INNER JOIN [CatalogEntry] CE ON CE.CatalogEntryId = CA.CatalogEntryId
	WHERE
		CE.CatalogId = @CatalogId
	ORDER BY CA.SortOrder

	SELECT CEA.* from [CatalogEntryAssociation] CEA
	INNER JOIN [CatalogAssociation] CA ON CA.CatalogAssociationId = CEA.CatalogAssociationId
	INNER JOIN [CatalogEntry] CE ON CE.CatalogEntryId = CA.CatalogEntryId
	WHERE
		CE.CatalogId = @CatalogId
	ORDER BY CA.SortOrder, CEA.SortOrder
		
	SELECT * FROM [AssociationType]
END
GO
PRINT N'Creating [dbo].[cms_fs_FileTreeGetRoot]...';


GO
CREATE PROCEDURE [dbo].[cms_fs_FileTreeGetRoot]
	@SiteId uniqueidentifier,
	@retval int output 
 AS
SELECT @retval = [PageId] FROM [main_PageTree] WHERE [OutlineLevel] = 0 and [SiteId] = @SiteId
IF @retval IS NULL
BEGIN
INSERT INTO [main_PageTree]
	([Name],[IsPublic], [IsFolder], [IsDefault], [Outline], [OutlineLevel], [Order], [SiteId]) 
	VALUES
	('Root',1,1,0, '/', 0, 0, @SiteId)
SET @retval = SCOPE_IDENTITY()
END
GO
PRINT N'Creating [dbo].[main_MenuItemUpdateSortOrder]...';


GO
CREATE PROCEDURE [dbo].[main_MenuItemUpdateSortOrder]
	@MenuItemId int,
	@Order int = 0
AS
	UPDATE dbo.main_MenuItem
	SET 
		[Order] = @Order
	WHERE [MenuItemId] = @MenuItemId
GO
PRINT N'Creating [dbo].[ecf_SiteCatalog_Insert]...';


GO
CREATE PROCEDURE [dbo].[ecf_SiteCatalog_Insert]
(
	@SiteId uniqueidentifier,
	@CatalogId int
)
AS
	SET NOCOUNT OFF
	INSERT INTO [dbo].[SiteCatalog] ([SiteId], [CatalogId]) VALUES (@SiteId, @CatalogId)
GO
PRINT N'Creating [dbo].[cms_fs_FileTreeAdd]...';


GO
CREATE PROCEDURE [dbo].[cms_fs_FileTreeAdd]
	@Name nvarchar(250),
	@IsPublic bit,
	@IsFolder bit,
	@IsDefault bit,
	@MasterPage nvarchar(256),
	@SiteId uniqueidentifier,
	@retval int output 
 AS
-- get maxOrder
DECLARE @MaxOrder int
SELECT @MaxOrder = MAX([Order]) FROM dbo.main_PageTree 
	WHERE [SiteId]=@SiteId
SET @MaxOrder = COALESCE(@MaxOrder, -1)
--add new element to root
INSERT INTO dbo.[main_PageTree]
	([Name],[IsPublic], [IsFolder], [IsDefault], [Outline], [OutlineLevel], [Order], [MasterPage], [SiteId]) 
	VALUES
	(@Name, @IsPublic, @IsFolder, @IsDefault, 
		case @IsFolder
				when 1 then CAST('/'+@Name+'/' AS NVARCHAR(2048))
				else CAST('/'+@Name AS NVARCHAR(2048))
			   end,
		1, @MaxOrder + 1, @MasterPage, @SiteId)
SET @retval = SCOPE_IDENTITY()
GO
PRINT N'Creating [dbo].[main_MenuItemUpdate]...';


GO
CREATE PROCEDURE [dbo].[main_MenuItemUpdate]
	@MenuItemId int,
	@CommandText nvarchar(1024) = '',
	@CommandType int = 0,
	@Text nvarchar(250) = 'Mediachase CMS',
	@LeftImageUrl nvarchar(1024) = NULL,
	@RightImageUrl nvarchar(1024) = NULL,
	@IsVisible bit = 1,
	@IsInherits bit = 0,
	@Order int = 0
AS
	UPDATE dbo.main_MenuItem
	SET
		[CommandText] = @CommandText,
		[CommandType] = @CommandType,
		[Text] = @Text,
		[LeftImageUrl] = @LeftImageUrl,
		[RightImageUrl] = @RightImageUrl,
		[IsVisible] = @IsVisible,
		[IsInherits] = @IsInherits,
		[Order] = @Order
	WHERE [MenuItemId] = @MenuItemId
GO
PRINT N'Creating [dbo].[ecf_Search_CatalogNode]...';


GO
CREATE PROCEDURE [dbo].[ecf_Search_CatalogNode]
    @SearchSetId uniqueidentifier
AS
BEGIN

	SELECT N.* from [CatalogNode] N
	WHERE
		N.CatalogNodeId IN (SELECT [CatalogNodeId] FROM [CatalogNodeSearchResults] WHERE [SearchSetId] = @SearchSetId)

	SELECT S.* from CatalogItemSeo S
	INNER JOIN CatalogNode N ON N.CatalogNodeId = S.CatalogNodeId
	WHERE
		N.CatalogNodeId IN (SELECT [CatalogNodeId] FROM [CatalogNodeSearchResults] WHERE [SearchSetId] = @SearchSetId)

    -- Cleanup the loaded OrderGroupIds from SearchResults.
    DELETE FROM CatalogNodeSearchResults WHERE @SearchSetId = SearchSetId

END
GO
PRINT N'Creating [dbo].[GetContentSchemaVersionNumber]...';


GO
CREATE PROCEDURE [dbo].[GetContentSchemaVersionNumber]
AS
	DECLARE @major int, @minor int, @patch int

	SELECT @major = max([Major]) FROM [SchemaVersion]
	SELECT @minor = max([Minor]) FROM [SchemaVersion] WHERE Major = @major
	SELECT @patch = max([Patch]) FROM [SchemaVersion] WHERE Major = @major AND Minor = @minor

	SELECT Major, Minor, Patch, InstallDate FROM [SchemaVersion] 
	WHERE
		Major = @major AND 
		Minor = @minor AND 
		Patch = @patch
GO
PRINT N'Creating [dbo].[main_MenuItemMoveTo]...';


GO
CREATE PROCEDURE [dbo].[main_MenuItemMoveTo]
	@MenuItemId int,
	@TargetMenuItemId int,
	@MoveToMode int
AS
--  1 moved item will be the first among the siblings
--  2 moved item will be the last among the siblings
--  3 sort order will not be changed

if (@MenuItemId = @TargetMenuItemId)
	return

--get start item outline
declare @Outline nvarchar(2048)
select @Outline = [Outline] + cast([MenuItemId] as nvarchar(2048)) + '.'
	from dbo.main_MenuItem
	where [MenuItemId] = @MenuItemId

--get start item order
declare @CurrentOrder int
select @CurrentOrder = [Order] from dbo.main_MenuItem where [MenuItemId]  = @MenuItemId

--get target outline
declare @TargetOutline nvarchar(2048)
select @TargetOutline = [Outline] + cast([MenuItemId] as nvarchar(2048)) + '.'
	from dbo.main_MenuItem
	where [MenuItemId] = @TargetMenuItemId

-- if target is child of a source, generate error
if left(@TargetOutline, len(@Outline)) = @Outline
begin
	RAISERROR('Cannot move parent to a child.', 1, 1)
	return
end

-- move item
if @Outline != @TargetOutline
begin
	-- get outline level
	declare @OutlineLevel int
	select @OutlineLevel = [OutlineLevel] from dbo.main_MenuItem
		where [MenuItemId] = @MenuItemId
	
	declare @TargetOutlineLevel int
	select @TargetOutlineLevel = [OutlineLevel] from dbo.main_MenuItem
		where [MenuItemId] = @TargetMenuItemId
	
	--update outline level
	update dbo.main_MenuItem
		set [OutlineLevel] = [OutlineLevel] - @OutlineLevel + @TargetOutlineLevel + 1
		where [Outline] LIKE @Outline + '%' OR [MenuItemId] = @MenuItemId 

	-- update outline
	-- item's outline
	update [main_MenuItem] set [Outline] = @TargetOutline
		where [MenuItemId] = @MenuItemId

	-- children's outline
	update [main_MenuItem]
		set [Outline] = replace([Outline], @Outline, @TargetOutline + cast(@MenuItemId AS NVARCHAR(2048)) + '.')
		where [Outline] like @Outline + '%'
end

-------------- Update traget order ------------------
declare @TargetOrder int

------------- insert first ----------------
if @MoveToMode = 1
begin
	select @TargetOrder = coalesce(min([Order]), 0) from dbo.main_MenuItem 
		where ([Outline] = @TargetOutline and [MenuItemId] != @MenuItemId and [MenuItemId] != @TargetMenuItemId )

	if (@TargetOrder > 0)
		set @TargetOrder = @TargetOrder - 1

	--update item order
	update [main_MenuItem] set [Order] = @TargetOrder
		where [MenuItemId] = @MenuItemId
END

------------ insert last ----------------
IF @MoveToMode = 2
BEGIN

	select @TargetOrder = coalesce(max([Order]), 0) from dbo.main_MenuItem 
		where ([Outline] = @TargetOutline and [MenuItemId] != @MenuItemId and [MenuItemId] != @TargetMenuItemId )

	if (@TargetOrder < 0)
		set @TargetOrder = 0 
	else
		set @TargetOrder = @TargetOrder + 1

	--update item order
	update [main_MenuItem] set [Order] = @TargetOrder
		where [MenuItemId] = @MenuItemId
END
GO
PRINT N'Creating [dbo].[main_MenuItemGetSubMenuByMenuItemIdAndLanguageId]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_MenuItemGetSubMenuByMenuItemIdAndLanguageId]
	@MenuItemId int,
	@LanguageId int
 AS
DECLARE @OutlineLevel int
DECLARE @Outline nvarchar(2048)
DECLARE @MenuId int
SELECT @OutlineLevel = [OutlineLevel] ,@Outline = [Outline] + CAST([MenuItemId] AS NVARCHAR(2048)) +'.', @MenuId = [MenuId]
	FROM dbo.main_MenuItem
	WHERE [MenuItemId] = @MenuItemId

SELECT t1.MenuItemId, t1.MenuId, t1.CommandText, t1.CommandType, t1.LeftImageUrl, t1.RightImageUrl, t1.IsVisible, t1.IsRoot, t1.[Order], t2.[Text], t2.ToolTip, t2.LanguageId, t1.Outline, t1.OutlineLevel, t1.IsInherits
	FROM main_MenuItem t1 JOIN main_MenuItem_Resources t2 ON(t1.MenuItemId = t2.MenuItemId)
	WHERE t1.[Outline] Like @Outline +'%' AND t1.[OutlineLevel] = @OutlineLevel + 1 AND t1.[IsRoot] = 0   AND (@LanguageId = t2.LanguageId OR @LanguageId = 0)
	ORDER BY t1.[Order]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Roles_GetAllRoles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Roles_GetAllRoles (
    @ApplicationName           nvarchar(256))
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN
    SELECT RoleName
    FROM   dbo.aspnet_Roles WHERE ApplicationId = @ApplicationId
    ORDER BY RoleName
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogEntryItemSeo_List]...';


GO

CREATE PROCEDURE dbo.ecf_CatalogEntryItemSeo_List
    @CatalogEntries dbo.udttEntityList readonly
AS
BEGIN
    SELECT n.*
    FROM CatalogEntry n
    JOIN @CatalogEntries r ON n.CatalogEntryId = r.EntityId
    ORDER BY r.SortOrder
    
    SELECT s.*
    FROM CatalogItemSeo s
    JOIN @CatalogEntries r on s.CatalogEntryId = r.EntityId

END
GO
PRINT N'Creating [dbo].[ecf_CatalogEntry_List]...';


GO

CREATE PROCEDURE dbo.ecf_CatalogEntry_List
    @CatalogEntries dbo.udttEntityList READONLY,
	@ResponseGroup INT = NULL
AS
BEGIN
	SELECT n.*
	FROM CatalogEntry n
	JOIN @CatalogEntries r ON n.CatalogEntryId = r.EntityId
	ORDER BY r.SortOrder
	
	SELECT s.*
	FROM CatalogItemSeo s
	JOIN @CatalogEntries r ON s.CatalogEntryId = r.EntityId

	IF @ResponseGroup IS NULL
	BEGIN
		SELECT er.CatalogId, er.CatalogEntryId, er.CatalogNodeId, er.SortOrder
		FROM NodeEntryRelation er
		JOIN @CatalogEntries r ON er.CatalogEntryId = r.EntityId
	END
	
	DECLARE @CatalogEntryIds udttContentList
	INSERT INTO @CatalogEntryIds
	SELECT EntityId from @CatalogEntries

	exec ecf_CatalogEntry_Components @CatalogEntryIds, @ResponseGroup
END
GO
PRINT N'Creating [dbo].[main_MenuItemGetSubMenuByMenuItemId]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_MenuItemGetSubMenuByMenuItemId]
	@MenuItemId int
 AS
DECLARE @OutlineLevel int
DECLARE @Outline nvarchar(2048)
DECLARE @MenuId int
SELECT @OutlineLevel = [OutlineLevel] ,@Outline = [Outline] + CAST([MenuItemId] AS NVARCHAR(2048)) +'.', @MenuId = [MenuId]
	FROM dbo.main_MenuItem
	WHERE [MenuItemId] = @MenuItemId
SELECT [MenuItemId], [Text], [CommandText], [CommandType], [Outline], [OutlineLevel], [IsRoot], [IsVisible], [MenuId], [LeftImageUrl],[RightImageUrl], [IsInherits],[Order]
	FROM dbo.main_MenuItem
	WHERE [Outline] Like @Outline +'%' AND [OutlineLevel] = @OutlineLevel + 1 AND [IsRoot] = 0
	ORDER BY [Order]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_UsersInRoles_FindUsersInRole]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_UsersInRoles_FindUsersInRole
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256),
    @UserNameToMatch  nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(1)
     DECLARE @RoleId uniqueidentifier
     SELECT  @RoleId = NULL

     SELECT  @RoleId = RoleId
     FROM    dbo.aspnet_Roles
     WHERE   LOWER(@RoleName) = LoweredRoleName AND ApplicationId = @ApplicationId

     IF (@RoleId IS NULL)
         RETURN(1)

    SELECT u.UserName
    FROM   dbo.aspnet_Users u, dbo.aspnet_UsersInRoles ur
    WHERE  u.UserId = ur.UserId AND @RoleId = ur.RoleId AND u.ApplicationId = @ApplicationId AND LoweredUserName LIKE LOWER(@UserNameToMatch)
    ORDER BY u.UserName
    RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Warehouse_WarehouseId]...';


GO
CREATE PROCEDURE [dbo].[ecf_Warehouse_WarehouseId]
	@ApplicationId uniqueidentifier,
	@WarehouseId int
AS
BEGIN
	select * from [Warehouse] 
		where [ApplicationId] = @ApplicationId and [WarehouseId] = @WarehouseId
END
GO
PRINT N'Creating [dbo].[main_MenuItemGetRootByMenuId]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_MenuItemGetRootByMenuId]
	@MenuId int
 AS
SELECT [MenuItemId], [Text], [CommandText], [CommandType], [Outline], [OutlineLevel], [IsRoot], [IsVisible], [MenuId], [LeftImageUrl],[RightImageUrl], [IsInherits],[Order]
	FROM dbo.main_MenuItem
	WHERE [MenuId] = @MenuId AND [IsRoot] = 1
	ORDER BY [Order]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_UsersInRoles_GetUsersInRoles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_UsersInRoles_GetUsersInRoles
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(1)
     DECLARE @RoleId uniqueidentifier
     SELECT  @RoleId = NULL

     SELECT  @RoleId = RoleId
     FROM    dbo.aspnet_Roles
     WHERE   LOWER(@RoleName) = LoweredRoleName AND ApplicationId = @ApplicationId

     IF (@RoleId IS NULL)
         RETURN(1)

    SELECT u.UserName
    FROM   dbo.aspnet_Users u, dbo.aspnet_UsersInRoles ur
    WHERE  u.UserId = ur.UserId AND @RoleId = ur.RoleId AND u.ApplicationId = @ApplicationId
    ORDER BY u.UserName
    RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Warehouse]...';


GO
CREATE PROCEDURE [dbo].[ecf_Warehouse]
	@ApplicationId uniqueidentifier
AS
BEGIN
	select * from [Warehouse] 
		where [ApplicationId] = @ApplicationId
		order by [Name]
END
GO
PRINT N'Creating [dbo].[main_MenuItemGetPathByMenuItemId]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_MenuItemGetPathByMenuItemId]
	@MenuItemId int
 AS
DECLARE @Outline nvarchar(2048)
DECLARE @MenuId int
SELECT @Outline = [Outline], @MenuId =[MenuId]
	FROM dbo.main_MenuItem
	WHERE [MenuItemId] = @MenuItemId
SELECT [MenuItemId], [Text], [CommandText], [CommandType], [Outline], [OutlineLevel], [IsRoot], [IsVisible], [MenuId], [LeftImageUrl],[RightImageUrl], [IsInherits],[Order]
	FROM dbo.main_MenuItem
	WHERE @Outline LIKE [Outline] + CAST([MenuItemId] AS NVARCHAR(2048)) +'.%' AND [MenuId] = @MenuId
	ORDER BY [OutlineLevel]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Order_ReturnReasonsDictionairyName]...';


GO

CREATE PROCEDURE [dbo].[ecf_Order_ReturnReasonsDictionairyName]
	@ApplicationId uniqueidentifier,
	@ReturnReasonName nvarchar(50)
 AS
 BEGIN
	SELECT [ReturnReasonId]
		  ,[ReturnReasonText]
		  ,[ApplicationId]
		FROM dbo.ReturnReasonDictionary
		where ApplicationId = @ApplicationId and ReturnReasonText = @ReturnReasonName
END
GO
PRINT N'Creating [dbo].[aspnet_UsersInRoles_RemoveUsersFromRoles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_UsersInRoles_RemoveUsersFromRoles
	@ApplicationName  nvarchar(256),
	@UserNames		  nvarchar(4000),
	@RoleNames		  nvarchar(4000)
AS
BEGIN
	DECLARE @AppId uniqueidentifier
	SELECT  @AppId = NULL
	SELECT  @AppId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
	IF (@AppId IS NULL)
		RETURN(2)


	DECLARE @TranStarted   bit
	SET @TranStarted = 0

	IF( @@TRANCOUNT = 0 )
	BEGIN
		BEGIN TRANSACTION
		SET @TranStarted = 1
	END

	DECLARE @tbNames  table(Name nvarchar(256) NOT NULL PRIMARY KEY)
	DECLARE @tbRoles  table(RoleId uniqueidentifier NOT NULL PRIMARY KEY)
	DECLARE @tbUsers  table(UserId uniqueidentifier NOT NULL PRIMARY KEY)
	DECLARE @Num	  int
	DECLARE @Pos	  int
	DECLARE @NextPos  int
	DECLARE @Name	  nvarchar(256)
	DECLARE @CountAll int
	DECLARE @CountU	  int
	DECLARE @CountR	  int


	SET @Num = 0
	SET @Pos = 1
	WHILE(@Pos <= LEN(@RoleNames))
	BEGIN
		SELECT @NextPos = CHARINDEX(N',', @RoleNames,  @Pos)
		IF (@NextPos = 0 OR @NextPos IS NULL)
			SELECT @NextPos = LEN(@RoleNames) + 1
		SELECT @Name = RTRIM(LTRIM(SUBSTRING(@RoleNames, @Pos, @NextPos - @Pos)))
		SELECT @Pos = @NextPos+1

		INSERT INTO @tbNames VALUES (@Name)
		SET @Num = @Num + 1
	END

	INSERT INTO @tbRoles
	  SELECT RoleId
	  FROM   dbo.aspnet_Roles ar, @tbNames t
	  WHERE  LOWER(t.Name) = ar.LoweredRoleName AND ar.ApplicationId = @AppId
	SELECT @CountR = @@ROWCOUNT

	IF (@CountR <> @Num)
	BEGIN
		SELECT TOP 1 N'', Name
		FROM   @tbNames
		WHERE  LOWER(Name) NOT IN (SELECT ar.LoweredRoleName FROM dbo.aspnet_Roles ar,  @tbRoles r WHERE r.RoleId = ar.RoleId)
		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(2)
	END


	DELETE FROM @tbNames WHERE 1=1
	SET @Num = 0
	SET @Pos = 1


	WHILE(@Pos <= LEN(@UserNames))
	BEGIN
		SELECT @NextPos = CHARINDEX(N',', @UserNames,  @Pos)
		IF (@NextPos = 0 OR @NextPos IS NULL)
			SELECT @NextPos = LEN(@UserNames) + 1
		SELECT @Name = RTRIM(LTRIM(SUBSTRING(@UserNames, @Pos, @NextPos - @Pos)))
		SELECT @Pos = @NextPos+1

		INSERT INTO @tbNames VALUES (@Name)
		SET @Num = @Num + 1
	END

	INSERT INTO @tbUsers
	  SELECT UserId
	  FROM   dbo.aspnet_Users ar, @tbNames t
	  WHERE  LOWER(t.Name) = ar.LoweredUserName AND ar.ApplicationId = @AppId

	SELECT @CountU = @@ROWCOUNT
	IF (@CountU <> @Num)
	BEGIN
		SELECT TOP 1 Name, N''
		FROM   @tbNames
		WHERE  LOWER(Name) NOT IN (SELECT au.LoweredUserName FROM dbo.aspnet_Users au,  @tbUsers u WHERE u.UserId = au.UserId)

		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(1)
	END

	SELECT  @CountAll = COUNT(*)
	FROM	dbo.aspnet_UsersInRoles ur, @tbUsers u, @tbRoles r
	WHERE   ur.UserId = u.UserId AND ur.RoleId = r.RoleId

	IF (@CountAll <> @CountU * @CountR)
	BEGIN
		SELECT TOP 1 UserName, RoleName
		FROM		 @tbUsers tu, @tbRoles tr, dbo.aspnet_Users u, dbo.aspnet_Roles r
		WHERE		 u.UserId = tu.UserId AND r.RoleId = tr.RoleId AND
					 tu.UserId NOT IN (SELECT ur.UserId FROM dbo.aspnet_UsersInRoles ur WHERE ur.RoleId = tr.RoleId) AND
					 tr.RoleId NOT IN (SELECT ur.RoleId FROM dbo.aspnet_UsersInRoles ur WHERE ur.UserId = tu.UserId)
		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(3)
	END

	DELETE FROM dbo.aspnet_UsersInRoles
	WHERE UserId IN (SELECT UserId FROM @tbUsers)
	  AND RoleId IN (SELECT RoleId FROM @tbRoles)
	IF( @TranStarted = 1 )
		COMMIT TRANSACTION
	RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogRelation]...';


GO

CREATE PROCEDURE [dbo].[ecf_CatalogRelation]
	@ApplicationId uniqueidentifier,
	@CatalogId int,
	@CatalogNodeId int,
	@CatalogEntryId int,
	@GroupName nvarchar(100),
	@ResponseGroup int
AS
BEGIN
	declare @CatalogNode as int
	declare @CatalogEntry as int
	declare @NodeEntry as int

	set @CatalogNode = 1
	set @CatalogEntry = 2
	set @NodeEntry = 4

	if(@ResponseGroup & @CatalogNode = @CatalogNode)
		SELECT CNR.* FROM CatalogNodeRelation CNR
			INNER JOIN CatalogNode CN ON CN.CatalogNodeId = CNR.ParentNodeId AND (CN.CatalogId = @CatalogId OR @CatalogId = 0)
		WHERE CN.ApplicationId = @ApplicationId AND (@CatalogNodeId = 0 OR CNR.ParentNodeId = @CatalogNodeId)
		ORDER BY CNR.SortOrder
	else
		select top 0 * from CatalogNodeRelation

	if(@ResponseGroup & @CatalogEntry = @CatalogEntry)
		SELECT CER.* FROM CatalogEntryRelation CER
			INNER JOIN CatalogEntry CE ON CE.CatalogEntryId = CER.ParentEntryId AND (CE.CatalogId = @CatalogId OR @CatalogId = 0)
		WHERE
			CE.ApplicationId = @ApplicationId AND
			(CER.ParentEntryId = @CatalogEntryId OR @CatalogEntryId = 0) AND
			(CER.GroupName = @GroupName OR LEN(@GroupName) = 0)
		ORDER BY CER.SortOrder
	else
		select top 0 * from CatalogEntryRelation

	if(@ResponseGroup & @NodeEntry = @NodeEntry)
	BEGIN
		declare @execStmt nvarchar(1000)
		set @execStmt = 'SELECT NER.CatalogId, NER.CatalogEntryId, NER.CatalogNodeId, NER.SortOrder FROM NodeEntryRelation NER
			INNER JOIN [Catalog] C ON C.CatalogId = NER.CatalogId
		WHERE 
			C.ApplicationId = @ApplicationId '
		
		if @CatalogId!=0
			set @execStmt = @execStmt + ' AND (NER.CatalogId = @CatalogId) '
		if @CatalogNodeId!=0
			set @execStmt = @execStmt + ' AND (NER.CatalogNodeId = @CatalogNodeId) '
		if @CatalogEntryId!=0
			set @execStmt = @execStmt + ' AND (NER.CatalogEntryId = @CatalogEntryId) '

		set @execStmt = @execStmt + ' ORDER BY NER.SortOrder'
		
		declare @pars nvarchar(500)
		set @pars = '@ApplicationId uniqueidentifier, @CatalogId int, @CatalogNodeId int, @CatalogEntryId int'
		exec sp_executesql @execStmt, @pars,
			@ApplicationId=@ApplicationId, @CatalogId=@CatalogId, @CatalogNodeId=@CatalogNodeId, @CatalogEntryId=@CatalogEntryId
	END
	else
		select top 0 CatalogId, CatalogEntryId, CatalogNodeId, SortOrder from NodeEntryRelation
END
GO
PRINT N'Creating [dbo].[main_MenuItemGetParentByMenuItemId]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_MenuItemGetParentByMenuItemId]
	@MenuItemId int
 AS
DECLARE @Outline nvarchar(2048)
SELECT @Outline = [Outline]
	FROM dbo.main_MenuItem
	WHERE [MenuItemId] = @MenuItemId
SELECT [MenuItemId], [Text], [CommandText], [CommandType], [Outline], [OutlineLevel], [IsRoot], [IsVisible], [MenuId], [LeftImageUrl],[RightImageUrl], [IsInherits],[Order]
	FROM dbo.main_MenuItem
	WHERE [Outline] + CAST([MenuItemId] AS NVARCHAR(2048)) + '.' =  @Outline
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Order_ReturnReasonsDictionairyId]...';


GO

CREATE PROCEDURE [dbo].[ecf_Order_ReturnReasonsDictionairyId]
	@ApplicationId uniqueidentifier,
	@ReturnReasonId int
 AS
 BEGIN
	SELECT [ReturnReasonId]
		  ,[ReturnReasonText]
		  ,[ApplicationId]
		  ,[Ordering]
		  ,[Visible]
		FROM dbo.ReturnReasonDictionary
		where ApplicationId = @ApplicationId and ReturnReasonId = @ReturnReasonId
END
GO
PRINT N'Creating [dbo].[aspnet_UsersInRoles_AddUsersToRoles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_UsersInRoles_AddUsersToRoles
	@ApplicationName  nvarchar(256),
	@UserNames		  nvarchar(4000),
	@RoleNames		  nvarchar(4000),
	@CurrentTimeUtc   datetime
AS
BEGIN
	DECLARE @AppId uniqueidentifier
	SELECT  @AppId = NULL
	SELECT  @AppId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
	IF (@AppId IS NULL)
		RETURN(2)
	DECLARE @TranStarted   bit
	SET @TranStarted = 0

	IF( @@TRANCOUNT = 0 )
	BEGIN
		BEGIN TRANSACTION
		SET @TranStarted = 1
	END

	DECLARE @tbNames	table(Name nvarchar(256) NOT NULL PRIMARY KEY)
	DECLARE @tbRoles	table(RoleId uniqueidentifier NOT NULL PRIMARY KEY)
	DECLARE @tbUsers	table(UserId uniqueidentifier NOT NULL PRIMARY KEY)
	DECLARE @Num		int
	DECLARE @Pos		int
	DECLARE @NextPos	int
	DECLARE @Name		nvarchar(256)

	SET @Num = 0
	SET @Pos = 1
	WHILE(@Pos <= LEN(@RoleNames))
	BEGIN
		SELECT @NextPos = CHARINDEX(N',', @RoleNames,  @Pos)
		IF (@NextPos = 0 OR @NextPos IS NULL)
			SELECT @NextPos = LEN(@RoleNames) + 1
		SELECT @Name = RTRIM(LTRIM(SUBSTRING(@RoleNames, @Pos, @NextPos - @Pos)))
		SELECT @Pos = @NextPos+1

		INSERT INTO @tbNames VALUES (@Name)
		SET @Num = @Num + 1
	END

	INSERT INTO @tbRoles
	  SELECT RoleId
	  FROM   dbo.aspnet_Roles ar, @tbNames t
	  WHERE  LOWER(t.Name) = ar.LoweredRoleName AND ar.ApplicationId = @AppId

	IF (@@ROWCOUNT <> @Num)
	BEGIN
		SELECT TOP 1 Name
		FROM   @tbNames
		WHERE  LOWER(Name) NOT IN (SELECT ar.LoweredRoleName FROM dbo.aspnet_Roles ar,  @tbRoles r WHERE r.RoleId = ar.RoleId)
		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(2)
	END

	DELETE FROM @tbNames WHERE 1=1
	SET @Num = 0
	SET @Pos = 1

	WHILE(@Pos <= LEN(@UserNames))
	BEGIN
		SELECT @NextPos = CHARINDEX(N',', @UserNames,  @Pos)
		IF (@NextPos = 0 OR @NextPos IS NULL)
			SELECT @NextPos = LEN(@UserNames) + 1
		SELECT @Name = RTRIM(LTRIM(SUBSTRING(@UserNames, @Pos, @NextPos - @Pos)))
		SELECT @Pos = @NextPos+1

		INSERT INTO @tbNames VALUES (@Name)
		SET @Num = @Num + 1
	END

	INSERT INTO @tbUsers
	  SELECT UserId
	  FROM   dbo.aspnet_Users ar, @tbNames t
	  WHERE  LOWER(t.Name) = ar.LoweredUserName AND ar.ApplicationId = @AppId

	IF (@@ROWCOUNT <> @Num)
	BEGIN
		DELETE FROM @tbNames
		WHERE LOWER(Name) IN (SELECT LoweredUserName FROM dbo.aspnet_Users au,  @tbUsers u WHERE au.UserId = u.UserId)

		INSERT dbo.aspnet_Users (ApplicationId, UserId, UserName, LoweredUserName, IsAnonymous, LastActivityDate)
		  SELECT @AppId, NEWID(), Name, LOWER(Name), 0, @CurrentTimeUtc
		  FROM   @tbNames

		INSERT INTO @tbUsers
		  SELECT  UserId
		  FROM	dbo.aspnet_Users au, @tbNames t
		  WHERE   LOWER(t.Name) = au.LoweredUserName AND au.ApplicationId = @AppId
	END

	IF (EXISTS (SELECT * FROM dbo.aspnet_UsersInRoles ur, @tbUsers tu, @tbRoles tr WHERE tu.UserId = ur.UserId AND tr.RoleId = ur.RoleId))
	BEGIN
		SELECT TOP 1 UserName, RoleName
		FROM		 dbo.aspnet_UsersInRoles ur, @tbUsers tu, @tbRoles tr, aspnet_Users u, aspnet_Roles r
		WHERE		u.UserId = tu.UserId AND r.RoleId = tr.RoleId AND tu.UserId = ur.UserId AND tr.RoleId = ur.RoleId

		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(3)
	END

	INSERT INTO dbo.aspnet_UsersInRoles (UserId, RoleId)
	SELECT UserId, RoleId
	FROM @tbUsers, @tbRoles

	IF( @TranStarted = 1 )
		COMMIT TRANSACTION
	RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogNodesList]...';


GO

CREATE PROCEDURE [dbo].[ecf_CatalogNodesList]
(
	@CatalogId int,
	@CatalogNodeId int,
	@EntryMetaSQLClause nvarchar(max),
	@OrderClause nvarchar(100),
	@StartingRec int,
	@NumRecords int,
	@ReturnInactive bit = 0,
	@ReturnTotalCount bit = 1
)
AS

BEGIN
	SET NOCOUNT ON

	declare @execStmtString nvarchar(max)
	declare @selectStmtString nvarchar(max)
	declare @query_tmp nvarchar(max)
	declare @EntryMetaSQLClauseLength bigint
	declare @TableName_tmp sysname
	declare @SelectEntryMetaQuery_tmp nvarchar(max)
	set @EntryMetaSQLClauseLength = LEN(@EntryMetaSQLClause)

	set @execStmtString=N''

	-- assign ORDER BY statement if it is empty
	if(Len(RTrim(LTrim(@OrderClause))) = 0)
		set @OrderClause = N'ID ASC'

    -- Construct meta class joins for CatalogEntry table if a WHERE clause has been specified for Entry Meta data
    IF(@EntryMetaSQLClauseLength>0)
    BEGIN
    	-- If there is a meta SQL clause provided, cycle through all the available product meta classes
    	--print 'Iterating through entry meta classes'
    	-- Similar to [ecf_CatalogEntrySearch], but simpler due to fewer variations, i.e.:
    	--   No @Classes parameter
    	--   No @Namespace
    	-- Left in the commented out localization join for future reference
    	DECLARE MetaClassCursor CURSOR READ_ONLY
    	FOR SELECT C.TableName FROM MetaClass C INNER JOIN MetaClass C2 ON C.ParentClassId = C2.MetaClassId
    		WHERE C.IsSystem = 0 and C2.[Name] = 'CatalogEntry'
    
    	OPEN MetaClassCursor
    	FETCH NEXT FROM MetaClassCursor INTO @TableName_tmp
    	WHILE (@@fetch_status = 0)
    	BEGIN 
    		--print 'Metaclass Table: ' + @TableName_tmp
            set @Query_tmp = 'select META.ObjectId as ''Key'', 100 as ''Rank'' from ' + @TableName_tmp + ' META' -- INNER JOIN ' + @TableName_tmp + '_Localization LOC ON META.ObjectId = LOC.Id'
    		set @query_tmp = @query_tmp + ' WHERE ' + @EntryMetaSQLClause
    		--print '@Query_tmp: ' + @Query_tmp
    
    		-- Add meta Where clause
    
    		if(@SelectEntryMetaQuery_tmp is null)
    			set @SelectEntryMetaQuery_tmp = @Query_tmp;
    		else
    			set @SelectEntryMetaQuery_tmp = @SelectEntryMetaQuery_tmp + N' UNION ALL ' + @Query_tmp;
    
    	FETCH NEXT FROM MetaClassCursor INTO @TableName_tmp
    	END
    	CLOSE MetaClassCursor
	    DEALLOCATE MetaClassCursor

		set @SelectEntryMetaQuery_tmp = N' INNER JOIN (select distinct U.[KEY], MIN(U.Rank) AS Rank from (' + @SelectEntryMetaQuery_tmp + N') U GROUP BY U.[KEY]) META ON CE.[CatalogEntryId] = META.[KEY] '
    END
    ELSE
    BEGIN
        set @SelectEntryMetaQuery_tmp = N''
    END

	if (COALESCE(@CatalogNodeId, 0)=0)
	begin
		-- if @CatalogNodeId=0
		set @selectStmtString=N'select SEL.*, row_number() over(order by '+ @OrderClause +N') as RowNumber
				from
				(
					-- select Catalog Nodes
					SELECT CN.[CatalogNodeId] as ID, CN.[Name], ''Node'' as Type, CN.[Code], CN.[StartDate], CN.[EndDate], CN.[IsActive], CN.[SortOrder], OG.[NAME] as Owner
						FROM [CatalogNode] CN 
							JOIN Catalog C ON (CN.CatalogId = C.CatalogId)
                            LEFT JOIN cls_Organization OG ON (OG.OrganizationId = C.Owner)
						WHERE CatalogNodeId IN
						(SELECT DISTINCT N.CatalogNodeId from [CatalogNode] N
							LEFT OUTER JOIN CatalogNodeRelation NR ON N.CatalogNodeId = NR.ChildNodeId
							WHERE
							(
								(N.CatalogId = @CatalogId AND N.ParentNodeId = @CatalogNodeId)
								OR
								(NR.CatalogId = @CatalogId AND NR.ParentNodeId = @CatalogNodeId)
							)
							AND
							((N.IsActive = 1) or @ReturnInactive = 1)
						)

					UNION

					-- select Catalog Entries
					SELECT CE.[CatalogEntryId] as ID, CE.[Name], CE.ClassTypeId as Type, CE.[Code], CE.[StartDate], CE.[EndDate], CE.[IsActive], 0, OG.[NAME] as Owner
						FROM [CatalogEntry] CE
							JOIN Catalog C ON (CE.CatalogId = C.CatalogId)'
							+ @SelectEntryMetaQuery_tmp
							+ N'
                            LEFT JOIN cls_Organization OG ON (OG.OrganizationId = C.Owner)
					WHERE
						CE.CatalogId = @CatalogId AND
						NOT EXISTS(SELECT * FROM NodeEntryRelation R WHERE R.CatalogId = @CatalogId and CE.CatalogEntryId = R.CatalogEntryId) AND
						((CE.IsActive = 1) or @ReturnInactive = 1)
				) SEL'
	end
	else
	begin
		-- if @CatalogNodeId!=0

		-- Get the original catalog id for the given catalog node
		SELECT @CatalogId = [CatalogId] FROM [CatalogNode] WHERE [CatalogNodeId] = @CatalogNodeId

		set @selectStmtString=N'select SEL.*, row_number() over(order by '+ @OrderClause +N') as RowNumber
			from
			(
				-- select Catalog Nodes
				SELECT CN.[CatalogNodeId] as ID, CN.[Name], ''Node'' as Type, CN.[Code], CN.[StartDate], CN.[EndDate], CN.[IsActive], CN.[SortOrder], OG.[NAME] as Owner
					FROM [CatalogNode] CN 
						JOIN Catalog C ON (CN.CatalogId = C.CatalogId)
						--We actually dont need to join NodeEntryRelation to get the SortOrder because it is always 0
                        --JOIN CatalogEntry CE ON CE.CatalogId = C.CatalogId
						--LEFT JOIN NodeEntryRelation NER ON (NER.CatalogId = CN.CatalogId And NER.CatalogNodeId = CN.CatalogNodeId  AND CE.CatalogEntryId = NER.CatalogEntryId ) 
                        LEFT JOIN cls_Organization OG ON (OG.OrganizationId = C.Owner)
					WHERE CN.CatalogNodeId IN
				(SELECT DISTINCT N.CatalogNodeId from [CatalogNode] N
				LEFT OUTER JOIN CatalogNodeRelation NR ON N.CatalogNodeId = NR.ChildNodeId
				WHERE
					((N.CatalogId = @CatalogId AND N.ParentNodeId = @CatalogNodeId) OR (NR.CatalogId = @CatalogId AND NR.ParentNodeId = @CatalogNodeId)) AND
					((N.IsActive = 1) or @ReturnInactive = 1))

				UNION
				
				-- select Catalog Entries
				SELECT CE.[CatalogEntryId] as ID, CE.[Name], CE.ClassTypeId as Type, CE.[Code], CE.[StartDate], CE.[EndDate], CE.[IsActive], R.[SortOrder], OG.[NAME] as Owner
					FROM [CatalogEntry] CE
						JOIN Catalog C ON (CE.CatalogId = C.CatalogId)
						JOIN NodeEntryRelation R ON R.CatalogEntryId = CE.CatalogEntryId'
							+ @SelectEntryMetaQuery_tmp
							+ N'
                        LEFT JOIN cls_Organization OG ON (OG.OrganizationId = C.Owner)
				WHERE
					R.CatalogNodeId = @CatalogNodeId AND
					R.CatalogId = @CatalogId AND
						((CE.IsActive = 1) or @ReturnInactive = 1)
			) SEL'
	end

	if(@ReturnTotalCount = 1) -- Only return count if we requested it
		set @execStmtString=N'with SelNodes(ID, Name, Type, Code, StartDate, EndDate, IsActive, SortOrder, Owner, RowNumber)
			as
			(' + @selectStmtString +
			N'),
			SelNodesCount(TotalCount)
			as
			(
				select count(ID) from SelNodes
			)
			select  TOP ' + cast(@NumRecords as nvarchar(50)) + ' ID, Name, Type, Code, StartDate, EndDate, IsActive, SortOrder, Owner, RowNumber, C.TotalCount as RecordCount
			from SelNodes, SelNodesCount C
			where RowNumber >= ' + cast(@StartingRec as nvarchar(50)) + 
			' order by '+ @OrderClause
	else
		set @execStmtString=N'with SelNodes(ID, Name, Type, Code, StartDate, EndDate, IsActive, SortOrder, Owner, RowNumber)
			as
			(' + @selectStmtString +
			N')
			select  TOP ' + cast(@NumRecords as nvarchar(50)) + ' ID, Name, Type, Code, StartDate, EndDate, IsActive, SortOrder, Owner, RowNumber
			from SelNodes
			where RowNumber >= ' + cast(@StartingRec as nvarchar(50)) +
			' order by '+ @OrderClause
	
	declare @ParamDefinition nvarchar(500)
	set @ParamDefinition = N'@CatalogId int,
						@CatalogNodeId int,
						@StartingRec int,
						@NumRecords int,
						@ReturnInactive bit';
	exec sp_executesql @execStmtString, @ParamDefinition,
			@CatalogId = @CatalogId,
			@CatalogNodeId = @CatalogNodeId,
			@StartingRec = @StartingRec,
			@NumRecords = @NumRecords,
			@ReturnInactive = @ReturnInactive

	/*if(@ReturnTotalCount = 1) -- Only return count if we requested it
			set @RecordCount = (select count(ID) from SelNodes)*/

	SET NOCOUNT OFF
END
GO
PRINT N'Creating [dbo].[main_MenuItemGetBySiteIdLanguageId]...';


GO
CREATE PROCEDURE [dbo].[main_MenuItemGetBySiteIdLanguageId]
	@SiteId uniqueidentifier,
	@LanguageId int
AS
SELECT t1.MenuItemId, t1.MenuId, t1.CommandText, t1.CommandType, t1.LeftImageUrl, t1.RightImageUrl, t1.IsVisible, t1.IsRoot, t1.[Order], t2.[Text], t2.ToolTip, t2.LanguageId, t1.Outline, t1.OutlineLevel, t1.IsInherits
	FROM main_MenuItem t1 LEFT JOIN main_MenuItem_Resources t2 ON(t1.MenuItemId = t2.MenuItemId  AND (@LanguageId = t2.LanguageId OR @LanguageId = 0))
	INNER JOIN main_Menu M ON M.MenuId = t1.MenuId
	WHERE M.SiteId = @SiteId
	ORDER BY [Order]
GO
PRINT N'Creating [dbo].[ecf_Order_ReturnReasonsDictionairy]...';


GO

CREATE PROCEDURE [dbo].[ecf_Order_ReturnReasonsDictionairy]
	@ApplicationId uniqueidentifier,
	@ReturnInactive bit = 0
 AS
 BEGIN
	SELECT * FROM dbo.ReturnReasonDictionary RRD
	where ApplicationId = @ApplicationId and
	(([Visible] = 1) or @ReturnInactive = 1)
	order by RRD.[Ordering], RRD.[ReturnReasonText]
END
GO
PRINT N'Creating [dbo].[aspnet_Roles_RoleExists]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Roles_RoleExists
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(0)
    IF (EXISTS (SELECT RoleName FROM dbo.aspnet_Roles WHERE LOWER(@RoleName) = LoweredRoleName AND ApplicationId = @ApplicationId ))
        RETURN(1)
    ELSE
        RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogNodeSearch]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogNodeSearch]
(
	@ApplicationId			uniqueidentifier,
	@SearchSetId			uniqueidentifier,
	@Language 				nvarchar(50),
	@Catalogs 				nvarchar(max),
	@CatalogNodes 			nvarchar(max),
	@SQLClause 				nvarchar(max),
	@MetaSQLClause 			nvarchar(max),
	@OrderBy 				nvarchar(max),
	@Namespace				nvarchar(1024) = N'',
	@Classes				nvarchar(max) = N'',
	@StartingRec 			int,
	@NumRecords   			int,
	@RecordCount			int OUTPUT
)
AS
BEGIN
	SET NOCOUNT ON
	
	DECLARE @query_tmp nvarchar(max)
	DECLARE @FilterQuery_tmp nvarchar(max)
	DECLARE @TableName_tmp sysname
	DECLARE @SelectMetaQuery_tmp nvarchar(max)
	DECLARE @FromQuery_tmp nvarchar(max)
	DECLARE @FullQuery nvarchar(max)

	-- 1. Cycle through all the available catalog node meta classes
	print 'Iterating through meta classes'
	DECLARE MetaClassCursor CURSOR READ_ONLY
	FOR SELECT C.TableName FROM MetaClass C INNER JOIN MetaClass C2 ON C.ParentClassId = C2.MetaClassId
		WHERE C.Namespace like @Namespace + '%' AND (C.[Name] in (select Item from ecf_splitlist(@Classes)) or @Classes = '')
		and C.IsSystem = 0 and C2.[Name] = 'CatalogNode'

		OPEN MetaClassCursor
		FETCH NEXT FROM MetaClassCursor INTO @TableName_tmp
		WHILE (@@fetch_status = 0)
		BEGIN 
			print 'Metaclass Table: ' + @TableName_tmp
			set @Query_tmp = 'select 100 as ''Rank'', META.ObjectId as ''Key'' from ' + @TableName_tmp + ' META'
			
			-- Add meta Where clause
			if(LEN(@MetaSQLClause)>0)
				set @query_tmp = @query_tmp + ' WHERE ' + @MetaSQLClause
			
			if(@SelectMetaQuery_tmp is null)
				set @SelectMetaQuery_tmp = @Query_tmp;
			else
				set @SelectMetaQuery_tmp = @SelectMetaQuery_tmp + N' UNION ALL ' + @Query_tmp;

		FETCH NEXT FROM MetaClassCursor INTO @TableName_tmp
		END
		CLOSE MetaClassCursor
		DEALLOCATE MetaClassCursor

	-- Create from command
	SET @FromQuery_tmp = N'FROM CatalogNode' + N' INNER JOIN (select distinct U.[KEY], U.Rank from (' + @SelectMetaQuery_tmp + N') U) META ON CatalogNode.CatalogNodeId = META.[KEY] '

	set @FromQuery_tmp = @FromQuery_tmp + N' LEFT OUTER JOIN CatalogNodeRelation NR ON CatalogNode.CatalogNodeId = NR.ChildNodeId'
	set @FromQuery_tmp = @FromQuery_tmp + N' LEFT OUTER JOIN [Catalog] CR ON NR.CatalogId = NR.CatalogId'
	set @FromQuery_tmp = @FromQuery_tmp + N' LEFT OUTER JOIN [Catalog] C ON C.CatalogId = CatalogNode.CatalogId'
	set @FromQuery_tmp = @FromQuery_tmp + N' LEFT OUTER JOIN [CatalogNode] CN ON CatalogNode.ParentNodeId = CN.CatalogNodeId'
	set @FromQuery_tmp = @FromQuery_tmp + N' LEFT OUTER JOIN [CatalogNode] CNR ON NR.ParentNodeId = CNR.CatalogNodeId'

	if(Len(@OrderBy) = 0)
	begin
		set @OrderBy = 'CatalogNode.CatalogNodeId'
	end

	/* CATALOG AND NODE FILTERING */
	set @FilterQuery_tmp =  N' WHERE CatalogNode.ApplicationId = ''' + cast(@ApplicationId as nvarchar(100)) + ''' AND ((1=1'
	if(Len(@Catalogs) != 0)
		set @FilterQuery_tmp = @FilterQuery_tmp + N' AND (C.[Name] in (select Item from ecf_splitlist(''' + @Catalogs + ''')))'

	if(Len(@CatalogNodes) != 0)
		set @FilterQuery_tmp = @FilterQuery_tmp + N' AND (CatalogNode.[Code] in (select Item from ecf_splitlist(''' + REPLACE(@CatalogNodes,N'''',N'''''') + '''))))'
	else
		set @FilterQuery_tmp = @FilterQuery_tmp + N')'

	set @FilterQuery_tmp = @FilterQuery_tmp + N' OR (1=1'
	if(Len(@Catalogs) != 0)
		set @FilterQuery_tmp = '' + @FilterQuery_tmp + N' AND (CR.[Name] in (select Item from ecf_splitlist(''' + @Catalogs + ''')))'

	if(Len(@CatalogNodes) != 0)
		set @FilterQuery_tmp = @FilterQuery_tmp + N' AND (CNR.[Code] in (select Item from ecf_splitlist(''' + REPLACE(@CatalogNodes,N'''',N'''''') + '''))))'
	else
		set @FilterQuery_tmp = @FilterQuery_tmp + N')'

	set @FilterQuery_tmp = @FilterQuery_tmp + N')'
	
	-- add sql clause statement here, if specified
	if(Len(@SQLClause) != 0)
		set @FilterQuery_tmp = @FilterQuery_tmp + N' AND (' + @SqlClause + ')'

	set @FullQuery = N'SELECT count(CatalogNode.CatalogNodeId) OVER() TotalRecords, CatalogNode.CatalogNodeId, Rank, ROW_NUMBER() OVER(ORDER BY ' + @OrderBy + N') RowNumber ' + @FromQuery_tmp + @FilterQuery_tmp

	-- use temp table variable
	set @FullQuery = N'with OrderedResults as (' + @FullQuery +') INSERT INTO @Page_temp (TotalRecords, CatalogNodeId) SELECT top(' + cast(@NumRecords as nvarchar(50)) + ') TotalRecords, CatalogNodeId FROM OrderedResults WHERE RowNumber > ' + cast(@StartingRec as nvarchar(50)) + ';'
	set @FullQuery = 'declare @Page_temp table (TotalRecords int, CatalogNodeId int);' + @FullQuery + ';select @RecordCount = TotalRecords from @Page_temp;INSERT INTO CatalogNodeSearchResults (SearchSetId, CatalogNodeId) SELECT ''' + cast(@SearchSetId as nvarchar(100)) + N''', CatalogNodeId from @Page_temp;'
	--print @FullQuery
	exec sp_executesql @FullQuery, N'@RecordCount int output', @RecordCount = @RecordCount OUTPUT

	SET NOCOUNT OFF
END
GO
PRINT N'Creating [dbo].[main_MenuItemGetByMenuItemIdAndLanguageId]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_MenuItemGetByMenuItemIdAndLanguageId]
	@MenuItemId int,
	@LanguageId int
 AS
SELECT t1.MenuItemId, t1.MenuId, t1.CommandText, t1.CommandType, t1.LeftImageUrl, t1.RightImageUrl, t1.IsVisible, t1.IsRoot, t1.[Order], t2.[Text], t2.ToolTip, t2.LanguageId, t1.Outline, t1.OutlineLevel, t1.IsInherits
	FROM main_MenuItem t1 JOIN main_MenuItem_Resources t2 ON(t1.MenuItemId = t2.MenuItemId)
	WHERE (t1.MenuItemId = @MenuItemId)   AND (@LanguageId = t2.LanguageId OR @LanguageId = 0)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_PickList]...';


GO

CREATE PROCEDURE [dbo].[ecf_PickList]
	@ShipmentPackingStatus AS NVARCHAR(64)
AS
BEGIN
	SELECT PL.*, CAST((SELECT COUNT(*) FROM [Shipment] S WHERE S.[PickListId] = PL.[PickListId] AND S.[Status] = @ShipmentPackingStatus) AS INT) AS [PackingShipments]
	FROM [PickList] PL
	ORDER BY PL.[Name]
END
GO
PRINT N'Creating [dbo].[aspnet_Roles_DeleteRole]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Roles_DeleteRole
    @ApplicationName            nvarchar(256),
    @RoleName                   nvarchar(256),
    @DeleteOnlyIfRoleIsEmpty    bit
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(1)

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
        BEGIN TRANSACTION
        SET @TranStarted = 1
    END
    ELSE
        SET @TranStarted = 0

    DECLARE @RoleId   uniqueidentifier
    SELECT  @RoleId = NULL
    SELECT  @RoleId = RoleId FROM dbo.aspnet_Roles WHERE LoweredRoleName = LOWER(@RoleName) AND ApplicationId = @ApplicationId

    IF (@RoleId IS NULL)
    BEGIN
        SELECT @ErrorCode = 1
        GOTO Cleanup
    END
    IF (@DeleteOnlyIfRoleIsEmpty <> 0)
    BEGIN
        IF (EXISTS (SELECT RoleId FROM dbo.aspnet_UsersInRoles  WHERE @RoleId = RoleId))
        BEGIN
            SELECT @ErrorCode = 2
            GOTO Cleanup
        END
    END


    DELETE FROM dbo.aspnet_UsersInRoles  WHERE @RoleId = RoleId

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    DELETE FROM dbo.aspnet_Roles WHERE @RoleId = RoleId  AND ApplicationId = @ApplicationId

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
        COMMIT TRANSACTION
    END

    RETURN(0)

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
        ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogNode_UriLanguage]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogNode_UriLanguage]
	@ApplicationId uniqueidentifier,
	@Uri nvarchar(255),
	@LanguageCode nvarchar(50),
	@ReturnInactive bit = 0
AS
BEGIN
	
	SELECT N.* from [CatalogNode] N 
	INNER JOIN CatalogItemSeo S ON N.CatalogNodeId = S.CatalogNodeId
	WHERE
		N.ApplicationId = @ApplicationId AND
		S.Uri = @Uri AND (S.LanguageCode = @LanguageCode OR @LanguageCode is NULL) AND
		((N.IsActive = 1) or @ReturnInactive = 1)

	SELECT S.* from CatalogItemSeo S
	INNER JOIN CatalogNode N ON N.CatalogNodeId = S.CatalogNodeId
	WHERE
		S.ApplicationId = @ApplicationId AND
		S.Uri = @Uri AND (S.LanguageCode = @LanguageCode OR @LanguageCode is NULL) AND
		((N.IsActive = 1) or @ReturnInactive = 1)
END
GO
PRINT N'Creating [dbo].[main_MenuItemGetByMenuItemId]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_MenuItemGetByMenuItemId]
	@MenuItemId int
 AS
SELECT [MenuItemId], [Text], [CommandText], [CommandType], [Outline], [OutlineLevel], [IsRoot], [IsVisible], [MenuId], [LeftImageUrl],[RightImageUrl], [IsInherits],[Order]
	FROM dbo.main_MenuItem
	WHERE [MenuItemId] = @MenuItemId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogNode_SiteId]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogNode_SiteId]
    @SiteId uniqueidentifier,
	@ReturnInactive bit = 0
AS
BEGIN
	
	SELECT N.* from [CatalogNode] N 
	INNER JOIN SiteCatalog SC ON SC.CatalogId = N.CatalogId
	WHERE
		N.ParentNodeId = 0 AND
		SC.SiteId = @SiteId AND
		((N.IsActive = 1) or @ReturnInactive = 1)
	ORDER BY N.SortOrder

	SELECT S.* from CatalogItemSeo S
	INNER JOIN CatalogNode N ON N.CatalogNodeId = S.CatalogNodeId
	INNER JOIN SiteCatalog SC ON SC.CatalogId = N.CatalogId
	WHERE
		N.ParentNodeId = 0 AND
		SC.SiteId = @SiteId AND
		((N.IsActive = 1) or @ReturnInactive = 1)	

END
GO
PRINT N'Creating [dbo].[main_MenuItemGetByMenuId]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_MenuItemGetByMenuId]
	@MenuId int
 AS
SELECT [MenuItemId], [Text], [CommandText], [CommandType], [Outline], [OutlineLevel], [IsRoot], [IsVisible], [MenuId], [LeftImageUrl],[RightImageUrl], [IsInherits],[Order]
	FROM dbo.main_MenuItem
	WHERE [MenuId] = @MenuId AND [IsRoot] = 0
	ORDER BY [Order]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Jurisdiction_JurisdictionId]...';


GO
CREATE PROCEDURE [dbo].[ecf_Jurisdiction_JurisdictionId]
	@ApplicationId uniqueidentifier,
	@JurisdictionId int,
	@ReturnAllGroups bit = 0
AS
BEGIN
	select * from [Jurisdiction] 
		where [ApplicationId] = @ApplicationId and [JurisdictionId] = @JurisdictionId

	IF @ReturnAllGroups=1 BEGIN -- return all jurisdiction groups of the found jurisdiction type
		select * from [JurisdictionGroup] 
			where [JurisdictionType] IN (select [JurisdictionType] from [Jurisdiction] 
											where [ApplicationId] = @ApplicationId and [JurisdictionId] = @JurisdictionId)
	END ELSE BEGIN
		select JG.* from [JurisdictionGroup] JG
			inner join [JurisdictionRelation] JR on JR.[JurisdictionGroupId] = JG.[JurisdictionGroupId]
			where JG.[ApplicationId] = @ApplicationId and JR.[JurisdictionId] = @JurisdictionId
	END

	select JR.* from [JurisdictionRelation] JR
		inner join [Jurisdiction] J on JR.[JurisdictionId]=J.[JurisdictionId]
		where J.[ApplicationId] = @ApplicationId and JR.[JurisdictionId] = @JurisdictionId
END
GO
PRINT N'Creating [dbo].[aspnet_UsersInRoles_GetRolesForUser]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_UsersInRoles_GetRolesForUser
    @ApplicationName  nvarchar(256),
    @UserName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(1)
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL

    SELECT  @UserId = UserId
    FROM    dbo.aspnet_Users
    WHERE   LoweredUserName = LOWER(@UserName) AND ApplicationId = @ApplicationId

    IF (@UserId IS NULL)
        RETURN(1)

    SELECT r.RoleName
    FROM   dbo.aspnet_Roles r, dbo.aspnet_UsersInRoles ur
    WHERE  r.RoleId = ur.RoleId AND r.ApplicationId = @ApplicationId AND ur.UserId = @UserId
    ORDER BY r.RoleName
    RETURN (0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogNode_GetAllChildEntries]...';


GO

create procedure ecf_CatalogNode_GetAllChildEntries
    @catalogNodeIds udttCatalogNodeList readonly
as
begin
    with all_node_relations as 
    (
        select ParentNodeId, CatalogNodeId as ChildNodeId from CatalogNode
        where ParentNodeId > 0
        union
        select ParentNodeId, ChildNodeId from CatalogNodeRelation
    ),
    hierarchy as
    (
        select 
            n.CatalogNodeId,
            '|' + CAST(n.CatalogNodeId as nvarchar(4000)) + '|' as CyclePrevention
        from @catalogNodeIds n
        union all
        select
            children.ChildNodeId as CatalogNodeId,
            parent.CyclePrevention + CAST(children.ChildNodeId as nvarchar(4000)) + '|' as CyclePrevention
        from hierarchy parent
        join all_node_relations children on parent.CatalogNodeId = children.ParentNodeId
        where CHARINDEX('|' + CAST(children.ChildNodeId as nvarchar(4000)) + '|', parent.CyclePrevention) = 0
    )
    select distinct ce.CatalogEntryId, ce.ApplicationId, ce.Code
    from CatalogEntry ce
    join NodeEntryRelation ner on ce.CatalogEntryId = ner.CatalogEntryId
    where ner.CatalogNodeId in (select CatalogNodeId from hierarchy)
end
GO
PRINT N'Creating [dbo].[main_MenuItemGetByMenuIdLanguageId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[main_MenuItemGetByMenuIdLanguageId]
	@MenuId int,
	@LanguageId int
 AS
	SELECT t1.MenuItemId, t1.MenuId, t1.CommandText, t1.CommandType, t1.LeftImageUrl, t1.RightImageUrl, t1.IsVisible, t1.IsRoot, t1.[Order], t2.[Text], t2.ToolTip, t2.LanguageId, t1.Outline, t1.OutlineLevel, t1.IsInherits
	FROM main_MenuItem t1 JOIN main_MenuItem_Resources t2 ON(t1.MenuItemId = t2.MenuItemId)
	WHERE (t1.MenuId = @MenuId)   AND (@LanguageId = t2.LanguageId OR @LanguageId = 0)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Jurisdiction_JurisdictionGroupId]...';


GO
CREATE PROCEDURE [dbo].[ecf_Jurisdiction_JurisdictionGroupId]
	@ApplicationId uniqueidentifier,
	@JurisdictionGroupId int
AS
BEGIN
	select * from [JurisdictionGroup] 
		where [ApplicationId] = @ApplicationId and [JurisdictionGroupId] = @JurisdictionGroupId

	select JR.* from [JurisdictionRelation] JR
		inner join [JurisdictionGroup] J on JR.[JurisdictionGroupId]=J.[JurisdictionGroupId]
		where J.[ApplicationId] = @ApplicationId and JR.[JurisdictionGroupId] = @JurisdictionGroupId
END
GO
PRINT N'Creating [dbo].[aspnet_UsersInRoles_IsUserInRole]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_UsersInRoles_IsUserInRole
    @ApplicationName  nvarchar(256),
    @UserName         nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(2)
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    DECLARE @RoleId uniqueidentifier
    SELECT  @RoleId = NULL

    SELECT  @UserId = UserId
    FROM    dbo.aspnet_Users
    WHERE   LoweredUserName = LOWER(@UserName) AND ApplicationId = @ApplicationId

    IF (@UserId IS NULL)
        RETURN(2)

    SELECT  @RoleId = RoleId
    FROM    dbo.aspnet_Roles
    WHERE   LoweredRoleName = LOWER(@RoleName) AND ApplicationId = @ApplicationId

    IF (@RoleId IS NULL)
        RETURN(3)

    IF (EXISTS( SELECT * FROM dbo.aspnet_UsersInRoles WHERE  UserId = @UserId AND RoleId = @RoleId))
        RETURN(1)
    ELSE
        RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogNode_Code]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogNode_Code]
	@ApplicationId uniqueidentifier,
	@CatalogNodeCode nvarchar(100),
	@ReturnInactive bit = 0
AS
BEGIN	
	SELECT N.* from [CatalogNode] N
	WHERE
		N.ApplicationId = @ApplicationId AND
		N.Code = @CatalogNodeCode AND
		((N.IsActive = 1) or @ReturnInactive = 1)

	SELECT S.* from CatalogItemSeo S
	INNER JOIN CatalogNode N ON N.CatalogNodeId = S.CatalogNodeId
	WHERE
		N.ApplicationId = @ApplicationId AND
		N.Code = @CatalogNodeCode AND
		((N.IsActive = 1) or @ReturnInactive = 1)
END
GO
PRINT N'Creating [dbo].[main_MenuItemGetAllChild]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_MenuItemGetAllChild]
	@MenuItemId int
 AS
DECLARE @OutlineLevel int
DECLARE @Outline nvarchar(2048)
DECLARE @MenuId int
SELECT @OutlineLevel = [OutlineLevel] ,@Outline = [Outline] + CAST([MenuItemId] AS NVARCHAR(2048)) +'.', @MenuId = [MenuId]
	FROM dbo.main_MenuItem
	WHERE [MenuItemId] = @MenuItemId
SELECT [MenuItemId], [Text], [CommandText], [CommandType], [Outline], [OutlineLevel], [IsRoot], [IsVisible], [MenuId], [LeftImageUrl],[RightImageUrl], [IsInherits],[Order]
	FROM dbo.main_MenuItem
	WHERE [Outline] Like @Outline +'%'  AND [MenuId] = @MenuId
	ORDER BY [Order]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Jurisdiction_JurisdictionGroups]...';


GO
CREATE PROCEDURE [dbo].[ecf_Jurisdiction_JurisdictionGroups]
	@ApplicationId uniqueidentifier,
	@JurisdictionType int = null
AS
BEGIN
	select * from [JurisdictionGroup] JG
		where [ApplicationId] = @ApplicationId and 
			(COALESCE(@JurisdictionType, JG.[JurisdictionType]) = JG.[JurisdictionType] OR JG.[JurisdictionType] is null)
END
GO
PRINT N'Creating [dbo].[main_MenuItemDelete]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_MenuItemDelete]
	@MenuItemId int
 AS
--get menu id
DECLARE @MenuId int
SELECT @MenuId = MenuId
	FROM dbo.main_MenuItem
	WHERE [MenuItemId] = @MenuItemId
--get element order
DECLARE @OrderFirst int
SELECT @OrderFirst = [Order]
	FROM dbo.main_MenuItem
	WHERE [MenuItemId] = @MenuItemId
--get outline
DECLARE @Outline nvarchar(2048)
SELECT @Outline = [Outline] + CAST([MenuItemId] AS NVARCHAR(2048)) +'.'
	FROM dbo.main_MenuItem
	WHERE [MenuItemId] = @MenuItemId
--get count of items to remove (menu item and its children)
DECLARE @ItemCount int
SELECT @ItemCount = COUNT(*) + 1
	FROM dbo.main_MenuItem
	WHERE [MenuId] = @MenuId 
		AND [Outline] LIKE @Outline +'%'
--preserve order for remaining menu items
--remove menu item and its children
DELETE FROM dbo.main_MenuItem
	WHERE [MenuItemId] = @MenuItemId 
		OR [Outline] LIKE @Outline + '%'
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_RegisterMetaFieldInSystemClass]...';


GO

CREATE PROCEDURE mdpsp_sys_RegisterMetaFieldInSystemClass
-- Add the parameters for the stored procedure here
	@ClassName nvarchar(255),
	@TableName nvarchar(255),
	@Namespace nvarchar(255)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @ClassId int
	DECLARE @FieldName nvarchar(255)
	DECLARE @FriendlyFieldName nvarchar(255)
	DECLARE @DataTypeId int
	DECLARE @Length int
	DECLARE @Nullable bit
	DECLARE @DUMMY int

    SELECT @ClassId = [MetaClassId] FROM [MetaClass] WHERE [Name] = @ClassName

	DECLARE fieldCursor CURSOR FOR
		SELECT @Namespace+ N'.' + @ClassName, SC .[name] as Name , SC .[name] , @ClassId ,MDT .[DataTypeId], SC .[length], SC .[isnullable], 0, 0, 0, 0  FROM syscolumns AS SC
			INNER JOIN sysobjects SO ON SO.[id] = SC.[id]
			INNER JOIN systypes ST ON ST.[xtype] = SC.[xtype]
			INNER JOIN MetaDataType MDT ON MDT.[Name] = ST.[name]
		WHERE SO.[id]  = object_id( @TableName) and OBJECTPROPERTY( SO.[id], N'IsTable') = 1 and ST.name<>'sysname' and SC .[name] NOT IN (SELECT MF.Name FROM [MetaField] MF WHERE SystemMetaClassId = @ClassId)
		ORDER BY colorder

	OPEN fieldCursor
	FETCH NEXT FROM fieldCursor INTO @Namespace, @FieldName, @FriendlyFieldName, @ClassId, @DataTypeId, @Length, @Nullable, @DUMMY, @DUMMY, @DUMMY, @DUMMY
	WHILE @@FETCH_STATUS = 0
		BEGIN
			PRINT 'Registering new MetaField' + @FieldName

			INSERT INTO [MetaField] ([Namespace], [Name], [FriendlyName], [SystemMetaClassId], [DataTypeId], [Length], [AllowNulls], [MultiLanguageValue], [AllowSearch], [IsEncrypted])
            VALUES (@Namespace, @FieldName, @FriendlyFieldName, @ClassId, @DataTypeId, @Length, @Nullable,  0, 0, 0)

            INSERT INTO [MetaClassMetaFieldRelation]  (MetaClassId, MetaFieldId)
					SELECT MC.[MetaClassId], @@IDENTITY FROM (
						SELECT [MetaClassId] FROM MetaClass WHERE ParentClassId = @ClassId UNION
						SELECT @ClassId
					) MC

			FETCH NEXT FROM fieldCursor INTO @Namespace, @FieldName, @FriendlyFieldName, @ClassId, @DataTypeId, @Length, @Nullable, @DUMMY, @DUMMY, @DUMMY, @DUMMY
		END
	CLOSE fieldCursor
	DEALLOCATE fieldCursor
END
GO
PRINT N'Creating [dbo].[ecf_Jurisdiction_JurisdictionGroupCode]...';


GO
CREATE PROCEDURE [dbo].[ecf_Jurisdiction_JurisdictionGroupCode]
	@ApplicationId uniqueidentifier,
	@JurisdictionGroupCode nvarchar(50)
AS
BEGIN
	select * from [JurisdictionGroup] 
		where [ApplicationId] = @ApplicationId and [Code] = @JurisdictionGroupCode

	select JR.* from [JurisdictionRelation] JR
		inner join [JurisdictionGroup] J on JR.[JurisdictionGroupId]=J.[JurisdictionGroupId]
		where J.[ApplicationId] = @ApplicationId and J.[Code] = @JurisdictionGroupCode
END
GO
PRINT N'Creating [dbo].[ecf_CatalogNode_CatalogParentNode]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogNode_CatalogParentNode]
    @CatalogId int,
	@ParentNodeId int,
	@ReturnInactive bit = 0
AS
BEGIN

	SELECT * FROM [CatalogNode] WHERE CatalogNodeId IN
		(SELECT DISTINCT N.CatalogNodeId from [CatalogNode] N
		LEFT OUTER JOIN CatalogNodeRelation NR ON N.CatalogNodeId = NR.ChildNodeId
		WHERE
			((N.CatalogId = @CatalogId AND N.ParentNodeId = @ParentNodeId) OR (NR.CatalogId = @CatalogId AND NR.ParentNodeId = @ParentNodeId)) AND
			((N.IsActive = 1) or @ReturnInactive = 1))
	ORDER BY SortOrder

	SELECT S.* from CatalogItemSeo S WHERE CatalogNodeId IN
	(SELECT DISTINCT N.CatalogNodeId from [CatalogNode] N
		LEFT OUTER JOIN CatalogNodeRelation NR ON N.CatalogNodeId = NR.ChildNodeId
		WHERE
			((N.CatalogId = @CatalogId AND N.ParentNodeId = @ParentNodeId) OR (NR.CatalogId = @CatalogId AND NR.ParentNodeId = @ParentNodeId)) AND
			((N.IsActive = 1) or @ReturnInactive = 1))

END
GO
PRINT N'Creating [dbo].[main_MenuItemAdd]...';


GO
CREATE PROCEDURE [dbo].[main_MenuItemAdd]
	@MenuId int,
	@CommandText nvarchar(1024) = '',
	@CommandType int = 0,
	@Text nvarchar(250) = 'Mediachase CMS',
	@LeftImageUrl nvarchar(1024) = NULL,
	@RightImageUrl nvarchar(1024) = NULL,
	@IsVisible bit = 1,
	@IsInherits bit = 0,
	@Order int = 0,
	@retval int output
AS
BEGIN
--get menu item [Outline]
DECLARE @Outline  nvarchar(1024)
SELECT @Outline = [Outline]  + CAST([MenuItemId] AS NVARCHAR(2048)) + '.'
	FROM dbo.main_MenuItem
	WHERE [MenuId] = @MenuId AND [IsRoot] = 1
--append item to bottom
INSERT INTO dbo.main_MenuItem
	([MenuId],[CommandText],[CommandType],[Text],[LeftImageUrl],[RightImageUrl],[IsVisible],[IsInherits],[Order],[Outline],[OutlineLevel], [IsRoot])
	VALUES
	(@MenuId, @CommandText, @CommandType, @Text, @LeftImageUrl, @RightImageUrl, @IsVisible, @IsInherits, @Order, @Outline, 1, 0 )
SET @retval = SCOPE_IDENTITY()
END
GO
PRINT N'Creating [dbo].[ecf_Jurisdiction_JurisdictionCode]...';


GO
CREATE PROCEDURE [dbo].[ecf_Jurisdiction_JurisdictionCode]
	@ApplicationId uniqueidentifier,
	@JurisdictionCode nvarchar(50),
	@ReturnAllGroups bit = 0
AS
BEGIN
	select * from [Jurisdiction] 
		where [ApplicationId] = @ApplicationId and [Code] = @JurisdictionCode

	IF @ReturnAllGroups=1 BEGIN -- return all jurisdiction groups of the found jurisdiction type
		select * from [JurisdictionGroup] 
			where [JurisdictionType] IN (select [JurisdictionType] from [Jurisdiction] 
											where [ApplicationId] = @ApplicationId and [Code] = @JurisdictionCode)
	END ELSE BEGIN
		select JG.* from [JurisdictionGroup] JG
			inner join [JurisdictionRelation] JR on JR.[JurisdictionGroupId] = JG.[JurisdictionGroupId]
			inner join [Jurisdiction] J on JR.[JurisdictionId] = J.[JurisdictionId]
			where JG.[ApplicationId] = @ApplicationId and J.[Code] = @JurisdictionCode
	END

	select JR.* from [JurisdictionRelation] JR
		inner join [Jurisdiction] J on JR.[JurisdictionId]=J.[JurisdictionId]
		where J.[ApplicationId] = @ApplicationId and J.[Code] = @JurisdictionCode
END
GO
PRINT N'Creating [dbo].[ecf_CatalogNode_CatalogName]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogNode_CatalogName]
	@ApplicationId uniqueidentifier,
	@CatalogName nvarchar(150),
	@ReturnInactive bit = 0
AS
BEGIN
	SELECT N.* from [CatalogNode] N
	INNER JOIN [Catalog] C ON C.CatalogId = N.CatalogId
	WHERE
		N.ApplicationId = @ApplicationId AND
		C.[Name] = @CatalogName AND N.ParentNodeId = 0 AND 
		((N.IsActive = 1) or @ReturnInactive = 1)
	ORDER BY N.SortOrder

	SELECT S.* from CatalogItemSeo S
	INNER JOIN CatalogNode N ON N.CatalogNodeId = S.CatalogNodeId
	INNER JOIN [Catalog] C ON C.CatalogId = N.CatalogId
	WHERE
		N.ApplicationId = @ApplicationId AND
		C.[Name] = @CatalogName AND N.ParentNodeId = 0 AND 
		((N.IsActive = 1) or @ReturnInactive = 1)
END
GO
PRINT N'Creating [dbo].[main_MenuItem_ResourcesUpdate]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_MenuItem_ResourcesUpdate]
	@MenuItemId int,
	@LanguageId int,
	@Text nvarchar(250),
	@ToolTip nvarchar(250)
 AS
UPDATE dbo.main_MenuItem_Resources
	SET [Text] = @Text,
	[ToolTip] = @ToolTip
	WHERE [MenuItemId] = @MenuItemId AND [LanguageId] = @LanguageId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_GetChildBySegment]...';


GO

CREATE PROCEDURE [dbo].[mdpsp_GetChildBySegment]
	@parentId int,
	@UriSegment nvarchar(255)
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON;

    SELECT
    S.CatalogNodeId as ChildId,
    S.LanguageCode,
    1 as ContentType
    FROM CatalogItemSeo S WITH (NOLOCK) WHERE CatalogNodeId IN

    (SELECT DISTINCT N.CatalogNodeId from [CatalogNode] N WITH (NOLOCK)
        LEFT OUTER JOIN CatalogNodeRelation NR ON N.CatalogNodeId = NR.ChildNodeId
        WHERE
            (N.ParentNodeId = @parentId OR NR.ParentNodeId = @parentId) AND UriSegment = @UriSegment AND N.IsActive = 1)

    UNION

    SELECT
    S.CatalogEntryId as ChildId,
    S.LanguageCode,
    0 as ContentType
    from CatalogItemSeo S WITH (NOLOCK)
    INNER JOIN CatalogEntry N ON N.CatalogEntryId = S.CatalogEntryId
    INNER JOIN NodeEntryRelation R ON R.CatalogEntryId = N.CatalogEntryId
    WHERE
        R.CatalogNodeId = @parentId AND UriSegment = @UriSegment AND N.IsActive = 1
END
GO
PRINT N'Creating [dbo].[ecf_Jurisdiction]...';


GO
CREATE PROCEDURE [dbo].[ecf_Jurisdiction]
	@ApplicationId uniqueidentifier,
	@JurisdictionType int = null
AS
BEGIN
	select * from [Jurisdiction] 
		where [ApplicationId] = @ApplicationId and 
			(COALESCE(@JurisdictionType, [JurisdictionType]) = [JurisdictionType] OR [JurisdictionType] is null)

	select * from [JurisdictionGroup] 
		where [ApplicationId] = @ApplicationId and 
		(COALESCE(@JurisdictionType, [JurisdictionType]) = [JurisdictionType] OR [JurisdictionType] is null)

	select JR.* from [JurisdictionRelation] JR
		inner join [Jurisdiction] J on JR.[JurisdictionId]=J.[JurisdictionId]
		inner join [JurisdictionGroup] JG on JR.[JurisdictionGroupId]=JG.[JurisdictionGroupId]
		where J.[ApplicationId] = @ApplicationId and JG.[ApplicationId] = @ApplicationId and
			(COALESCE(@JurisdictionType, J.[JurisdictionType]) = J.[JurisdictionType] OR J.[JurisdictionType] is null) and
			(COALESCE(@JurisdictionType, JG.[JurisdictionType]) = JG.[JurisdictionType] OR JG.[JurisdictionType] is null)
END
GO
PRINT N'Creating [dbo].[ecf_CatalogNode_CatalogId]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogNode_CatalogId]
    @CatalogId int,
	@ReturnInactive bit = 0
AS
BEGIN

	SELECT N.* from [CatalogNode] N
	WHERE
		N.CatalogId = @CatalogId AND
		((N.IsActive = 1) or @ReturnInactive = 1)
	ORDER BY N.SortOrder

	SELECT S.* from CatalogItemSeo S
	INNER JOIN CatalogNode N ON N.CatalogNodeId = S.CatalogNodeId
	WHERE
		N.CatalogId = @CatalogId AND
		((N.IsActive = 1) or @ReturnInactive = 1)	

END
GO
PRINT N'Creating [dbo].[main_MenuItem_ResourcesGetAvaliableLanguage]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_MenuItem_ResourcesGetAvaliableLanguage]
	@MenuItemId int
 AS
SELECT DISTINCT([LanguageId]) FROM dbo.main_MenuItem_Resources
	WHERE MenuItemId = @MenuItemId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_ShippingMethod_GetCases]...';


GO
CREATE PROCEDURE [dbo].[ecf_ShippingMethod_GetCases]
	@ShippingMethodId uniqueidentifier,
	@CountryCode nvarchar(50) = null,
	@Total money = null,
	@StateProvinceCode nvarchar(50) = null,
	@ZipPostalCode nvarchar(50) = null,
	@District nvarchar(50) = null,
	@County nvarchar(50) = null,
	@City nvarchar(50) = null
AS
BEGIN
/* First set all empty string variables except ShippingMethodId to NULL */
IF (LTRIM(RTRIM(@CountryCode)) = '')
  SET @CountryCode = NULL

IF (LTRIM(RTRIM(@StateProvinceCode)) = '')
  SET @StateProvinceCode = NULL

IF (LTRIM(RTRIM(@ZipPostalCode)) = '')
  SET @ZipPostalCode = NULL

IF (LTRIM(RTRIM(@District)) = '')
  SET @District = NULL

IF (LTRIM(RTRIM(@County)) = '')
  SET @County = NULL

IF (LTRIM(RTRIM(@City )) = '')
  SET @City = NULL

/* If Jurisdiction values in database are null or an empty string, they will return the same results */
	SELECT C.Charge, C.Total, C.StartDate, C.EndDate, C.JurisdictionGroupId from ShippingMethodCase C 
		inner join JurisdictionGroup JG ON JG.JurisdictionGroupId = C.JurisdictionGroupId
		inner join JurisdictionRelation JR ON JG.JurisdictionGroupId = JR.JurisdictionGroupId
		inner join Jurisdiction J ON JR.JurisdictionId = J.JurisdictionId
	WHERE 
		(C.StartDate < getutcdate() OR C.StartDate is null) AND 
		(C.EndDate > getutcdate() OR C.EndDate is null) AND 
		C.ShippingMethodId = @ShippingMethodId AND
		(@Total >= C.Total OR @Total is null) AND
		(J.CountryCode = @CountryCode OR (@CountryCode is null and J.CountryCode = 'WORLD')) AND 
		JG.JurisdictionType = 2 /*shipping*/ AND
		(COALESCE(@StateProvinceCode, J.StateProvinceCode) = J.StateProvinceCode OR J.StateProvinceCode is null OR RTRIM(LTRIM(J.StateProvinceCode)) = '') AND
		((REPLACE(@ZipPostalCode,' ','') between REPLACE(J.ZipPostalCodeStart,' ','') and REPLACE(J.ZipPostalCodeEnd,' ','') or @ZipPostalCode is null) OR J.ZipPostalCodeStart is null OR RTRIM(LTRIM(J.ZipPostalCodeStart)) = '') AND
		(COALESCE(@District, J.District) = J.District OR J.District is null OR RTRIM(LTRIM(J.District)) = '') AND
		(COALESCE(@County, J.County) = J.County OR J.County is null OR RTRIM(LTRIM(J.County)) = '') AND
		(COALESCE(@City, J.City) = J.City OR J.City is null OR RTRIM(LTRIM(J.City)) = '')
END
GO
PRINT N'Creating [dbo].[ecf_CatalogNode_Asset]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogNode_Asset]
    @CatalogNodeId int
AS
BEGIN
	SELECT A.* from [CatalogItemAsset] A
	WHERE
		A.CatalogNodeId = @CatalogNodeId
END
GO
PRINT N'Creating [dbo].[main_MenuItem_ResourcesDelete]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_MenuItem_ResourcesDelete]
	@MenuItemId int,
	@LanguageId int
 AS
DELETE FROM dbo.main_MenuItem_Resources
	WHERE [MenuItemId] = @MenuItemId AND ([LanguageId] = @LanguageId OR @LanguageId = 0)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_GetTaxes]...';


GO
CREATE PROCEDURE ecf_GetTaxes
	@ApplicationId uniqueidentifier,
	@SiteId uniqueidentifier,
	@TaxCategory nvarchar(50),
	@LanguageCode nvarchar(50),
	@CountryCode nvarchar(50),
	@StateProvinceCode nvarchar(50) = null,
	@ZipPostalCode nvarchar(50) = null,
	@District nvarchar(50) = null,
	@County nvarchar(50) = null,
	@City nvarchar(50) = null
AS
	SELECT V.Percentage, T.TaxType, T.Name, (select L.DisplayName from TaxLanguage L where L.TaxId = V.TaxId and LanguageCode = @LanguageCode) DisplayName from TaxValue V 
		inner join Tax T ON T.TaxId = V.TaxId
		inner join JurisdictionGroup JG ON JG.JurisdictionGroupId = V.JurisdictionGroupId
		inner join JurisdictionRelation JR ON JG.JurisdictionGroupId = JR.JurisdictionGroupId
		inner join Jurisdiction J ON JR.JurisdictionId = J.JurisdictionId
	WHERE 
		V.AffectiveDate < getutcdate() AND 
		V.TaxCategory = @TaxCategory AND
		(COALESCE(V.SiteId, @SiteId) = @SiteId or SiteId is null) AND
		T.ApplicationId = @ApplicationId AND
		JG.ApplicationId = @ApplicationId AND
		J.CountryCode = @CountryCode AND 
		JG.JurisdictionType = 1 /*tax*/ AND
		(COALESCE(@StateProvinceCode, J.StateProvinceCode) = J.StateProvinceCode OR J.StateProvinceCode is null) AND
		((@ZipPostalCode between J.ZipPostalCodeStart and J.ZipPostalCodeEnd or @ZipPostalCode is null) OR J.ZipPostalCodeStart is null) AND
		(COALESCE(@District, J.District) = J.District OR J.District is null) AND
		(COALESCE(@County, J.County) = J.County OR J.County is null) AND
		(COALESCE(@City, J.City) = J.City OR J.City is null)
GO
PRINT N'Creating [dbo].[ecf_CatalogNode]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogNode]
    @CatalogNodeId int,
	@ReturnInactive bit = 0
AS
BEGIN
	
	SELECT N.* from [CatalogNode] N
	WHERE
		N.CatalogNodeId = @CatalogNodeId AND
		((N.IsActive = 1) or @ReturnInactive = 1)

	SELECT S.* from CatalogItemSeo S
	INNER JOIN CatalogNode N ON N.CatalogNodeId = S.CatalogNodeId
	WHERE
		N.CatalogNodeId = @CatalogNodeId AND
		((N.IsActive = 1) or @ReturnInactive = 1)	

END
GO
PRINT N'Creating [dbo].[main_MenuItem_ResourcesAdd]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_MenuItem_ResourcesAdd]
	@MenuItemId int,
	@LanguageId int,
	@Text nvarchar(250),
	@ToolTip nvarchar(250),
	@retval int output
 AS
INSERT dbo.main_MenuItem_Resources ([MenuItemId],[LanguageId],[Text],[ToolTip])
	VALUES  (@MenuItemId, @LanguageId, @Text,@ToolTip)
SET @retval = @@IDENTITY
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_blob_BlobStorageRemoveExpired]...';


GO
CREATE PROCEDURE [dbo].[mc_blob_BlobStorageRemoveExpired] 
	@PeriodInMin as int
AS
BEGIN
	SET NOCOUNT ON;

	DELETE FROM McBlobStorage 
    WHERE DateDiff(minute, [created], GETUTCDATE()) >= @PeriodInMin AND [isTemporary] = 1
END
GO
PRINT N'Creating [dbo].[ecf_Tax_TaxName]...';


GO
CREATE PROCEDURE [dbo].[ecf_Tax_TaxName]
	@ApplicationId uniqueidentifier,
	@Name nvarchar(50)
AS
BEGIN
	select T.* from [Tax] T 
		where T.[Name] = @Name and T.[ApplicationId] = @ApplicationId

	select TL.* from [TaxLanguage] TL
		inner join [Tax] T on T.[TaxId] = TL.[TaxId]
			where T.[Name] = @Name and T.[ApplicationId] = @ApplicationId

	select TV.* from [TaxValue] TV
		inner join [Tax] T on T.[TaxId] = TV.[TaxId]
			where T.[Name] = @Name and T.[ApplicationId] = @ApplicationId
END
GO
PRINT N'Creating [dbo].[ecf_CatalogEntrySearch_GetResults]...';


GO
create procedure [dbo].[ecf_CatalogEntrySearch_GetResults]
    @SearchSetId uniqueidentifier,
    @FirstResultIndex int,
    @MaxResultCount int
as
begin
    declare @LastResultIndex int
    declare @ApplicationId uniqueidentifier
    set @LastResultIndex = @FirstResultIndex + @MaxResultCount - 1
    
    declare @keyset table (CatalogEntryId int, ApplicationId uniqueidentifier)
    insert into @keyset 
    select CatalogEntryId, ApplicationId
    from CatalogEntrySearchResults_SingleSort ix
    where ix.SearchSetId = @SearchSetId
      and ix.ResultIndex between @FirstResultIndex and @LastResultIndex
    
    select top 1 @ApplicationId = ApplicationId
     from @keyset
      
    select ce.*
    from CatalogEntry ce
    join @keyset ks on ce.CatalogEntryId = ks.CatalogEntryId
    order by ce.CatalogEntryId
    
    select cis.*
    from CatalogItemSeo cis
    join @keyset ks on cis.CatalogEntryId = ks.CatalogEntryId
    where cis.ApplicationId=@ApplicationId
    order by cis.CatalogEntryId
    
    select v.*
    from Variation v
    join @keyset ks on v.CatalogEntryId = ks.CatalogEntryId
    order by v.CatalogEntryId
                    
    select distinct m.*
    from Merchant m
    join Variation v on m.MerchantId = v.MerchantId
    join @keyset ks on v.CatalogEntryId = ks.CatalogEntryId
    where m.ApplicationId=@ApplicationId
   	    
   	select ca.*
   	from CatalogAssociation ca
   	join @keyset ks on ca.CatalogEntryId = ks.CatalogEntryId
    order by ca.CatalogEntryId

   	select cia.*
   	from CatalogItemAsset cia
   	join @keyset ks on cia.CatalogEntryId = ks.CatalogEntryId
    order by cia.CatalogEntryId

   	select ner.*
   	from NodeEntryRelation ner
   	join @keyset ks on ner.CatalogEntryId = ks.CatalogEntryId
    order by ner.CatalogEntryId

	-- Cleanup the loaded OrderGroupIds from SearchResults.
	delete from CatalogEntrySearchResults_SingleSort
	where @SearchSetId = SearchSetId and ResultIndex between @FirstResultIndex and @LastResultIndex
end
GO
PRINT N'Creating [dbo].[main_FileTreeLoadFolderDefaultPage]...';


GO
CREATE PROCEDURE [dbo].[main_FileTreeLoadFolderDefaultPage] 
	@folderId int
AS
 begin
	DECLARE @FolderOutline nvarchar(2048)
	DECLARE @OutlineLevel int
	--get folder outline
	SELECT @FolderOutline = [Outline],@OutlineLevel = [OutlineLevel]
		FROM dbo.main_PageTree
	WHERE [PageId] = @folderId
	--get all files in folder
	SELECT [PageId], [Name], [Outline], [OutlineLevel], [IsFolder], [IsDefault], [Order], [IsPublic], isnull([MasterPage], '')
		FROM dbo.main_PageTree
	WHERE ([Outline] LIKE @FolderOutline + '%') AND ([IsDefault] = 1)
 end
GO
PRINT N'Creating [dbo].[mc_mcweb_FormDocumentSelect]...';


GO
CREATE PROCEDURE [dbo].[mc_mcweb_FormDocumentSelect]
@FormDocumentId AS Int
AS
BEGIN
SET NOCOUNT ON;

SELECT [t01].[FormDocumentId] AS [FormDocumentId], [t01].[MetaClassName] AS [MetaClassName], [t01].[FormDocumentName] AS [FormDocumentName], [t01].[FormDocumentXml] AS [FormDocumentXml], [t01].[MetaUITypeId] AS [MetaUITypeId]
FROM [mcweb_FormDocument] AS [t01]
WHERE ([t01].[FormDocumentId]=@FormDocumentId)
END
GO
PRINT N'Creating [dbo].[ecf_Tax_TaxId]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[ecf_Tax_TaxId]
	@ApplicationId uniqueidentifier,
	@TaxId int	
AS
BEGIN
	select T.* from [Tax] T 
		where T.[TaxId] = @TaxId and T.[ApplicationId] = @ApplicationId

	select TL.* from [TaxLanguage] TL
		inner join [Tax] T on T.[TaxId] = TL.[TaxId]
			where TL.[TaxId] = @TaxId and T.[ApplicationId] = @ApplicationId

	select TV.* from [TaxValue] TV
		inner join [Tax] T on T.[TaxId] = TV.[TaxId]
			where TV.[TaxId] = @TaxId and T.[ApplicationId] = @ApplicationId
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogEntrySearch_Init]...';


GO
CREATE procedure [dbo].[ecf_CatalogEntrySearch_Init]
    @ApplicationId uniqueidentifier,
    @CatalogId int,
    @SearchSetId uniqueidentifier,
    @IncludeInactive bit,
    @EarliestModifiedDate datetime = null,
    @LatestModifiedDate datetime = null,
    @DatabaseClockOffsetMS int = null
as
begin
	declare @purgedate datetime
	begin try
		set @purgedate = datediff(day, 3, GETUTCDATE())
		delete from [CatalogEntrySearchResults_SingleSort] where Created < @purgedate
	end try
	begin catch
	end catch

    declare @MetaTableName sysname
    declare @CatalogEntryIdSubquery nvarchar(max)
    declare @ModifiedFilter nvarchar(4000)
    declare @query nvarchar(max)
    set @CatalogEntryIdSubquery = null
    
    -- @ModifiedFilter: if there is a filter, build the where clause for it here.
    if (@EarliestModifiedDate is not null and @LatestModifiedDate is not null) set @ModifiedFilter = ' where Modified between cast(''' + CONVERT(nvarchar(100), @EarliestModifiedDate, 127) + ''' as datetime) and cast('''  + CONVERT(nvarchar(100), @LatestModifiedDate, 127) + ''' as datetime)'
    else if (@EarliestModifiedDate is not null) set @ModifiedFilter = ' where Modified >= cast(''' + CONVERT(nvarchar(100), @EarliestModifiedDate, 127) + ''' as datetime)'
    else if (@LatestModifiedDate is not null) set @ModifiedFilter = ' where Modified <= cast('''  + CONVERT(nvarchar(100), @LatestModifiedDate, 127) + ''' as datetime)'
    else set @ModifiedFilter = ''
    
    -- @MetaTableSubquery: find all the metaclass tables, and fetch a union of all their keys, applying the @ModifiedFilter.
    declare metatables_cursor cursor local read_only for
        select childClass.TableName
        from MetaClass parentClass
        join MetaClass childClass on parentClass.MetaClassId = childClass.ParentClassId
        where childClass.IsSystem = 0
          and parentClass.Name = 'CatalogEntry'
    open metatables_cursor
    fetch metatables_cursor into @MetaTableName
    while (@@FETCH_STATUS = 0)
    begin
        set @CatalogEntryIdSubquery = 
            case when @CatalogEntryIdSubquery is null then '' else @CatalogEntryIdSubquery + ' union all ' end +
            'select ObjectId from ' + @MetaTableName + @ModifiedFilter
            
        fetch metatables_cursor into @MetaTableName        
    end
    close metatables_cursor
    deallocate metatables_cursor

    -- more @CatalogEntryIdSubquery: find all the catalog entries that have modified relations in NodeEntryRelation, or deleted relations in ApplicationLog
    if (@EarliestModifiedDate is not null and @LatestModifiedDate is not null)
    begin
        -- adjust modified date filters to account for clock difference between database server and application server clocks    
        if (@EarliestModifiedDate is not null and isnull(@DatabaseClockOffsetMS, 0) > 0)
        begin
            set @EarliestModifiedDate = DATEADD(MS, -@DatabaseClockOffsetMS, @EarliestModifiedDate)
        
            if (@EarliestModifiedDate is not null and @LatestModifiedDate is not null) set @ModifiedFilter = ' where Modified between cast(''' + CONVERT(nvarchar(100), @EarliestModifiedDate, 127) + ''' as datetime) and cast('''  + CONVERT(nvarchar(100), @LatestModifiedDate, 127) + ''' as datetime)'
            else if (@EarliestModifiedDate is not null) set @ModifiedFilter = ' where Modified >= cast(''' + CONVERT(nvarchar(100), @EarliestModifiedDate, 127) + ''' as datetime)'
            else if (@LatestModifiedDate is not null) set @ModifiedFilter = ' where Modified <= cast('''  + CONVERT(nvarchar(100), @LatestModifiedDate, 127) + ''' as datetime)'
            else set @ModifiedFilter = ''    
        end
    
        declare @ApplicationLogCreatedFilter nvarchar(4000)
        set @ApplicationLogCreatedFilter = REPLACE(REPLACE(@ModifiedFilter, ' where ', ' and '), 'Modified', 'Created')
        
        set @CatalogEntryIdSubquery =
            case when @CatalogEntryIdSubquery is null then '' else @CatalogEntryIdSubquery + ' union all ' end +
            'select CatalogEntryId from NodeEntryRelation' + @ModifiedFilter +
            ' union all ' +
            'select cast(ObjectKey as int) as CatalogEntryId from ApplicationLog where [Source] = ''catalog'' and [Operation] = ''Modified'' and [ObjectType] = ''relation''' + @ApplicationLogCreatedFilter
    end
   
    set @query = 
    'insert into CatalogEntrySearchResults_SingleSort (SearchSetId, ResultIndex, CatalogEntryId, ApplicationId) ' +
    'select ''' + cast(@SearchSetId as nvarchar(36)) + ''', ROW_NUMBER() over (order by CatalogEntryId), CatalogEntryId, ApplicationId ' +
    'from CatalogEntry ' +
    'where CatalogEntry.ApplicationId = ''' + cast(@ApplicationId as nvarchar(36)) + ''' ' +
      'and CatalogEntry.CatalogId = ' + cast(@CatalogId as nvarchar) + ' ' +
      'and CatalogEntry.CatalogEntryId in (' + @CatalogEntryIdSubquery + ')'
      
    if @IncludeInactive = 0 set @query = @query + ' and CatalogEntry.IsActive = 1'

    execute dbo.sp_executesql @query
    
    select @@ROWCOUNT
end
GO
PRINT N'Creating [dbo].[main_FileTreeMoveTo]...';


GO
CREATE PROCEDURE [dbo].[main_FileTreeMoveTo] 
	@PageId int,
	@NewParentId int
AS

DECLARE @Count int, @MaxOrder int
DECLARE @OutlineOld nvarchar(2048), @OutlineNew nvarchar(2048)

DECLARE @SiteId uniqueidentifier
DECLARE @OrderPar int, @FirstOrder int, @ParLevel int, @FirstLevel int

--if parent IsFolder = 1 - proceed
IF (SELECT [IsFolder] FROM dbo.main_PageTree WHERE [PageId] = @NewParentId) = 1 
BEGIN

	-- get siteId, parent Order, parent outline
	SELECT @SiteId = [SiteId], @OrderPar = [Order], @OutlineNew = [Outline], @ParLevel = [OutlineLevel] 
		FROM dbo.main_PageTree WHERE [PageId] = @NewParentId

	-- if @PageId specified the page, move only this page; otherwise it's a folder it'll be moved with all its pages (by outline)
	-- @useOutline is used to determine whether to move only the page or the whole folder
	declare @useOutline bit
	select @useOutline = [IsFolder], @OutlineOld = [Outline], 
			@OutlineNew = case [IsFolder]
							when 1 then @OutlineNew + [Name] + '/'
							else @OutlineNew + [Name]
						  end,
			@FirstOrder = [Order] - 1,
			@FirstLevel = [OutlineLevel] - 1
		from dbo.[main_PageTree] 
			where [PageId] = @PageId

	set @useOutline = coalesce(@useOutline, 0)

	--get element count
	SELECT @Count = COUNT(*), @MaxOrder = MAX([Order]) FROM dbo.main_PageTree
		WHERE ([PageId] = @PageId) OR (@useOutline=1 AND ([Outline] LIKE @outlineOld + '%' AND [SiteId]=@SiteId))

	--update order
	UPDATE dbo.main_PageTree
		SET [Order] = [Order] - @Count
			WHERE [Order] > @MaxOrder AND [SiteId]=@SiteId	
	UPDATE dbo.main_PageTree
		SET [Order] = [Order] + @Count
		WHERE [Order] > @OrderPar AND [SiteId]=@SiteId

	--update outline, order, outline level
	UPDATE dbo.main_PageTree
		SET [Outline] = REPLACE([Outline],@OutlineOld,@OutlineNew),
			[Order] = [Order] - @FirstOrder + @OrderPar,
			[OutlineLevel] = [OutlineLevel] - @FirstLevel + @ParLevel
		WHERE ([PageId] = @PageId) OR (@useOutline=1 AND ([Outline] LIKE @OutlineOld + '%' AND [SiteId]=@SiteId))
END
GO
PRINT N'Creating [dbo].[mdpsp_sys_UpdateMetaSqlScriptTemplate]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO





CREATE PROCEDURE [dbo].[mdpsp_sys_UpdateMetaSqlScriptTemplate]
	@MetaClassId 	INT,
	@FieldListChanged	NTEXT
AS
	UPDATE MetaClass SET FieldListChangedSqlScript = @FieldListChanged WHERE MetaClassId = @MetaClassId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcweb_FormDocumentDelete]...';


GO
CREATE PROCEDURE [dbo].[mc_mcweb_FormDocumentDelete]
@FormDocumentId AS Int
AS
BEGIN
SET NOCOUNT ON;
DELETE FROM [mcweb_FormDocument]
WHERE
[FormDocumentId] = @FormDocumentId
END
GO
PRINT N'Creating [dbo].[ecf_Tax]...';


GO
CREATE PROCEDURE [dbo].[ecf_Tax]
	@ApplicationId uniqueidentifier,
	@TaxType int = null
AS
BEGIN
	select T.* from [Tax] T 
		where T.[ApplicationId] = @ApplicationId and
			 (COALESCE(@TaxType, T.[TaxType]) = T.[TaxType] OR T.[TaxType] is null)

	select TL.* from [TaxLanguage] TL
		inner join [Tax] T on TL.[TaxId]=T.[TaxId]
		where T.[ApplicationId] = @ApplicationId and 
			(COALESCE(@TaxType, T.[TaxType]) = T.[TaxType] OR T.[TaxType] is null)

	select TV.* from [TaxValue] TV
		inner join [Tax] T on TV.[TaxId]=T.[TaxId]
		where T.[ApplicationId] = @ApplicationId and 
			(COALESCE(@TaxType, T.[TaxType]) = T.[TaxType] OR T.[TaxType] is null)
END
GO
PRINT N'Creating [dbo].[main_FileTreeLoadFolderWithContent]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[main_FileTreeLoadFolderWithContent] 
	@FolderId int
AS
DECLARE @FolderOutline nvarchar(2048)
DECLARE @OutlineLevel int
--get folder outline
SELECT @FolderOutline = [Outline],@OutlineLevel = [OutlineLevel]
	FROM dbo.main_PageTree
	WHERE [PageId] = @FolderId
--get all files in folder
SELECT [PageId], [Name], [Outline], [OutlineLevel], [IsFolder], [IsDefault], [Order], [IsPublic], isnull([MasterPage], '')
	FROM dbo.main_PageTree
	WHERE ([Outline] LIKE @FolderOutline + '%') OR ([PageId] = @FolderId)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_UpdateMetaRule]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_UpdateMetaRule]
	@RuleId	INT,
	@MetaClassId	INT,
	@Data		IMAGE,
	@RetVal	INT	OUTPUT
AS
	SET NOCOUNT ON

	IF ((SELECT COUNT(*) FROM MetaRule WHERE RuleId=@RuleId) = 0)
	BEGIN
		INSERT INTO MetaRule(MetaClassId, Data) VALUES (@MetaClassId, @Data)

		IF @@ERROR <> 0 SET @RetVal = -1
		ELSE SET @RetVal = @@IDENTITY
	END
	ELSE
	BEGIN
		UPDATE MetaRule SET Data=@Data WHERE RuleId=@RuleId
		SET @RetVal = @RuleId
	END

	SET NOCOUNT OFF
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcweb_FormDocumentUpdate]...';


GO
CREATE PROCEDURE [dbo].[mc_mcweb_FormDocumentUpdate]
@MetaClassName AS NVarChar(4000),
@FormDocumentName AS NVarChar(4000),
@FormDocumentXml AS NText,
@MetaUITypeId AS NVarChar(4000),
@FormDocumentId AS Int
AS
BEGIN
SET NOCOUNT ON;

UPDATE [mcweb_FormDocument] SET
[MetaClassName] = @MetaClassName,
[FormDocumentName] = @FormDocumentName,
[FormDocumentXml] = @FormDocumentXml,
[MetaUITypeId] = @MetaUITypeId WHERE
[FormDocumentId] = @FormDocumentId
END
GO
PRINT N'Creating [dbo].[ecf_ShippingPackage_PackageId]...';


GO
CREATE PROCEDURE [dbo].[ecf_ShippingPackage_PackageId]
	@ApplicationId uniqueidentifier,
	@PackageId int
AS
	select * from [Package] P 
		where P.[ApplicationId] = @ApplicationId and P.[PackageId] = @PackageId
GO
PRINT N'Creating [dbo].[ecf_CatalogEntryByCode]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogEntryByCode]
	@ApplicationId uniqueidentifier,
	@CatalogEntryCode nvarchar(100),
	@ReturnInactive bit = 0,
	@ResponseGroup INT = NULL
AS
BEGIN
	DECLARE @CatalogEntryIds udttContentList
	INSERT INTO @CatalogEntryIds
	SELECT N.CatalogEntryId from [CatalogEntry] N
	WHERE
		N.ApplicationId = @ApplicationId AND
		N.Code = @CatalogEntryCode AND
		((N.IsActive = 1) or @ReturnInactive = 1)

	SELECT N.* from [CatalogEntry] N
	INNER JOIN @CatalogEntryIds C ON C.ContentId = N.CatalogEntryId

	SELECT S.* from CatalogItemSeo S
	INNER JOIN @CatalogEntryIds C ON C.ContentId = S.CatalogEntryId

	exec ecf_CatalogEntry_Components @CatalogEntryIds, @ResponseGroup
END
GO
PRINT N'Creating [dbo].[main_FileTreeDelete]...';


GO
CREATE PROCEDURE [dbo].[main_FileTreeDelete]
	@PageId int
 AS
-- get siteId
declare @SiteId uniqueidentifier
set @SiteId=(SELECT [SiteId] FROM [main_PageTree] WHERE [PageId] = @PageId)
--get element order
DECLARE @Order int 
SELECT @Order = [Order] 
	FROM dbo.main_PageTree
	WHERE [PageId] = @PageId
--print 'pageid='+cast(@PageId as nvarchar(10))+'  order='+cast(@order as nvarchar(10))
DECLARE @Count int
--delete element
IF (SELECT [IsFolder] FROM [main_PageTree] WHERE [PageId]  = @PageId) = 1
BEGIN
--FOLDER
--get folder outline
	DECLARE @Outline nvarchar(2048)

	SELECT @Outline = [Outline] 
		FROM [main_PageTree]
		WHERE [PageId] = @PageId

	--print 'outline='+cast(@outline as nvarchar(10))

--count files in this folder
	SELECT @Count = COUNT(*) 
		FROM [main_PageTree]
		WHERE ([Outline] = @Outline) OR ([Outline] LIKE @Outline + '%') AND [SiteId]=@SiteId

--delete all child versions
	DELETE FROM [main_PageVersion] 
		WHERE [PageId] in (SELECT [PageId] FROM [main_PageTree] 
				WHERE ([Outline] LIKE @Outline + '%') AND [SiteId]=@SiteId)

--delete all children
	DECLARE @ChildPageId int
	DECLARE @CurrentOutlineLevel int
	SET @CurrentOutlineLevel = (SELECT [OutlineLevel] FROM [main_PageTree] WHERE [PageId]=@PageId)
	--print '@CurrentOutlineLevel='+cast(@CurrentOutlineLevel as nvarchar(10))
	WHILE EXISTS(SELECT null FROM [main_PageTree] WHERE ([Outline] LIKE @Outline + '%') AND ([OutlineLevel]=@CurrentOutlineLevel+1) AND [SiteId]=@SiteId)
	BEGIN
		SET @ChildPageId = (SELECT TOP 1 [PageId] FROM [main_PageTree] WHERE ([Outline] LIKE @Outline + '%') AND ([OutlineLevel]=@CurrentOutlineLevel+1) AND [SiteId]=@SiteId)
		--print '@ChildPageId='+cast(@ChildPageId as nvarchar(10))
		exec [main_FileTreeDelete] @ChildPageId
	END

-- delete navigation
	DELETE FROM [NavigationCommand]
		WHERE [UrlUID] = @PageId

-- delete page access records
	DELETE FROM [main_PageTreeAccess]
		WHERE [PageId] = @PageId

-- delete page attributes
	DELETE FROM [main_PageAttributes]
		WHERE [PageId] = @PageId

--delete folder
	DELETE FROM [main_PageTree]
		WHERE [PageId] = @PageId
END
ELSE
BEGIN
--SINGLE FILE

	--DECLARE @PageOutline nvarchar(200)
	--SELECT @PageOutline = [Outline] FROM [main_PageTree] WHERE [PageId] = @PageId
	--print 'deleting page '+@PageOutline
	
-- delete navigation
	DELETE FROM [NavigationCommand]
		WHERE [UrlUID] = @PageId

-- delete page access records
	DELETE FROM [main_PageTreeAccess]
		WHERE [PageId] = @PageId

-- delete page attributes
	DELETE FROM [main_PageAttributes]
		WHERE [PageId] = @PageId

-- Delete all versions of the file
	DELETE FROM [main_PageVersion]
		WHERE [PageId] = @PageId

--delete file
	DELETE FROM [main_PageTree]
		WHERE [PageId] = @PageId

--TODO add settings delete
	SET @Count = 1
END
--UPDATE ORDER
UPDATE [main_PageTree]
	SET [Order] = [Order] -  @Count
	WHERE [Order] > @Order AND [SiteId]=@SiteId
GO
PRINT N'Creating [dbo].[mdpsp_sys_UpdateMetaObjectValue]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_UpdateMetaObjectValue]
	@MetaKey	INT,
	@MetaClassId	INT,
	@MetaObjectId	INT
AS
	SET NOCOUNT ON

	IF (EXISTS(SELECT * FROM MetaObjectValue WHERE MetaKey = @MetaKey) )
		UPDATE MetaObjectValue SET MetaClassId = @MetaClassId, MetaObjectId = @MetaObjectId WHERE MetaKey = @MetaKey
	ELSE
		INSERT INTO MetaObjectValue (MetaKey,MetaClassId,MetaObjectId)
			VALUES (@MetaKey,@MetaClassId,@MetaObjectId)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcweb_FormDocumentInsert]...';


GO
CREATE PROCEDURE [dbo].[mc_mcweb_FormDocumentInsert]
(
@FormDocumentId int = NULL OUTPUT,
@MetaClassName nvarchar(50),
@FormDocumentName nvarchar(50),
@FormDocumentXml ntext,
@MetaUITypeId nvarchar(50))
AS
SET NOCOUNT ON
INSERT INTO [mcweb_FormDocument]
(
[MetaClassName],
[FormDocumentName],
[FormDocumentXml],
[MetaUITypeId])
VALUES(
@MetaClassName,
@FormDocumentName,
@FormDocumentXml,
@MetaUITypeId)
SELECT @FormDocumentId = SCOPE_IDENTITY();
RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_ShippingPackage_Name]...';


GO
CREATE PROCEDURE [dbo].[ecf_ShippingPackage_Name]
	@ApplicationId uniqueidentifier,
	@Name nvarchar(100)
AS
	select * from [Package] P 
		where P.[ApplicationId] = @ApplicationId and P.[Name] = @Name
GO
PRINT N'Creating [dbo].[ecf_CatalogEntry_Variation]...';


GO
CREATE PROCEDURE dbo.ecf_CatalogEntry_Variation
    @CatalogEntryId int
as
begin
	select v.*
	from Variation v
	where v.CatalogEntryId = @CatalogEntryId
	
	select m.*
	from Merchant m
	join Variation v on m.MerchantId = v.MerchantId
	where v.CatalogEntryId = @CatalogEntryId
end
GO
PRINT N'Creating [dbo].[dps_TemporaryStorage_Update]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[dps_TemporaryStorage_Update]
	@StorageId as int,
	@PageVersionId as int,
	@Expire as int,
	@PageDocument as image,
	@CreatorUID as uniqueidentifier	
AS
BEGIN
    UPDATE dps_TemporaryStorage 
    SET PageVersionId = @PageVersionId, Created = GETUTCDATE(), Expire = @Expire, PageDocument = @PageDocument, CreatorUID = @CreatorUID
    WHERE StorageId = @StorageId
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_UpdateMetaFile]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_UpdateMetaFile]
	@MetaKey	INT,
	@FileName	NVARCHAR(256),
	@ContentType	NVARCHAR(256),
	@Data		image,
	@Size		INT,
	@CreationTime	DATETIME,
	@LastWriteTime 	DATETIME,
	@LastReadTime	DATETIME
AS
	SET NOCOUNT ON

	IF (EXISTS(SELECT * FROM MetaFileValue WHERE MetaKey = @MetaKey) )
		UPDATE MetaFileValue SET [FileName] = @FileName, ContentType = @ContentType, Data = @Data, [Size] = @Size,
			CreationTime = @CreationTime, LastWriteTime = @LastWriteTime, LastReadTime = @LastReadTime WHERE MetaKey = @MetaKey
	ELSE
		INSERT INTO MetaFileValue (MetaKey,FileName,ContentType,Data, Size,CreationTime, LastWriteTime, LastReadTime )
			VALUES (@MetaKey,@FileName,@ContentType,@Data, @Size,@CreationTime, @LastWriteTime, @LastReadTime)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcweb_ListViewProfileSelect]...';


GO
CREATE PROCEDURE [dbo].[mc_mcweb_ListViewProfileSelect]
@ListViewProfileId AS Int
AS
BEGIN
SET NOCOUNT ON;
SELECT [t01].[ListViewProfileId] AS [ListViewProfileId], [t01].[UserId] AS [UserId], [t01].[MetaClassName] AS [MetaClassName], [t01].[ViewName] AS [ViewName], [t01].[PlaceName] AS [PlaceName], [t01].[IsSystem] AS [IsSystem], [t01].[IsPublic] AS [IsPublic], [t01].[XSListViewProfile] AS [XSListViewProfile], [t01].[UserUid] AS [UserUid]
FROM [mcweb_ListViewProfile] AS [t01]
WHERE ([t01].[ListViewProfileId]=@ListViewProfileId)
END
GO
PRINT N'Creating [dbo].[ecf_ShippingPackage]...';


GO
CREATE PROCEDURE [dbo].[ecf_ShippingPackage]
	@ApplicationId uniqueidentifier
AS
	select * from [Package] P where P.[ApplicationId] = @ApplicationId
GO
PRINT N'Creating [dbo].[ecf_CatalogEntry_UriSegment]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogEntry_UriSegment]
	@ApplicationId uniqueidentifier,
	@UriSegment nvarchar(255),
	@CatalogEntryId int,
	@ReturnInactive bit = 0
AS
BEGIN
	SELECT COUNT(*) from CatalogItemSeo S
	INNER JOIN CatalogEntry N ON N.CatalogEntryId = S.CatalogEntryId
	WHERE
		S.ApplicationId = @ApplicationId AND
		S.UriSegment = @UriSegment AND
		S.CatalogEntryId <> @CatalogEntryId AND
		((N.IsActive = 1) or @ReturnInactive = 1)
END
GO
PRINT N'Creating [dbo].[dps_TemporaryStorage_GetByPageVersionId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[dps_TemporaryStorage_GetByPageVersionId]
	@PageVersionId as int,
	@CreatorUID as uniqueidentifier
AS
BEGIN
    DELETE FROM dps_TemporaryStorage 
    WHERE DATEADD(mi, Expire, Created) < GETUTCDATE()

    SELECT StorageId, PageVersionId, Created, Expire, PageDocument, CreatorUID 
    FROM dps_TemporaryStorage 
    WHERE PageVersionId = @PageVersionId and CreatorUID=@CreatorUID
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_UpdateMetaFieldWeight]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO





CREATE PROCEDURE [dbo].[mdpsp_sys_UpdateMetaFieldWeight]
	@MetaClassId	INT,
	@MetaFieldId	INT,
	@Weight	INT
AS
	IF NOT EXISTS(	SELECT * FROM MetaClassMetaFieldRelation WHERE MetaClassId = @MetaClassId AND MetaFieldId = @MetaFieldId)
		RAISERROR ('Wrong @MetaClassId or @MetaFieldId.', 16,1)
	ELSE
		UPDATE MetaClassMetaFieldRelation SET  Weight = @Weight WHERE MetaClassId = @MetaClassId AND MetaFieldId = @MetaFieldId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcweb_ListViewProfileDelete]...';


GO
CREATE PROCEDURE [dbo].[mc_mcweb_ListViewProfileDelete]
@ListViewProfileId AS Int
AS
BEGIN
SET NOCOUNT ON;

DELETE FROM [mcweb_ListViewProfile]
WHERE
[ListViewProfileId] = @ListViewProfileId
END
GO
PRINT N'Creating [dbo].[ecf_ShippingOption_ShippingOptionId]...';


GO
CREATE PROCEDURE [dbo].[ecf_ShippingOption_ShippingOptionId]
	@ApplicationId uniqueidentifier,
	@ShippingOptionId uniqueidentifier,
	@ReturnInactive bit = 0
AS
BEGIN
	select * from [ShippingOption] 
		where [ShippingOptionId] = @ShippingOptionId and [ApplicationId]=@ApplicationId
	select SOP.* from [ShippingOptionParameter] SOP 
	inner join [ShippingOption] SO on SO.[ShippingOptionId]=SOP.[ShippingOptionId]
		where SO.[ShippingOptionId] = @ShippingOptionId and SO.[ApplicationId]=@ApplicationId
	select * from [Package] P
		inner join [ShippingPackage] SP on P.[PackageId]=SP.[PackageId]
			where SP.[ShippingOptionId] = @ShippingOptionId and P.[ApplicationId]=@ApplicationId
	select * from [ShippingPackage] where [ShippingOptionId] = @ShippingOptionId
END
GO
PRINT N'Creating [dbo].[ecf_CatalogEntry_UriLanguage]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogEntry_UriLanguage]
	@ApplicationId uniqueidentifier,
	@Uri nvarchar(255),
	@LanguageCode nvarchar(50),
	@ReturnInactive bit = 0,
	@ResponseGroup INT = NULL
AS
BEGIN
	DECLARE @CatalogEntryIds udttContentList
	INSERT INTO @CatalogEntryIds
	SELECT N.CatalogEntryId from [CatalogEntry] N
	INNER JOIN CatalogItemSeo S ON N.CatalogEntryId = S.CatalogEntryId
	WHERE
		N.ApplicationId = @ApplicationId AND
		N.ApplicationId = S.ApplicationId  AND
		S.Uri = @Uri AND (S.LanguageCode = @LanguageCode OR @LanguageCode is NULL) AND
		((N.IsActive = 1) or @ReturnInactive = 1)

	SELECT TOP(1) N.* from [CatalogEntry] N 
	INNER JOIN CatalogItemSeo S ON N.CatalogEntryId = S.CatalogEntryId
	INNER JOIN @CatalogEntryIds C ON C.ContentId = N.CatalogEntryId

	SELECT S.* from CatalogItemSeo S
	INNER JOIN @CatalogEntryIds C ON C.ContentId = S.CatalogEntryId

	exec ecf_CatalogEntry_Components @CatalogEntryIds, @ResponseGroup
END
GO
PRINT N'Creating [dbo].[ecf_reporting_LowStock]...';


GO
CREATE PROCEDURE [dbo].[ecf_reporting_LowStock] 
	@ApplicationID uniqueidentifier
As

BEGIN

    SELECT E.[Name], E.Code as SkuId, I.BackorderAvailableUtc as [BackorderAvailabilityDate],
    I.PreorderAvailableUtc as [PreorderAvailabilityDate],
    I.IsTracked as [InventoryStatus],
    [AllowBackorder] = 
        CASE 
            WHEN I.BackorderAvailableQuantity > 0 THEN 1
            ELSE 0
        END,
    [AllowPreOrder] = 
        CASE 
            WHEN I.PreorderAvailableUtc > convert(datetime,0x0000000000000000) THEN 1
            ELSE 0
        END,
    I.BackorderAvailableQuantity as [BackorderQuantity],
    I.PreorderAvailableQuantity as [PreorderQuantity],
    I.ReorderMinQuantity,
    I.WarehouseCode,
    I.AdditionalQuantity as [ReservedQuantity],
    I.PurchaseAvailableQuantity + I.AdditionalQuantity as [InstockQuantity],
    W.Name as WarehouseName from [InventoryService] I
    INNER JOIN [CatalogEntry] E ON E.Code = I.CatalogEntryCode 
    INNER JOIN Catalog C ON C.CatalogId = E.CatalogId
    INNER JOIN [Warehouse] W ON I.WarehouseCode = W.Code
    WHERE I.PurchaseAvailableQuantity <= I.ReorderMinQuantity AND I.IsTracked <> 0 
    AND C.ApplicationId = @ApplicationID

END
GO
PRINT N'Creating [dbo].[dps_TemporaryStorage_GetById]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[dps_TemporaryStorage_GetById]
	@StorageId as int
AS
BEGIN
    DELETE FROM dps_TemporaryStorage
    WHERE DATEADD(mi, Expire, Created) < GETUTCDATE()

    SELECT StorageId, PageVersionId, Created, Expire, PageDocument, CreatorUID 
    FROM dps_TemporaryStorage 
    WHERE StorageId = @StorageId
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_UpdateMetaFieldEnabled]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO




CREATE PROCEDURE [dbo].[mdpsp_sys_UpdateMetaFieldEnabled]
	@MetaClassId	INT,
	@MetaFieldId	INT,
	@Enabled	BIT
AS
	IF NOT EXISTS(	SELECT * FROM MetaClassMetaFieldRelation WHERE MetaClassId = @MetaClassId AND MetaFieldId = @MetaFieldId)
		RAISERROR ('Wrong @MetaClassId or @MetaFieldId.', 16,1)
	ELSE
		UPDATE MetaClassMetaFieldRelation SET  Enabled = @Enabled WHERE MetaClassId = @MetaClassId AND MetaFieldId = @MetaFieldId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcweb_ListViewProfileUpdate]...';


GO
CREATE PROCEDURE [dbo].[mc_mcweb_ListViewProfileUpdate]
@UserId AS Int,
@MetaClassName AS NVarChar(4000),
@ViewName AS NVarChar(4000),
@PlaceName AS NVarChar(4000),
@IsSystem AS Bit,
@IsPublic AS Bit,
@XSListViewProfile AS NText,
@UserUid AS UniqueIdentifier,
@ListViewProfileId AS Int
AS
BEGIN
SET NOCOUNT ON;

UPDATE [mcweb_ListViewProfile] SET
[UserId] = @UserId,
[MetaClassName] = @MetaClassName,
[ViewName] = @ViewName,
[PlaceName] = @PlaceName,
[IsSystem] = @IsSystem,
[IsPublic] = @IsPublic,
[XSListViewProfile] = @XSListViewProfile,
[UserUid] = @UserUid WHERE
[ListViewProfileId] = @ListViewProfileId

END
GO
PRINT N'Creating [dbo].[ecf_ShippingMethod_ShippingMethodId]...';


GO
CREATE PROCEDURE [dbo].[ecf_ShippingMethod_ShippingMethodId]
	@ApplicationId uniqueidentifier,
	@ShippingMethodId uniqueidentifier,
	@ReturnInactive bit = 0
AS
BEGIN
	select SO.* from [ShippingOption] SO
		inner join [ShippingMethod] SM on SO.[ShippingOptionId]=SM.[ShippingOptionId]
	where SM.[ShippingMethodId] = @ShippingMethodId and SM.[ApplicationId] = @ApplicationId

	select SOP.* from [ShippingOptionParameter] SOP 
		inner join [ShippingMethod] SM on SOP.[ShippingOptionId]=SM.[ShippingOptionId]
	where SM.[ShippingMethodId] = @ShippingMethodId and SM.[ApplicationId] = @ApplicationId

	select SM.* from [ShippingMethod] SM
		where ((SM.[IsActive] = 1) or @ReturnInactive = 1) and SM.[ApplicationId] = @ApplicationId and SM.[ShippingMethodId] = @ShippingMethodId

	select SMP.* from [ShippingMethodParameter] SMP
		inner join [ShippingMethod] SM on SMP.[ShippingMethodId]=SM.[ShippingMethodId]
			where ((SM.[IsActive] = 1) or @ReturnInactive = 1) and SM.[ApplicationId] = @ApplicationId and SM.[ShippingMethodId] = @ShippingMethodId

	select SMC.* from [ShippingMethodCase] SMC
		inner join [ShippingMethod] SM on SMC.[ShippingMethodId]=SM.[ShippingMethodId]
			where ((SM.[IsActive] = 1) or @ReturnInactive = 1) and SM.[ApplicationId] = @ApplicationId and SM.[ShippingMethodId] = @ShippingMethodId

	select SC.* from [ShippingCountry] SC
		inner join [ShippingMethod] SM on SC.[ShippingMethodId]=SM.[ShippingMethodId]
			where ((SM.[IsActive] = 1) or @ReturnInactive = 1) and SM.[ApplicationId] = @ApplicationId and SM.[ShippingMethodId] = @ShippingMethodId

	select SR.* from [ShippingRegion] SR
		inner join [ShippingMethod] SM on SR.[ShippingMethodId]=SM.[ShippingMethodId]
			where ((SM.[IsActive] = 1) or @ReturnInactive = 1) and SM.[ApplicationId] = @ApplicationId and SM.[ShippingMethodId] = @ShippingMethodId

	select SPR.* from [ShippingPaymentRestriction] SPR
		inner join [ShippingMethod] SM on SPR.[ShippingMethodId]=SM.[ShippingMethodId]
			where ((SM.[IsActive] = 1) or @ReturnInactive = 1) and SM.[ApplicationId] = @ApplicationId and SM.[ShippingMethodId] = @ShippingMethodId and SPR.[RestrictShippingMethods] = 0

	select P.* from [Package] P
		inner join [ShippingPackage] SP on SP.[PackageId]=P.[PackageId]
		inner join [ShippingMethod] SM on SP.[ShippingOptionId]=SM.[ShippingOptionId]
			where ((SM.[IsActive] = 1) or @ReturnInactive = 1) and SM.[ApplicationId] = @ApplicationId and SM.[ShippingMethodId] = @ShippingMethodId

	select SP.* from [ShippingPackage] SP
		inner join [ShippingMethod] SM on SP.[ShippingOptionId]=SM.[ShippingOptionId]
			where ((SM.[IsActive] = 1) or @ReturnInactive = 1) and SM.[ApplicationId] = @ApplicationId and SM.[ShippingMethodId] = @ShippingMethodId

	select SMS.* from [MarketShippingMethods] SMS
		inner join [ShippingMethod] SM on SMS.[ShippingMethodId]=SM.[ShippingMethodId]
			where ((SM.[IsActive] = 1) or @ReturnInactive = 1) and SM.[ApplicationId] = @ApplicationId and SM.[ShippingMethodId] = @ShippingMethodId
END
GO
PRINT N'Creating [dbo].[aspnet_Profile_GetProfiles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Profile_GetProfiles
    @ApplicationName        nvarchar(256),
    @ProfileAuthOptions     int,
    @PageIndex              int,
    @PageSize               int,
    @UserNameToMatch        nvarchar(256) = NULL,
    @InactiveSinceDate      datetime      = NULL
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN

    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexId int IDENTITY (0, 1) NOT NULL,
        UserId uniqueidentifier
    )

    -- Insert into our temp table
    INSERT INTO #PageIndexForUsers (UserId)
        SELECT  u.UserId
        FROM    dbo.aspnet_Users u, dbo.aspnet_Profile p
        WHERE   ApplicationId = @ApplicationId
            AND u.UserId = p.UserId
            AND (@InactiveSinceDate IS NULL OR LastActivityDate <= @InactiveSinceDate)
            AND (     (@ProfileAuthOptions = 2)
                   OR (@ProfileAuthOptions = 0 AND IsAnonymous = 1)
                   OR (@ProfileAuthOptions = 1 AND IsAnonymous = 0)
                 )
            AND (@UserNameToMatch IS NULL OR LoweredUserName LIKE LOWER(@UserNameToMatch))
        ORDER BY UserName

    SELECT  u.UserName, u.IsAnonymous, u.LastActivityDate, p.LastUpdatedDate,
            DATALENGTH(p.PropertyNames) + DATALENGTH(p.PropertyValuesString) + DATALENGTH(p.PropertyValuesBinary)
    FROM    dbo.aspnet_Users u, dbo.aspnet_Profile p, #PageIndexForUsers i
    WHERE   u.UserId = p.UserId AND p.UserId = i.UserId AND i.IndexId >= @PageLowerBound AND i.IndexId <= @PageUpperBound

    SELECT COUNT(*)
    FROM   #PageIndexForUsers

    DROP TABLE #PageIndexForUsers
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogEntry_ParentEntryId]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogEntry_ParentEntryId]
    @ParentEntryId int,
	@ClassTypeId nvarchar(50) = '',
	@RelationTypeId nvarchar(50) = '',
	@ReturnInactive bit = 0,
	@ResponseGroup INT = NULL
AS
BEGIN

	if(@ClassTypeId = '')
		set @ClassTypeId = null

	if(@RelationTypeId = '')
		set @RelationTypeId = null

	DECLARE @CatalogEntryIds udttContentList
	INSERT INTO @CatalogEntryIds
	SELECT N.CatalogEntryId from [CatalogEntry] N
	INNER JOIN CatalogEntryRelation R ON R.ChildEntryId = N.CatalogEntryId
	WHERE
	R.ParentEntryId = @ParentEntryId AND COALESCE(@ClassTypeId, N.ClassTypeId) = N.ClassTypeId AND COALESCE(@RelationTypeId, R.RelationTypeId) = R.RelationTypeId AND
	((N.IsActive = 1) or @ReturnInactive = 1)
	ORDER BY R.SortOrder

	SELECT N.*, R.Quantity, R.RelationTypeId, R.GroupName, R.SortOrder from [CatalogEntry] N
	INNER JOIN CatalogEntryRelation R ON R.ChildEntryId = N.CatalogEntryId
	INNER JOIN @CatalogEntryIds C ON C.ContentId = N.CatalogEntryId
	WHERE R.ParentEntryId = @ParentEntryId

	SELECT S.* from CatalogItemSeo S
	INNER JOIN @CatalogEntryIds C ON C.ContentId = S.CatalogEntryId

	exec ecf_CatalogEntry_Components @CatalogEntryIds, @ResponseGroup
END
GO
PRINT N'Creating [dbo].[ecf_reporting_Shipping]...';


GO
CREATE PROCEDURE [dbo].[ecf_reporting_Shipping] 
	@ApplicationID uniqueidentifier,
	@MarketId nvarchar(8),
	@CurrencyCode NVARCHAR(8),
	@interval VARCHAR(20),
	@startdate DATETIME, -- parameter expected in UTC
	@enddate DATETIME, -- parameter expected in UTC
	@offset_st INT,
	@offset_dt INT
AS

BEGIN

	SELECT	x.Period,  
			ISNULL(y.ShippingMethodDisplayName, 'NONE') AS ShippingMethodDisplayName,
			ISNULL(y.NumberofOrders, 0) AS NumberOfOrders,
			ISNULL(y.Shipping, 0) AS TotalShipping
			
	FROM 
	(
		SELECT DISTINCT 
			(CASE WHEN @interval = 'Day'
				THEN CONVERT(VARCHAR(10), D.DateFull, 101)
			WHEN @interval = 'Month'
			THEN (DATENAME(MM, D.DateFull) + ', ' + CAST(YEAR(D.DateFull) AS VARCHAR(20))) 
			ElSE CAST(YEAR(D.DateFull) AS VARCHAR(20))  
			End) AS Period 
		FROM ReportingDates D LEFT OUTER JOIN OrderFormEx FEX ON D.DateFull = FEX.Created
		WHERE 
			-- convert back from UTC using offset to generate a list of WEBSERVER datetimes
			D.DateFull BETWEEN 
				cast(floor(cast(dbo.fn_GetDaylightSavingsTime(@startdate, @offset_st, @offset_dt) as float)) as datetime) AND
				cast(floor(cast(dbo.fn_GetDaylightSavingsTime(@enddate, @offset_st, @offset_dt) as float)) as datetime)
	) AS x

	LEFT JOIN

	(
		SELECT DISTINCT (CASE WHEN @interval = 'Day'
							THEN CONVERT(VARCHAR(20), dbo.fn_GetDaylightSavingsTime(FEX.Created, @offset_st, @offset_dt), 101)
							WHEN @interval = 'Month'
							THEN (DATENAME(MM, dbo.fn_GetDaylightSavingsTime(FEX.Created, @offset_st, @offset_dt)) + ', ' 
								+ CAST(YEAR(dbo.fn_GetDaylightSavingsTime(FEX.Created, @offset_st, @offset_dt)) AS VARCHAR(20)) )
							ElSE CAST(YEAR(dbo.fn_GetDaylightSavingsTime(FEX.Created, @offset_st, @offset_dt)) AS VARCHAR(20))   
							End) AS Period, 
				COUNT(S.ShipmentId) AS NumberofOrders, 
				SUM(S.ShipmentTotal) AS Shipping, 
				SM.DisplayName AS ShippingMethodDisplayName
		FROM Shipment AS S INNER JOIN
		ShippingMethod AS SM ON S.ShippingMethodId = SM.ShippingMethodId INNER JOIN
			OrderForm AS F ON S.OrderFormId = F.OrderFormId INNER JOIN
			OrderFormEx AS FEX ON FEX.ObjectId = F.OrderFormId INNER JOIN
			OrderGroup AS OG ON OG.OrderGroupId = F.OrderGroupId
		WHERE (FEX.Created BETWEEN @startdate AND @enddate)
		AND @ApplicationID = (SELECT  ApplicationId FROM OrderGroup  WHERE OrderGroupId = F.OrderGroupId)
		AND OG.BillingCurrency = @CurrencyCode 
		AND (LEN(@MarketId) = 0 OR OG.MarketId = @MarketId)
		AND S.Status <> 'Cancelled'
		GROUP BY (Case WHEN @interval = 'Day'
					THEN CONVERT(VARCHAR(20), dbo.fn_GetDaylightSavingsTime(FEX.Created, @offset_st, @offset_dt), 101)
					WHEN @interval = 'Month'
					THEN (DATENAME(MM, dbo.fn_GetDaylightSavingsTime(FEX.Created, @offset_st, @offset_dt)) + ', ' + CAST(YEAR(dbo.fn_GetDaylightSavingsTime(FEX.Created, @offset_st, @offset_dt)) AS VARCHAR(20))  )
					ElSE CAST(YEAR(dbo.fn_GetDaylightSavingsTime(FEX.Created, @offset_st, @offset_dt)) AS VARCHAR(20))   
				END), SM.DisplayName
	) AS y

	ON x.Period = y.Period
	ORDER BY CONVERT(datetime, x.Period, 101)

END
GO
PRINT N'Creating [dbo].[dps_TemporaryStorage_Delete]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[dps_TemporaryStorage_Delete]
	@StorageId as int
AS
DELETE FROM dps_TemporaryStorage WHERE (StorageId = @StorageId)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_UpdateMetaField]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_UpdateMetaField]
	@MetaFieldId 	INT,
	@Namespace 	NVARCHAR(1024) = N'Mediachase.MetaDataPlus.User',
	@FriendlyName	NVARCHAR(256),
	@Description	NTEXT,
	@Tag		IMAGE
AS
	UPDATE MetaField SET Namespace = @Namespace, FriendlyName = @FriendlyName, Description = @Description, Tag = @Tag WHERE MetaFieldId = @MetaFieldId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcweb_ListViewProfileInsert]...';


GO
CREATE PROCEDURE [dbo].[mc_mcweb_ListViewProfileInsert]
@UserId AS Int,
@MetaClassName AS NVarChar(4000),
@ViewName AS NVarChar(4000),
@PlaceName AS NVarChar(4000),
@IsSystem AS Bit,
@IsPublic AS Bit,
@XSListViewProfile AS NText,
@UserUid AS UniqueIdentifier,
@ListViewProfileId AS Int = NULL OUTPUT
AS
BEGIN
SET NOCOUNT ON;

INSERT INTO [mcweb_ListViewProfile]
(
[UserId],
[MetaClassName],
[ViewName],
[PlaceName],
[IsSystem],
[IsPublic],
[XSListViewProfile],
[UserUid])
VALUES(
@UserId,
@MetaClassName,
@ViewName,
@PlaceName,
@IsSystem,
@IsPublic,
@XSListViewProfile,
@UserUid)
SELECT @ListViewProfileId = SCOPE_IDENTITY();

END
GO
PRINT N'Creating [dbo].[ecf_ShippingMethod_Market]...';


GO
CREATE PROCEDURE [dbo].[ecf_ShippingMethod_Market]
    @ApplicationId uniqueidentifier,
    @MarketId nvarchar(10) = null,
    @ReturnInactive bit = 0
AS
BEGIN
    declare @_shippingMethodIds as table (ShippingMethodId uniqueidentifier)
    insert into @_shippingMethodIds
    select SM.ShippingMethodId
        from [ShippingMethod] SM
        inner join [MarketShippingMethods] MSM
          on SM.ShippingMethodId = MSM.ShippingMethodId
        inner join [Warehouse] W
          on W.ApplicationId = SM.ApplicationId
        where COALESCE(@MarketId, MSM.MarketId) = MSM.MarketId
          and ((SM.[IsActive] = 1) or (@ReturnInactive = 1))
          and SM.ApplicationId = @ApplicationId
          and (SM.Name <> 'In Store Pickup' or W.IsPickupLocation = 1)

    select * from [ShippingOption] where [ApplicationId] = @ApplicationId
    
    select SOP.* from [ShippingOptionParameter] SOP 
    inner join [ShippingOption] SO on SOP.[ShippingOptionId]=SO.[ShippingOptionId]
        where SO.[ApplicationId] = @ApplicationId
        
    select distinct SM.* from [ShippingMethod] SM where ShippingMethodId in (select ShippingMethodId from @_shippingMethodIds)
    select * from [ShippingMethodParameter] where ShippingMethodId in (select ShippingMethodId from @_shippingMethodIds)
    select * from [ShippingMethodCase] where ShippingMethodId in (select ShippingMethodId from @_shippingMethodIds)
    select * from [ShippingCountry] where ShippingMethodId in (select ShippingMethodId from @_shippingMethodIds)
    select * from [ShippingRegion] where ShippingMethodId in (select ShippingMethodId from @_shippingMethodIds)
    
    select * from [ShippingPaymentRestriction]
        where 
            ShippingMethodId in (select ShippingMethodId from @_shippingMethodIds)
            and
            [RestrictShippingMethods] = 0
    select * from [Package] where [ApplicationId] = @ApplicationId

    select SP.* from [ShippingPackage] SP 
    inner join [Package] P on SP.[PackageId]=P.[PackageId]
        where P.[ApplicationId] = @ApplicationId
	select * from [MarketShippingMethods] where ShippingMethodId in (select ShippingMethodId from @_shippingMethodIds)
END
GO
PRINT N'Creating [dbo].[aspnet_Profile_GetNumberOfInactiveProfiles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Profile_GetNumberOfInactiveProfiles
    @ApplicationName        nvarchar(256),
    @ProfileAuthOptions     int,
    @InactiveSinceDate      datetime
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
    BEGIN
        SELECT 0
        RETURN
    END

    SELECT  COUNT(*)
    FROM    dbo.aspnet_Users u, dbo.aspnet_Profile p
    WHERE   ApplicationId = @ApplicationId
        AND u.UserId = p.UserId
        AND (LastActivityDate <= @InactiveSinceDate)
        AND (
                (@ProfileAuthOptions = 2)
                OR (@ProfileAuthOptions = 0 AND IsAnonymous = 1)
                OR (@ProfileAuthOptions = 1 AND IsAnonymous = 0)
            )
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogEntry_Name]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogEntry_Name]
	@ApplicationId uniqueidentifier,
	@Name nvarchar(100) = '',
	@ClassTypeId nvarchar(50) = '',
	@ReturnInactive bit = 0,
	@ResponseGroup INT = NULL
AS
BEGIN

	if(@ClassTypeId = '')
		set @ClassTypeId = null

	if(@Name = '')
		set @Name = null

	DECLARE @CatalogEntryIds udttContentList
	INSERT INTO @CatalogEntryIds
	SELECT N.CatalogEntryId from [CatalogEntry] N
	WHERE
	N.ApplicationId = @ApplicationId AND
	N.[Name] like @Name AND COALESCE(@ClassTypeId, N.ClassTypeId) = N.ClassTypeId AND
	((N.IsActive = 1) or @ReturnInactive = 1)

	SELECT N.* from [CatalogEntry] N
	INNER JOIN @CatalogEntryIds C ON N.CatalogEntryId = C.ContentId
	

	SELECT DISTINCT S.* from CatalogItemSeo S
	INNER JOIN @CatalogEntryIds C ON S.CatalogEntryId = C.ContentId

	exec ecf_CatalogEntry_Components @CatalogEntryIds, @ResponseGroup
END
GO
PRINT N'Creating [dbo].[ecf_reporting_ProductBestSellers]...';


GO
CREATE PROCEDURE [dbo].[ecf_reporting_ProductBestSellers] 
	@ApplicationID uniqueidentifier,
	@MarketId nvarchar(8),
	@CurrencyCode NVARCHAR(8),
	@interval VARCHAR(20),
	@startdate DATETIME, -- parameter expected in UTC
	@enddate DATETIME, -- parameter expected in UTC
	@offset_st INT,
	@offset_dt INT
AS

BEGIN

	SELECT	z.Period, 
			z.ProductName, 
			z.Price, 
			z.Ordered,
			z.Code
	FROM
	(
		SELECT	x.Period as Period,  
				ISNULL(y.ProductName, 'NONE') AS ProductName,
				ISNULL(y.Price,0) AS Price,
				ISNULL(y.ItemsOrdered, 0) AS Ordered,
				RANK() OVER (PARTITION BY x.Period
						ORDER BY y.price DESC) AS PriceRank,
				y.Code
		FROM 
		(
			SELECT	DISTINCT (CASE WHEN @interval = 'Day'
								THEN CONVERT(VARCHAR(10), D.DateFull, 101)
								WHEN @interval = 'Month'
								THEN (DATENAME(MM, D.DateFull) + ', ' + CAST(YEAR(D.DateFull) AS VARCHAR(20))) 
								ElSE CAST(YEAR(D.DateFull) AS VARCHAR(20))  
								End) AS Period 
			FROM ReportingDates D LEFT OUTER JOIN OrderFormEx FEX ON D.DateFull = FEX.Created
		WHERE 
			-- convert back from UTC using offset to generate a list of WEBSERVER datetimes
			D.DateFull BETWEEN 
				cast(floor(cast(dbo.fn_GetDaylightSavingsTime(@startdate, @offset_st, @offset_dt) as float)) as datetime) AND
				cast(floor(cast(dbo.fn_GetDaylightSavingsTime(@enddate, @offset_st, @offset_dt) as float)) as datetime)
		) AS x

		LEFT JOIN

		(
			SELECT  DISTINCT (CASE WHEN @interval = 'Day'
								THEN CONVERT(VARCHAR(20), dbo.fn_GetDaylightSavingsTime(FEX.Created, @offset_st, @offset_dt), 101)
								WHEN @interval = 'Month'
								THEN (DATENAME(MM, dbo.fn_GetDaylightSavingsTime(FEX.Created, @offset_st, @offset_dt)) + ', ' + CAST(YEAR(dbo.fn_GetDaylightSavingsTime(FEX.Created, @offset_st, @offset_dt)) AS VARCHAR(20)) )
								ElSE CAST(YEAR(dbo.fn_GetDaylightSavingsTime(FEX.Created, @offset_st, @offset_dt)) AS VARCHAR(20))   End) as period, 
					
				 E.Name AS ProductName,
					L.ListPrice AS Price,
					SUM(L.Quantity) AS ItemsOrdered,
					RANK() OVER (PARTITION BY (CASE WHEN @interval = 'Day'
													THEN CONVERT(VARCHAR(20), dbo.fn_GetDaylightSavingsTime(FEX.Created, @offset_st, @offset_dt), 101)
													WHEN @interval = 'Month'
													THEN (DATENAME(MM, dbo.fn_GetDaylightSavingsTime(FEX.Created, @offset_st, @offset_dt)) + ', ' + CAST(YEAR(dbo.fn_GetDaylightSavingsTime(FEX.Created, @offset_st, @offset_dt)) AS VARCHAR(20)) )
													ElSE CAST(YEAR(dbo.fn_GetDaylightSavingsTime(FEX.Created, @offset_st, @offset_dt)) AS VARCHAR(20))   
												END) 
								ORDER BY SUM(L.Quantity) DESC) AS PeriodRank,
					E.Code
			FROM 
				LineItem AS L INNER JOIN OrderFormEx AS FEX ON L.OrderFormId = Fex.ObjectId 
				INNER JOIN OrderForm AS F ON L.OrderFormId = F.OrderFormId
				INNER JOIN CatalogEntry E ON L.CatalogEntryId = E.Code
				INNER JOIN OrderGroup AS OG ON F.OrderGroupId = OG.OrderGroupId AND isnull (OG.Status, '') = 'Completed'
			WHERE CONVERT(VARCHAR(20), dbo.fn_GetDaylightSavingsTime(FEX.Created, @offset_st, @offset_dt), 101) >=  @startdate AND CONVERT(VARCHAR(20), dbo.fn_GetDaylightSavingsTime(FEX.Created, @offset_st, @offset_dt), 101) < @enddate +1 
				AND @ApplicationID = (SELECT  ApplicationId FROM OrderGroup  WHERE OrderGroupId = F.OrderGroupId)
				AND (FEX.RMANumber = '' OR FEX.RMANumber IS NULL)
				AND OG.Name <> 'Exchange'
				AND OG.BillingCurrency = @CurrencyCode 
				AND (LEN(@MarketId) = 0 OR OG.MarketId = @MarketId)
			GROUP BY (Case WHEN @interval = 'Day'
						THEN CONVERT(VARCHAR(20), dbo.fn_GetDaylightSavingsTime(FEX.Created, @offset_st, @offset_dt), 101)
						WHEN @interval = 'Month'
						THEN (DATENAME(MM, dbo.fn_GetDaylightSavingsTime(FEX.Created, @offset_st, @offset_dt)) + ', ' + CAST(YEAR(dbo.fn_GetDaylightSavingsTime(FEX.Created, @offset_st, @offset_dt)) AS VARCHAR(20))  )
						ElSE CAST(YEAR(dbo.fn_GetDaylightSavingsTime(FEX.Created, @offset_st, @offset_dt)) AS VARCHAR(20))   
					END) ,E.Name, L.ListPrice, E.Code
				
		
					
		) AS y

ON x.Period = y.Period
WHERE y.PeriodRank IS NULL 
OR y.PeriodRank = 1



	)AS z

WHERE z.PriceRank = 1
ORDER BY CONVERT(datetime, z.Period, 101)
END
GO
PRINT N'Creating [dbo].[dps_TemporaryStorage_Add]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[dps_TemporaryStorage_Add]
	@PageVersionId as int,
	@Expire as int,
	@PageDocument as image,
	@CreatorUID as uniqueidentifier,
	@retval int output
AS
BEGIN
    declare @utcnow datetime = GETUTCDATE()
    DELETE FROM dps_TemporaryStorage 
    WHERE DATEADD(mi, Expire, Created) < @utcnow

    INSERT INTO dps_TemporaryStorage (PageVersionId, Created, Expire, PageDocument, CreatorUID)
    VALUES (@PageVersionId, @utcnow, @Expire, @PageDocument, @CreatorUID)

    select @retval = @@identity
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_UpdateMetaDictionary]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_UpdateMetaDictionary]
	@MetaDictionaryId	INT,
	@Language	NVARCHAR(20)=NULL,
	@DefaultValue	NVARCHAR(2048),
	@DefaultTag	IMAGE=NULL,
	@Value		NVARCHAR(2048),
	@Tag		IMAGE=NULL
AS
	SET NOCOUNT ON

BEGIN TRAN
	DECLARE @MultiLanguageValue BIT

	SELECT @MultiLanguageValue = MultiLanguageValue FROM MetaField MF
	INNER JOIN MetaDictionary MD ON MD.MetaFieldId = MF.MetaFieldId
	WHERE MD.MetaDictionaryId = @MetaDictionaryId

	IF NOT EXISTS(SELECT * FROM MetaDictionary WHERE MetaDictionaryId = @MetaDictionaryId )
	BEGIN
		RAISERROR('Wrong @MetaDictionaryId.',16,1)
		GOTO ERR
	END

	IF @MultiLanguageValue = 1
	BEGIN
		UPDATE MetaDictionary SET [Value] = @DefaultValue, [Tag] = @DefaultTag   WHERE MetaDictionaryId = @MetaDictionaryId
		IF @@ERROR <> 0 GOTO ERR

		IF @Language IS NOT NULL
		BEGIN
			IF EXISTS(SELECT * FROM MetaDictionaryLocalization WHERE MetaDictionaryId = @MetaDictionaryId AND Language = @Language)
				UPDATE MetaDictionaryLocalization SET Value = @Value, Tag = @Tag WHERE MetaDictionaryId = @MetaDictionaryId AND Language = @Language
			ELSE
				INSERT INTO MetaDictionaryLocalization (MetaDictionaryId, Language,  Value, Tag) VALUES (@MetaDictionaryId, @Language, @Value, @Tag)
			IF @@ERROR <> 0 GOTO ERR
		END
	END
	ELSE
	BEGIN
		UPDATE MetaDictionary SET [Value] = @Value, [Tag] = @Tag   WHERE MetaDictionaryId = @MetaDictionaryId
		IF @@ERROR <> 0 GOTO ERR
	END

	COMMIT TRAN
RETURN

ERR:
	ROLLBACK TRAN
RETURN
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaFieldTypeSelect]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaFieldTypeSelect]
@MetaFieldTypeId AS Int
AS
BEGIN
SET NOCOUNT ON;

SELECT [t01].[MetaFieldTypeId] AS [MetaFieldTypeId], [t01].[Name] AS [Name], [t01].[FriendlyName] AS [FriendlyName], [t01].[McDataType] AS [McDataType], [t01].[XSViews] AS [XSViews], [t01].[XSAttributes] AS [XSAttributes], [t01].[Owner] AS [Owner], [t01].[AccessLevel] AS [AccessLevel]
FROM [mcmd_MetaFieldType] AS [t01]
WHERE ([t01].[MetaFieldTypeId]=@MetaFieldTypeId)

END
GO
PRINT N'Creating [dbo].[ecf_ShippingMethod_Language]...';


GO
CREATE PROCEDURE [dbo].[ecf_ShippingMethod_Language]
	@ApplicationId uniqueidentifier,
	@LanguageId nvarchar(10) = null,
	@ReturnInactive bit = 0
AS
BEGIN
	select * from [ShippingOption] where [ApplicationId] = @ApplicationId
	select SOP.* from [ShippingOptionParameter] SOP 
	inner join [ShippingOption] SO on SOP.[ShippingOptionId]=SO.[ShippingOptionId]
		where SO.[ApplicationId] = @ApplicationId
	select distinct SM.* from [ShippingMethod] SM 
	inner join [Warehouse] W on SM.ApplicationId = W.ApplicationId
		where COALESCE(@LanguageId, LanguageId) = LanguageId and ((SM.[IsActive] = 1) or @ReturnInactive = 1) and SM.ApplicationId = @ApplicationId
			and (SM.Name <> 'In Store Pickup' or W.IsPickupLocation = 1)
	select * from [ShippingMethodParameter] where ShippingMethodId in (select ShippingMethodId from ShippingMethod where COALESCE(@LanguageId, LanguageId) = LanguageId and (([IsActive] = 1) or @ReturnInactive = 1) and ApplicationId = @ApplicationId)
	select * from [ShippingMethodCase] where ShippingMethodId in (select ShippingMethodId from ShippingMethod where COALESCE(@LanguageId, LanguageId) = LanguageId and (([IsActive] = 1) or @ReturnInactive = 1) and ApplicationId = @ApplicationId)
	select * from [ShippingCountry] where ShippingMethodId in (select ShippingMethodId from ShippingMethod where COALESCE(@LanguageId, LanguageId) = LanguageId and (([IsActive] = 1) or @ReturnInactive = 1) and ApplicationId = @ApplicationId)
	select * from [ShippingRegion] where ShippingMethodId in (select ShippingMethodId from ShippingMethod where COALESCE(@LanguageId, LanguageId) = LanguageId and (([IsActive] = 1) or @ReturnInactive = 1) and ApplicationId = @ApplicationId)
	select * from [ShippingPaymentRestriction] 
		where 
			(ShippingMethodId in (select ShippingMethodId from ShippingMethod where COALESCE(@LanguageId, LanguageId) = LanguageId and (([IsActive] = 1) or @ReturnInactive = 1) and ApplicationId = @ApplicationId) )
				and
			[RestrictShippingMethods] = 0
	select * from [Package] where [ApplicationId] = @ApplicationId
	select SP.* from [ShippingPackage] SP 
	inner join [Package] P on SP.[PackageId]=P.[PackageId]
		where P.[ApplicationId] = @ApplicationId
	select * from [MarketShippingMethods] where ShippingMethodId in (select ShippingMethodId from ShippingMethod where COALESCE(@LanguageId, LanguageId) = LanguageId and (([IsActive] = 1) or @ReturnInactive = 1) and ApplicationId = @ApplicationId)
END
GO
PRINT N'Creating [dbo].[aspnet_Profile_DeleteInactiveProfiles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Profile_DeleteInactiveProfiles
    @ApplicationName        nvarchar(256),
    @ProfileAuthOptions     int,
    @InactiveSinceDate      datetime
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
    BEGIN
        SELECT  0
        RETURN
    END

    DELETE
    FROM    dbo.aspnet_Profile
    WHERE   UserId IN
            (   SELECT  UserId
                FROM    dbo.aspnet_Users u
                WHERE   ApplicationId = @ApplicationId
                        AND (LastActivityDate <= @InactiveSinceDate)
                        AND (
                                (@ProfileAuthOptions = 2)
                             OR (@ProfileAuthOptions = 0 AND IsAnonymous = 1)
                             OR (@ProfileAuthOptions = 1 AND IsAnonymous = 0)
                            )
            )

    SELECT  @@ROWCOUNT
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_reporting_SaleReport]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[ecf_reporting_SaleReport] 
	@ApplicationID uniqueidentifier,
	@MarketId nvarchar(8),
	@CurrencyCode NVARCHAR(8),
	@interval VARCHAR(20),
	@startdate DATETIME, -- parameter expected in UTC
	@enddate DATETIME, -- parameter expected in UTC
	@offset_st INT,
	@offset_dt INT
AS

BEGIN

	with periodQuery as
	(
		SELECT DISTINCT	
			(CASE WHEN @interval = 'Day'
				THEN CONVERT(VARCHAR(10), D.DateFull, 101)
			WHEN @interval = 'Month'
			THEN (DATENAME(MM, D.DateFull) + ',' + CAST(YEAR(D.DateFull) AS VARCHAR(20))) 
			ElSE CAST(YEAR(D.DateFull) AS VARCHAR(20))  
			End) AS Period 
		FROM ReportingDates D
		WHERE
			-- convert back from UTC using offset to generate a list of WEBSERVER datetimes
			D.DateFull BETWEEN 
				cast(floor(cast(dbo.fn_GetDaylightSavingsTime(@startdate, @offset_st, @offset_dt) as float)) as datetime) AND
				cast(floor(cast(dbo.fn_GetDaylightSavingsTime(@enddate, @offset_st, @offset_dt) as float)) as datetime)
	)
	, lineItemsQuery as
	(
		select sum(Quantity) ItemsOrdered, L.OrderGroupId
		from LineItem L 
				inner join OrderForm as OF1 on L.OrderFormId = OF1.OrderFormId
				where OF1.Name <> 'Return'
				group by L.OrderGroupId
	)
	, orderFormQuery as
	(
		select sum(DiscountAmount) Discounts, OrderGroupId
		from OrderForm 
				group by OrderGroupId
	)
	, paymentQuery as
	(
		select sum(Amount) TotalPayment, OFP.OrderGroupId
		from OrderFormPayment as OFP
				where OFP.TransactionType = 'Capture' OR OFP.TransactionType = 'Sale'
				group by OFP.OrderGroupId
	)
	, orderQuery as 
	(
		SELECT
			(CASE WHEN @interval = 'Day'
				THEN CONVERT(VARCHAR(10), dbo.fn_GetDaylightSavingsTime(PO.Created, @offset_st, @offset_dt), 101)
				WHEN @interval = 'Month'
				THEN (DATENAME(MM, dbo.fn_GetDaylightSavingsTime(PO.Created, @offset_st, @offset_dt)) + ','
					+ CAST(YEAR(dbo.fn_GetDaylightSavingsTime(PO.Created, @offset_st, @offset_dt)) AS VARCHAR(20))) 
				ElSE CAST(YEAR(dbo.fn_GetDaylightSavingsTime(PO.Created, @offset_st, @offset_dt)) AS VARCHAR(20))  
				End) AS Period, 
			COALESCE(COUNT(OG.OrderGroupId), 0) AS NumberofOrders
			, SUM(L1.ItemsOrdered) AS ItemsOrdered
			, SUM(OG.SubTotal) AS SubTotal
			, SUM(OG.TaxTotal) AS Tax
			, SUM(OG.ShippingTotal) AS Shipping 
			, SUM(OF1.Discounts) AS Discounts
			, SUM(OG.Total) AS Total
			, SUM(P.TotalPayment) AS Invoiced
		FROM OrderGroup AS OG 
			INNER JOIN OrderGroup_PurchaseOrder AS PO 
				ON PO.ObjectId = OG.OrderGroupId
			INNER JOIN orderFormQuery OF1 
				on OF1.OrderGroupId = OG.OrderGroupId
			LEFT JOIN paymentQuery AS P 
				ON P.OrderGroupId = OG.OrderGroupId 
			LEFT JOIN lineItemsQuery L1 
				on L1.OrderGroupId = OG.OrderGroupId
        WHERE 
			-- PO.Created is stored in UTC
            PO.Created
			BETWEEN
				-- pad range by one day to include outlying records on narrow date ranges
				DATEADD(DD, -1, @startdate) AND 
				DATEADD(DD, 1, @enddate)
			AND OG.Name <> 'Exchange' AND
				OG.[Status] <> 'Cancelled' AND
				OG.BillingCurrency = @CurrencyCode AND
				(LEN(@MarketId) = 0 OR OG.MarketId = @MarketId)
		GROUP BY
			(CASE WHEN @interval = 'Day'
				THEN CONVERT(VARCHAR(10), dbo.fn_GetDaylightSavingsTime(PO.Created, @offset_st, @offset_dt), 101)
				WHEN @interval = 'Month'
				THEN (DATENAME(MM, dbo.fn_GetDaylightSavingsTime(PO.Created, @offset_st, @offset_dt)) + ','
					+ CAST(YEAR(dbo.fn_GetDaylightSavingsTime(PO.Created, @offset_st, @offset_dt)) AS VARCHAR(20))) 
				ElSE CAST(YEAR(dbo.fn_GetDaylightSavingsTime(PO.Created, @offset_st, @offset_dt)) AS VARCHAR(20))  
							End)
	)
	
	SELECT	
		P.Period
		, O.NumberofOrders as NumberofOrders
		, O.ItemsOrdered
		, O.Subtotal
		, O.Tax
		, O.Shipping
		, O.Discounts
		, O.Total
		, O.Invoiced
	FROM periodQuery P LEFT JOIN orderQuery O 
		on P.Period = O.Period
	ORDER BY CONVERT(datetime, P.Period, 101) 

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[dps_PageDocument_Update]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[dps_PageDocument_Update]
	@PageId as int,
	@PageVersionId as int	
AS
UPDATE dps_PageDocument SET PageVersionId = @PageVersionId WHERE (PageId = @PageId)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_UpdateMetaClass]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_UpdateMetaClass]
	@MetaClassId 	INT,
	@Namespace		NVARCHAR(1024),
	@Name			NVARCHAR(256),
	@FriendlyName		NVARCHAR(256),
	@Description		NTEXT,
	@Tag			IMAGE
AS
	UPDATE MetaClass SET Namespace = @Namespace, Name = @Name, FriendlyName = @FriendlyName, Description = @Description, Tag = @Tag WHERE MetaClassId = @MetaClassId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaFieldTypeDelete]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaFieldTypeDelete]
@MetaFieldTypeId AS Int
AS
BEGIN
SET NOCOUNT ON;

DELETE FROM [mcmd_MetaFieldType]
WHERE
[MetaFieldTypeId] = @MetaFieldTypeId

END
GO
PRINT N'Creating [dbo].[ecf_ShipmentDiscount_Update]...';


GO
CREATE PROCEDURE [dbo].[ecf_ShipmentDiscount_Update]
(
	@ShipmentDiscountId int,
	@ShipmentId int,
	@DiscountId int,
	@OrderGroupId int,
	@DiscountAmount money,
	@DiscountCode nvarchar(50) = NULL,
	@DiscountName nvarchar(50) = NULL,
	@DisplayMessage nvarchar(100) = NULL,
	@DiscountValue money
)
AS
	SET NOCOUNT ON
	
	UPDATE [ShipmentDiscount]
	SET
		[ShipmentId] = @ShipmentId,
		[DiscountId] = @DiscountId,
		[OrderGroupId] = @OrderGroupId,
		[DiscountAmount] = @DiscountAmount,
		[DiscountCode] = @DiscountCode,
		[DiscountName] = @DiscountName,
		[DisplayMessage] = @DisplayMessage,
		[DiscountValue] = @DiscountValue
	WHERE 
		[ShipmentDiscountId] = @ShipmentDiscountId

	RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_CatalogEntry_CatalogNodeId]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogEntry_CatalogNodeId]
	@CatalogId int,
    @CatalogNodeId int,
	@ReturnInactive bit = 0,
	@ResponseGroup INT = NULL
AS
BEGIN
	DECLARE @CatalogEntryIds udttContentList
	INSERT INTO @CatalogEntryIds
	SELECT N.CatalogEntryId from [CatalogEntry] N
	INNER JOIN NodeEntryRelation R ON R.CatalogEntryId = N.CatalogEntryId
	WHERE
		R.CatalogNodeId = @CatalogNodeId AND
		R.CatalogId = @CatalogId AND
		((N.IsActive = 1) or @ReturnInactive = 1)
	ORDER BY R.SortOrder

	SELECT N.* from [CatalogEntry] N
	INNER JOIN @CatalogEntryIds C on N.CatalogEntryId = C.ContentId

	SELECT S.* from CatalogItemSeo S
	INNER JOIN @CatalogEntryIds C on S.CatalogEntryId = C.ContentId
	
	exec ecf_CatalogEntry_Components @CatalogEntryIds, @ResponseGroup
END
GO
PRINT N'Creating [dbo].[dps_PageDocument_GetByPageVersionId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[dps_PageDocument_GetByPageVersionId]
	@PageVersionId as int
AS
SELECT PageId, PageVersionId FROM dps_PageDocument WHERE PageVersionId = @PageVersionId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_ReplaceUser]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_ReplaceUser]
	@OldUserId AS nvarchar(100),
	@NewUserId AS nvarchar(100)
AS
BEGIN
    SET NOCOUNT ON
    BEGIN TRAN
	DECLARE classall_cursor CURSOR FOR
		SELECT MetaClassId, TableName FROM MetaClass WHERE IsSystem =0 AND IsAbstract = 0

	DECLARE @MetaClassId	INT
	DECLARE @TableName		NVARCHAR(255)

	OPEN classall_cursor
	FETCH NEXT FROM classall_cursor INTO @MetaClassId, @TableName

	DECLARE @SQLString NVARCHAR(500)

	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @SQLString  = N'UPDATE ' + @TableName  + ' SET CreatorId = @NewUserId WHERE CreatorId = @OldUserId'
		EXEC sp_executesql @SQLString, N'@OldUserId AS nvarchar(100), @NewUserId AS nvarchar(100)', @OldUserId = @OldUserId, @NewUserId = @NewUserId
		IF @@ERROR <> 0 GOTO ERR

		SET @SQLString  = N'UPDATE ' + @TableName  + ' SET ModifierId = @NewUserId WHERE ModifierId = @OldUserId'
		EXEC sp_executesql @SQLString, N'@OldUserId AS nvarchar(100), @NewUserId AS nvarchar(100)', @OldUserId = @OldUserId, @NewUserId = @NewUserId
		IF @@ERROR <> 0 GOTO ERR

	    FETCH NEXT FROM classall_cursor INTO @MetaClassId, @TableName
	END

	CLOSE classall_cursor
	DEALLOCATE classall_cursor

	COMMIT TRAN
    RETURN

ERR:
	CLOSE classall_cursor
	DEALLOCATE classall_cursor

	ROLLBACK TRAN
    RETURN
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaFieldTypeUpdate]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaFieldTypeUpdate]
@Name AS NVarChar(4000),
@FriendlyName AS NVarChar(4000),
@McDataType AS Int,
@XSViews AS NText,
@XSAttributes AS NText,
@Owner AS NVarChar(4000),
@AccessLevel AS Int,
@MetaFieldTypeId AS Int
AS
BEGIN
SET NOCOUNT ON;

UPDATE [mcmd_MetaFieldType] SET
[Name] = @Name,
[FriendlyName] = @FriendlyName,
[McDataType] = @McDataType,
[XSViews] = @XSViews,
[XSAttributes] = @XSAttributes,
[Owner] = @Owner,
[AccessLevel] = @AccessLevel WHERE
[MetaFieldTypeId] = @MetaFieldTypeId

END
GO
PRINT N'Creating [dbo].[ecf_ShipmentDiscount_Insert]...';


GO
CREATE PROCEDURE [dbo].[ecf_ShipmentDiscount_Insert]
(
	@ShipmentDiscountId int = NULL OUTPUT,
	@ShipmentId int,
	@DiscountId int,
	@OrderGroupId int,
	@DiscountAmount money,
	@DiscountCode nvarchar(50) = NULL,
	@DiscountName nvarchar(50) = NULL,
	@DisplayMessage nvarchar(100) = NULL,
	@DiscountValue money
)
AS
	SET NOCOUNT ON

	INSERT INTO [ShipmentDiscount]
	(
		[ShipmentId],
		[DiscountId],
		[OrderGroupId],
		[DiscountAmount],
		[DiscountCode],
		[DiscountName],
		[DisplayMessage],
		[DiscountValue]
	)
	VALUES
	(
		@ShipmentId,
		@DiscountId,
		@OrderGroupId,
		@DiscountAmount,
		@DiscountCode,
		@DiscountName,
		@DisplayMessage,
		@DiscountValue
	)

	SELECT @ShipmentDiscountId = SCOPE_IDENTITY()

	RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_CatalogEntry_CatalogNameCatalogNodeId]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogEntry_CatalogNameCatalogNodeId]
	@ApplicationId uniqueidentifier,
	@CatalogName nvarchar(150),
	@CatalogNodeId int,
	@ReturnInactive bit = 0,
	@ResponseGroup INT = NULL
AS
BEGIN
	DECLARE @CatalogEntryIds udttContentList
	INSERT INTO @CatalogEntryIds
	SELECT N.CatalogEntryId from [CatalogEntry] N
	INNER JOIN NodeEntryRelation R ON R.CatalogEntryId = N.CatalogEntryId
	INNER JOIN [Catalog] C ON R.CatalogId = C.CatalogId
	WHERE
		N.ApplicationId = @ApplicationId AND
		R.CatalogNodeId = @CatalogNodeId AND
		C.[Name] = @CatalogName AND
		((N.IsActive = 1) or @ReturnInactive = 1)
	ORDER BY R.SortOrder

	SELECT N.* from [CatalogEntry] N
	INNER JOIN @CatalogEntryIds C ON C.ContentId = N.CatalogEntryId

	SELECT S.* from CatalogItemSeo S
	INNER JOIN @CatalogEntryIds C ON C.ContentId = S.CatalogEntryId

	exec ecf_CatalogEntry_Components @CatalogEntryIds, @ResponseGroup
END
GO
PRINT N'Creating [dbo].[dps_PageDocument_GetById]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[dps_PageDocument_GetById]
	@PageId as int
AS
SELECT PageId, PageVersionId FROM dps_PageDocument WHERE PageId = @PageId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaFieldTypeInsert]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaFieldTypeInsert]
@Name AS NVarChar(4000),
@FriendlyName AS NVarChar(4000),
@McDataType AS Int,
@XSViews AS NText,
@XSAttributes AS NText,
@Owner AS NVarChar(4000),
@AccessLevel AS Int,
@MetaFieldTypeId AS Int = NULL OUTPUT
AS
BEGIN
SET NOCOUNT ON;

INSERT INTO [mcmd_MetaFieldType]
(
[Name],
[FriendlyName],
[McDataType],
[XSViews],
[XSAttributes],
[Owner],
[AccessLevel])
VALUES(
@Name,
@FriendlyName,
@McDataType,
@XSViews,
@XSAttributes,
@Owner,
@AccessLevel)
SELECT @MetaFieldTypeId = SCOPE_IDENTITY();

END
GO
PRINT N'Creating [dbo].[ecf_ShipmentDiscount_Delete]...';


GO
CREATE PROCEDURE [dbo].[ecf_ShipmentDiscount_Delete]
(
	@ShipmentDiscountId int
)
AS
	SET NOCOUNT ON

	DELETE 
	FROM   [ShipmentDiscount]
	WHERE  
		[ShipmentDiscountId] = @ShipmentDiscountId

	RETURN @@Error
GO
PRINT N'Creating [dbo].[aspnet_Profile_GetProperties]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Profile_GetProperties
    @ApplicationName      nvarchar(256),
    @UserName             nvarchar(256),
    @CurrentTimeUtc       datetime
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN

    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL

    SELECT @UserId = UserId
    FROM   dbo.aspnet_Users
    WHERE  ApplicationId = @ApplicationId AND LoweredUserName = LOWER(@UserName)

    IF (@UserId IS NULL)
        RETURN
    SELECT TOP 1 PropertyNames, PropertyValuesString, PropertyValuesBinary
    FROM         dbo.aspnet_Profile
    WHERE        UserId = @UserId

    IF (@@ROWCOUNT > 0)
    BEGIN
        UPDATE dbo.aspnet_Users
        SET    LastActivityDate=@CurrentTimeUtc
        WHERE  UserId = @UserId
    END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogEntry_CatalogNameCatalogNodeCode]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogEntry_CatalogNameCatalogNodeCode]
	@ApplicationId uniqueidentifier,
	@CatalogName nvarchar(150),
	@CatalogNodeCode nvarchar(100),
	@ReturnInactive bit = 0,
	@ResponseGroup INT = NULL
AS
BEGIN
	DECLARE @CatalogEntryIds udttContentList
	INSERT INTO @CatalogEntryIds
	SELECT N.CatalogEntryId from [CatalogEntry] N
	INNER JOIN NodeEntryRelation R ON R.CatalogEntryId = N.CatalogEntryId
	INNER JOIN CatalogNode CN ON R.CatalogNodeId = CN.CatalogNodeId
	INNER JOIN [Catalog] C ON R.CatalogId = C.CatalogId
	WHERE
		N.ApplicationId = @ApplicationId AND
		CN.Code = @CatalogNodeCode AND
		C.[Name] = @CatalogName AND
		((N.IsActive = 1) or @ReturnInactive = 1)
	ORDER BY R.SortOrder

	SELECT N.* from [CatalogEntry] N
	INNER JOIN @CatalogEntryIds C ON C.ContentId = N.CatalogEntryId

	SELECT S.* from CatalogItemSeo S
	INNER JOIN @CatalogEntryIds C ON C.ContentId = S.CatalogEntryId

	exec ecf_CatalogEntry_Components @CatalogEntryIds, @ResponseGroup
END
GO
PRINT N'Creating [dbo].[dps_PageDocument_Delete]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_PageDocument_Delete]
	@PageId as int
AS
DELETE FROM dps_PageDocument WHERE (PageId = @PageId)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_RefreshSystemMetaClassInfo]...';


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_RefreshSystemMetaClassInfo]
	@MetaClassId	INT
AS
	SET NOCOUNT ON
BEGIN
    BEGIN TRAN
	DECLARE @TableName NVARCHAR(256)
	DECLARE @Namespace NVARCHAR(1024)
	DECLARE @Name NVARCHAR(256)

	IF NOT EXISTS( SELECT * FROM MetaClass WHERE MetaClassId = @MetaClassId AND IsSystem = 1)
	BEGIN
		RAISERROR ('Wrong @MetaClassId. The class is neither system nor existed.', 16,1)
		GOTO ERR
	END

	SELECT @Name = [Name], @TableName = TableName, @Namespace = Namespace FROM MetaClass WHERE MetaClassId = @MetaClassId AND IsSystem = 1

	-- Step 1. Remove old fields
	DELETE FROM MetaClassMetaFieldRelation WHERE MetaClassId = @MetaClassId
	IF @@ERROR<> 0 GOTO ERR

	DELETE FROM MetaClassMetaFieldRelation WHERE MetaFieldId IN (SELECT MetaFieldId FROM MetaField WHERE SystemMetaClassId = @MetaClassId)
	IF @@ERROR<> 0 GOTO ERR

	DELETE FROM MetaField WHERE SystemMetaClassId = @MetaClassId
	IF @@ERROR<> 0 GOTO ERR

	-- Step 2. Create new fields
	INSERT INTO [MetaField]  ([Namespace], [Name], [FriendlyName], [SystemMetaClassId], [DataTypeId], [Length], [AllowNulls], [MultiLanguageValue], [AllowSearch], [IsEncrypted])
	SELECT @Namespace + N'.' + @Name, SC.[name], SC.[name], @MetaClassId, MDT.[DataTypeId], SC.[length], SC.[isnullable], 0, 0, 0
    FROM syscolumns AS SC
	INNER JOIN sysobjects SO ON SO.[id] = SC.id
	INNER JOIN systypes ST ON ST.[xtype] = SC .[xtype]
	INNER JOIN MetaDataType MDT ON MDT.[Name] = ST .[name]
    WHERE SO.[id]  = object_id( @TableName) and OBJECTPROPERTY( SO.[id], N'IsTable') = 1 and ST.name<>'sysname'
	ORDER BY colorder /* Aug 29, 2006 */

	IF @@ERROR<> 0 GOTO ERR

	INSERT INTO [MetaClassMetaFieldRelation] (MetaClassId, MetaFieldId)
	SELECT @MetaClassId, MetaFieldId FROM MetaField WHERE [SystemMetaClassId] = @MetaClassId

	IF @@ERROR<> 0 GOTO ERR

	-- Step 3. Update child-field relations
	INSERT INTO [MetaClassMetaFieldRelation]  (MetaClassId, MetaFieldId)
	SELECT MC.MetaClassId, MF.MetaFieldId FROM MetaField MF, MetaClass MC
	WHERE MF.[SystemMetaClassId] = @MetaClassId AND MC.ParentClassId = @MetaClassId ORDER BY MC.MetaClassId

	IF @@ERROR<> 0 GOTO ERR

	COMMIT TRAN
	--PRINT('COMMIT TRAN')
    RETURN

ERR:
	ROLLBACK TRAN
	--PRINT('ROLLBACK TRAN')
    RETURN
END
GO
PRINT N'Creating [dbo].[mc_mcmd_MetaClassDataSourceSelect]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaClassDataSourceSelect]
@MetaClassDataSourceId AS Int
AS
BEGIN
SET NOCOUNT ON;

SELECT [t01].[MetaClassDataSourceId] AS [MetaClassDataSourceId], [t01].[MetaClassId] AS [MetaClassId], [t01].[PrimaryTable] AS [PrimaryTable], [t01].[XSExtendedTables] AS [XSExtendedTables], [t01].[XSConditions] AS [XSConditions]
FROM [mcmd_MetaClassDataSource] AS [t01]
WHERE ([t01].[MetaClassDataSourceId]=@MetaClassDataSourceId)

END
GO
PRINT N'Creating [dbo].[ecf_Shipment_Update]...';


GO

CREATE PROCEDURE [dbo].[ecf_Shipment_Update]
(
	@ShipmentId int,
	@OrderFormId int,
	@OrderGroupId int,
	@ShippingMethodId uniqueidentifier,
	@ShippingAddressId nvarchar(50) = NULL,
	@ShipmentTrackingNumber nvarchar(128) = NULL,
	@ShipmentTotal money,
	@ShippingDiscountAmount money,
	@ShippingMethodName nvarchar(128) = NULL,
	@Epi_ShippingTax money,
	@Status nvarchar(64) = NULL,
	@LineItemIds nvarchar(max) = NULL,
	@WarehouseCode nvarchar(50) = NULL,
	@PickListId int = NULL,
	@SubTotal money,
	@OperationKeys nvarchar(max) = NULL
)
AS
	SET NOCOUNT ON
	
	UPDATE [Shipment]
	SET
		[OrderFormId] = @OrderFormId,
		[OrderGroupId] = @OrderGroupId,
		[ShippingMethodId] = @ShippingMethodId,
		[ShippingAddressId] = @ShippingAddressId,
		[ShipmentTrackingNumber] = @ShipmentTrackingNumber,
		[ShipmentTotal] = @ShipmentTotal,
		[ShippingDiscountAmount] = @ShippingDiscountAmount,
		[ShippingMethodName] = @ShippingMethodName,
		[Epi_ShippingTax] = @Epi_ShippingTax,
		[Status] = @Status,
		[LineItemIds] = @LineItemIds,
		[WarehouseCode] = @WarehouseCode,
		[PickListId] = @PickListId,
		[SubTotal] = @SubTotal,
		[OperationKeys] = @OperationKeys
	WHERE 
		[ShipmentId] = @ShipmentId

	RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_CatalogEntry_CatalogName]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogEntry_CatalogName]
	@ApplicationId uniqueidentifier,
	@CatalogName nvarchar(150),
	@ReturnInactive bit = 0,
	@ResponseGroup INT = NULL
AS
BEGIN
	DECLARE @CatalogEntryIds udttContentList
	INSERT INTO @CatalogEntryIds
	SELECT N.CatalogEntryId from [CatalogEntry] N
	INNER JOIN [Catalog] C ON N.CatalogId = C.CatalogId
	WHERE
		N.ApplicationId = @ApplicationId AND
		C.[Name] = @CatalogName AND
		((N.IsActive = 1) or @ReturnInactive = 1)

	SELECT N.* from [CatalogEntry] N
	INNER JOIN @CatalogEntryIds C ON C.ContentId = N.CatalogEntryId

	SELECT S.* from CatalogItemSeo S
	INNER JOIN @CatalogEntryIds C ON C.ContentId = S.CatalogEntryId

	exec ecf_CatalogEntry_Components @CatalogEntryIds, @ResponseGroup
END
GO
PRINT N'Creating [dbo].[dps_PageDocument_Add]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[dps_PageDocument_Add]
	@PageVersionId as int,
	@retval int output
AS
INSERT INTO dps_PageDocument ( PageVersionId) VALUES ( @PageVersionId)
select @retval = @@identity
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaClassDataSourceDelete]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaClassDataSourceDelete]
@MetaClassDataSourceId AS Int
AS
BEGIN
SET NOCOUNT ON;

DELETE FROM [mcmd_MetaClassDataSource]
WHERE
[MetaClassDataSourceId] = @MetaClassDataSourceId

END
GO
PRINT N'Creating [dbo].[ecf_Shipment_Insert]...';


GO

CREATE PROCEDURE [dbo].[ecf_Shipment_Insert]
(
	@ShipmentId int = NULL OUTPUT,
	@OrderFormId int,
	@OrderGroupId int,
	@ShippingMethodId uniqueidentifier,
	@ShippingAddressId nvarchar(50) = NULL,
	@ShipmentTrackingNumber nvarchar(128) = NULL,
	@ShipmentTotal money,
	@ShippingDiscountAmount money,
	@ShippingMethodName nvarchar(128) = NULL,
	@Epi_ShippingTax money,
	@Status nvarchar(64) = NULL,
	@LineItemIds nvarchar(max) = NULL,
	@WarehouseCode nvarchar(50) = NULL,
	@PickListId int = NULL,
	@SubTotal money,
	@OperationKeys nvarchar(max) = NULL
)
AS
	SET NOCOUNT ON

	INSERT INTO [Shipment]
	(
		[OrderFormId],
		[OrderGroupId],
		[ShippingMethodId],
		[ShippingAddressId],
		[ShipmentTrackingNumber],
		[ShipmentTotal],
		[ShippingDiscountAmount],
		[ShippingMethodName],
		[Epi_ShippingTax],
		[Status],
		[LineItemIds],
		[WarehouseCode],
		[PickListId],
		[SubTotal],
		[OperationKeys]
	)
	VALUES
	(
		@OrderFormId,
		@OrderGroupId,
		@ShippingMethodId,
		@ShippingAddressId,
		@ShipmentTrackingNumber,
		@ShipmentTotal,
		@ShippingDiscountAmount,
		@ShippingMethodName,
		@Epi_ShippingTax,
		@Status,
		@LineItemIds,
		@WarehouseCode,
		@PickListId,
		@SubTotal,
		@OperationKeys
	)

	SELECT @ShipmentId = SCOPE_IDENTITY()

	RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_CatalogEntry_CatalogId]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogEntry_CatalogId]
    @CatalogId int,
	@ReturnInactive bit = 0,
	@ResponseGroup INT = NULL
AS
BEGIN
	DECLARE @CatalogEntryIds udttContentList
	INSERT INTO @CatalogEntryIds
	SELECT N.CatalogEntryId from [CatalogEntry] N
	WHERE
		N.CatalogId = @CatalogId AND
		NOT EXISTS(SELECT * FROM NodeEntryRelation R WHERE R.CatalogId = @CatalogId and N.CatalogEntryId = R.CatalogEntryId) AND
		((N.IsActive = 1) or @ReturnInactive = 1)

	SELECT N.* from [CatalogEntry] N
	INNER JOIN @CatalogEntryIds C ON C.ContentId = N.CatalogEntryId

	SELECT S.* from CatalogItemSeo S
	INNER JOIN @CatalogEntryIds C ON C.ContentId = S.CatalogEntryId

	exec ecf_CatalogEntry_Components @CatalogEntryIds, @ResponseGroup
END
GO
PRINT N'Creating [dbo].[mc_Security_SsoTicketCheck]...';


GO
CREATE PROCEDURE [dbo].[mc_Security_SsoTicketCheck]
	@SsoTicket nvarchar(64),
	@UserName nvarchar(256),
	@UtcNow datetime = null,
	@PurgeBefore datetime = null
as
begin
	set nocount on
	
	if (@UtcNow is null) set @UtcNow = GETUTCDATE()
	if (@PurgeBefore is null) set @PurgeBefore = DATEADD(day, -2, @UtcNow)

	declare @ApplicationName nvarchar(200)
	declare @Valid bit
	declare @ExpirationUtc datetime
	
	begin try
		begin transaction check_ssoticket_transaction

		select @ApplicationName = [ApplicationName], @Valid = [Valid], @ExpirationUtc = [ExpirationUtc]
		from [Security_SsoTickets]
		with (HOLDLOCK, ROWLOCK)
		where [SsoTicket] = @SsoTicket and [UserName] = @UserName
	  
		update [Security_SsoTickets] set Valid = 0 where [SsoTicket] = @SsoTicket
		
		commit transaction check_ssoticket_transaction
	end try
	begin catch
		rollback transaction check_ssoticket_transaction
	end catch

	begin try	
		delete from [Security_SsoTickets] where [ExpirationUtc] < @PurgeBefore
	end try
	begin catch
	end catch
	
	if @Valid is null set @Valid = 0
	if @Valid = 0 set @ApplicationName = null
	
	select @Valid as Valid, @ApplicationName as ApplicationName
end
GO
PRINT N'Creating [dbo].[dps_NodeType_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_NodeType_Update]
	@NodeTypeId as int,
	@TypeName as nvarchar(255)
	
AS
UPDATE dps_NodeType SET TypeName = @TypeName WHERE (NodeTypeId = @NodeTypeId)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaClassDataSourceUpdate]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaClassDataSourceUpdate]
@MetaClassId AS Int,
@PrimaryTable AS NVarChar(4000),
@XSExtendedTables AS NText,
@XSConditions AS NText,
@MetaClassDataSourceId AS Int
AS
BEGIN
SET NOCOUNT ON;

UPDATE [mcmd_MetaClassDataSource] SET
[MetaClassId] = @MetaClassId,
[PrimaryTable] = @PrimaryTable,
[XSExtendedTables] = @XSExtendedTables,
[XSConditions] = @XSConditions WHERE
[MetaClassDataSourceId] = @MetaClassDataSourceId

END
GO
PRINT N'Creating [dbo].[ecf_Shipment_Delete]...';


GO
CREATE PROCEDURE [dbo].[ecf_Shipment_Delete]
(
	@ShipmentId int
)
AS
	SET NOCOUNT ON

	EXEC [dbo].[mdpsp_avto_ShipmentEx_Delete] @ShipmentId
	DELETE FROM [ShipmentDiscount] where ShipmentId = @ShipmentId
	DELETE FROM [Shipment] WHERE  [ShipmentId] = @ShipmentId	

	RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_CatalogEntry_Association]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogEntry_Association]
    @CatalogEntryId int
AS
BEGIN

	SELECT CA.* from [CatalogAssociation] CA
	WHERE
		CA.CatalogEntryId = @CatalogEntryId
	ORDER BY CA.SortOrder

	/*
	SELECT CEA.* from [CatalogEntryAssociation] CEA
	INNER JOIN [CatalogAssociation] CA ON CA.CatalogAssociationId = CEA.CatalogAssociationId
	WHERE
		CA.CatalogEntryId = @CatalogEntryId
	*/
END
GO
PRINT N'Creating [dbo].[mc_Security_SsoTicketCreate]...';


GO
CREATE PROCEDURE [dbo].[mc_Security_SsoTicketCreate]
	@SsoTicket nvarchar(64),
	@UserName nvarchar(256),
	@ApplicationName nvarchar(200) = null,
	@ExpirationUtc datetime
as
begin
	set nocount on

	begin try
		begin transaction create_ssoticket_transaction
	
		update [Security_SsoTickets]
		set Valid = 0
		where UserName = @UserName and Valid = 1
	
		insert into [Security_SsoTickets] ([SsoTicket], [UserName], [ApplicationName], [ExpirationUtc], [Valid])
		values (@SsoTicket, @UserName, @ApplicationName, @ExpirationUtc, 1)
	
		commit transaction create_ssoticket_transaction
	end try
	begin catch
		rollback transaction create_ssoticket_transaction
	end catch
end
GO
PRINT N'Creating [dbo].[dps_NodeType_GetById]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_NodeType_GetById]
	@NodeTypeId as int
AS
SELECT NodeTypeId, TypeName FROM dps_NodeType WHERE NodeTypeId = @NodeTypeId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_MetaFieldAllowSearch]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.mdpsp_sys_MetaFieldAllowSearch
    @MetaFieldId int,
    @AllowSearch bit
as
begin
    set nocount on

    if not exists (select 1 from MetaField where MetaFieldId = @MetaFieldId)
    begin
        raiserror('The specified meta field does not exists or is a system field.', 16,1)
    end
    else
    begin
        update MetaField
        set AllowSearch = @AllowSearch
        where MetaFieldId = @MetaFieldId
    end
end
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaClassDataSourceInsert]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaClassDataSourceInsert]
@MetaClassId AS Int,
@PrimaryTable AS NVarChar(4000),
@XSExtendedTables AS NText,
@XSConditions AS NText,
@MetaClassDataSourceId AS Int = NULL OUTPUT
AS
BEGIN
SET NOCOUNT ON;

INSERT INTO [mcmd_MetaClassDataSource]
(
[MetaClassId],
[PrimaryTable],
[XSExtendedTables],
[XSConditions])
VALUES(
@MetaClassId,
@PrimaryTable,
@XSExtendedTables,
@XSConditions)
SELECT @MetaClassDataSourceId = SCOPE_IDENTITY();

END
GO
PRINT N'Creating [dbo].[ecf_CatalogEntry_AssociatedByCode]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogEntry_AssociatedByCode]
	@ApplicationId uniqueidentifier,
	@CatalogEntryCode nvarchar(100),
	@AssociationName nvarchar(150) = '',
	@ReturnInactive bit = 0,
	@ResponseGroup INT = NULL
AS
BEGIN
	DECLARE @CatalogEntryIds udttContentList
	INSERT INTO @CatalogEntryIds
	SELECT N.CatalogEntryId from [CatalogEntry] N
	INNER JOIN CatalogEntryAssociation A ON A.CatalogEntryId = N.CatalogEntryId
	INNER JOIN CatalogAssociation CA ON CA.CatalogAssociationId = A.CatalogAssociationId
	INNER JOIN CatalogEntry NE ON NE.CatalogEntryId = CA.CatalogEntryId
	WHERE
		NE.ApplicationId = @ApplicationId AND
		NE.Code = @CatalogEntryCode AND COALESCE(@AssociationName, CA.AssociationName) = CA.AssociationName AND 
		((N.IsActive = 1) or @ReturnInactive = 1)
	ORDER BY CA.SortOrder, A.SortOrder

	if(@AssociationName = '')
		set @AssociationName = null
	
	SELECT N.* from [CatalogEntry] N
	INNER JOIN @CatalogEntryIds C ON C.ContentId = N.CatalogEntryId

	SELECT S.* from CatalogItemSeo S
	INNER JOIN @CatalogEntryIds C ON C.ContentId = S.CatalogEntryId

	exec ecf_CatalogEntry_Components @CatalogEntryIds, @ResponseGroup
END
GO
PRINT N'Creating [dbo].[mc_Security_RoleAssignmentSelect]...';


GO
CREATE PROCEDURE [dbo].[mc_Security_RoleAssignmentSelect]
@SecurityRoleAssignmentId AS UniqueIdentifier
AS
BEGIN
SET NOCOUNT ON;

SELECT [t01].[SecurityRoleAssignmentId] AS [SecurityRoleAssignmentId], [t01].[RoleParticipant] AS [RoleParticipant], [t01].[Role] AS [Role], [t01].[Scope] AS [Scope], [t01].[CheckMode] AS [CheckMode], [t01].[IsOnlyForOwner] AS [IsOnlyForOwner]
FROM [Security_RoleAssignment] AS [t01]
WHERE ([t01].[SecurityRoleAssignmentId]=@SecurityRoleAssignmentId)

END

-- End
GO
PRINT N'Creating [dbo].[dps_NodeType_Delete]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_NodeType_Delete]
	@NodeTypeId as int
AS
DELETE FROM dps_NodeType WHERE (NodeTypeId = @NodeTypeId)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadMultiValueDictionary]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_LoadMultiValueDictionary]
	@MetaKey	INT
AS

	SELECT MD.MetaDictionaryId, MD.MetaFieldId, MD.[Value] FROM MetaDictionary MD
		INNER JOIN MetaMultiValueDictionary  MVD ON MVD.MetaDictionaryId = MD.MetaDictionaryId
		WHERE MVD.MetaKey = @MetaKey
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_ModuleInsert]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_ModuleInsert]
@Name AS NVarChar(4000),
@XSAttributes AS NText,
@ModuleId AS Int = NULL OUTPUT
AS
BEGIN
SET NOCOUNT ON;

INSERT INTO [mcmd_Module]
(
[Name],
[XSAttributes])
VALUES(
@Name,
@XSAttributes)
SELECT @ModuleId = SCOPE_IDENTITY();

END
GO
PRINT N'Creating [dbo].[ecf_CatalogEntry_Associated]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogEntry_Associated]
    @CatalogEntryId int,
	@AssociationName nvarchar(150) = '',
	@ReturnInactive bit = 0,
	@ResponseGroup INT = NULL
AS
BEGIN
	if(@AssociationName = '')
		set @AssociationName = null

	DECLARE @CatalogEntryIds udttContentList
	INSERT INTO @CatalogEntryIds
	SELECT N.CatalogEntryId from [CatalogEntry] N
	INNER JOIN CatalogEntryAssociation A ON A.CatalogEntryId = N.CatalogEntryId
	INNER JOIN CatalogAssociation CA ON CA.CatalogAssociationId = A.CatalogAssociationId
	WHERE
		CA.CatalogEntryId = @CatalogEntryId AND COALESCE(@AssociationName, CA.AssociationName) = CA.AssociationName AND 
		((N.IsActive = 1) or @ReturnInactive = 1)
	ORDER BY CA.SortOrder, A.SortOrder

	SELECT N.* from [CatalogEntry] N
	INNER JOIN @CatalogEntryIds C on N.CatalogEntryId = C.ContentId

	SELECT S.* from CatalogItemSeo S
	INNER JOIN @CatalogEntryIds C on S.CatalogEntryId = C.ContentId

	exec ecf_CatalogEntry_Components @CatalogEntryIds, @ResponseGroup
END
GO
PRINT N'Creating [dbo].[mc_Security_RoleAssignmentDelete]...';


GO
CREATE PROCEDURE [dbo].[mc_Security_RoleAssignmentDelete]
@SecurityRoleAssignmentId AS UniqueIdentifier
AS
BEGIN
SET NOCOUNT ON;

DELETE FROM [Security_RoleAssignment]
WHERE
[SecurityRoleAssignmentId] = @SecurityRoleAssignmentId

END
GO
PRINT N'Creating [dbo].[dps_NodeType_Add]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_NodeType_Add]
	@TypeName as nvarchar(255),
	@retval int output
AS
INSERT INTO dps_NodeType (TypeName) VALUES (@TypeName)
select @retval = @@identity
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadMetaTypeList]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_LoadMetaTypeList]
AS
	SELECT DataTypeId, [Name], FriendlyName, [Description], Length, SqlName, AllowNulls, Variable, IsSQLCommonType FROM MetaDataType
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_ModuleSelect]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_ModuleSelect]
@ModuleId AS Int
AS
BEGIN
SET NOCOUNT ON;

SELECT [t01].[ModuleId] AS [ModuleId], [t01].[Name] AS [Name], [t01].[XSAttributes] AS [XSAttributes]
FROM [mcmd_Module] AS [t01]
WHERE ([t01].[ModuleId]=@ModuleId)

END
GO
PRINT N'Creating [dbo].[ecf_CatalogEntry_AssetKey]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogEntry_AssetKey]
	@ApplicationId uniqueidentifier,
	@AssetKey nvarchar(254)
AS
BEGIN
	SELECT A.* from [CatalogItemAsset] A
		INNER JOIN [CatalogEntry] CE ON CE.CatalogEntryId = A.CatalogEntryId
	WHERE
		CE.ApplicationId = @ApplicationId AND
		A.AssetKey = @AssetKey
END
GO
PRINT N'Creating [dbo].[mc_Security_RoleAssignmentUpdate]...';


GO
CREATE PROCEDURE [dbo].[mc_Security_RoleAssignmentUpdate]
@RoleParticipant AS UniqueIdentifier,
@Role AS NVarChar(4000),
@Scope AS NText,
@CheckMode AS Int,
@IsOnlyForOwner AS Bit,
@SecurityRoleAssignmentId AS UniqueIdentifier
AS
BEGIN
SET NOCOUNT ON;

UPDATE [Security_RoleAssignment] SET
[RoleParticipant] = @RoleParticipant,
[Role] = @Role,
[Scope] = @Scope,
[CheckMode] = @CheckMode,
[IsOnlyForOwner] = @IsOnlyForOwner WHERE
[SecurityRoleAssignmentId] = @SecurityRoleAssignmentId

END
GO
PRINT N'Creating [dbo].[dps_Node_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_Node_Update]
	@NodeId as int,
	@PageId as int,
	@NodeTypeId as int,
	@NodeUID as nvarchar(255),
	@FactoryUID as nvarchar(255),
	@FactoryControlUID as nvarchar(255),
	@ControlPlaceId as nvarchar(255),
	@ControlPlaceIndex as int
	
AS
UPDATE dps_Node SET PageId = @PageId, NodeTypeId = @NodeTypeId, NodeUID = @NodeUID, FactoryUID = @FactoryUID, FactoryControlUID = @FactoryControlUID, ControlPlaceId = @ControlPlaceId, ControlPlaceIndex = @ControlPlaceIndex 
WHERE (NodeId = @NodeId)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadMetaType]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_LoadMetaType]
	@MetaTypeId	INT
AS
	SELECT DataTypeId, Name, FriendlyName, Description, Length, SqlName, AllowNulls, Variable, IsSQLCommonType FROM MetaDataType WHERE
		DataTypeId = @MetaTypeId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_ModuleUpdate]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_ModuleUpdate]
@Name AS NVarChar(4000),
@XSAttributes AS NText,
@ModuleId AS Int
AS
BEGIN
SET NOCOUNT ON;

UPDATE [mcmd_Module] SET
[Name] = @Name,
[XSAttributes] = @XSAttributes WHERE
[ModuleId] = @ModuleId

END
GO
PRINT N'Creating [dbo].[aspnet_Membership_FindUsersByEmail]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_FindUsersByEmail
    @ApplicationName       nvarchar(256),
    @EmailToMatch          nvarchar(256),
    @PageIndex             int,
    @PageSize              int
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN 0

    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexId int IDENTITY (0, 1) NOT NULL,
        UserId uniqueidentifier
    )

    -- Insert into our temp table
    IF( @EmailToMatch IS NULL )
        INSERT INTO #PageIndexForUsers (UserId)
            SELECT u.UserId
            FROM   dbo.aspnet_Users u, dbo.aspnet_Membership m
            WHERE  u.ApplicationId = @ApplicationId AND m.UserId = u.UserId AND m.Email IS NULL
            ORDER BY m.LoweredEmail
    ELSE
        INSERT INTO #PageIndexForUsers (UserId)
            SELECT u.UserId
            FROM   dbo.aspnet_Users u, dbo.aspnet_Membership m
            WHERE  u.ApplicationId = @ApplicationId AND m.UserId = u.UserId AND m.LoweredEmail LIKE LOWER(@EmailToMatch)
            ORDER BY m.LoweredEmail

    SELECT  u.UserName, m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
            m.CreateDate,
            m.LastLoginDate,
            u.LastActivityDate,
            m.LastPasswordChangedDate,
            u.UserId, m.IsLockedOut,
            m.LastLockoutDate
    FROM   dbo.aspnet_Membership m, dbo.aspnet_Users u, #PageIndexForUsers p
    WHERE  u.UserId = p.UserId AND u.UserId = m.UserId AND
           p.IndexId >= @PageLowerBound AND p.IndexId <= @PageUpperBound
    ORDER BY m.LoweredEmail

    SELECT  @TotalRecords = COUNT(*)
    FROM    #PageIndexForUsers
    RETURN @TotalRecords
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogEntry_Asset]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogEntry_Asset]
    @CatalogEntryId int
AS
BEGIN
	SELECT A.* from [CatalogItemAsset] A
	WHERE
		A.CatalogEntryId = @CatalogEntryId
END
GO
PRINT N'Creating [dbo].[mc_Security_RoleAssignmentInsert]...';


GO
CREATE PROCEDURE [dbo].[mc_Security_RoleAssignmentInsert]
@SecurityRoleAssignmentId AS UniqueIdentifier,
@RoleParticipant AS UniqueIdentifier,
@Role AS NVarChar(4000),
@Scope AS NText,
@CheckMode AS Int,
@IsOnlyForOwner AS Bit
AS
BEGIN
SET NOCOUNT ON;

INSERT INTO [Security_RoleAssignment]
(
[SecurityRoleAssignmentId],
[RoleParticipant],
[Role],
[Scope],
[CheckMode],
[IsOnlyForOwner])
VALUES(
@SecurityRoleAssignmentId,
@RoleParticipant,
@Role,
@Scope,
@CheckMode,
@IsOnlyForOwner)

END
GO
PRINT N'Creating [dbo].[dps_Node_GetByUID]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_Node_GetByUID]
	@NodeUID as nvarchar(255),
	@PageID as int
AS
SELECT NodeId, PageId, NodeTypeId, NodeUID, FactoryUID, FactoryControlUID, ControlPlaceId, ControlPlaceIndex 
FROM dps_Node WHERE ((NodeUID = @NodeUID)and(PageId=@PageID))
ORDER BY ControlPlaceIndex
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadMetaStringDictionary]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_LoadMetaStringDictionary]
	@MetaKey	INT
AS
	SELECT MetaKey, [Key],[Value] FROM MetaStringDictionaryValue WHERE MetaKey = @MetaKey
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_ModuleDelete]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_ModuleDelete]
@ModuleId AS Int
AS
BEGIN
SET NOCOUNT ON;

DELETE FROM [mcmd_Module]
WHERE
[ModuleId] = @ModuleId

END
GO
PRINT N'Creating [dbo].[aspnet_Membership_FindUsersByName]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_FindUsersByName
    @ApplicationName       nvarchar(256),
    @UserNameToMatch       nvarchar(256),
    @PageIndex             int,
    @PageSize              int
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN 0

    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexId int IDENTITY (0, 1) NOT NULL,
        UserId uniqueidentifier
    )

    -- Insert into our temp table
    INSERT INTO #PageIndexForUsers (UserId)
        SELECT u.UserId
        FROM   dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE  u.ApplicationId = @ApplicationId AND m.UserId = u.UserId AND u.LoweredUserName LIKE LOWER(@UserNameToMatch)
        ORDER BY u.UserName


    SELECT  u.UserName, m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
            m.CreateDate,
            m.LastLoginDate,
            u.LastActivityDate,
            m.LastPasswordChangedDate,
            u.UserId, m.IsLockedOut,
            m.LastLockoutDate
    FROM   dbo.aspnet_Membership m, dbo.aspnet_Users u, #PageIndexForUsers p
    WHERE  u.UserId = p.UserId AND u.UserId = m.UserId AND
           p.IndexId >= @PageLowerBound AND p.IndexId <= @PageUpperBound
    ORDER BY u.UserName

    SELECT  @TotalRecords = COUNT(*)
    FROM    #PageIndexForUsers
    RETURN @TotalRecords
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogEntry]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogEntry]
    @CatalogEntryId int,
	@ReturnInactive bit = 0,
	@ResponseGroup INT = NULL
AS
BEGIN

	DECLARE @CatalogEntryFull INT
	DECLARE @Associations INT
	DECLARE @Assets INT
	DECLARE @Variations INT

	SET @CatalogEntryFull = 4
	SET @Associations = 8
	SET @Assets = 32
	SET @Variations = 128

	IF (@ReturnInactive = 0)
	BEGIN
		IF  NOT EXISTS(SELECT CatalogEntryId FROM [CatalogEntry] N WHERE N.CatalogEntryId = @CatalogEntryId AND N.IsActive = 1)
			RETURN
	END

	SELECT N.* from [CatalogEntry] N
	WHERE
		N.CatalogEntryId = @CatalogEntryId

	SELECT S.* from CatalogItemSeo S
	WHERE
		S.CatalogEntryId = @CatalogEntryId 

	IF ((@ResponseGroup & @Variations = @Variations)
		OR (@ResponseGroup & @CatalogEntryFull = @CatalogEntryFull))
	BEGIN
		SELECT v.*
		FROM Variation v
		WHERE v.CatalogEntryId = @CatalogEntryId
	
		SELECT m.*
		FROM Merchant m
		INNER JOIN Variation v ON m.MerchantId = v.MerchantId
		WHERE v.CatalogEntryId = @CatalogEntryId
    END

	IF ((@ResponseGroup & @Associations = @Associations)
		OR (@ResponseGroup & @CatalogEntryFull = @CatalogEntryFull))
	BEGIN
		SELECT a.*
		FROM CatalogAssociation a
		WHERE a.CatalogEntryId = @CatalogEntryId
	END

	IF ((@ResponseGroup & @Assets = @Assets)
		OR (@ResponseGroup & @CatalogEntryFull = @CatalogEntryFull))
	BEGIN
		SELECT a.*
		FROM CatalogItemAsset a
		WHERE a.CatalogEntryId = @CatalogEntryId
		AND a.CatalogNodeId = 0 -- get Entry only, not Node
	END
END
GO
PRINT N'Creating [dbo].[mc_RolePermissionSelect]...';


GO
CREATE PROCEDURE [dbo].[mc_RolePermissionSelect]
@RolePermissionId AS Int
AS
BEGIN
SET NOCOUNT ON;

SELECT [t01].[RolePermissionId] AS [RolePermissionId], [t01].[ApplicationId] AS [ApplicationId], [t01].[RoleName] AS [RoleName], [t01].[Permission] AS [Permission]
FROM [RolePermission] AS [t01]
WHERE ([t01].[RolePermissionId]=@RolePermissionId)

END
GO
PRINT N'Creating [dbo].[dps_Node_GetByPageId]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_Node_GetByPageId]
	@PageId as int
AS
SELECT NodeId, PageId, NodeTypeId, NodeUID, FactoryUID, FactoryControlUID, ControlPlaceId, ControlPlaceIndex 
FROM dps_Node WHERE PageId = @PageId
ORDER BY ControlPlaceIndex
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadMetaRuleByMetaClassId]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_LoadMetaRuleByMetaClassId]
	@MetaClassId	INT
AS
	SELECT RuleId, MetaClassId, Data FROM MetaRule
	WHERE MetaClassId = @MetaClassId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaFieldMapUpdate]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaFieldMapUpdate]
@Name AS NVarChar(4000),
@SrcMetaClassId AS Int,
@DestMetaClassId AS Int,
@XSReferences AS NText,
@XSElements AS NText,
@MetaFieldMapId AS Int
AS
BEGIN
SET NOCOUNT ON;

UPDATE [mcmd_MetaFieldMap] SET
[Name] = @Name,
[SrcMetaClassId] = @SrcMetaClassId,
[DestMetaClassId] = @DestMetaClassId,
[XSReferences] = @XSReferences,
[XSElements] = @XSElements WHERE
[MetaFieldMapId] = @MetaFieldMapId

END
GO
PRINT N'Creating [dbo].[aspnet_Membership_GetNumberOfUsersOnline]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_GetNumberOfUsersOnline
    @ApplicationName            nvarchar(256),
    @MinutesSinceLastInActive   int,
    @CurrentTimeUtc             datetime
AS
BEGIN
    DECLARE @DateActive datetime
    SELECT  @DateActive = DATEADD(minute,  -(@MinutesSinceLastInActive), @CurrentTimeUtc)

    DECLARE @NumOnline int
    SELECT  @NumOnline = COUNT(*)
    FROM    dbo.aspnet_Users u WITH (NOLOCK),
            dbo.aspnet_Applications a WITH (NOLOCK),
            dbo.aspnet_Membership m WITH (NOLOCK)
    WHERE   u.ApplicationId = a.ApplicationId                  AND
            LastActivityDate > @DateActive                     AND
            a.LoweredApplicationName = LOWER(@ApplicationName) AND
            u.UserId = m.UserId
    RETURN(@NumOnline)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogAssociationByName]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogAssociationByName]
	@ApplicationId uniqueidentifier,
	@AssociationName nvarchar(150)
AS
BEGIN
	SELECT CA.* from [CatalogAssociation] CA
		INNER JOIN [CatalogEntry] CE ON CE.CatalogEntryId = CA.CatalogEntryId
	WHERE
		CE.ApplicationId = @ApplicationId AND
		CA.AssociationName = @AssociationName
	ORDER BY CA.SortOrder

	SELECT CEA.* from [CatalogEntryAssociation] CEA
		INNER JOIN [CatalogAssociation] CA ON CA.CatalogAssociationId = CEA.CatalogAssociationId
		INNER JOIN [CatalogEntry] CE ON CE.CatalogEntryId = CA.CatalogEntryId
	WHERE
		CE.ApplicationId = @ApplicationId AND
		(CA.AssociationName = @AssociationName OR (CA.AssociationName IS NULL AND @AssociationName IS NULL))
	ORDER BY CA.SortOrder, CEA.SortOrder
		
	SELECT * FROM [AssociationType]
END
GO
PRINT N'Creating [dbo].[mc_RolePermissionDelete]...';


GO
CREATE PROCEDURE [dbo].[mc_RolePermissionDelete]
@RolePermissionId AS Int
AS
BEGIN
SET NOCOUNT ON;

DELETE FROM [RolePermission]
WHERE
[RolePermissionId] = @RolePermissionId

END
GO
PRINT N'Creating [dbo].[dps_Node_GetById]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_Node_GetById]
	@NodeId as int
AS
SELECT NodeId, PageId, NodeTypeId, NodeUID, FactoryUID, FactoryControlUID, ControlPlaceId, ControlPlaceIndex 
FROM dps_Node WHERE NodeId = @NodeId
ORDER BY ControlPlaceIndex
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadMetaRuleById]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_LoadMetaRuleById]
	@RuleId	INT
AS
	SELECT RuleId, MetaClassId, Data FROM MetaRule
	WHERE RuleId = @RuleId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaFieldMapInsert]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaFieldMapInsert]
@MetaFieldMapId AS Int,
@Name AS NVarChar(4000),
@SrcMetaClassId AS Int,
@DestMetaClassId AS Int,
@XSReferences AS NText,
@XSElements AS NText
AS
BEGIN
SET NOCOUNT ON;

INSERT INTO [mcmd_MetaFieldMap]
(
[MetaFieldMapId],
[Name],
[SrcMetaClassId],
[DestMetaClassId],
[XSReferences],
[XSElements])
VALUES(
@MetaFieldMapId,
@Name,
@SrcMetaClassId,
@DestMetaClassId,
@XSReferences,
@XSElements)

END
GO
PRINT N'Creating [dbo].[aspnet_Membership_GetAllUsers]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_GetAllUsers
    @ApplicationName       nvarchar(256),
    @PageIndex             int,
    @PageSize              int
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN 0


    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexId int IDENTITY (0, 1) NOT NULL,
        UserId uniqueidentifier
    )

    -- Insert into our temp table
    INSERT INTO #PageIndexForUsers (UserId)
    SELECT u.UserId
    FROM   dbo.aspnet_Membership m, dbo.aspnet_Users u
    WHERE  u.ApplicationId = @ApplicationId AND u.UserId = m.UserId
    ORDER BY u.UserName

    SELECT @TotalRecords = @@ROWCOUNT

    SELECT u.UserName, m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
            m.CreateDate,
            m.LastLoginDate,
            u.LastActivityDate,
            m.LastPasswordChangedDate,
            u.UserId, m.IsLockedOut,
            m.LastLockoutDate
    FROM   dbo.aspnet_Membership m, dbo.aspnet_Users u, #PageIndexForUsers p
    WHERE  u.UserId = p.UserId AND u.UserId = m.UserId AND
           p.IndexId >= @PageLowerBound AND p.IndexId <= @PageUpperBound
    ORDER BY u.UserName
    RETURN @TotalRecords
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogAssociation_Delete]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogAssociation_Delete]
(
	@CatalogAssociationId int
)
AS
	SET NOCOUNT ON

	DELETE 
	FROM [CatalogAssociation]
	WHERE  
		[CatalogAssociationId] = @CatalogAssociationId

	RETURN @@Error
GO
PRINT N'Creating [dbo].[mc_RolePermissionUpdate]...';


GO
CREATE PROCEDURE [dbo].[mc_RolePermissionUpdate]
@ApplicationId AS UniqueIdentifier,
@RoleName AS NVarChar(4000),
@Permission AS NVarChar(4000),
@RolePermissionId AS Int
AS
BEGIN
SET NOCOUNT ON;

UPDATE [RolePermission] SET
[ApplicationId] = @ApplicationId,
[RoleName] = @RoleName,
[Permission] = @Permission WHERE
[RolePermissionId] = @RolePermissionId

END
GO
PRINT N'Creating [dbo].[dps_Node_GetByControlPlaceId]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_Node_GetByControlPlaceId]
	@ControlPlaceId as nvarchar(255)
AS
SELECT NodeId, PageId, NodeTypeId, NodeUID, FactoryUID, FactoryControlUID, ControlPlaceId, ControlPlaceIndex 
FROM dps_Node WHERE ControlPlaceId = @ControlPlaceId
ORDER BY ControlPlaceIndex
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadMetaObjectValue]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_LoadMetaObjectValue]
	@MetaKey	INT
AS
	SELECT MetaKey, MetaClassId, MetaObjectId  FROM MetaObjectValue WHERE MetaKey = @MetaKey
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaFieldMapSelect]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaFieldMapSelect]
@MetaFieldMapId AS Int
AS
BEGIN
SET NOCOUNT ON;

SELECT [t01].[MetaFieldMapId] AS [MetaFieldMapId], [t01].[Name] AS [Name], [t01].[SrcMetaClassId] AS [SrcMetaClassId], [t01].[DestMetaClassId] AS [DestMetaClassId], [t01].[XSReferences] AS [XSReferences], [t01].[XSElements] AS [XSElements]
FROM [mcmd_MetaFieldMap] AS [t01]
WHERE ([t01].[MetaFieldMapId]=@MetaFieldMapId)

END
GO
PRINT N'Creating [dbo].[aspnet_Membership_ChangePasswordQuestionAndAnswer]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_ChangePasswordQuestionAndAnswer
    @ApplicationName       nvarchar(256),
    @UserName              nvarchar(256),
    @NewPasswordQuestion   nvarchar(256),
    @NewPasswordAnswer     nvarchar(128)
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Membership m, dbo.aspnet_Users u, dbo.aspnet_Applications a
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId
    IF (@UserId IS NULL)
    BEGIN
        RETURN(1)
    END

    UPDATE dbo.aspnet_Membership
    SET    PasswordQuestion = @NewPasswordQuestion, PasswordAnswer = @NewPasswordAnswer
    WHERE  UserId=@UserId
    RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogAssociation_CatalogEntryId]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogAssociation_CatalogEntryId]
    @CatalogEntryId int
AS
BEGIN
	SELECT CA.* from [CatalogAssociation] CA
	WHERE
		CA.CatalogEntryId = @CatalogEntryId
	ORDER BY CA.SortOrder

	SELECT CEA.* from [CatalogEntryAssociation] CEA
	INNER JOIN [CatalogAssociation] CA ON CA.CatalogAssociationId = CEA.CatalogAssociationId
	WHERE
		CA.CatalogEntryId = @CatalogEntryId
	ORDER BY CA.SortOrder, CEA.SortOrder
		
	SELECT * FROM [AssociationType]
END
GO
PRINT N'Creating [dbo].[mc_RolePermissionInsert]...';


GO
CREATE PROCEDURE [dbo].[mc_RolePermissionInsert]
@ApplicationId AS UniqueIdentifier,
@RoleName AS NVarChar(4000),
@Permission AS NVarChar(4000),
@RolePermissionId AS Int = NULL OUTPUT
AS
BEGIN
SET NOCOUNT ON;

INSERT INTO [RolePermission]
(
[ApplicationId],
[RoleName],
[Permission])
VALUES(
@ApplicationId,
@RoleName,
@Permission)
SELECT @RolePermissionId = SCOPE_IDENTITY();

END
GO
PRINT N'Creating [dbo].[dps_Node_Delete]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_Node_Delete]
	@NodeId as int
AS
DELETE FROM dps_Node WHERE (NodeId = @NodeId)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadMetaFileList]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_LoadMetaFileList]
 AS
	SELECT MetaKey, [FileName], ContentType, Data, CreationTime, LastWriteTime, LastReadTime FROM MetaFileValue
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaFieldMapDelete]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaFieldMapDelete]
@MetaFieldMapId AS Int
AS
BEGIN
SET NOCOUNT ON;

DELETE FROM [mcmd_MetaFieldMap]
WHERE
[MetaFieldMapId] = @MetaFieldMapId

END
GO
PRINT N'Creating [dbo].[aspnet_Membership_UpdateUser]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_UpdateUser
    @ApplicationName      nvarchar(256),
    @UserName             nvarchar(256),
    @Email                nvarchar(256),
    @Comment              ntext,
    @IsApproved           bit,
    @LastLoginDate        datetime,
    @LastActivityDate     datetime,
    @UniqueEmail          int,
    @CurrentTimeUtc       datetime
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId, @ApplicationId = a.ApplicationId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a, dbo.aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF (@UserId IS NULL)
        RETURN(1)

    IF (@UniqueEmail = 1)
    BEGIN
        IF (EXISTS (SELECT *
                    FROM  dbo.aspnet_Membership WITH (UPDLOCK, HOLDLOCK)
                    WHERE ApplicationId = @ApplicationId  AND @UserId <> UserId AND LoweredEmail = LOWER(@Email)))
        BEGIN
            RETURN(7)
        END
    END

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
	SET @TranStarted = 0

    UPDATE dbo.aspnet_Users WITH (ROWLOCK)
    SET
         LastActivityDate = @LastActivityDate
    WHERE
       @UserId = UserId

    IF( @@ERROR <> 0 )
        GOTO Cleanup

    UPDATE dbo.aspnet_Membership WITH (ROWLOCK)
    SET
         Email            = @Email,
         LoweredEmail     = LOWER(@Email),
         Comment          = @Comment,
         IsApproved       = @IsApproved,
         LastLoginDate    = @LastLoginDate
    WHERE
       @UserId = UserId

    IF( @@ERROR <> 0 )
        GOTO Cleanup

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN -1
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogAssociation_CatalogEntryCode]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogAssociation_CatalogEntryCode]
	@ApplicationId uniqueidentifier,
	@CatalogId int,
	@CatalogEntryCode nvarchar(100)
AS
BEGIN
	SELECT CA.* from [CatalogAssociation] CA
		INNER JOIN [CatalogEntry] CE ON CE.CatalogEntryId = CA.CatalogEntryId
	WHERE
		CE.ApplicationId = @ApplicationId AND
		CE.Code = @CatalogEntryCode AND
		CE.CatalogId = @CatalogId
	ORDER BY CA.SortOrder

	SELECT CEA.* from [CatalogEntryAssociation] CEA
		INNER JOIN [CatalogAssociation] CA ON CA.CatalogAssociationId = CEA.CatalogAssociationId
		INNER JOIN [CatalogEntry] CE ON CE.CatalogEntryId = CA.CatalogEntryId
	WHERE
		CE.ApplicationId = @ApplicationId AND
		CE.Code = @CatalogEntryCode AND
		CE.CatalogId = @CatalogId
	ORDER BY CA.SortOrder, CEA.SortOrder
		
	SELECT * FROM [AssociationType]
END
GO
PRINT N'Creating [dbo].[ecf_RolePermission]...';


GO
CREATE PROCEDURE [dbo].[ecf_RolePermission]
    @ApplicationId uniqueidentifier,
	@Roles nvarchar(max)
AS
BEGIN
	SET NOCOUNT ON;
	select * from RolePermission where ApplicationId = @ApplicationId and RoleName in (select Item from ecf_splitlist(@Roles))
END
GO
PRINT N'Creating [dbo].[dps_Node_Add]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_Node_Add]
	@PageId as int,
	@NodeTypeId as int,
	@NodeUID as nvarchar(255),
	@FactoryUID as nvarchar(255),
	@FactoryControlUID as nvarchar(255),
	@ControlPlaceId as nvarchar(255),
	@ControlPlaceIndex as int,
	@retval int output
AS
INSERT INTO dps_Node (PageId, NodeTypeId, NodeUID, FactoryUID, FactoryControlUID, ControlPlaceId, ControlPlaceIndex) VALUES (@PageId, @NodeTypeId, @NodeUID, @FactoryUID, @FactoryControlUID, @ControlPlaceId, @ControlPlaceIndex)
select @retval = @@identity
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadMetaFile]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_LoadMetaFile]
	@MetaKey	INT
AS
	SELECT MetaKey, [FileName], ContentType, Data, CreationTime, LastWriteTime, LastReadTime FROM MetaFileValue WHERE MetaKey = @MetaKey
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaViewUpdate]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaViewUpdate]
@MetaClassId AS Int,
@Card AS NVarChar(4000),
@Name AS NVarChar(4000),
@FriendlyName AS NVarChar(4000),
@XSAttributes AS NText,
@XSFilters AS NText,
@XSSorts AS NText,
@XSGroups AS NText,
@XSAvailableFields AS NText,
@Owner AS NVarChar(4000),
@AccessLevel AS Int,
@MetaViewId AS Int
AS
BEGIN
SET NOCOUNT ON;

UPDATE [mcmd_MetaView] SET
[MetaClassId] = @MetaClassId,
[Card] = @Card,
[Name] = @Name,
[FriendlyName] = @FriendlyName,
[XSAttributes] = @XSAttributes,
[XSFilters] = @XSFilters,
[XSSorts] = @XSSorts,
[XSGroups] = @XSGroups,
[XSAvailableFields] = @XSAvailableFields,
[Owner] = @Owner,
[AccessLevel] = @AccessLevel WHERE
[MetaViewId] = @MetaViewId

END
GO
PRINT N'Creating [dbo].[aspnet_Membership_UnlockUser]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_UnlockUser
    @ApplicationName                         nvarchar(256),
    @UserName                                nvarchar(256)
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a, dbo.aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF ( @UserId IS NULL )
        RETURN 1

    UPDATE dbo.aspnet_Membership
    SET IsLockedOut = 0,
        FailedPasswordAttemptCount = 0,
        FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
        FailedPasswordAnswerAttemptCount = 0,
        FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
        LastLockoutDate = CONVERT( datetime, '17540101', 112 )
    WHERE @UserId = UserId

    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogAssociation]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogAssociation]
    @CatalogAssociationId int
AS
BEGIN
	SELECT CA.* from [CatalogAssociation] CA
	WHERE
		CA.CatalogAssociationId = @CatalogAssociationId
	ORDER BY CA.SortOrder

	SELECT CEA.* from [CatalogEntryAssociation] CEA
	INNER JOIN [CatalogAssociation] CA ON CA.CatalogAssociationId = CEA.CatalogAssociationId
	WHERE
		CA.CatalogAssociationId = @CatalogAssociationId
	ORDER BY CA.SortOrder, CEA.SortOrder
		
	SELECT * FROM [AssociationType]
	/*SELECT DISTINCT AT.* FROM [AssociationType] AT 
	INNER JOIN [CatalogEntryAssociation] CEA ON AT.AssociationTypeId = CEA.AssociationTypeId
	INNER JOIN [CatalogAssociation] CA ON CA.CatalogAssociationId = CEA.CatalogAssociationId
	WHERE
		CA.CatalogEntryId = @CatalogEntryId*/
END
GO
PRINT N'Creating [dbo].[GetSecuritySchemaVersionNumber]...';


GO
CREATE PROCEDURE [dbo].[GetSecuritySchemaVersionNumber]
AS
	with PatchVersion (Major, Minor, Patch) as
		(SELECT max([Major]) as Major,
			max([Minor]) as Minor,
			max([Patch]) as Patch
			FROM [SchemaVersion_SecuritySystem]),
	PatchDate (Major, Minor, Patch, InstallDate) as 
		(SELECT Major, Minor, Patch, InstallDate from [SchemaVersion_SecuritySystem])
	SELECT PD.Major as Major, PD.Minor as Minor, PD.Patch as Patch, PD.InstallDate as InstallDate 
		FROM PatchDate PD, PatchVersion PV 
		WHERE PD.[Major]=PV.[Major] AND 
			PD.[Minor]=PV.[Minor] AND 
			PD.[Patch]=PV.[Patch]
GO
PRINT N'Creating [dbo].[dps_ControlStorage_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_ControlStorage_Update]
	@ControlStorageId as int,
	@ControlId as int,
	@Key as nvarchar(255),
	@Value as image

AS
UPDATE dps_ControlStorage SET ControlId = @ControlId, [Key] = @Key, [Value] = @Value WHERE (ControlStorageId = @ControlStorageId)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadMetaFieldWeight]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_LoadMetaFieldWeight]
	@MetaClassId	INT,
	@MetaFieldId	INT
AS
	IF NOT EXISTS(	SELECT * FROM MetaClassMetaFieldRelation WHERE MetaClassId = @MetaClassId AND MetaFieldId = @MetaFieldId)
		RAISERROR ('Wrong @MetaClassId or @MetaFieldId.', 16,1)

	SELECT Weight, Enabled FROM MetaClassMetaFieldRelation WHERE MetaClassId = @MetaClassId AND MetaFieldId = @MetaFieldId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaViewDelete]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaViewDelete]
@MetaViewId AS Int
AS
BEGIN
SET NOCOUNT ON;

DELETE FROM [mcmd_MetaView]
WHERE
[MetaViewId] = @MetaViewId

END
GO
PRINT N'Creating [dbo].[aspnet_Membership_ResetPassword]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_ResetPassword
    @ApplicationName             nvarchar(256),
    @UserName                    nvarchar(256),
    @NewPassword                 nvarchar(128),
    @MaxInvalidPasswordAttempts  int,
    @PasswordAttemptWindow       int,
    @PasswordSalt                nvarchar(128),
    @CurrentTimeUtc              datetime,
    @PasswordFormat              int = 0,
    @PasswordAnswer              nvarchar(128) = NULL
AS
BEGIN
    DECLARE @IsLockedOut                            bit
    DECLARE @LastLockoutDate                        datetime
    DECLARE @FailedPasswordAttemptCount             int
    DECLARE @FailedPasswordAttemptWindowStart       datetime
    DECLARE @FailedPasswordAnswerAttemptCount       int
    DECLARE @FailedPasswordAnswerAttemptWindowStart datetime

    DECLARE @UserId                                 uniqueidentifier
    SET     @UserId = NULL

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a, dbo.aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF ( @UserId IS NULL )
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    SELECT @IsLockedOut = IsLockedOut,
           @LastLockoutDate = LastLockoutDate,
           @FailedPasswordAttemptCount = FailedPasswordAttemptCount,
           @FailedPasswordAttemptWindowStart = FailedPasswordAttemptWindowStart,
           @FailedPasswordAnswerAttemptCount = FailedPasswordAnswerAttemptCount,
           @FailedPasswordAnswerAttemptWindowStart = FailedPasswordAnswerAttemptWindowStart
    FROM dbo.aspnet_Membership WITH ( UPDLOCK )
    WHERE @UserId = UserId

    IF( @IsLockedOut = 1 )
    BEGIN
        SET @ErrorCode = 99
        GOTO Cleanup
    END

    UPDATE dbo.aspnet_Membership
    SET    Password = @NewPassword,
           LastPasswordChangedDate = @CurrentTimeUtc,
           PasswordFormat = @PasswordFormat,
           PasswordSalt = @PasswordSalt
    WHERE  @UserId = UserId AND
           ( ( @PasswordAnswer IS NULL ) OR ( LOWER( PasswordAnswer ) = LOWER( @PasswordAnswer ) ) )

    IF ( @@ROWCOUNT = 0 )
        BEGIN
            IF( @CurrentTimeUtc > DATEADD( minute, @PasswordAttemptWindow, @FailedPasswordAnswerAttemptWindowStart ) )
            BEGIN
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
                SET @FailedPasswordAnswerAttemptCount = 1
            END
            ELSE
            BEGIN
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
                SET @FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount + 1
            END

            BEGIN
                IF( @FailedPasswordAnswerAttemptCount >= @MaxInvalidPasswordAttempts )
                BEGIN
                    SET @IsLockedOut = 1
                    SET @LastLockoutDate = @CurrentTimeUtc
                END
            END

            SET @ErrorCode = 3
        END
    ELSE
        BEGIN
            IF( @FailedPasswordAnswerAttemptCount > 0 )
            BEGIN
                SET @FailedPasswordAnswerAttemptCount = 0
                SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            END
        END

    IF( NOT ( @PasswordAnswer IS NULL ) )
    BEGIN
        UPDATE dbo.aspnet_Membership
        SET IsLockedOut = @IsLockedOut, LastLockoutDate = @LastLockoutDate,
            FailedPasswordAttemptCount = @FailedPasswordAttemptCount,
            FailedPasswordAttemptWindowStart = @FailedPasswordAttemptWindowStart,
            FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount,
            FailedPasswordAnswerAttemptWindowStart = @FailedPasswordAnswerAttemptWindowStart
        WHERE @UserId = UserId

        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    RETURN @ErrorCode

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[dps_ControlStorage_GetById]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_ControlStorage_GetById]
	@ControlStorageId as int
AS
SELECT ControlStorageId, ControlId, [Key], [Value] FROM dps_ControlStorage WHERE ControlStorageId = @ControlStorageId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadMetaFieldListByMetaClassId]...';


GO
create procedure [dbo].[mdpsp_sys_LoadMetaFieldListByMetaClassId]
    @MetaClassId int
as
begin
    select
        mf.[MetaFieldId],
        mf.[Namespace],
        mf.[Name],
        mf.[FriendlyName],
        mf.[Description],
        mf.[SystemMetaClassId],
        mf.[DataTypeId],
        mf.[Length],
        mf.[AllowNulls],
        mf.[MultiLanguageValue],
        mf.[AllowSearch],
        mf.[Tag],
        mf.[IsEncrypted],
        cfr.[Weight],
        cfr.[Enabled],
        cast(case when mf.SystemMetaClassId = 0 then ROW_NUMBER() over (partition by mf.SystemMetaClassId order by mf.Name)
            else null end as int) as ParameterIndex
    from MetaField mf
    join MetaClassMetaFieldRelation cfr ON cfr.MetaFieldId = mf.MetaFieldId
    where cfr.MetaClassId = @MetaClassId
    order by mf.IsKeyField desc, cfr.[Weight]
end
GO
PRINT N'Creating [dbo].[mc_mcmd_MetaViewSelect]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaViewSelect]
@MetaViewId AS Int
AS
BEGIN
SET NOCOUNT ON;

SELECT [t01].[MetaViewId] AS [MetaViewId], [t01].[MetaClassId] AS [MetaClassId], [t01].[Card] AS [Card], [t01].[Name] AS [Name], [t01].[FriendlyName] AS [FriendlyName], [t01].[XSAttributes] AS [XSAttributes], [t01].[XSFilters] AS [XSFilters], [t01].[XSSorts] AS [XSSorts], [t01].[XSGroups] AS [XSGroups], [t01].[XSAvailableFields] AS [XSAvailableFields], [t01].[Owner] AS [Owner], [t01].[AccessLevel] AS [AccessLevel]
FROM [mcmd_MetaView] AS [t01]
WHERE ([t01].[MetaViewId]=@MetaViewId)

END
GO
PRINT N'Creating [dbo].[aspnet_Membership_SetPassword]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_SetPassword
    @ApplicationName  nvarchar(256),
    @UserName         nvarchar(256),
    @NewPassword      nvarchar(128),
    @PasswordSalt     nvarchar(128),
    @CurrentTimeUtc   datetime,
    @PasswordFormat   int = 0
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a, dbo.aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF (@UserId IS NULL)
        RETURN(1)

    UPDATE dbo.aspnet_Membership
    SET Password = @NewPassword, PasswordFormat = @PasswordFormat, PasswordSalt = @PasswordSalt,
        LastPasswordChangedDate = @CurrentTimeUtc
    WHERE @UserId = UserId
    RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CreateTableJoinQuery]...';


GO
CREATE PROCEDURE [dbo].[ecf_CreateTableJoinQuery]
(
	@SourceTableName   	sysname,	
	@TargetQuery 		nvarchar(max),
	@SourceJoinKey		sysname, 
	@TargetJoinKey		sysname,
	@JoinType			nvarchar(50),
	@JoinQuery 			nvarchar(max) OUTPUT
)
AS
BEGIN

	SET @SourceTableName = LTRIM(RTRIM(@SourceTableName))

	IF (SUBSTRING(@SourceTableName, 1, 1) <> N'[' OR SUBSTRING(@SourceTableName, LEN(@SourceTableName),1) <> N']')
	BEGIN
		SET @SourceTableName=N'['+@SourceTableName+N']'
	END
	
	SET @TargetQuery = LTRIM(RTRIM(@TargetQuery))
/*
	IF (SUBSTRING(@TargetTableName, 1, 1) <> N'[' OR SUBSTRING(@TargetTableName, LEN(@TargetTableName),1) <> N']')
	BEGIN
		SET @TargetTableName=N'['+@TargetTableName+N']'
	END
*/
	--set @JoinQuery = @JoinType + N' ' + @TargetTableName + N' ' + @TargetTableName + N' ON ' + @SourceTableName + N'.[' + @SourceJoinKey + N'] = ' + @TargetTableName + N'.[' + @TargetJoinKey + N']'
	set @JoinQuery = @JoinType + N' ' + @TargetQuery + N' ON ' + @SourceTableName + N'.[' + @SourceJoinKey + N'] = ' + @TargetJoinKey
END
GO
PRINT N'Creating [dbo].[dps_ControlStorage_GetByControlId]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_ControlStorage_GetByControlId]
	@ControlId as int
AS
SELECT ControlStorageId, ControlId, [Key], [Value] FROM dps_ControlStorage WHERE ControlId = @ControlId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadMetaFieldList]...';


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_LoadMetaFieldList]
AS
BEGIN
	SELECT [MetaFieldId], [Namespace], [Name], [FriendlyName], [Description], [SystemMetaClassId], [DataTypeId], [Length], [AllowNulls], [MultiLanguageValue], [AllowSearch], [Tag], [IsEncrypted]
	FROM MetaField
END
GO
PRINT N'Creating [dbo].[mc_mcmd_MetaViewInsert]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaViewInsert]
@MetaClassId AS Int,
@Card AS NVarChar(4000),
@Name AS NVarChar(4000),
@FriendlyName AS NVarChar(4000),
@XSAttributes AS NText,
@XSFilters AS NText,
@XSSorts AS NText,
@XSGroups AS NText,
@XSAvailableFields AS NText,
@Owner AS NVarChar(4000),
@AccessLevel AS Int,
@MetaViewId AS Int = NULL OUTPUT
AS
BEGIN
SET NOCOUNT ON;

INSERT INTO [mcmd_MetaView]
(
[MetaClassId],
[Card],
[Name],
[FriendlyName],
[XSAttributes],
[XSFilters],
[XSSorts],
[XSGroups],
[XSAvailableFields],
[Owner],
[AccessLevel])
VALUES(
@MetaClassId,
@Card,
@Name,
@FriendlyName,
@XSAttributes,
@XSFilters,
@XSSorts,
@XSGroups,
@XSAvailableFields,
@Owner,
@AccessLevel)
SELECT @MetaViewId = SCOPE_IDENTITY();

END
GO
PRINT N'Creating [dbo].[ecf_Search_OrderGroup]...';


GO
CREATE PROCEDURE [dbo].[ecf_Search_OrderGroup]
    @results udttOrderGroupId readonly
AS
BEGIN

DECLARE @search_condition nvarchar(max)

-- Return GroupIds.
SELECT [OrderGroupId] FROM @results


-- Prevent any queries if order group doesn't exist
IF NOT EXISTS(SELECT * from OrderGroup G INNER JOIN @results R ON G.OrderGroupId = R.OrderGroupId)
	RETURN;

-- Return Order Form Collection
SELECT 'OrderForm' TableName, OE.*, O.*
	FROM [OrderFormEx] OE 
		INNER JOIN OrderForm O ON O.OrderFormId = OE.ObjectId 
		INNER JOIN @results R ON O.OrderGroupId = R.OrderGroupId 

if(@@ROWCOUNT = 0)
	RETURN;

-- Return Order Form Collection
SELECT 'OrderGroupAddress' TableName, OE.*, O.*
	FROM [OrderGroupAddressEx] OE 
		INNER JOIN OrderGroupAddress O ON O.OrderGroupAddressId = OE.ObjectId  
		INNER JOIN @results R ON O.OrderGroupId = R.OrderGroupId 

-- Return Shipment Collection
SELECT 'Shipment' TableName, SE.*, S.*
	FROM [ShipmentEx] SE 
		INNER JOIN Shipment S ON S.ShipmentId = SE.ObjectId 
		INNER JOIN @results R ON S.OrderGroupId = R.OrderGroupId 

-- Return Line Item Collection
SELECT 'LineItem' TableName, LE.*, L.*
	FROM [LineItemEx] LE 
		INNER JOIN LineItem L ON L.LineItemId = LE.ObjectId 
		INNER JOIN @results R ON L.OrderGroupId = R.OrderGroupId 

-- Return Order Form Payment Collection

CREATE TABLE #OrderSearchResults (OrderGroupId int)
insert into #OrderSearchResults (OrderGroupId) select OrderGroupId from @results
SET @search_condition = N'''INNER JOIN OrderFormPayment O ON O.PaymentId = T.ObjectId INNER JOIN #OrderSearchResults R ON O.OrderGroupId = R.OrderGroupId '''

DECLARE @metaclassid int
DECLARE @parentclassid int
DECLARE @parentmetaclassid int
DECLARE @rowNum int
DECLARE @maxrows int
DECLARE @tablename nvarchar(120)
DECLARE @name nvarchar(120)
DECLARE @procedurefull nvarchar(max)

SET @parentmetaclassid = (SELECT MetaClassId from [MetaClass] WHERE Name = N'orderformpayment' and TableName = N'orderformpayment')

SELECT top 1 @metaclassid = MetaClassId, @tablename = TableName, @parentclassid = ParentClassId, @name = Name from [MetaClass]
	SELECT @maxRows = count(*) from [MetaClass]
	SET @rowNum = 0
	WHILE @rowNum < @maxRows
	BEGIN
		SET @rowNum = @rowNum + 1
		IF (@parentclassid = @parentmetaclassid)
		BEGIN
			SET @procedurefull = N'mdpsp_avto_' + @tablename + N'_Search NULL, ' + N'''''''' + @tablename + N''''''+  ' TableName, [O].*'' ,'  + @search_condition
			EXEC (@procedurefull)
		END
		SELECT top 1 @metaclassid = MetaClassId, @tablename = TableName, @parentclassid = ParentClassId, @name = Name from [MetaClass] where MetaClassId > @metaclassid
	END

DROP TABLE #OrderSearchResults
-- Return Order Form Discount Collection
SELECT 'OrderFormDiscount' TableName, D.* 
	FROM [OrderFormDiscount] D 
		INNER JOIN @results R ON D.OrderGroupId = R.OrderGroupId 

-- Return Line Item Discount Collection
SELECT 'LineItemDiscount' TableName, D.* 
	FROM [LineItemDiscount] D 
		INNER JOIN @results R ON D.OrderGroupId = R.OrderGroupId 

-- Return Shipment Discount Collection
SELECT 'ShipmentDiscount' TableName, D.* 
	FROM [ShipmentDiscount] D 
		INNER JOIN @results R ON D.OrderGroupId = R.OrderGroupId 
		
-- Return OrderGroupNote Collection
SELECT 'OrderGroupNote' TableName, 
		G.OrderNoteId, 
		G.CustomerId, 
		G.Created, 
		G.OrderGroupId, 
		G.Detail,
		G.LineItemId,
		G.Title,
		G.Type 
	FROM [OrderGroupNote] G INNER JOIN @results R ON G.OrderGroupId = R.OrderGroupId 

-- assign random local variable to set @@rowcount attribute to 1
declare @temp as int
set @temp = 1

END
GO
PRINT N'Creating [dbo].[aspnet_Membership_GetPassword]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_GetPassword
    @ApplicationName                nvarchar(256),
    @UserName                       nvarchar(256),
    @MaxInvalidPasswordAttempts     int,
    @PasswordAttemptWindow          int,
    @CurrentTimeUtc                 datetime,
    @PasswordAnswer                 nvarchar(128) = NULL
AS
BEGIN
    DECLARE @UserId                                 uniqueidentifier
    DECLARE @PasswordFormat                         int
    DECLARE @Password                               nvarchar(128)
    DECLARE @passAns                                nvarchar(128)
    DECLARE @IsLockedOut                            bit
    DECLARE @LastLockoutDate                        datetime
    DECLARE @FailedPasswordAttemptCount             int
    DECLARE @FailedPasswordAttemptWindowStart       datetime
    DECLARE @FailedPasswordAnswerAttemptCount       int
    DECLARE @FailedPasswordAnswerAttemptWindowStart datetime

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    SELECT  @UserId = u.UserId,
            @Password = m.Password,
            @passAns = m.PasswordAnswer,
            @PasswordFormat = m.PasswordFormat,
            @IsLockedOut = m.IsLockedOut,
            @LastLockoutDate = m.LastLockoutDate,
            @FailedPasswordAttemptCount = m.FailedPasswordAttemptCount,
            @FailedPasswordAttemptWindowStart = m.FailedPasswordAttemptWindowStart,
            @FailedPasswordAnswerAttemptCount = m.FailedPasswordAnswerAttemptCount,
            @FailedPasswordAnswerAttemptWindowStart = m.FailedPasswordAnswerAttemptWindowStart
    FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m WITH ( UPDLOCK )
    WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.ApplicationId = a.ApplicationId    AND
            u.UserId = m.UserId AND
            LOWER(@UserName) = u.LoweredUserName

    IF ( @@rowcount = 0 )
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    IF( @IsLockedOut = 1 )
    BEGIN
        SET @ErrorCode = 99
        GOTO Cleanup
    END

    IF ( NOT( @PasswordAnswer IS NULL ) )
    BEGIN
        IF( ( @passAns IS NULL ) OR ( LOWER( @passAns ) <> LOWER( @PasswordAnswer ) ) )
        BEGIN
            IF( @CurrentTimeUtc > DATEADD( minute, @PasswordAttemptWindow, @FailedPasswordAnswerAttemptWindowStart ) )
            BEGIN
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
                SET @FailedPasswordAnswerAttemptCount = 1
            END
            ELSE
            BEGIN
                SET @FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount + 1
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
            END

            BEGIN
                IF( @FailedPasswordAnswerAttemptCount >= @MaxInvalidPasswordAttempts )
                BEGIN
                    SET @IsLockedOut = 1
                    SET @LastLockoutDate = @CurrentTimeUtc
                END
            END

            SET @ErrorCode = 3
        END
        ELSE
        BEGIN
            IF( @FailedPasswordAnswerAttemptCount > 0 )
            BEGIN
                SET @FailedPasswordAnswerAttemptCount = 0
                SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            END
        END

        UPDATE dbo.aspnet_Membership
        SET IsLockedOut = @IsLockedOut, LastLockoutDate = @LastLockoutDate,
            FailedPasswordAttemptCount = @FailedPasswordAttemptCount,
            FailedPasswordAttemptWindowStart = @FailedPasswordAttemptWindowStart,
            FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount,
            FailedPasswordAnswerAttemptWindowStart = @FailedPasswordAnswerAttemptWindowStart
        WHERE @UserId = UserId

        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    IF( @ErrorCode = 0 )
        SELECT @Password, @PasswordFormat

    RETURN @ErrorCode

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Catalog_Update]...';


GO
CREATE PROCEDURE [dbo].[ecf_Catalog_Update]
(
	@CatalogId int,
	@Name nvarchar(150),
	@StartDate datetime,
	@EndDate datetime,
	@DefaultCurrency nvarchar(128),
	@WeightBase nvarchar(128),
	@DefaultLanguage nvarchar(10),
	@IsPrimary bit,
	@IsActive bit,
	@Created datetime,
	@Modified datetime,
	@CreatorId nvarchar(50),
	@ModifierId nvarchar(50),
	@SortOrder int
)
AS
	SET NOCOUNT OFF;
	UPDATE [Catalog]
	SET
		[Name] = @Name,
		[StartDate] = @StartDate,
		[EndDate] = @EndDate,
		[DefaultCurrency] = @DefaultCurrency,
		[WeightBase] = @WeightBase,
		[DefaultLanguage] = @DefaultLanguage,
		[IsPrimary] = @IsPrimary,
		[IsActive] = @IsActive,
		[Created] = @Created,
		[Modified] = @Modified,
		[CreatorId] = @CreatorId,
		[ModifierId] = @ModifierId,
		[SortOrder] = @SortOrder
	WHERE 
		[CatalogId] = @CatalogId

	RETURN @@Error
GO
PRINT N'Creating [dbo].[dps_ControlStorage_Delete]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_ControlStorage_Delete]
	@ControlStorageId as int
AS
DELETE FROM dps_ControlStorage WHERE (ControlStorageId = @ControlStorageId)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadMetaFieldByNamespace]...';


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_LoadMetaFieldByNamespace]
	@Namespace		NVARCHAR(1024),
	@Deep			BIT
AS
BEGIN
	IF @Deep = 1
		SELECT [MetaFieldId], [Namespace], [Name], [FriendlyName], [Description], [SystemMetaClassId], [DataTypeId], [Length], [AllowNulls], [MultiLanguageValue], [AllowSearch], [Tag], [IsEncrypted]
		FROM MetaField WHERE Namespace = @Namespace OR Namespace LIKE (@Namespace + '.%')
	ELSE
		SELECT [MetaFieldId], [Namespace], [Name], [FriendlyName], [Description], [SystemMetaClassId], [DataTypeId], [Length], [AllowNulls], [MultiLanguageValue], [AllowSearch], [Tag], [IsEncrypted]
		FROM MetaField WHERE Namespace = @Namespace
END
GO
PRINT N'Creating [dbo].[mc_mcmd_MetaFieldSelect]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaFieldSelect]
@MetaFieldId AS Int
AS
BEGIN
SET NOCOUNT ON;

SELECT [t01].[MetaFieldId] AS [MetaFieldId], [t01].[MetaClassId] AS [MetaClassId], [t01].[Name] AS [Name], [t01].[FriendlyName] AS [FriendlyName], [t01].[TypeName] AS [TypeName], [t01].[Nullable] AS [Nullable], [t01].[DefaultValue] AS [DefaultValue], [t01].[ReadOnly] AS [ReadOnly], [t01].[XSDataSource] AS [XSDataSource], [t01].[XSAttributes] AS [XSAttributes], [t01].[Owner] AS [Owner], [t01].[AccessLevel] AS [AccessLevel]
FROM [mcmd_MetaField] AS [t01]
WHERE ([t01].[MetaFieldId]=@MetaFieldId)

END
GO
PRINT N'Creating [dbo].[ecf_PaymentMethod_SystemKeyword]...';


GO
CREATE PROCEDURE [dbo].[ecf_PaymentMethod_SystemKeyword]
	@ApplicationId uniqueidentifier,
	@SystemKeyword nvarchar(30),
	@LanguageId nvarchar(128),
	@MarketId nvarchar(8),
	@ReturnInactive bit = 0
AS
BEGIN
	select * from [PaymentMethod] 
	where COALESCE(@LanguageId, [LanguageId]) = [LanguageId] and 
		(([IsActive] = 1) or @ReturnInactive = 1) and 
		COALESCE (@SystemKeyword, [SystemKeyword]) = [SystemKeyword] and 
		[ApplicationId] = @ApplicationId order by [Ordering]

	select PMP.* from [PaymentMethodParameter] PMP 
	inner join [PaymentMethod] PM on PMP.[PaymentMethodId] = PM.[PaymentMethodId] 
		where COALESCE(@LanguageId, PM.[LanguageId]) = [LanguageId] and 
		(PM.[SystemKeyword] = @SystemKeyword) and 
		((PM.[IsActive] = 1) or @ReturnInactive = 1) and 
		PM.[ApplicationId] = @ApplicationId

	select SPR.* from [ShippingPaymentRestriction] SPR  
	inner join [PaymentMethod] PM on SPR.[PaymentMethodId] = PM.[PaymentMethodId] 
		where COALESCE(@LanguageId, PM.[LanguageId]) = [LanguageId] and 
		(PM.[SystemKeyword] = @SystemKeyword) and 
		((PM.[IsActive] = 1) or @ReturnInactive = 1) and 
		PM.[ApplicationId] = @ApplicationId and SPR.[RestrictShippingMethods]=1
	
	select MPM.* from [MarketPaymentMethods] MPM  
	inner join [PaymentMethod] PM on MPM.[PaymentMethodId] = PM.[PaymentMethodId] 
		where COALESCE(@LanguageId, PM.[LanguageId]) = [LanguageId] and 
		COALESCE (@SystemKeyword, [SystemKeyword]) = [SystemKeyword] and
		COALESCE (@MarketId, [MarketId]) = [MarketId] and
		((PM.[IsActive] = 1) or @ReturnInactive = 1) and
		PM.[ApplicationId] = @ApplicationId
END
GO
PRINT N'Creating [dbo].[aspnet_Membership_UpdateUserInfo]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_UpdateUserInfo
    @ApplicationName                nvarchar(256),
    @UserName                       nvarchar(256),
    @IsPasswordCorrect              bit,
    @UpdateLastLoginActivityDate    bit,
    @MaxInvalidPasswordAttempts     int,
    @PasswordAttemptWindow          int,
    @CurrentTimeUtc                 datetime,
    @LastLoginDate                  datetime,
    @LastActivityDate               datetime
AS
BEGIN
    DECLARE @UserId                                 uniqueidentifier
    DECLARE @IsApproved                             bit
    DECLARE @IsLockedOut                            bit
    DECLARE @LastLockoutDate                        datetime
    DECLARE @FailedPasswordAttemptCount             int
    DECLARE @FailedPasswordAttemptWindowStart       datetime
    DECLARE @FailedPasswordAnswerAttemptCount       int
    DECLARE @FailedPasswordAnswerAttemptWindowStart datetime

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    SELECT  @UserId = u.UserId,
            @IsApproved = m.IsApproved,
            @IsLockedOut = m.IsLockedOut,
            @LastLockoutDate = m.LastLockoutDate,
            @FailedPasswordAttemptCount = m.FailedPasswordAttemptCount,
            @FailedPasswordAttemptWindowStart = m.FailedPasswordAttemptWindowStart,
            @FailedPasswordAnswerAttemptCount = m.FailedPasswordAnswerAttemptCount,
            @FailedPasswordAnswerAttemptWindowStart = m.FailedPasswordAnswerAttemptWindowStart
    FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m WITH ( UPDLOCK )
    WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.ApplicationId = a.ApplicationId    AND
            u.UserId = m.UserId AND
            LOWER(@UserName) = u.LoweredUserName

    IF ( @@rowcount = 0 )
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    IF( @IsLockedOut = 1 )
    BEGIN
        GOTO Cleanup
    END

    IF( @IsPasswordCorrect = 0 )
    BEGIN
        IF( @CurrentTimeUtc > DATEADD( minute, @PasswordAttemptWindow, @FailedPasswordAttemptWindowStart ) )
        BEGIN
            SET @FailedPasswordAttemptWindowStart = @CurrentTimeUtc
            SET @FailedPasswordAttemptCount = 1
        END
        ELSE
        BEGIN
            SET @FailedPasswordAttemptWindowStart = @CurrentTimeUtc
            SET @FailedPasswordAttemptCount = @FailedPasswordAttemptCount + 1
        END

        BEGIN
            IF( @FailedPasswordAttemptCount >= @MaxInvalidPasswordAttempts )
            BEGIN
                SET @IsLockedOut = 1
                SET @LastLockoutDate = @CurrentTimeUtc
            END
        END
    END
    ELSE
    BEGIN
        IF( @FailedPasswordAttemptCount > 0 OR @FailedPasswordAnswerAttemptCount > 0 )
        BEGIN
            SET @FailedPasswordAttemptCount = 0
            SET @FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            SET @FailedPasswordAnswerAttemptCount = 0
            SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            SET @LastLockoutDate = CONVERT( datetime, '17540101', 112 )
        END
    END

    IF( @UpdateLastLoginActivityDate = 1 )
    BEGIN
        UPDATE  dbo.aspnet_Users
        SET     LastActivityDate = @LastActivityDate
        WHERE   @UserId = UserId

        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END

        UPDATE  dbo.aspnet_Membership
        SET     LastLoginDate = @LastLoginDate
        WHERE   UserId = @UserId

        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END


    UPDATE dbo.aspnet_Membership
    SET IsLockedOut = @IsLockedOut, LastLockoutDate = @LastLockoutDate,
        FailedPasswordAttemptCount = @FailedPasswordAttemptCount,
        FailedPasswordAttemptWindowStart = @FailedPasswordAttemptWindowStart,
        FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount,
        FailedPasswordAnswerAttemptWindowStart = @FailedPasswordAnswerAttemptWindowStart
    WHERE @UserId = UserId

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    RETURN @ErrorCode

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[dps_ControlStorage_Add]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_ControlStorage_Add]
	@ControlId as int,
	@Key as nvarchar(255),
	@Value as image,
	@retval int output
AS
INSERT INTO dps_ControlStorage (ControlId, [Key], [Value]) VALUES (@ControlId, @Key, @Value)
select @retval = @@identity
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadMetaFieldByName]...';


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_LoadMetaFieldByName]
	@Name		NVARCHAR(256)
AS
BEGIN
	SELECT [MetaFieldId] ,  [Namespace], [Name], [FriendlyName], [Description], [SystemMetaClassId], [DataTypeId],[Length],[AllowNulls],[MultiLanguageValue], [AllowSearch], [Tag], [IsEncrypted]
	FROM MetaField WHERE  [Name] = @Name	AND SystemMetaClassId = 0
END
GO
PRINT N'Creating [dbo].[mc_mcmd_MetaFieldDelete]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaFieldDelete]
@MetaFieldId AS Int
AS
BEGIN
SET NOCOUNT ON;

DELETE FROM [mcmd_MetaField]
WHERE
[MetaFieldId] = @MetaFieldId

END
GO
PRINT N'Creating [dbo].[ecf_PaymentMethod_PaymentMethodId]...';


GO
CREATE PROCEDURE [dbo].[ecf_PaymentMethod_PaymentMethodId]
	@ApplicationId uniqueidentifier,
	@PaymentMethodId uniqueidentifier,
	@ReturnInactive bit = 0
AS
BEGIN
	select * from [PaymentMethod] 
		where [PaymentMethodId] = @PaymentMethodId and 
			[ApplicationId] = @ApplicationId and (([IsActive] = 1) or @ReturnInactive = 1)

	if @@rowcount > 0 begin
		select * from [PaymentMethodParameter] 
			where [PaymentMethodId] = @PaymentMethodId

		select * from [ShippingPaymentRestriction] 
			where [PaymentMethodId] = @PaymentMethodId and [RestrictShippingMethods] = 1
	end
	else begin
		-- select nothing
		select * from [PaymentMethodParameter] where 1=0
		select * from [ShippingPaymentRestriction] where 1=0
	end
		select MPM.* from [MarketPaymentMethods] MPM  
		inner join [PaymentMethod] PM on MPM.[PaymentMethodId] = PM.[PaymentMethodId] 
		where ((PM.[IsActive] = 1) or @ReturnInactive = 1) and 
		MPM.[PaymentMethodId] = @PaymentMethodId and
		PM.[ApplicationId] = @ApplicationId
END
GO
PRINT N'Creating [dbo].[aspnet_Membership_GetPasswordWithFormat]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_GetPasswordWithFormat
    @ApplicationName                nvarchar(256),
    @UserName                       nvarchar(256),
    @UpdateLastLoginActivityDate    bit,
    @CurrentTimeUtc                 datetime
AS
BEGIN
    DECLARE @IsLockedOut                        bit
    DECLARE @UserId                             uniqueidentifier
    DECLARE @Password                           nvarchar(128)
    DECLARE @PasswordSalt                       nvarchar(128)
    DECLARE @PasswordFormat                     int
    DECLARE @FailedPasswordAttemptCount         int
    DECLARE @FailedPasswordAnswerAttemptCount   int
    DECLARE @IsApproved                         bit
    DECLARE @LastActivityDate                   datetime
    DECLARE @LastLoginDate                      datetime

    SELECT  @UserId          = NULL

    SELECT  @UserId = u.UserId, @IsLockedOut = m.IsLockedOut, @Password=Password, @PasswordFormat=PasswordFormat,
            @PasswordSalt=PasswordSalt, @FailedPasswordAttemptCount=FailedPasswordAttemptCount,
		    @FailedPasswordAnswerAttemptCount=FailedPasswordAnswerAttemptCount, @IsApproved=IsApproved,
            @LastActivityDate = LastActivityDate, @LastLoginDate = LastLoginDate
    FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
    WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.ApplicationId = a.ApplicationId    AND
            u.UserId = m.UserId AND
            LOWER(@UserName) = u.LoweredUserName

    IF (@UserId IS NULL)
        RETURN 1

    IF (@IsLockedOut = 1)
        RETURN 99

    SELECT   @Password, @PasswordFormat, @PasswordSalt, @FailedPasswordAttemptCount,
             @FailedPasswordAnswerAttemptCount, @IsApproved, @LastLoginDate, @LastActivityDate

    IF (@UpdateLastLoginActivityDate = 1 AND @IsApproved = 1)
    BEGIN
        UPDATE  dbo.aspnet_Membership
        SET     LastLoginDate = @CurrentTimeUtc
        WHERE   UserId = @UserId

        UPDATE  dbo.aspnet_Users
        SET     LastActivityDate = @CurrentTimeUtc
        WHERE   @UserId = UserId
    END


    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Catalog_GetAllChildEntries]...';


GO

create procedure dbo.ecf_Catalog_GetAllChildEntries
	@catalogIds udttCatalogList readonly
as
begin
	select distinct ce.CatalogEntryId, ce.ApplicationId, ce.Code
	from CatalogEntry ce
	join NodeEntryRelation ner on ce.CatalogEntryId = ner.CatalogEntryId
	where ner.CatalogNodeId in (
		select CatalogNodeId
		from CatalogNode
		where CatalogId in (select CatalogId from @catalogIds)
		union
		select ChildNodeId
		from CatalogNodeRelation
		where CatalogId in (select CatalogId from @catalogIds)
	)
end
GO
PRINT N'Creating [dbo].[dps_ControlSettings_GetByKeyAndControlId]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_ControlSettings_GetByKeyAndControlId]
	@Key as nvarchar(255),
	@ControlId as int
AS
SELECT ControlStorageId, [Key], [Value] FROM dps_ControlStorage WHERE ControlId = @ControlId AND [Key] = @Key
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadMetaField]...';


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_LoadMetaField]
	@MetaFieldId	INT
AS
BEGIN
	SELECT [MetaFieldId] , [Namespace], [Name], [FriendlyName], [Description], [SystemMetaClassId], [DataTypeId],[Length],[AllowNulls],[MultiLanguageValue], [AllowSearch], [Tag], [IsEncrypted]
	FROM MetaField WHERE MetaFieldId = @MetaFieldId
END
GO
PRINT N'Creating [dbo].[mc_mcmd_MetaFieldUpdate]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaFieldUpdate]
@MetaClassId AS Int,
@Name AS NVarChar(4000),
@FriendlyName AS NVarChar(4000),
@TypeName AS NVarChar(4000),
@Nullable AS Bit,
@DefaultValue AS NText,
@ReadOnly AS Bit,
@XSDataSource AS NText,
@XSAttributes AS NText,
@Owner AS NVarChar(4000),
@AccessLevel AS Int,
@MetaFieldId AS Int
AS
BEGIN
SET NOCOUNT ON;

UPDATE [mcmd_MetaField] SET
[MetaClassId] = @MetaClassId,
[Name] = @Name,
[FriendlyName] = @FriendlyName,
[TypeName] = @TypeName,
[Nullable] = @Nullable,
[DefaultValue] = @DefaultValue,
[ReadOnly] = @ReadOnly,
[XSDataSource] = @XSDataSource,
[XSAttributes] = @XSAttributes,
[Owner] = @Owner,
[AccessLevel] = @AccessLevel WHERE
[MetaFieldId] = @MetaFieldId

END
GO
PRINT N'Creating [dbo].[ecf_PaymentMethod_Market]...';


GO
CREATE PROCEDURE [dbo].[ecf_PaymentMethod_Market]
	@ApplicationId uniqueidentifier,
	@MarketId nvarchar(8),
	@LanguageId nvarchar(128),
	@ReturnInactive bit = 0
AS
BEGIN
	select PM.* from [PaymentMethod] PM
	inner join [MarketPaymentMethods] PMM on PMM.[PaymentMethodId] = PM.[PaymentMethodId]
		where COALESCE(@MarketId, PMM.[MarketId]) = PMM.[MarketId] and
		COALESCE(@LanguageId, PM.[LanguageId]) = PM.[LanguageId] and
		((PM.[IsActive] = 1) or @ReturnInactive = 1) and
		PM.[ApplicationId] = @ApplicationId

	select PMP.* from [PaymentMethodParameter] PMP
	inner join [PaymentMethod] PM on PMP.[PaymentMethodId] = PM.[PaymentMethodId] 
	inner join [MarketPaymentMethods] PMM on PMM.[PaymentMethodId] = PM.[PaymentMethodId] 
		where COALESCE(@MarketId, PMM.[MarketId]) = PMM.[MarketId] and 
		COALESCE(@LanguageId, PM.[LanguageId]) = PM.[LanguageId] and
		((PM.[IsActive] = 1) or @ReturnInactive = 1) and 
		PM.[ApplicationId] = @ApplicationId

	select SPR.* from [ShippingPaymentRestriction] SPR  
	inner join [PaymentMethod] PM on SPR.[PaymentMethodId] = PM.[PaymentMethodId] 
	inner join [MarketPaymentMethods] PMM on PMM.[PaymentMethodId] = PM.[PaymentMethodId]
		where COALESCE(@MarketId, PMM.[MarketId]) = PMM.[MarketId] and
		COALESCE(@LanguageId, PM.[LanguageId]) = PM.[LanguageId] and 
		((PM.[IsActive] = 1) or @ReturnInactive = 1) and 
		PM.[ApplicationId] = @ApplicationId and SPR.[RestrictShippingMethods]=0

	select MPM.* from [MarketPaymentMethods] MPM  
	inner join [PaymentMethod] PM on MPM.[PaymentMethodId] = PM.[PaymentMethodId] 
		where COALESCE(@LanguageId, PM.[LanguageId]) = [LanguageId] and 
		MPM.[MarketId] = @MarketId and
		((PM.[IsActive] = 1) or @ReturnInactive = 1) and 
		PM.[ApplicationId] = @ApplicationId

END
GO
PRINT N'Creating [dbo].[aspnet_Membership_GetUserByEmail]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_GetUserByEmail
    @ApplicationName  nvarchar(256),
    @Email            nvarchar(256)
AS
BEGIN
    IF( @Email IS NULL )
        SELECT  u.UserName
        FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
                u.ApplicationId = a.ApplicationId    AND
                u.UserId = m.UserId AND
                m.LoweredEmail IS NULL
    ELSE
        SELECT  u.UserName
        FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
                u.ApplicationId = a.ApplicationId    AND
                u.UserId = m.UserId AND
                LOWER(@Email) = m.LoweredEmail

    IF (@@rowcount = 0)
        RETURN(1)
    RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Catalog]...';


GO
CREATE PROCEDURE [dbo].[ecf_Catalog]
    @ApplicationId uniqueidentifier,
	@SiteId uniqueidentifier = null,
	@CatalogId int = null,
	@ReturnInactive bit = 0
AS
BEGIN
	
	SELECT DISTINCT C.* from [Catalog] C
		LEFT OUTER JOIN SiteCatalog SC ON SC.CatalogId = C.CatalogId
	WHERE
		(
			(SC.SiteId = COALESCE(@SiteId,SC.SiteId) or (@SiteId is null and SC.SiteId is null)) 
			AND 
			(C.CatalogId = COALESCE(@CatalogId,C.CatalogId) or (@CatalogId is null and C.CatalogId is null))
		) and 
		(C.IsActive = 1 or @ReturnInactive = 1)
		and
		(C.ApplicationId = @ApplicationId)
/*
	exec [ecf_Catalog_Permissions] @ApplicationId, @SiteId, @CatalogId
*/

	SELECT DISTINCT L.* from [CatalogLanguage] L
		LEFT OUTER JOIN [Catalog] C ON C.CatalogId = L.CatalogId
		LEFT OUTER JOIN SiteCatalog SC ON SC.CatalogId = C.CatalogId
	WHERE
		(
			(SC.SiteId = COALESCE(@SiteId,SC.SiteId) or (@SiteId is null and SC.SiteId is null)) 
			AND 
			(C.CatalogId = COALESCE(@CatalogId,C.CatalogId) or (@CatalogId is null and C.CatalogId is null))
		) and 
		(C.IsActive = 1 or @ReturnInactive = 1)
		and
		(C.ApplicationId = @ApplicationId)

	SELECT DISTINCT SC.* from SiteCatalog SC
		INNER JOIN [Catalog] C ON SC.CatalogId = C.CatalogId
	WHERE
		(
			(SC.SiteId = COALESCE(@SiteId,SC.SiteId)) 
			AND 
			(C.CatalogId = COALESCE(@CatalogId,C.CatalogId) or (@CatalogId is null and C.CatalogId is null))
		) and 
		(C.IsActive = 1 or @ReturnInactive = 1)
		and
		(C.ApplicationId = @ApplicationId)
END
GO
PRINT N'Creating [dbo].[dps_ControlSettings_GetByControlId]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_ControlSettings_GetByControlId]
	@ControlId as int
AS
SELECT ControlStorageId, [Key], [Value]
FROM dps_ControlStorage WHERE ControlId = @ControlId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadMetaDictionary]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_LoadMetaDictionary]
	@MetaFieldId	INT,
	@Language	NVARCHAR(20)=NULL
AS
	DECLARE @MultiLanguageValue BIT

	SELECT @MultiLanguageValue = MultiLanguageValue FROM MetaField
	WHERE MetaFieldId = @MetaFieldId

	IF @Language IS NOT NULL AND @MultiLanguageValue = 1
	BEGIN
		SELECT MD.MetaDictionaryId, MD.MetaFieldId, MD.[Value] as DefaultValue,  MDL.Value  as Value, MDL.Tag as Tag
		FROM MetaDictionary MD
			LEFT JOIN MetaDictionaryLocalization MDL ON MDL.MetaDictionaryId = MD.MetaDictionaryId
		WHERE MD.MetaFieldId = @MetaFieldId AND MDL.Language = @Language
	END
	ELSE
	BEGIN
		SELECT MetaDictionaryId, MetaFieldId, [Value] as DefaultValue, Tag as DefaultTag, [Value] as Value, Tag as Tag
		FROM MetaDictionary
		WHERE MetaFieldId = @MetaFieldId
	END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaFieldInsert]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaFieldInsert]
@MetaClassId AS Int,
@Name AS NVarChar(4000),
@FriendlyName AS NVarChar(4000),
@TypeName AS NVarChar(4000),
@Nullable AS Bit,
@DefaultValue AS NText,
@ReadOnly AS Bit,
@XSDataSource AS NText,
@XSAttributes AS NText,
@Owner AS NVarChar(4000),
@AccessLevel AS Int,
@MetaFieldId AS Int = NULL OUTPUT
AS
BEGIN
SET NOCOUNT ON;

INSERT INTO [mcmd_MetaField]
(
[MetaClassId],
[Name],
[FriendlyName],
[TypeName],
[Nullable],
[DefaultValue],
[ReadOnly],
[XSDataSource],
[XSAttributes],
[Owner],
[AccessLevel])
VALUES(
@MetaClassId,
@Name,
@FriendlyName,
@TypeName,
@Nullable,
@DefaultValue,
@ReadOnly,
@XSDataSource,
@XSAttributes,
@Owner,
@AccessLevel)
SELECT @MetaFieldId = SCOPE_IDENTITY();

END
GO
PRINT N'Creating [dbo].[ecf_PaymentMethod_Language]...';


GO
CREATE PROCEDURE [dbo].[ecf_PaymentMethod_Language]
	@ApplicationId uniqueidentifier,
	@LanguageId nvarchar(128),
	@ReturnInactive bit = 0
AS
BEGIN
	select * from [PaymentMethod] 
	where COALESCE(@LanguageId, [LanguageId]) = [LanguageId] and 
		(([IsActive] = 1) or @ReturnInactive = 1) and 
		[ApplicationId] = @ApplicationId order by [Ordering]

	select PMP.* from [PaymentMethodParameter] PMP 
	inner join [PaymentMethod] PM on PMP.[PaymentMethodId] = PM.[PaymentMethodId] 
		where COALESCE(@LanguageId, PM.[LanguageId]) = [LanguageId] and 
		((PM.[IsActive] = 1) or @ReturnInactive = 1) and 
		PM.[ApplicationId] = @ApplicationId

	select SPR.* from [ShippingPaymentRestriction] SPR  
	inner join [PaymentMethod] PM on SPR.[PaymentMethodId] = PM.[PaymentMethodId] 
		where COALESCE(@LanguageId, PM.[LanguageId]) = [LanguageId] and 
		((PM.[IsActive] = 1) or @ReturnInactive = 1) and 
		PM.[ApplicationId] = @ApplicationId and SPR.[RestrictShippingMethods]=0
			
	select MPM.* from [MarketPaymentMethods] MPM  
	inner join [PaymentMethod] PM on MPM.[PaymentMethodId] = PM.[PaymentMethodId] 
		where COALESCE(@LanguageId, PM.[LanguageId]) = [LanguageId] and 
		((PM.[IsActive] = 1) or @ReturnInactive = 1) and
		PM.[ApplicationId] = @ApplicationId
END
GO
PRINT N'Creating [dbo].[aspnet_Membership_GetUserByUserId]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_GetUserByUserId
    @UserId               uniqueidentifier,
    @CurrentTimeUtc       datetime,
    @UpdateLastActivity   bit = 0
AS
BEGIN
    IF ( @UpdateLastActivity = 1 )
    BEGIN
        UPDATE   dbo.aspnet_Users
        SET      LastActivityDate = @CurrentTimeUtc
        FROM     dbo.aspnet_Users
        WHERE    @UserId = UserId

        IF ( @@ROWCOUNT = 0 ) -- User ID not found
            RETURN -1
    END

    SELECT  m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
            m.CreateDate, m.LastLoginDate, u.LastActivityDate,
            m.LastPasswordChangedDate, u.UserName, m.IsLockedOut,
            m.LastLockoutDate
    FROM    dbo.aspnet_Users u, dbo.aspnet_Membership m
    WHERE   @UserId = u.UserId AND u.UserId = m.UserId

    IF ( @@ROWCOUNT = 0 ) -- User ID not found
       RETURN -1

    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[GetCatalogSchemaVersionNumber]...';


GO
CREATE PROCEDURE [dbo].[GetCatalogSchemaVersionNumber]
AS
	with PatchVersion (Major, Minor, Patch) as
		(SELECT max([Major]) as Major,
			max([Minor]) as Minor,
			max([Patch]) as Patch
			FROM [SchemaVersion_CatalogSystem]),
	PatchDate (Major, Minor, Patch, InstallDate) as 
		(SELECT Major, Minor, Patch, InstallDate from [SchemaVersion_CatalogSystem])
	SELECT PD.Major as Major, PD.Minor as Minor, PD.Patch as Patch, PD.InstallDate as InstallDate 
		FROM PatchDate PD, PatchVersion PV 
		WHERE PD.[Major]=PV.[Major] AND 
			PD.[Minor]=PV.[Minor] AND 
			PD.[Patch]=PV.[Patch]

	/*DECLARE @Major int, @Minor int, @Patch int, @Installed datetime	

	SELECT @Major = (SELECT max([Major]) FROM [SchemaVersion_CatalogSystem])
	SELECT @Minor = (SELECT max([Minor]) FROM [SchemaVersion_CatalogSystem])
	SELECT @Patch = (SELECT max([Patch]) FROM [SchemaVersion_CatalogSystem])
	SELECT @Installed = (SELECT [InstallDate] FROM [SchemaVersion_CatalogSystem] 
							WHERE [Major]=@Major AND [Minor]=@Minor AND [Patch]=@Patch)

	SELECT @Major as Major, @Minor as Minor, @Patch as Patch, @Installed as InstallDate*/
GO
PRINT N'Creating [dbo].[dps_Control_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_Control_Update]
	@ControlId as int,
	@NodeId as int,
	@ControlUID as nvarchar(255)
	
AS
UPDATE dps_Control SET NodeId = @NodeId, ControlUID = @ControlUID WHERE (ControlId = @ControlId)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadMetaClassListByMetaField]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_LoadMetaClassListByMetaField]
	@MetaFieldId	INT
AS
	SELECT MC.MetaClassId, MC.Namespace, MC.Name, MC.FriendlyName, MC.IsSystem,  MC.IsAbstract, MC.ParentClassId, MC.TableName, MC.Description, MC.FieldListChangedSqlScript, MC.Tag
	FROM MetaClass MC
	INNER JOIN MetaClassMetaFieldRelation MCFR ON MCFR.MetaClassId = MC.MetaClassId
	WHERE MCFR.MetaFieldId = @MetaFieldId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaEnumSelect]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaEnumSelect]
@MetaEnumId AS Int
AS
BEGIN
SET NOCOUNT ON;

SELECT [t01].[MetaEnumId] AS [MetaEnumId], [t01].[Id] AS [Id], [t01].[TypeName] AS [TypeName], [t01].[FriendlyName] AS [FriendlyName], [t01].[OrderId] AS [OrderId], [t01].[Owner] AS [Owner], [t01].[AccessLevel] AS [AccessLevel]
FROM [mcmd_MetaEnum] AS [t01]
WHERE ([t01].[MetaEnumId]=@MetaEnumId)

END
GO
PRINT N'Creating [dbo].[ecf_OrderSearch]...';


GO
CREATE PROCEDURE [dbo].[ecf_OrderSearch]
(
	@ApplicationId				uniqueidentifier,
	@SQLClause 					nvarchar(max),
	@MetaSQLClause 				nvarchar(max),
    @OrderBy 					nvarchar(max),
	@Namespace					nvarchar(1024) = N'',
	@Classes					nvarchar(max) = N'',
    @StartingRec 				int,
	@NumRecords   				int,
	@RecordCount                int OUTPUT
)
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @query_tmp nvarchar(max)
	DECLARE @FilterQuery_tmp nvarchar(max)
	DECLARE @TableName_tmp sysname
	DECLARE @SelectMetaQuery_tmp nvarchar(max)
	DECLARE @FromQuery_tmp nvarchar(max)
	DECLARE @FullQuery nvarchar(max)

	-- 1. Cycle through all the available product meta classes
	print 'Iterating through meta classes'
	DECLARE MetaClassCursor CURSOR READ_ONLY
	FOR SELECT TableName FROM MetaClass 
		WHERE Namespace like @Namespace + '%' AND ([Name] in (select Item from ecf_splitlist(@Classes)) or @Classes = '')
		and IsSystem = 0

	OPEN MetaClassCursor
	FETCH NEXT FROM MetaClassCursor INTO @TableName_tmp
	WHILE (@@fetch_status = 0)
	BEGIN 
		print 'Metaclass Table: ' + @TableName_tmp
		set @Query_tmp = 'select 100 as ''Rank'', META.ObjectId as ''Key'', * from ' + @TableName_tmp + ' META'
		
		-- Add meta Where clause
		if(LEN(@MetaSQLClause)>0)
			set @query_tmp = @query_tmp + ' WHERE ' + @MetaSQLClause

		if(@SelectMetaQuery_tmp is null)
			set @SelectMetaQuery_tmp = @Query_tmp;
		else
			set @SelectMetaQuery_tmp = @SelectMetaQuery_tmp + N' UNION ALL ' + @Query_tmp;

	FETCH NEXT FROM MetaClassCursor INTO @TableName_tmp
	END
	CLOSE MetaClassCursor
	DEALLOCATE MetaClassCursor

	-- Create from command
	SET @FromQuery_tmp = N'FROM [OrderGroup] OrderGroup' + N' INNER JOIN (select distinct U.[KEY], U.Rank from (' + @SelectMetaQuery_tmp + N') U) META ON OrderGroup.[OrderGroupId] = META.[KEY] '

	set @FilterQuery_tmp = N' WHERE ApplicationId = ''' + CAST(@ApplicationId as nvarchar(36)) + ''''
	-- add sql clause statement here, if specified
	if(Len(@SQLClause) != 0)
		set @FilterQuery_tmp = @FilterQuery_tmp + N' AND (' + @SqlClause + ')'

	set @FullQuery = N'SELECT count([OrderGroup].OrderGroupId) OVER() TotalRecords, [OrderGroup].OrderGroupId, Rank, ROW_NUMBER() OVER(ORDER BY [OrderGroup].OrderGroupId) RowNumber ' + @FromQuery_tmp + @FilterQuery_tmp

	-- use temp table variable
	set @FullQuery = N'with OrderedResults as (' + @FullQuery +') INSERT INTO @Page_temp (TotalRecords, OrderGroupId) SELECT top(' + cast(@NumRecords as nvarchar(50)) + ') TotalRecords, OrderGroupId FROM OrderedResults WHERE RowNumber > ' + cast(@StartingRec as nvarchar(50)) + ';'
	set @FullQuery = 'declare @Page_temp table (TotalRecords int, OrderGroupId int);' + @FullQuery + ';select @RecordCount = TotalRecords from @Page_temp;SELECT OrderGroupId from @Page_temp;'
	--print @FullQuery
	exec sp_executesql @FullQuery, N'@RecordCount int output', @RecordCount = @RecordCount OUTPUT

	SET NOCOUNT OFF
END
GO
PRINT N'Creating [dbo].[aspnet_Membership_GetUserByName]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_GetUserByName
    @ApplicationName      nvarchar(256),
    @UserName             nvarchar(256),
    @CurrentTimeUtc       datetime,
    @UpdateLastActivity   bit = 0
AS
BEGIN
    DECLARE @UserId uniqueidentifier

    IF (@UpdateLastActivity = 1)
    BEGIN
        -- select user ID from aspnet_users table
        SELECT TOP 1 @UserId = u.UserId
        FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE    LOWER(@ApplicationName) = a.LoweredApplicationName AND
                u.ApplicationId = a.ApplicationId    AND
                LOWER(@UserName) = u.LoweredUserName AND u.UserId = m.UserId

        IF (@@ROWCOUNT = 0) -- Username not found
            RETURN -1

        UPDATE   dbo.aspnet_Users
        SET      LastActivityDate = @CurrentTimeUtc
        WHERE    @UserId = UserId

        SELECT m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
                m.CreateDate, m.LastLoginDate, u.LastActivityDate, m.LastPasswordChangedDate,
                u.UserId, m.IsLockedOut, m.LastLockoutDate
        FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE  @UserId = u.UserId AND u.UserId = m.UserId 
    END
    ELSE
    BEGIN
        SELECT TOP 1 m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
                m.CreateDate, m.LastLoginDate, u.LastActivityDate, m.LastPasswordChangedDate,
                u.UserId, m.IsLockedOut,m.LastLockoutDate
        FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE    LOWER(@ApplicationName) = a.LoweredApplicationName AND
                u.ApplicationId = a.ApplicationId    AND
                LOWER(@UserName) = u.LoweredUserName AND u.UserId = m.UserId

        IF (@@ROWCOUNT = 0) -- Username not found
            RETURN -1
    END

    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[dps_Control_GetByUID]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_Control_GetByUID]
	@ControlUID as nvarchar(255)
AS
SELECT ControlId, NodeId, ControlUID FROM dps_Control WHERE (ControlUID = @ControlUID)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadMetaClassList]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_LoadMetaClassList]
AS

SELECT C.MetaClassId, C.Namespace, C.[Name], C.FriendlyName, C.IsSystem, C.IsAbstract, C.ParentClassId, C.TableName, C.[Description], C.FieldListChangedSqlScript, C.Tag,
	P.[Name] AS ParentName, P.TableName AS ParentTableName, P.FriendlyName AS ParentFriendlyName
  FROM MetaClass C
	LEFT JOIN MetaClass P ON (C.ParentClassId = P.MetaClassId)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaEnumDelete]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaEnumDelete]
@MetaEnumId AS Int
AS
BEGIN
SET NOCOUNT ON;

DELETE FROM [mcmd_MetaEnum]
WHERE
[MetaEnumId] = @MetaEnumId

END
GO
PRINT N'Creating [dbo].[ecf_OrderGroupAddress_Update]...';


GO
CREATE PROCEDURE [dbo].[ecf_OrderGroupAddress_Update]
(
	@OrderGroupAddressId int,
	@OrderGroupId int,
	@Name nvarchar(64) = NULL,
	@FirstName nvarchar(64) = NULL,
	@LastName nvarchar(64) = NULL,
	@Organization nvarchar(64) = NULL,
	@Line1 nvarchar(80) = NULL,
	@Line2 nvarchar(80) = NULL,
	@City nvarchar(64) = NULL,
	@State nvarchar(64) = NULL,
	@CountryCode nvarchar(50) = NULL,
	@CountryName nvarchar(50) = NULL,
	@PostalCode nvarchar(20) = NULL,
	@RegionCode nvarchar(50) = NULL,
	@RegionName nvarchar(64) = NULL,
	@DaytimePhoneNumber nvarchar(32) = NULL,
	@EveningPhoneNumber nvarchar(32) = NULL,
	@FaxNumber nvarchar(32) = NULL,
	@Email nvarchar(64) = NULL
)
AS
	SET NOCOUNT ON
	
	UPDATE [OrderGroupAddress]
	SET
		[OrderGroupId] = @OrderGroupId,
		[Name] = @Name,
		[FirstName] = @FirstName,
		[LastName] = @LastName,
		[Organization] = @Organization,
		[Line1] = @Line1,
		[Line2] = @Line2,
		[City] = @City,
		[State] = @State,
		[CountryCode] = @CountryCode,
		[CountryName] = @CountryName,
		[PostalCode] = @PostalCode,
		[RegionCode] = @RegionCode,
		[RegionName] = @RegionName,
		[DaytimePhoneNumber] = @DaytimePhoneNumber,
		[EveningPhoneNumber] = @EveningPhoneNumber,
		[FaxNumber] = @FaxNumber,
		[Email] = @Email
	WHERE 
		[OrderGroupAddressId] = @OrderGroupAddressId

	RETURN @@Error
GO
PRINT N'Creating [dbo].[dps_Control_GetByNodeId]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_Control_GetByNodeId]
	@NodeId as int
AS
SELECT ControlId, NodeId, ControlUID FROM dps_Control WHERE (NodeId = @NodeId)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadMetaClassByNamespace]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_LoadMetaClassByNamespace]
	@Namespace		NVARCHAR(1024),
	@Deep			BIT
AS
	IF @Deep = 1
		SELECT MetaClassId, Namespace, Name, FriendlyName, IsSystem, IsAbstract, ParentClassId, TableName, Description, FieldListChangedSqlScript, Tag
		FROM MetaClass WHERE  Namespace = @Namespace OR Namespace LIKE (@Namespace + '.%')
	ELSE
		SELECT MetaClassId, Namespace, Name, FriendlyName, IsSystem, IsAbstract, ParentClassId, TableName, Description, FieldListChangedSqlScript, Tag
		FROM MetaClass WHERE Namespace = @Namespace
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaEnumUpdate]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaEnumUpdate]
@Id AS Int,
@TypeName AS NVarChar(4000),
@FriendlyName AS NVarChar(4000),
@OrderId AS Int,
@Owner AS NVarChar(4000),
@AccessLevel AS Int,
@MetaEnumId AS Int
AS
BEGIN
SET NOCOUNT ON;

UPDATE [mcmd_MetaEnum] SET
[Id] = @Id,
[TypeName] = @TypeName,
[FriendlyName] = @FriendlyName,
[OrderId] = @OrderId,
[Owner] = @Owner,
[AccessLevel] = @AccessLevel WHERE
[MetaEnumId] = @MetaEnumId

END
GO
PRINT N'Creating [dbo].[ecf_OrderGroupAddress_Insert]...';


GO
CREATE PROCEDURE [dbo].[ecf_OrderGroupAddress_Insert]
(
	@OrderGroupAddressId int = NULL OUTPUT,
	@OrderGroupId int,
	@Name nvarchar(64) = NULL,
	@FirstName nvarchar(64) = NULL,
	@LastName nvarchar(64) = NULL,
	@Organization nvarchar(64) = NULL,
	@Line1 nvarchar(80) = NULL,
	@Line2 nvarchar(80) = NULL,
	@City nvarchar(64) = NULL,
	@State nvarchar(64) = NULL,
	@CountryCode nvarchar(50) = NULL,
	@CountryName nvarchar(50) = NULL,
	@PostalCode nvarchar(20) = NULL,
	@RegionCode nvarchar(50) = NULL,
	@RegionName nvarchar(64) = NULL,
	@DaytimePhoneNumber nvarchar(32) = NULL,
	@EveningPhoneNumber nvarchar(32) = NULL,
	@FaxNumber nvarchar(32) = NULL,
	@Email nvarchar(64) = NULL
)
AS
	SET NOCOUNT ON

	INSERT INTO [OrderGroupAddress]
	(
		[OrderGroupId],
		[Name],
		[FirstName],
		[LastName],
		[Organization],
		[Line1],
		[Line2],
		[City],
		[State],
		[CountryCode],
		[CountryName],
		[PostalCode],
		[RegionCode],
		[RegionName],
		[DaytimePhoneNumber],
		[EveningPhoneNumber],
		[FaxNumber],
		[Email]
	)
	VALUES
	(
		@OrderGroupId,
		@Name,
		@FirstName,
		@LastName,
		@Organization,
		@Line1,
		@Line2,
		@City,
		@State,
		@CountryCode,
		@CountryName,
		@PostalCode,
		@RegionCode,
		@RegionName,
		@DaytimePhoneNumber,
		@EveningPhoneNumber,
		@FaxNumber,
		@Email
	)

	SELECT @OrderGroupAddressId = SCOPE_IDENTITY()

	RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_mktg_CancelExpiredPromoReservations]...';


GO
CREATE PROCEDURE [dbo].[ecf_mktg_CancelExpiredPromoReservations]
	@ApplicationId uniqueidentifier,
    @Expires int
AS
BEGIN
	if(@Expires <= 0)
		return

	DECLARE @EXP DATETIME
	DECLARE @NOW DATETIME

	set @NOW = GetUTCDate()

	/*sabtract number of minutes from now time*/
	set @EXP = DATEADD(minute, 0-@Expires, @now)

	UPDATE [PromotionUsage]
	SET Status = 0
	FROM [PromotionUsage] U INNER JOIN Promotion P ON U.PromotionId = P.PromotionId
	WHERE
		U.Status = 1 and /*reserved*/
		P.ApplicationId = @ApplicationId and 
		U.LastUpdated < @EXP
END
GO
PRINT N'Creating [dbo].[dps_Control_GetById]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_Control_GetById]
	@ControlId as int
AS
SELECT ControlId, NodeId, ControlUID FROM dps_Control WHERE ControlId = @ControlId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadMetaClassByName]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_LoadMetaClassByName]
	@Name		NVARCHAR(256)
AS
	SELECT MetaClassId, Namespace, Name, FriendlyName, IsSystem, IsAbstract,ParentClassId, TableName, Description, FieldListChangedSqlScript, Tag
	FROM MetaClass WHERE Name = @Name
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaEnumInsert]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaEnumInsert]
@Id AS Int,
@TypeName AS NVarChar(4000),
@FriendlyName AS NVarChar(4000),
@OrderId AS Int,
@Owner AS NVarChar(4000),
@AccessLevel AS Int,
@MetaEnumId AS Int = NULL OUTPUT
AS
BEGIN
SET NOCOUNT ON;

INSERT INTO [mcmd_MetaEnum]
(
[Id],
[TypeName],
[FriendlyName],
[OrderId],
[Owner],
[AccessLevel])
VALUES(
@Id,
@TypeName,
@FriendlyName,
@OrderId,
@Owner,
@AccessLevel)
SELECT @MetaEnumId = SCOPE_IDENTITY();

END
GO
PRINT N'Creating [dbo].[ecf_OrderGroupAddress_Delete]...';


GO
CREATE PROCEDURE [dbo].[ecf_OrderGroupAddress_Delete]
(
	@OrderGroupAddressId int
)
AS
	SET NOCOUNT ON

	EXEC [dbo].[mdpsp_avto_OrderGroupAddressEx_Delete] @OrderGroupAddressId
	DELETE FROM [OrderGroupAddress] WHERE [OrderGroupAddressId] = @OrderGroupAddressId

	RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_mktg_PromotionUsageStatistics]...';


GO
CREATE PROCEDURE [dbo].[ecf_mktg_PromotionUsageStatistics]
	@ApplicationId uniqueidentifier,
	@CustomerId uniqueidentifier = null
AS
BEGIN
	if(@CustomerId is null)
	begin 
		select count(*) TotalUsed, PromotionId from PromotionUsage
		where ([Status] != 0 AND [Status] != 3) and CustomerId = COALESCE(@CustomerId,CustomerId)
		group by promotionid
	end
	else
	begin 
		select count(*) TotalUsed, PromotionId from PromotionUsage
		where ([Status] != 0 AND [Status] != 3) and CustomerId = @CustomerId
		group by promotionid, customerid
	end
END
GO
PRINT N'Creating [dbo].[dps_Control_Delete]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_Control_Delete]
	@ControlId as int
AS
DELETE FROM dps_Control WHERE (ControlId = @ControlId)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadMetaClassById]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_LoadMetaClassById]
	@MetaClassId	INT
AS
	SELECT MetaClassId, Namespace, Name, FriendlyName, IsSystem, IsAbstract, ParentClassId, TableName, Description, FieldListChangedSqlScript, Tag
	FROM MetaClass WHERE MetaClassId = @MetaClassId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaClassInsert]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaClassInsert]
@Name AS NVarChar(4000),
@FriendlyName AS NVarChar(4000),
@PluralName AS NVarChar(4000),
@TitleFieldName AS NVarChar(4000),
@XSValidators AS NText,
@XSAttributes AS NText,
@XSExtensions AS NText,
@Owner AS NVarChar(4000),
@AccessLevel AS Int,
@XSModules AS NText,
@MetaClassId AS Int = NULL OUTPUT
AS
BEGIN
SET NOCOUNT ON;

INSERT INTO [mcmd_MetaClass]
(
[Name],
[FriendlyName],
[PluralName],
[TitleFieldName],
[XSValidators],
[XSAttributes],
[XSExtensions],
[Owner],
[AccessLevel],
[XSModules])
VALUES(
@Name,
@FriendlyName,
@PluralName,
@TitleFieldName,
@XSValidators,
@XSAttributes,
@XSExtensions,
@Owner,
@AccessLevel,
@XSModules)
SELECT @MetaClassId = SCOPE_IDENTITY();

END
GO
PRINT N'Creating [dbo].[ecf_OrderGroup_Update]...';


GO
-- =============================================
-- Author:		<Jooeun Lee>
-- Modified date: <7/24/2012>
-- Description:	<Added Market ID to the parameters>
-- =============================================

CREATE PROCEDURE [dbo].[ecf_OrderGroup_Update]
(
	@OrderGroupId int OUT,
	@InstanceId uniqueidentifier,
	@ApplicationId uniqueidentifier,
	@AffiliateId uniqueidentifier,
	@Name nvarchar(64) = NULL,
	@CustomerId uniqueidentifier,
	@CustomerName nvarchar(64) = NULL,
	@AddressId nvarchar(50) = NULL,
	@ShippingTotal money,
	@HandlingTotal money,
	@TaxTotal money,
	@SubTotal money,
	@Total money,
	@BillingCurrency nvarchar(64) = NULL,
	@Status nvarchar(64) = NULL,
	@ProviderId nvarchar(255) = NULL,
	@SiteId nvarchar(255) = NULL,
	@OwnerOrg nvarchar(255) = NULL,
	@Owner nvarchar(255) = NULL,
	@MarketId nvarchar(8)
)
AS
BEGIN

	SET NOCOUNT OFF
	DECLARE @Err int

		UPDATE [OrderGroup]
		SET
			[InstanceId] = @InstanceId,
			[ApplicationId] = @ApplicationId,
			[AffiliateId] = @AffiliateId,
			[Name] = @Name,
			[CustomerId] = @CustomerId,
			[CustomerName] = @CustomerName,
			[AddressId] = @AddressId,
			[ShippingTotal] = @ShippingTotal,
			[HandlingTotal] = @HandlingTotal,
			[TaxTotal] = @TaxTotal,
			[SubTotal] = @SubTotal,
			[Total] = @Total,
			[BillingCurrency] = @BillingCurrency,
			[Status] = @Status,
			[ProviderId] = @ProviderId,
			[SiteId] = @SiteId,
			[OwnerOrg] = @OwnerOrg,
			[Owner] = @Owner,
			[MarketId] = @MarketId
		WHERE
			[OrderGroupId] = @OrderGroupId

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[ecf_mktg_PromotionUsage]...';


GO
CREATE PROCEDURE [dbo].[ecf_mktg_PromotionUsage]
	@ApplicationId uniqueidentifier,
    @PromotionId int,
	@CustomerId uniqueidentifier = null,
	@OrderGroupId int = null
AS
BEGIN

	if(@PromotionId = 0)
		set @PromotionId = null

	if(@OrderGroupId = 0)
		set @OrderGroupId = null
	
	SELECT U.* from [PromotionUsage] U
	INNER JOIN Promotion P ON U.PromotionId = P.PromotionId
	WHERE
		P.ApplicationId = @ApplicationId and 
		U.PromotionId = COALESCE(@PromotionId,U.PromotionId) and
		U.CustomerId = COALESCE(@CustomerId,U.CustomerId) and
		U.OrderGroupId = COALESCE(@OrderGroupId,U.OrderGroupId)
END
GO
PRINT N'Creating [dbo].[dps_Control_Add]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[dps_Control_Add]
	@NodeId as int,
	@ControlUID as nvarchar(255),
	@retval int output
AS
INSERT INTO dps_Control (NodeId, ControlUID) VALUES (@NodeId, @ControlUID)
select @retval = @@identity
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadMetaAttributes]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_LoadMetaAttributes]
	@AttrOwnerId		INT,
	@AttrOwnerType	INT
AS
	SELECT [Key], [Value] FROM MetaAttribute WHERE AttrOwnerId = @AttrOwnerId AND AttrOwnerType = @AttrOwnerType
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaClassUpdate]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaClassUpdate]
@Name AS NVarChar(4000),
@FriendlyName AS NVarChar(4000),
@PluralName AS NVarChar(4000),
@TitleFieldName AS NVarChar(4000),
@XSValidators AS NText,
@XSAttributes AS NText,
@XSExtensions AS NText,
@Owner AS NVarChar(4000),
@AccessLevel AS Int,
@XSModules AS NText,
@MetaClassId AS Int
AS
BEGIN
SET NOCOUNT ON;

UPDATE [mcmd_MetaClass] SET
[Name] = @Name,
[FriendlyName] = @FriendlyName,
[PluralName] = @PluralName,
[TitleFieldName] = @TitleFieldName,
[XSValidators] = @XSValidators,
[XSAttributes] = @XSAttributes,
[XSExtensions] = @XSExtensions,
[Owner] = @Owner,
[AccessLevel] = @AccessLevel,
[XSModules] = @XSModules WHERE
[MetaClassId] = @MetaClassId

END
GO
PRINT N'Creating [dbo].[ecf_OrderGroup_Insert]...';


GO
-- =============================================
-- Author:		<Jooeun Lee>
-- Modified date: <7/24/2012>
-- Description:	<Added Market ID to the parameters>
-- =============================================

CREATE PROCEDURE [dbo].[ecf_OrderGroup_Insert]
(
	@OrderGroupId int OUT,
	@InstanceId uniqueidentifier,
	@ApplicationId uniqueidentifier,
	@AffiliateId uniqueidentifier,
	@Name nvarchar(64) = NULL,
	@CustomerId uniqueidentifier,
	@CustomerName nvarchar(64) = NULL,
	@AddressId nvarchar(50) = NULL,
	@ShippingTotal money,
	@HandlingTotal money,
	@TaxTotal money,
	@SubTotal money,
	@Total money,
	@BillingCurrency nvarchar(64) = NULL,
	@Status nvarchar(64) = NULL,
	@ProviderId nvarchar(255) = NULL,
	@SiteId nvarchar(255) = NULL,
	@OwnerOrg nvarchar(255) = NULL,
	@Owner nvarchar(255) = NULL,
	@MarketId nvarchar(8)
)
AS
BEGIN

	SET NOCOUNT OFF
	DECLARE @Err int

	if(@OrderGroupId is null)
	begin
		INSERT
		INTO [OrderGroup]
		(
			[InstanceId],
			[ApplicationId],
			[AffiliateId],
			[Name],
			[CustomerId],
			[CustomerName],
			[AddressId],
			[ShippingTotal],
			[HandlingTotal],
			[TaxTotal],
			[SubTotal],
			[Total],
			[BillingCurrency],
			[Status],
			[ProviderId],
			[SiteId],
			[OwnerOrg],
			[Owner],
			[MarketId]
		)
		VALUES
		(
			@InstanceId,
			@ApplicationId,
			@AffiliateId,
			@Name,
			@CustomerId,
			@CustomerName,
			@AddressId,
			@ShippingTotal,
			@HandlingTotal,
			@TaxTotal,
			@SubTotal,
			@Total,
			@BillingCurrency,
			@Status,
			@ProviderId,
			@SiteId,
			@OwnerOrg,
			@Owner,
			@MarketId
		)
		SELECT @OrderGroupId = SCOPE_IDENTITY()
	end

	SET @Err = @@Error

	RETURN @Err
END
GO
PRINT N'Creating [dbo].[ecf_mktg_PromotionByDate]...';


GO
CREATE PROCEDURE [dbo].[ecf_mktg_PromotionByDate]
	@ApplicationId uniqueidentifier,
    @DateTime datetime
AS
BEGIN
	SELECT P.* from [Promotion] P 
	INNER JOIN Campaign C ON C.CampaignId = P.CampaignId
	WHERE
		P.ApplicationId = @ApplicationId and 
		(@DateTime between P.StartDate and DATEADD(week, 1, P.EndDate))	and
		P.Status = 'active' and
		(@DateTime between C.StartDate and DATEADD(week, 1, C.EndDate))	and
		C.IsActive = 1		
	ORDER BY
		P.Priority  DESC, P.CouponCode DESC, P.PromotionGroup

	SELECT PC.* from [PromotionCondition] PC
	INNER JOIN [Promotion] P ON P.PromotionId = PC.PromotionId
	INNER JOIN Campaign C ON C.CampaignId = P.CampaignId
	WHERE
		P.ApplicationId = @ApplicationId and 
		(@DateTime between P.StartDate and DATEADD(week, 1, P.EndDate))	and
		P.Status = 'active' and
		(@DateTime between C.StartDate and DATEADD(week, 1, C.EndDate))	and
		C.IsActive = 1	

	SELECT PG.* from [PromotionLanguage] PG
	INNER JOIN [Promotion] P ON P.PromotionId = PG.PromotionId
	INNER JOIN Campaign C ON C.CampaignId = P.CampaignId
	WHERE
		P.ApplicationId = @ApplicationId and 
		(@DateTime between P.StartDate and DATEADD(week, 1, P.EndDate))	and
		P.Status = 'active' and
		(@DateTime between C.StartDate and DATEADD(week, 1, C.EndDate))	and
		C.IsActive = 1	

	SELECT PP.* from [PromotionPolicy] PP
	INNER JOIN [Promotion] P ON P.PromotionId = PP.PromotionId
	INNER JOIN Campaign C ON C.CampaignId = P.CampaignId
	WHERE
		P.ApplicationId = @ApplicationId and 
		(@DateTime between P.StartDate and DATEADD(week, 1, P.EndDate))	and
		P.Status = 'active' and
		(@DateTime between C.StartDate and DATEADD(week, 1, C.EndDate))	and
		C.IsActive = 1	
END
GO
PRINT N'Creating [dbo].[cms_WorkflowStatusAccess_Update]...';


GO
CREATE PROCEDURE [cms_WorkflowStatusAccess_Update] 
	@StatusAccessId int,
	@StatusId int,
	@RoleId nvarchar(256)
AS
BEGIN
	UPDATE [WorkflowStatusAccess] 
	SET
		[StatusId] = @StatusId,
		[RoleId] = @RoleId
	WHERE [StatusAccessId] = @StatusAccessId
END
GO
PRINT N'Creating [dbo].[mdpsp_sys_LoadChildMetaClassList]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_LoadChildMetaClassList]
	@MetaClassId	INT
AS
	SELECT MetaClassId, Namespace,Name, [FriendlyName], IsSystem, IsAbstract, ParentClassId, TableName, Description, FieldListChangedSqlScript, Tag
	FROM MetaClass WHERE ParentClassId = @MetaClassId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaClassDelete]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaClassDelete]
@MetaClassId AS Int
AS
BEGIN
SET NOCOUNT ON;

DELETE FROM [mcmd_MetaClass]
WHERE
[MetaClassId] = @MetaClassId

END
GO
PRINT N'Creating [dbo].[ecf_mktg_Segment]...';


GO
CREATE PROCEDURE [dbo].[ecf_mktg_Segment]
	@ApplicationId uniqueidentifier,
    @SegmentId int
AS
BEGIN

	if(@SegmentId = 0)
		set @SegmentId = null
	
	SELECT P.* from [Segment] P
	WHERE
		P.ApplicationId = @ApplicationId and 
		P.SegmentId = COALESCE(@SegmentId,P.SegmentId)

	SELECT SM.* from [SegmentMember] SM
	INNER JOIN [Segment] S ON S.SegmentId = SM.SegmentId
	WHERE
		S.ApplicationId = @ApplicationId and 
		SM.SegmentId = COALESCE(@SegmentId,SM.SegmentId)

	SELECT SC.* from [SegmentCondition] SC
	INNER JOIN [Segment] S ON S.SegmentId = SC.SegmentId
	WHERE
		S.ApplicationId = @ApplicationId and 
		SC.SegmentId = COALESCE(@SegmentId,SC.SegmentId)
END
GO
PRINT N'Creating [dbo].[cms_WorkflowStatusAccess_GetPrevStatus]...';


GO
CREATE PROCEDURE [cms_WorkflowStatusAccess_GetPrevStatus] 
	@ApplicationId uniqueidentifier,
	@StatusId int
AS
BEGIN
	declare @prevStatusWeight int
	declare @Weight int
	declare @wfId int

	IF @StatusId = -1 
		RETURN

	SELECT @Weight = [Weight], @wfId = WS.[WorkflowId] FROM [WorkflowStatus] WS
	INNER JOIN [Workflow] W ON WS.[WorkflowId] = W.[WorkflowId]
		WHERE W.[ApplicationId] = @ApplicationId and [StatusId] = @StatusId

	SELECT @prevStatusWeight = ISNULL(MAX(WS.[Weight]), -1) FROM [WorkflowStatus] WS
	INNER JOIN [Workflow] W ON WS.[WorkflowId] = W.[WorkflowId]
	WHERE W.[ApplicationId] = @ApplicationId and WS.[Weight] < @Weight and WS.[Weight] > -1

	IF @prevStatusWeight = -1
		RETURN
	
	SELECT ISNULL(WS.[StatusId], -1) StatusId, A.[RoleId] FROM [WorkflowStatus] WS 
	INNER JOIN [WorkflowStatusAccess] A ON WS.[StatusId] = A.[StatusId]
	INNER JOIN [Workflow] W ON WS.[WorkflowId] = W.[WorkflowId]
	WHERE W.[ApplicationId] = @ApplicationId and 
		WS.[Weight] = @prevStatusWeight and WS.[WorkflowId] = @wfId
END
GO
PRINT N'Creating [dbo].[mdpsp_sys_GetUniqueFieldName]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_GetUniqueFieldName]
	@Name		NVARCHAR(256),
	@UniqueName 	NVARCHAR(256) OUT
AS
	SET NOCOUNT OFF

	DECLARE	@Index		INT

	SET @UniqueName	= @Name
	SET @Index = (SELECT COUNT(*) FROM MetaField WHERE SystemMetaClassId = 0 AND Name LIKE @Name + '[0123456789]%')

	WHILE (SELECT COUNT(*) FROM MetaField WHERE SystemMetaClassId = 0 AND Name=@UniqueName) <> 0
	BEGIN
		SET @UniqueName = @Name + CAST(@Index  AS NVARCHAR(32))
		SET @Index = @Index + 1
	END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaClassSelect]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaClassSelect]
@MetaClassId AS Int
AS
BEGIN
SET NOCOUNT ON;

SELECT [t01].[MetaClassId] AS [MetaClassId], [t01].[Name] AS [Name], [t01].[FriendlyName] AS [FriendlyName], [t01].[PluralName] AS [PluralName], [t01].[TitleFieldName] AS [TitleFieldName], [t01].[XSValidators] AS [XSValidators], [t01].[XSAttributes] AS [XSAttributes], [t01].[XSExtensions] AS [XSExtensions], [t01].[Owner] AS [Owner], [t01].[AccessLevel] AS [AccessLevel], [t01].[XSModules] AS [XSModules]
FROM [mcmd_MetaClass] AS [t01]
WHERE ([t01].[MetaClassId]=@MetaClassId)

END
GO
PRINT N'Creating [dbo].[ecf_OrderFormPayment_Update]...';


GO
CREATE PROCEDURE [dbo].[ecf_OrderFormPayment_Update]
(
	@PaymentId int,
	@OrderFormId int,
	@OrderGroupId int,
	@BillingAddressId nvarchar(50) = NULL,
	@PaymentMethodId uniqueidentifier,
	@PaymentMethodName nvarchar(128) = NULL,
	@CustomerName nvarchar(64) = NULL,
	@Amount money,
	@PaymentType int,
	@ValidationCode nvarchar(64) = NULL,
	@AuthorizationCode nvarchar(255) = NULL,
	@TransactionType nvarchar(255) = NULL,
	@TransactionID nvarchar(255) = NULL,
	@ProviderTransactionID nvarchar(255) = NULL,
	@Status nvarchar(64) = NULL,
	@ImplementationClass nvarchar(255)
)
AS
	SET NOCOUNT ON
	
	UPDATE [OrderFormPayment]
	SET
		[OrderFormId] = @OrderFormId,
		[OrderGroupId] = @OrderGroupId,
		[BillingAddressId] = @BillingAddressId,
		[PaymentMethodId] = @PaymentMethodId,
		[PaymentMethodName] = @PaymentMethodName,
		[CustomerName] = @CustomerName,
		[Amount] = @Amount,
		[PaymentType] = @PaymentType,
		[ValidationCode] = @ValidationCode,
		[AuthorizationCode] = @AuthorizationCode,
		[TransactionType] = @TransactionType,
		[TransactionID] = @TransactionID,
		[ProviderTransactionID] = @ProviderTransactionID,
		[Status] = @Status,
		[ImplementationClass] = @ImplementationClass
	WHERE 
		[PaymentId] = @PaymentId

	RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_mktg_Promotion]...';


GO
CREATE PROCEDURE [dbo].[ecf_mktg_Promotion]
	@ApplicationId uniqueidentifier,
    @PromotionId int
AS
BEGIN

	if(@PromotionId = 0)
		set @PromotionId = null
	
	SELECT P.* from [Promotion] P
	WHERE
		P.ApplicationId = @ApplicationId and 
		P.PromotionId = COALESCE(@PromotionId,P.PromotionId)
	ORDER BY
		P.Priority  DESC, P.CouponCode DESC, P.PromotionGroup

	SELECT PC.* from [PromotionCondition] PC
	INNER JOIN [Promotion] P ON P.PromotionId = PC.PromotionId
	WHERE
		P.ApplicationId = @ApplicationId and 
		PC.PromotionId = COALESCE(@PromotionId,PC.PromotionId)

	SELECT PG.* from [PromotionLanguage] PG
	INNER JOIN [Promotion] P ON P.PromotionId = PG.PromotionId
	WHERE
		P.ApplicationId = @ApplicationId and 
		PG.PromotionId = COALESCE(@PromotionId,PG.PromotionId)

	SELECT PP.* from [PromotionPolicy] PP
	INNER JOIN [Promotion] P ON P.PromotionId = PP.PromotionId
	WHERE
		P.ApplicationId = @ApplicationId and 
		PP.PromotionId = COALESCE(@PromotionId,PP.PromotionId)

END
GO
PRINT N'Creating [dbo].[cms_WorkflowStatusAccess_GetNextStatus]...';


GO
CREATE PROCEDURE [cms_WorkflowStatusAccess_GetNextStatus] 
	@ApplicationId uniqueidentifier,
	@StatusId int
AS
BEGIN
	declare @nextStatusWeight int
	declare @Weight int
	declare @wfId int

	IF @StatusId = -1
		BEGIN		
			SET @Weight = -1
			SELECT @wfId = [WorkflowId] FROM [Workflow] 
				WHERE [ApplicationId] = @ApplicationId and [IsDefault] = 1
		END
	ELSE
		SELECT @Weight = WS.[Weight], @wfId = WS.[WorkflowId] FROM [WorkflowStatus] WS
		INNER JOIN [Workflow] W ON WS.[WorkflowId] = W.[WorkflowId]
			WHERE W.[ApplicationId] = @ApplicationId and WS.[StatusId] = @StatusId

	SELECT @nextStatusWeight = ISNULL(MIN([Weight]), -1) FROM [WorkflowStatus] WS 
	INNER JOIN [Workflow] W ON WS.[WorkflowId] = W.[WorkflowId]
		WHERE W.[ApplicationId] = @ApplicationId and WS.[Weight] > @Weight
	
	SELECT ISNULL(WS.[StatusId], -1) StatusId, RoleId FROM [WorkflowStatus] WS 
	INNER JOIN [WorkflowStatusAccess] A ON WS.[StatusId] = A.[StatusId]
	INNER JOIN [Workflow] W ON WS.[WorkflowId] = W.[WorkflowId]
		WHERE W.[ApplicationId] = @ApplicationId and 
			WS.[Weight] = @nextStatusWeight and WS.[WorkflowId] = @wfId
END
GO
PRINT N'Creating [dbo].[mdpsp_sys_GetMetaKeyInfo]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_GetMetaKeyInfo]
	@MetaKey	INT
AS
	SET NOCOUNT ON
	SELECT * FROM MetaKey WHERE MetaKey = @MetaKey
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_TmpMetaFileSelect]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_TmpMetaFileSelect]
(
@TmpFileId int
)
AS
    SET NOCOUNT ON
SELECT [TmpFileId],
[Created],
[FileUID],
[FileName],
[Body] FROM mcmd_TmpMetaFile
WHERE
[TmpFileId] = @TmpFileId
GO
PRINT N'Creating [dbo].[ecf_OrderFormPayment_Insert]...';


GO
CREATE PROCEDURE [dbo].[ecf_OrderFormPayment_Insert]
(
	@PaymentId int = NULL OUTPUT,
	@OrderFormId int,
	@OrderGroupId int,
	@BillingAddressId nvarchar(50) = NULL,
	@PaymentMethodId uniqueidentifier,
	@PaymentMethodName nvarchar(128) = NULL,
	@CustomerName nvarchar(64) = NULL,
	@Amount money,
	@PaymentType int,
	@ValidationCode nvarchar(64) = NULL,
	@AuthorizationCode nvarchar(255) = NULL,
	@TransactionType nvarchar(255) = NULL,
	@TransactionID nvarchar(255) = NULL,
	@ProviderTransactionID nvarchar(255) = NULL,
	@Status nvarchar(64) = NULL,
	@ImplementationClass nvarchar(255)
)
AS
	SET NOCOUNT ON

	INSERT INTO [OrderFormPayment]
	(
		[OrderFormId],
		[OrderGroupId],
		[BillingAddressId],
		[PaymentMethodId],
		[PaymentMethodName],
		[CustomerName],
		[Amount],
		[PaymentType],
		[ValidationCode],
		[AuthorizationCode],
		[TransactionType],
		[TransactionID],
		[Status],
		[ImplementationClass],
		[ProviderTransactionID]
	)
	VALUES
	(
		@OrderFormId,
		@OrderGroupId,
		@BillingAddressId,
		@PaymentMethodId,
		@PaymentMethodName,
		@CustomerName,
		@Amount,
		@PaymentType,
		@ValidationCode,
		@AuthorizationCode,
		@TransactionType,
		@TransactionID,
		@Status,
		@ImplementationClass,
		@ProviderTransactionID
	)

	SELECT @PaymentId = SCOPE_IDENTITY()

	RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_mktg_Policy]...';


GO

CREATE PROCEDURE [dbo].[ecf_mktg_Policy]
	@ApplicationId uniqueidentifier,
    @PolicyId int
AS
BEGIN

	if(@PolicyId = 0)
		set @PolicyId = null
	
	SELECT P.* from [Policy] P
	WHERE
		P.ApplicationId = @ApplicationId and 
		P.PolicyId = COALESCE(@PolicyId,P.PolicyId)

	SELECT GP.* from [GroupPolicy] GP
	INNER JOIN [Policy] P ON P.PolicyId = GP.PolicyId
	WHERE
		P.ApplicationId = @ApplicationId and 
		GP.PolicyId = COALESCE(@PolicyId,GP.PolicyId)

END
GO
PRINT N'Creating [dbo].[cms_WorkflowStatusAccess_GetByStatusId]...';


GO
CREATE PROCEDURE [cms_WorkflowStatusAccess_GetByStatusId] 
	@ApplicationId uniqueidentifier,
	@StatusId int
AS
BEGIN
	SELECT WSA.[StatusAccessId], WSA.[StatusId], WSA.[RoleId] FROM [WorkflowStatusAccess] WSA 
	INNER JOIN [WorkflowStatus] WS ON WS.[StatusId] = WSA.[StatusId]
	INNER JOIN [Workflow] W ON W.[WorkflowId] = WS.[WorkflowId]
	WHERE W.[ApplicationId] = @ApplicationId and 
		WSA.[StatusId] = @StatusId
END
GO
PRINT N'Creating [dbo].[mdpsp_sys_GetMetaKey]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_GetMetaKey]
	@MetaObjectId	INT,
	@MetaClassId	INT,
	@MetaFieldId	INT,
	@Language NVARCHAR(20) = NULL,
	@Retval	INT	OUT
AS
	SET NOCOUNT ON

	IF @Language IS NULL
	BEGIN
		IF EXISTS(SELECT * FROM MetaKey WHERE MetaObjectId = @MetaObjectId AND MetaClassId = @MetaClassId AND MetaFieldId = @MetaFieldId AND Language IS NULL)
		BEGIN
			SELECT @Retval = MetaKey FROM MetaKey WHERE MetaObjectId = @MetaObjectId AND MetaClassId = @MetaClassId AND MetaFieldId = @MetaFieldId
		END
		ELSE
		BEGIN
			INSERT INTO MetaKey (MetaObjectId, MetaClassId, MetaFieldId) VALUES (@MetaObjectId, @MetaClassId, @MetaFieldId)
			SET @Retval = SCOPE_IDENTITY()
		END
	END
	ELSE
	BEGIN
		IF EXISTS(SELECT * FROM MetaKey WHERE MetaObjectId = @MetaObjectId AND MetaClassId = @MetaClassId AND MetaFieldId = @MetaFieldId AND Language=@Language)
		BEGIN
			SELECT @Retval = MetaKey FROM MetaKey WHERE MetaObjectId = @MetaObjectId AND MetaClassId = @MetaClassId AND MetaFieldId = @MetaFieldId AND Language=@Language
		END
		ELSE
		BEGIN
			INSERT INTO MetaKey (MetaObjectId, MetaClassId, MetaFieldId, Language) VALUES (@MetaObjectId, @MetaClassId, @MetaFieldId, @Language)
			SET @Retval = SCOPE_IDENTITY()
		END
	END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_TmpMetaFileInsert]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_TmpMetaFileInsert]
(
@TmpFileId int = NULL OUTPUT,
@FileUID uniqueidentifier,
@FileName nvarchar(510)
)
AS
    SET NOCOUNT ON
INSERT INTO [mcmd_TmpMetaFile]
(
[FileUID],
[FileName])
VALUES(
@FileUID,
@FileName)
SELECT @TmpFileId = SCOPE_IDENTITY();
RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_OrderFormPayment_Delete]...';


GO
CREATE PROCEDURE [dbo].[ecf_OrderFormPayment_Delete]
(
	@PaymentId int
)
AS
	SET NOCOUNT ON

	EXEC [dbo].[mdpsp_avto_OrderFormPayment_CashCard_Delete] @PaymentId
	EXEC [dbo].[mdpsp_avto_OrderFormPayment_CreditCard_Delete] @PaymentId
	EXEC [dbo].[mdpsp_avto_OrderFormPayment_GiftCard_Delete] @PaymentId	
	EXEC [dbo].[mdpsp_avto_OrderFormPayment_Invoice_Delete] @PaymentId
	EXEC [dbo].[mdpsp_avto_OrderFormPayment_Other_Delete] @PaymentId
	DELETE FROM [OrderFormPayment] WHERE [PaymentId] = @PaymentId 

	RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_mktg_Expression_Segment]...';


GO
CREATE PROCEDURE [dbo].[ecf_mktg_Expression_Segment]
	@ApplicationId uniqueidentifier,
    @SegmentId int
AS
BEGIN
	
	SELECT E.* from [Expression] E
	INNER JOIN SegmentCondition S ON E.ExpressionId = S.ExpressionId
	WHERE
		E.ApplicationId = @ApplicationId and 
		S.SegmentId = @SegmentId
END
GO
PRINT N'Creating [dbo].[cms_WorkflowStatusAccess_GetByRoleIdStatusIdNotEveryone]...';


GO
CREATE PROCEDURE [cms_WorkflowStatusAccess_GetByRoleIdStatusIdNotEveryone] 
	@ApplicationId uniqueidentifier,
	@RoleId nvarchar(256),
	@StatusId int
AS
BEGIN
	SELECT WSA.[StatusAccessId], WSA.[StatusId], WSA.[RoleId] FROM [WorkflowStatusAccess] WSA 
	INNER JOIN [WorkflowStatus] WS ON WS.[StatusId] = WSA.[StatusId]
	INNER JOIN [Workflow] W ON W.[WorkflowId] = WS.[WorkflowId]
	WHERE W.[ApplicationId] = @ApplicationId and 
		 WSA.[RoleId] = @RoleId and WSA.[StatusId] = @StatusId
END
GO
PRINT N'Creating [dbo].[mc_mcmd_TmpMetaFileDelete]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_TmpMetaFileDelete]
(
@TmpFileId int
)
AS
    SET NOCOUNT ON
DELETE FROM [mcmd_TmpMetaFile]
WHERE
[TmpFileId] = @TmpFileId
RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_OrderFormDiscount_Update]...';


GO
CREATE PROCEDURE [dbo].[ecf_OrderFormDiscount_Update]
(
	@OrderFormDiscountId int,
	@OrderFormId int,
	@DiscountId int,
	@OrderGroupId int,
	@DiscountAmount money,
	@DiscountCode nvarchar(50) = NULL,
	@DiscountName nvarchar(50) = NULL,
	@DisplayMessage nvarchar(100) = NULL,
	@DiscountValue money
)
AS
	SET NOCOUNT ON
	
	UPDATE [OrderFormDiscount]
	SET
		[OrderFormId] = @OrderFormId,
		[DiscountId] = @DiscountId,
		[OrderGroupId] = @OrderGroupId,
		[DiscountAmount] = @DiscountAmount,
		[DiscountCode] = @DiscountCode,
		[DiscountName] = @DiscountName,
		[DisplayMessage] = @DisplayMessage,
		[DiscountValue] = @DiscountValue
	WHERE 
		[OrderFormDiscountId] = @OrderFormDiscountId

	RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_mktg_Expression_Category]...';


GO
CREATE PROCEDURE [dbo].[ecf_mktg_Expression_Category]
	@ApplicationId uniqueidentifier,
    @Category nvarchar(50)
AS
BEGIN
	
	SELECT E.* from [Expression] E
	WHERE
		E.ApplicationId = @ApplicationId and 
		E.Category = @Category

END
GO
PRINT N'Creating [dbo].[cms_WorkflowStatusAccess_GetByRoleIdStatusId]...';


GO
CREATE PROCEDURE [cms_WorkflowStatusAccess_GetByRoleIdStatusId] 
	@ApplicationId uniqueidentifier,
	@RoleId nvarchar(256),
	@StatusId int,
	@EveryoneRoleId nvarchar(256)
AS
BEGIN
	SELECT WSA.[StatusAccessId], WSA.[StatusId], WSA.[RoleId] FROM [WorkflowStatusAccess] WSA 
	INNER JOIN [WorkflowStatus] WS ON WS.[StatusId] = WSA.[StatusId]
	INNER JOIN [Workflow] W ON W.[WorkflowId] = WS.[WorkflowId]
	WHERE W.[ApplicationId] = @ApplicationId and 
		([RoleId] = @RoleId or [RoleId] = @EveryoneRoleId /*Everyone*/) and 
		WSA.[StatusId] = @StatusId
END
GO
PRINT N'Creating [dbo].[mc_mcmd_TmpMetaFileCleanUp]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mc_mcmd_TmpMetaFileCleanUp] 
	@ExpiredDate datetime
AS
	DELETE FROM mcmd_TmpMetaFile WHERE Created < @ExpiredDate
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_OrderFormDiscount_Insert]...';


GO
CREATE PROCEDURE [dbo].[ecf_OrderFormDiscount_Insert]
(
	@OrderFormDiscountId int = NULL OUTPUT,
	@OrderFormId int,
	@DiscountId int,
	@OrderGroupId int,
	@DiscountAmount money,
	@DiscountCode nvarchar(50) = NULL,
	@DiscountName nvarchar(50) = NULL,
	@DisplayMessage nvarchar(100) = NULL,
	@DiscountValue money
)
AS
	SET NOCOUNT ON

	INSERT INTO [OrderFormDiscount]
	(
		[OrderFormId],
		[DiscountId],
		[OrderGroupId],
		[DiscountAmount],
		[DiscountCode],
		[DiscountName],
		[DisplayMessage],
		[DiscountValue]
	)
	VALUES
	(
		@OrderFormId,
		@DiscountId,
		@OrderGroupId,
		@DiscountAmount,
		@DiscountCode,
		@DiscountName,
		@DisplayMessage,
		@DiscountValue
	)

	SELECT @OrderFormDiscountId = SCOPE_IDENTITY()

	RETURN @@Error
GO
PRINT N'Creating [dbo].[aspnet_AnyDataInTables]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].aspnet_AnyDataInTables
    @TablesToCheck int
AS
BEGIN
    -- Check Membership table if (@TablesToCheck & 1) is set
    IF ((@TablesToCheck & 1) <> 0 AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_MembershipUsers') AND (type = 'V'))))
    BEGIN
        IF (EXISTS(SELECT TOP 1 UserId FROM dbo.aspnet_Membership))
        BEGIN
            SELECT N'aspnet_Membership'
            RETURN
        END
    END

    -- Check aspnet_Roles table if (@TablesToCheck & 2) is set
    IF ((@TablesToCheck & 2) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_Roles') AND (type = 'V'))) )
    BEGIN
        IF (EXISTS(SELECT TOP 1 RoleId FROM dbo.aspnet_Roles))
        BEGIN
            SELECT N'aspnet_Roles'
            RETURN
        END
    END

    -- Check aspnet_Profile table if (@TablesToCheck & 4) is set
    IF ((@TablesToCheck & 4) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_Profiles') AND (type = 'V'))) )
    BEGIN
        IF (EXISTS(SELECT TOP 1 UserId FROM dbo.aspnet_Profile))
        BEGIN
            SELECT N'aspnet_Profile'
            RETURN
        END
    END

    -- Check aspnet_PersonalizationPerUser table if (@TablesToCheck & 8) is set
    IF ((@TablesToCheck & 8) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_WebPartState_User') AND (type = 'V'))) )
    BEGIN
        IF (EXISTS(SELECT TOP 1 UserId FROM dbo.aspnet_PersonalizationPerUser))
        BEGIN
            SELECT N'aspnet_PersonalizationPerUser'
            RETURN
        END
    END

    -- Check aspnet_PersonalizationPerUser table if (@TablesToCheck & 16) is set
    IF ((@TablesToCheck & 16) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'aspnet_WebEvent_LogEvent') AND (type = 'P'))) )
    BEGIN
        IF (EXISTS(SELECT TOP 1 * FROM dbo.aspnet_WebEvent_Events))
        BEGIN
            SELECT N'aspnet_WebEvent_Events'
            RETURN
        END
    END

    -- Check aspnet_Users table if (@TablesToCheck & 1,2,4 & 8) are all set
    IF ((@TablesToCheck & 1) <> 0 AND
        (@TablesToCheck & 2) <> 0 AND
        (@TablesToCheck & 4) <> 0 AND
        (@TablesToCheck & 8) <> 0 AND
        (@TablesToCheck & 32) <> 0 AND
        (@TablesToCheck & 128) <> 0 AND
        (@TablesToCheck & 256) <> 0 AND
        (@TablesToCheck & 512) <> 0 AND
        (@TablesToCheck & 1024) <> 0)
    BEGIN
        IF (EXISTS(SELECT TOP 1 UserId FROM dbo.aspnet_Users))
        BEGIN
            SELECT N'aspnet_Users'
            RETURN
        END
        IF (EXISTS(SELECT TOP 1 ApplicationId FROM dbo.aspnet_Applications))
        BEGIN
            SELECT N'aspnet_Applications'
            RETURN
        END
    END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_mktg_Expression]...';


GO
CREATE PROCEDURE [dbo].[ecf_mktg_Expression]
	@ApplicationId uniqueidentifier,
    @ExpressionId int
AS
BEGIN
	
	if(@ExpressionId = 0)
		set @ExpressionId = null

	SELECT E.* from [Expression] E
	WHERE
		E.ApplicationId = @ApplicationId and 
		E.ExpressionId = COALESCE(@ExpressionId,E.ExpressionId)

END
GO
PRINT N'Creating [dbo].[cms_WorkflowStatusAccess_GetByRoleId]...';


GO
CREATE PROCEDURE [cms_WorkflowStatusAccess_GetByRoleId]
	@ApplicationId uniqueidentifier, 
	@RoleId nvarchar(256),
	@EveryoneRoleId nvarchar(256)
AS
BEGIN
	SELECT WSA.[StatusAccessId], WSA.[StatusId], WSA.[RoleId] FROM [WorkflowStatusAccess] WSA 
	INNER JOIN [WorkflowStatus] WS ON WS.[StatusId] = WSA.[StatusId]
	INNER JOIN [Workflow] W ON W.[WorkflowId] = WS.[WorkflowId]
	WHERE W.[ApplicationId] = @ApplicationId and 
		([RoleId] = @RoleId or [RoleId] = @EveryoneRoleId /* Everyone */)
END
GO
PRINT N'Creating [dbo].[mdpsp_sys_AddMetaField]...';


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_AddMetaField]
	@Namespace 		NVARCHAR(1024) = N'Mediachase.MetaDataPlus.User',
	@Name		NVARCHAR(256),
	@FriendlyName	NVARCHAR(256),
	@Description	NTEXT,
	@DataTypeId	INT,
	@Length	INT,
	@AllowNulls	BIT,
	@MultiLanguageValue BIT,
	@AllowSearch	BIT,
	@IsEncrypted	BIT,
	@Retval 	INT OUTPUT
AS
BEGIN
	-- Step 0. Prepare
	SET NOCOUNT ON
	SET @Retval = -1

    BEGIN TRAN
	    DECLARE @DataTypeVariable	INT
	    DECLARE @DataTypeLength	INT

	    SELECT @DataTypeVariable = Variable, @DataTypeLength = Length FROM MetaDataType WHERE DataTypeId = @DataTypeId

	    IF (@Length <= 0 OR @Length > @DataTypeLength )
		    SET @Length = @DataTypeLength

	    -- Step 2. Insert a record in to MetaField table.
	    INSERT INTO [MetaField]  ([Namespace], [Name], [FriendlyName], [Description], [DataTypeId], [Length], [AllowNulls],  [MultiLanguageValue], [AllowSearch], [IsEncrypted])
		    VALUES(@Namespace, @Name,  @FriendlyName, @Description, @DataTypeId, @Length, @AllowNulls, @MultiLanguageValue, @AllowSearch, @IsEncrypted)

	    IF @@ERROR <> 0 GOTO ERR

	    SET @Retval = IDENT_CURRENT('[MetaField]')

	    COMMIT TRAN
    RETURN

ERR:
	SET @Retval = -1
	ROLLBACK TRAN
    RETURN
END
GO
PRINT N'Creating [dbo].[mc_mcmd_SelectedEnumValueUpdate]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_SelectedEnumValueUpdate]
(
@SelectedEnumValueId int,
@Key uniqueidentifier,
@TypeName nvarchar(100),
@Id int)
AS
    SET NOCOUNT ON
UPDATE [mcmd_SelectedEnumValue]
SET
[Key] = @Key,
[TypeName] = @TypeName,
[Id] = @Id
WHERE
[SelectedEnumValueId] = @SelectedEnumValueId
RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_OrderFormDiscount_Delete]...';


GO
CREATE PROCEDURE [dbo].[ecf_OrderFormDiscount_Delete]
(
	@OrderFormDiscountId int
)
AS
	SET NOCOUNT ON

	DELETE 
	FROM   [OrderFormDiscount]
	WHERE  
		[OrderFormDiscountId] = @OrderFormDiscountId

	RETURN @@Error
GO
PRINT N'Creating [dbo].[aspnet_Users_DeleteUser]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].aspnet_Users_DeleteUser
    @ApplicationName  nvarchar(256),
    @UserName         nvarchar(256),
    @TablesToDeleteFrom int,
    @NumTablesDeletedFrom int OUTPUT
AS
BEGIN
    DECLARE @UserId               uniqueidentifier
    SELECT  @UserId               = NULL
    SELECT  @NumTablesDeletedFrom = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
	SET @TranStarted = 0

    DECLARE @ErrorCode   int
    DECLARE @RowCount    int

    SET @ErrorCode = 0
    SET @RowCount  = 0

    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a
    WHERE   u.LoweredUserName       = LOWER(@UserName)
        AND u.ApplicationId         = a.ApplicationId
        AND LOWER(@ApplicationName) = a.LoweredApplicationName

    IF (@UserId IS NULL)
    BEGIN
        GOTO Cleanup
    END

    -- Delete from Membership table if (@TablesToDeleteFrom & 1) is set
    IF ((@TablesToDeleteFrom & 1) <> 0 AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_MembershipUsers') AND (type = 'V'))))
    BEGIN
        DELETE FROM dbo.aspnet_Membership WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
               @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_UsersInRoles table if (@TablesToDeleteFrom & 2) is set
    IF ((@TablesToDeleteFrom & 2) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_UsersInRoles') AND (type = 'V'))) )
    BEGIN
        DELETE FROM dbo.aspnet_UsersInRoles WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_Profile table if (@TablesToDeleteFrom & 4) is set
    IF ((@TablesToDeleteFrom & 4) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_Profiles') AND (type = 'V'))) )
    BEGIN
        DELETE FROM dbo.aspnet_Profile WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_PersonalizationPerUser table if (@TablesToDeleteFrom & 8) is set
    IF ((@TablesToDeleteFrom & 8) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_WebPartState_User') AND (type = 'V'))) )
    BEGIN
        DELETE FROM dbo.aspnet_PersonalizationPerUser WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_Users table if (@TablesToDeleteFrom & 1,2,4 & 8) are all set
    IF ((@TablesToDeleteFrom & 1) <> 0 AND
        (@TablesToDeleteFrom & 2) <> 0 AND
        (@TablesToDeleteFrom & 4) <> 0 AND
        (@TablesToDeleteFrom & 8) <> 0 AND
        (EXISTS (SELECT UserId FROM dbo.aspnet_Users WHERE @UserId = UserId)))
    BEGIN
        DELETE FROM dbo.aspnet_Users WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    IF( @TranStarted = 1 )
    BEGIN
	    SET @TranStarted = 0
	    COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:
    SET @NumTablesDeletedFrom = 0

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
	    ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_mktg_CampaignMarket]...';


GO
CREATE PROCEDURE [dbo].[ecf_mktg_CampaignMarket]
	@ApplicationId uniqueidentifier,
    @MarketId nvarchar(8)
AS
BEGIN

	SELECT C.* from [Campaign] C
	INNER JOIN [MarketCampaigns] MC on C.CampaignId = MC.CampaignId
	WHERE
		C.ApplicationId = @ApplicationId and 
		MC.[MarketId] = COALESCE(@MarketId, MC.[MarketId])

	SELECT CS.* from [CampaignSegment] CS
	INNER JOIN [Campaign] C ON C.CampaignId = CS.CampaignId
	INNER JOIN [MarketCampaigns] MC on MC.[CampaignId] = C.[CampaignId] 
	WHERE
		C.ApplicationId = @ApplicationId and 
		MC.[MarketId] = COALESCE(@MarketId, MC.[MarketId])

	SELECT MC.* from [MarketCampaigns] MC
	INNER JOIN [Campaign] C on C.CampaignId = MC.CampaignId
	WHERE
		C.ApplicationId = @ApplicationId and
		MC.MarketId = @MarketId

END
GO
PRINT N'Creating [dbo].[cms_WorkflowStatusAccess_GetById]...';


GO
CREATE PROCEDURE [cms_WorkflowStatusAccess_GetById]
	@StatusAccessId int
AS
BEGIN
	SELECT [StatusAccessId], [StatusId], [RoleId] FROM [WorkflowStatusAccess]
		WHERE [StatusAccessId] = @StatusAccessId
END
GO
PRINT N'Creating [dbo].[mc_mcmd_SelectedEnumValueSelect]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_SelectedEnumValueSelect]
(
@SelectedEnumValueId int
)
AS
    SET NOCOUNT ON
SELECT [SelectedEnumValueId],
[Key],
[TypeName],
[Id] FROM mcmd_SelectedEnumValue
WHERE
[SelectedEnumValueId] = @SelectedEnumValueId
GO
PRINT N'Creating [dbo].[ecf_OrderForm_Update]...';


GO
CREATE PROCEDURE [dbo].[ecf_OrderForm_Update]
(
	@OrderFormId int,
	@OrderGroupId int,
	@Name nvarchar(64) = NULL,
	@BillingAddressId nvarchar(50) = NULL,
	@DiscountAmount money,
	@SubTotal money,
	@ShippingTotal money,
	@HandlingTotal money,
	@TaxTotal money,
	@Total money,
	@Status nvarchar(64) = NULL,
	@ProviderId nvarchar(255) = NULL,
	@ReturnComment nvarchar(1024) = NULL,
	@ReturnType nvarchar(50) = NULL,
	@ReturnAuthCode nvarchar(255) = NULL,
	@OrigOrderFormId int = NULL,
	@ExchangeOrderGroupId int = NULL,
	@AuthorizedPaymentTotal money,
	@CapturedPaymentTotal money
)
AS
	SET NOCOUNT ON
	
	UPDATE [OrderForm]
	SET
		[OrderGroupId] = @OrderGroupId,
		[Name] = @Name,
		[BillingAddressId] = @BillingAddressId,
		[DiscountAmount] = @DiscountAmount,
		[SubTotal] = @SubTotal,
		[ShippingTotal] = @ShippingTotal,
		[HandlingTotal] = @HandlingTotal,
		[TaxTotal] = @TaxTotal,
		[Total] = @Total,
		[Status] = @Status,
		[ProviderId] = @ProviderId,
		[ReturnComment] = @ReturnComment,
		[ReturnType] = @ReturnType,
		[ReturnAuthCode] = @ReturnAuthCode,
		[OrigOrderFormId] = @OrigOrderFormId,
		[ExchangeOrderGroupId] = @ExchangeOrderGroupId,
		[AuthorizedPaymentTotal] = @AuthorizedPaymentTotal,
		[CapturedPaymentTotal] = @CapturedPaymentTotal
	WHERE 
		[OrderFormId] = @OrderFormId

	RETURN @@Error
GO
PRINT N'Creating [dbo].[aspnet_Users_CreateUser]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].aspnet_Users_CreateUser
    @ApplicationId    uniqueidentifier,
    @UserName         nvarchar(256),
    @IsUserAnonymous  bit,
    @LastActivityDate DATETIME,
    @UserId           uniqueidentifier OUTPUT
AS
BEGIN
    IF( @UserId IS NULL )
        SELECT @UserId = NEWID()
    ELSE
    BEGIN
        IF( EXISTS( SELECT UserId FROM dbo.aspnet_Users
                    WHERE @UserId = UserId ) )
            RETURN -1
    END

    INSERT dbo.aspnet_Users (ApplicationId, UserId, UserName, LoweredUserName, IsAnonymous, LastActivityDate)
    VALUES (@ApplicationId, @UserId, @UserName, LOWER(@UserName), @IsUserAnonymous, @LastActivityDate)

    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_mktg_Campaign]...';


GO
CREATE PROCEDURE [dbo].[ecf_mktg_Campaign]
	@ApplicationId uniqueidentifier,
    @CampaignId int
AS
BEGIN
	
	if(@CampaignId = 0)
		set @CampaignId = null

	SELECT C.* from [Campaign] C
	WHERE
		C.ApplicationId = @ApplicationId and 
		C.CampaignId = COALESCE(@CampaignId,C.CampaignId)

	SELECT CS.* from [CampaignSegment] CS
	INNER JOIN [Campaign] C ON C.CampaignId = CS.CampaignId
	WHERE
		C.ApplicationId = @ApplicationId and 
		CS.CampaignId = COALESCE(@CampaignId,CS.CampaignId)

	SELECT MC.* from [MarketCampaigns] MC
	INNER JOIN [Campaign] C on C.CampaignId = MC.CampaignId
	WHERE
		C.ApplicationId = @ApplicationId and
		MC.CampaignId = COALESCE(@CampaignId,MC.CampaignId)

END
GO
PRINT N'Creating [dbo].[cms_WorkflowStatusAccess_GetAll]...';


GO
CREATE PROCEDURE [cms_WorkflowStatusAccess_GetAll] 
	@ApplicationId uniqueidentifier
AS
BEGIN
	SELECT WSA.[StatusAccessId], WSA.[StatusId], WSA.[RoleId] FROM [WorkflowStatusAccess] WSA
	INNER JOIN [WorkflowStatus] WS ON WS.[StatusId] = WSA.[StatusId]
	INNER JOIN [Workflow] W ON W.[WorkflowId] = WS.[WorkflowId]
		WHERE W.[ApplicationId] = @ApplicationId
END
GO
PRINT N'Creating [dbo].[mc_mcmd_SelectedEnumValueInsert]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_SelectedEnumValueInsert]
(
@SelectedEnumValueId int = NULL OUTPUT
,
@Key uniqueidentifier,
@TypeName nvarchar(100),
@Id int)
AS
    SET NOCOUNT ON
INSERT INTO [mcmd_SelectedEnumValue]
(
[Key],
[TypeName],
[Id])
VALUES(
@Key,
@TypeName,
@Id)
SELECT @SelectedEnumValueId = SCOPE_IDENTITY();
RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_OrderForm_Insert]...';


GO
CREATE PROCEDURE [dbo].[ecf_OrderForm_Insert]
(
	@OrderFormId int = NULL OUTPUT,
	@OrderGroupId int,
	@Name nvarchar(64) = NULL,
	@BillingAddressId nvarchar(50) = NULL,
	@DiscountAmount money,
	@SubTotal money,
	@ShippingTotal money,
	@HandlingTotal money,
	@TaxTotal money,
	@Total money,
	@Status nvarchar(64) = NULL,
	@ProviderId nvarchar(255) = NULL,
	@ReturnComment nvarchar(1024) = NULL,
	@ReturnType nvarchar(50) = NULL,
	@ReturnAuthCode nvarchar(255) = NULL,
	@OrigOrderFormId int = NULL,
	@ExchangeOrderGroupId int  = NULL,
	@AuthorizedPaymentTotal money,
	@CapturedPaymentTotal money
)
AS
	SET NOCOUNT ON

	INSERT INTO [OrderForm]
	(
		[OrderGroupId],
		[Name],
		[BillingAddressId],
		[DiscountAmount],
		[SubTotal],
		[ShippingTotal],
		[HandlingTotal],
		[TaxTotal],
		[Total],
		[Status],
		[ProviderId],
		[ReturnComment],
		[ReturnType],
		[ReturnAuthCode],
		[OrigOrderFormId],
		[ExchangeOrderGroupId],
		[AuthorizedPaymentTotal],
		[CapturedPaymentTotal]
		
	)
	VALUES
	(
		@OrderGroupId,
		@Name,
		@BillingAddressId,
		@DiscountAmount,
		@SubTotal,
		@ShippingTotal,
		@HandlingTotal,
		@TaxTotal,
		@Total,
		@Status,
		@ProviderId,
		@ReturnComment,
		@ReturnType,
		@ReturnAuthCode,
		@OrigOrderFormId,
		@ExchangeOrderGroupId,
		@AuthorizedPaymentTotal,
		@CapturedPaymentTotal
	)

	SELECT @OrderFormId = SCOPE_IDENTITY()

	RETURN @@Error
GO
PRINT N'Creating [dbo].[aspnet_UnRegisterSchemaVersion]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].aspnet_UnRegisterSchemaVersion
    @Feature                   nvarchar(128),
    @CompatibleSchemaVersion   nvarchar(128)
AS
BEGIN
    DELETE FROM dbo.aspnet_SchemaVersions
        WHERE   Feature = LOWER(@Feature) AND @CompatibleSchemaVersion = CompatibleSchemaVersion
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[GetMarketingSchemaVersionNumber]...';


GO
CREATE PROCEDURE [dbo].[GetMarketingSchemaVersionNumber]
AS
	with PatchVersion (Major, Minor, Patch) as
		(SELECT max([Major]) as Major,
			max([Minor]) as Minor,
			max([Patch]) as Patch
			FROM [SchemaVersion_MarketingSystem]),
	PatchDate (Major, Minor, Patch, InstallDate) as 
		(SELECT Major, Minor, Patch, InstallDate from [SchemaVersion_MarketingSystem])
	SELECT PD.Major as Major, PD.Minor as Minor, PD.Patch as Patch, PD.InstallDate as InstallDate 
		FROM PatchDate PD, PatchVersion PV 
		WHERE PD.[Major]=PV.[Major] AND 
			PD.[Minor]=PV.[Minor] AND 
			PD.[Patch]=PV.[Patch]
GO
PRINT N'Creating [dbo].[cms_WorkflowStatusAccess_Delete]...';


GO
CREATE PROCEDURE [cms_WorkflowStatusAccess_Delete] 
	@StatusAccessId int
AS
BEGIN
	DELETE FROM [WorkflowStatusAccess] WHERE [StatusAccessId] = @StatusAccessId
END
GO
PRINT N'Creating [dbo].[mc_mcmd_SelectedEnumValueDelete]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_SelectedEnumValueDelete]
(
@SelectedEnumValueId int
)
AS
    SET NOCOUNT ON
DELETE FROM [mcmd_SelectedEnumValue]
WHERE
[SelectedEnumValueId] = @SelectedEnumValueId
RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_OrderForm_Delete]...';


GO
CREATE PROCEDURE [dbo].[ecf_OrderForm_Delete]
(
	@OrderFormId int
)
AS
	SET NOCOUNT ON
	DECLARE @TempObjectId int	

	-- Delete line items
	DECLARE _cursor CURSOR READ_ONLY FOR 
		SELECT LineItemId FROM [LineItem] where OrderFormId = @OrderFormId
	OPEN _cursor
	FETCH NEXT FROM _cursor INTO @TempObjectId
	WHILE (@@fetch_status = 0) BEGIN
		DELETE FROM [LineItemDiscount] where LineItemId = @TempObjectId
		EXEC [dbo].[mdpsp_avto_LineItemEx_Delete] @TempObjectId
		FETCH NEXT FROM _cursor INTO @TempObjectId
	END
	CLOSE _cursor
	DEALLOCATE _cursor
	DELETE FROM [LineItem] where OrderFormId = @OrderFormId

	-- Delete payments
	DECLARE _cursor CURSOR READ_ONLY FOR 
		SELECT PaymentId FROM [OrderFormPayment] where OrderFormId = @OrderFormId
	OPEN _cursor
	FETCH NEXT FROM _cursor INTO @TempObjectId
	WHILE (@@fetch_status = 0) BEGIN
		EXEC [dbo].[mdpsp_avto_OrderFormPayment_CashCard_Delete] @TempObjectId
		EXEC [dbo].[mdpsp_avto_OrderFormPayment_CreditCard_Delete] @TempObjectId
		EXEC [dbo].[mdpsp_avto_OrderFormPayment_GiftCard_Delete] @TempObjectId	
		EXEC [dbo].[mdpsp_avto_OrderFormPayment_Invoice_Delete] @TempObjectId
		EXEC [dbo].[mdpsp_avto_OrderFormPayment_Other_Delete] @TempObjectId
		
		EXEC [dbo].[mdpsp_avto_OrderFormPayment_Exchange_Delete] @TempObjectId
		FETCH NEXT FROM _cursor INTO @TempObjectId
	END
	CLOSE _cursor
	DEALLOCATE _cursor
	DELETE FROM [OrderFormPayment] where OrderFormId = @OrderFormId

	-- Delete OrderFormDiscount
	DELETE FROM [OrderFormDiscount] where OrderFormId = @OrderFormId

	-- Delete Shipment
	DECLARE _cursor CURSOR READ_ONLY FOR 
		SELECT ShipmentId FROM [Shipment] where OrderFormId = @OrderFormId
	OPEN _cursor
	FETCH NEXT FROM _cursor INTO @TempObjectId
	WHILE (@@fetch_status = 0) BEGIN
		DELETE FROM [ShipmentDiscount] where ShipmentId = @TempObjectId
		EXEC [dbo].[mdpsp_avto_ShipmentEx_Delete] @TempObjectId
		FETCH NEXT FROM _cursor INTO @TempObjectId
	END
	CLOSE _cursor
	DEALLOCATE _cursor
	DELETE FROM [Shipment] where OrderFormId = @OrderFormId

	-- Delete OrderForm
	select @TempObjectId = OrderFormId FROM [OrderForm] where OrderFormId = @OrderFormId
	EXEC [dbo].[mdpsp_avto_OrderFormEx_Delete] @TempObjectId
	DELETE FROM [OrderForm] where OrderFormId = @OrderFormId

	RETURN @@Error
GO
PRINT N'Creating [dbo].[aspnet_Applications_CreateApplication]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].aspnet_Applications_CreateApplication
    @ApplicationName      nvarchar(256),
    @ApplicationId        uniqueidentifier OUTPUT
AS
BEGIN
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName

    IF(@ApplicationId IS NULL)
    BEGIN
        DECLARE @TranStarted   bit
        SET @TranStarted = 0

        IF( @@TRANCOUNT = 0 )
        BEGIN
	        BEGIN TRANSACTION
	        SET @TranStarted = 1
        END
        ELSE
    	    SET @TranStarted = 0

        SELECT  @ApplicationId = ApplicationId
        FROM dbo.aspnet_Applications WITH (UPDLOCK, HOLDLOCK)
        WHERE LOWER(@ApplicationName) = LoweredApplicationName

        IF(@ApplicationId IS NULL)
        BEGIN
            SELECT  @ApplicationId = NEWID()
            INSERT  dbo.aspnet_Applications (ApplicationId, ApplicationName, LoweredApplicationName)
            VALUES  (@ApplicationId, @ApplicationName, LOWER(@ApplicationName))
        END


        IF( @TranStarted = 1 )
        BEGIN
            IF(@@ERROR = 0)
            BEGIN
	        SET @TranStarted = 0
	        COMMIT TRANSACTION
            END
            ELSE
            BEGIN
                SET @TranStarted = 0
                ROLLBACK TRANSACTION
            END
        END
    END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[cms_WorkflowStatusAccess_Add]...';


GO
CREATE PROCEDURE [cms_WorkflowStatusAccess_Add]
	@StatusId int,
	@RoleId nvarchar(256),
	@retval int output
AS
BEGIN
	INSERT INTO [WorkflowStatusAccess] (StatusId, RoleId)
	VALUES (@StatusId, @RoleId)
	SET @retval = SCOPE_IDENTITY()
END
GO
PRINT N'Creating [dbo].[mc_mcmd_MetaModelVersionIdUpdate]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaModelVersionIdUpdate] 
	@VersionId uniqueidentifier
AS
	IF NOT EXISTS (SELECT * FROM mcmd_MetaModelVersionId)
		INSERT INTO mcmd_MetaModelVersionId (VersionId) VALUES (@VersionId)
	ELSE
		UPDATE mcmd_MetaModelVersionId SET VersionId = @VersionId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_CheckSchemaVersion]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].aspnet_CheckSchemaVersion
    @Feature                   nvarchar(128),
    @CompatibleSchemaVersion   nvarchar(128)
AS
BEGIN
    IF (EXISTS( SELECT  *
                FROM    dbo.aspnet_SchemaVersions
                WHERE   Feature = LOWER( @Feature ) AND
                        CompatibleSchemaVersion = @CompatibleSchemaVersion ))
        RETURN 0

    RETURN 1
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[cms_WorkFlowStatus_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[cms_WorkFlowStatus_Update] 
	@StatusId INT,
	@WorkFlowId INT,
	@Weight INT,
	@FriendlyName NVARCHAR(250)
AS
 BEGIN
	UPDATE [WorkflowStatus] SET
		[WorkflowId] = @WorkFlowId,
		[Weight] = @Weight,
		[FriendlyName] = @FriendlyName
	WHERE StatusId = @StatusId
	
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaModelVersionIdSelect]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE PROCEDURE [dbo].[mc_mcmd_MetaModelVersionIdSelect] AS
	SELECT TOP 1 VersionId FROM mcmd_MetaModelVersionId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_LineItemDiscount_Update]...';


GO
CREATE PROCEDURE [dbo].[ecf_LineItemDiscount_Update]
(
	@LineItemDiscountId int,
	@LineItemId int,
	@DiscountId int,
	@OrderGroupId int,
	@DiscountAmount money,
	@DiscountCode nvarchar(50) = NULL,
	@DiscountName nvarchar(50) = NULL,
	@DisplayMessage nvarchar(100) = NULL,
	@DiscountValue money
)
AS
	SET NOCOUNT ON
	
	UPDATE [LineItemDiscount]
	SET
		[LineItemId] = @LineItemId,
		[DiscountId] = @DiscountId,
		[OrderGroupId] = @OrderGroupId,
		[DiscountAmount] = @DiscountAmount,
		[DiscountCode] = @DiscountCode,
		[DiscountName] = @DiscountName,
		[DisplayMessage] = @DisplayMessage,
		[DiscountValue] = @DiscountValue
	WHERE 
		[LineItemDiscountId] = @LineItemDiscountId

	RETURN @@Error
GO
PRINT N'Creating [dbo].[aspnet_RegisterSchemaVersion]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].aspnet_RegisterSchemaVersion
    @Feature                   nvarchar(128),
    @CompatibleSchemaVersion   nvarchar(128),
    @IsCurrentVersion          bit,
    @RemoveIncompatibleSchema  bit
AS
BEGIN
    IF( @RemoveIncompatibleSchema = 1 )
    BEGIN
        DELETE FROM dbo.aspnet_SchemaVersions WHERE Feature = LOWER( @Feature )
    END
    ELSE
    BEGIN
        IF( @IsCurrentVersion = 1 )
        BEGIN
            UPDATE dbo.aspnet_SchemaVersions
            SET IsCurrentVersion = 0
            WHERE Feature = LOWER( @Feature )
        END
    END

    INSERT  dbo.aspnet_SchemaVersions( Feature, CompatibleSchemaVersion, IsCurrentVersion )
    VALUES( LOWER( @Feature ), @CompatibleSchemaVersion, @IsCurrentVersion )
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[cms_WorkFlowStatus_GetDraftStatus]...';


GO
CREATE PROCEDURE [dbo].[cms_WorkFlowStatus_GetDraftStatus] 
	@ApplicationId uniqueidentifier,
	@retval INT OUTPUT
AS
 BEGIN
	DECLARE @WorkFlowId INT

	SELECT @WorkFlowId = [WorkflowId] FROM [Workflow] WHERE [IsDefault] = 1 AND ApplicationId = @ApplicationId
	SELECT @retval = MIN(StatusId) FROM [WorkflowStatus]
			WHERE [Weight] > -1 and [WorkflowId] = @WorkFlowId	

	IF @retval IS NULL
		SET @retval = -1
 END
GO
PRINT N'Creating [dbo].[mc_mcmd_MetaLinkUpdate]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaLinkUpdate]
(
@LinkId int,
@MetaClassName nvarchar(50) = NULL
,
@MetaObjectId int = NULL
,
@UID ntext = NULL
)
AS
    SET NOCOUNT ON

UPDATE [mcmd_MetaLink]
SET
[MetaClassName] = @MetaClassName,
[MetaObjectId] = @MetaObjectId,
[UID] = @UID
WHERE
[LinkId] = @LinkId
RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_LineItemDiscount_Insert]...';


GO
CREATE PROCEDURE [dbo].[ecf_LineItemDiscount_Insert]
(
	@LineItemDiscountId int = NULL OUTPUT,
	@LineItemId int,
	@DiscountId int,
	@OrderGroupId int,
	@DiscountAmount money,
	@DiscountCode nvarchar(50) = NULL,
	@DiscountName nvarchar(50) = NULL,
	@DisplayMessage nvarchar(100) = NULL,
	@DiscountValue money
)
AS
	SET NOCOUNT ON

	INSERT INTO [LineItemDiscount]
	(
		[LineItemId],
		[DiscountId],
		[OrderGroupId],
		[DiscountAmount],
		[DiscountCode],
		[DiscountName],
		[DisplayMessage],
		[DiscountValue]
	)
	VALUES
	(
		@LineItemId,
		@DiscountId,
		@OrderGroupId,
		@DiscountAmount,
		@DiscountCode,
		@DiscountName,
		@DisplayMessage,
		@DiscountValue
	)

	SELECT @LineItemDiscountId = SCOPE_IDENTITY()

	RETURN @@Error
GO
PRINT N'Creating [dbo].[cms_WorkFlowStatus_GetByWorkflowId]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[cms_WorkFlowStatus_GetByWorkflowId]
	@WorkFlowId INT
AS
 BEGIN
	SELECT [StatusId] as StatusId,
		 [WorkflowId] as WorkFlowId,
		 [Weight] as Weight,
		 [FriendlyName] as FriendlyName
	FROM WorkflowStatus
	WHERE [WorkflowId] = @WorkFlowId
	ORDER BY Weight ASC
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaLinkSelect]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaLinkSelect]
(
@LinkId int
)
AS
    SET NOCOUNT ON

SELECT [LinkId],
[MetaClassName],
[MetaObjectId],
[UID] FROM mcmd_MetaLink
WHERE
[LinkId] = @LinkId
GO
PRINT N'Creating [dbo].[ecf_LineItemDiscount_Delete]...';


GO
CREATE PROCEDURE [dbo].[ecf_LineItemDiscount_Delete]
(
	@LineItemDiscountId int
)
AS
	SET NOCOUNT ON

	DELETE 
	FROM   [LineItemDiscount]
	WHERE  
		[LineItemDiscountId] = @LineItemDiscountId

	RETURN @@Error
GO
PRINT N'Creating [dbo].[cms_WorkFlowStatus_GetById]...';


GO
CREATE PROCEDURE [dbo].[cms_WorkFlowStatus_GetById]
	@StatusId INT,
	@ApplicationId uniqueidentifier
AS
 BEGIN
	SELECT WS.[StatusId] as StatusId,
		 WS.[WorkflowId] as WorkFlowId,
		 WS.[Weight] as Weight,
		 WS.[FriendlyName] as FriendlyName
	FROM [WorkflowStatus] WS INNER JOIN Workflow W ON WS.WorkflowId = W.WorkflowId
	WHERE ApplicationId = @ApplicationId AND [StatusId] = @StatusId
 END
GO
PRINT N'Creating [dbo].[mc_mcmd_MetaLinkInsert]...';


GO
-- Create SP
CREATE PROCEDURE [dbo].[mc_mcmd_MetaLinkInsert]
(
@LinkId int = NULL OUTPUT
,
@MetaClassName nvarchar(50) = NULL
,
@MetaObjectId int = NULL
,
@UID ntext = NULL
)
AS
    SET NOCOUNT ON

INSERT INTO [mcmd_MetaLink]
(
[MetaClassName],
[MetaObjectId],
[UID])
VALUES(
@MetaClassName,
@MetaObjectId,
@UID)
SELECT @LinkId = SCOPE_IDENTITY();
RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_LineItem_Update]...';


GO

CREATE PROCEDURE [dbo].[ecf_LineItem_Update]
(
	@LineItemId int,
	@OrderFormId int,
	@OrderGroupId int,
	@Catalog nvarchar(255),
	@CatalogNode nvarchar(255),
	@ParentCatalogEntryId nvarchar(255),
	@CatalogEntryId nvarchar(255),
	@Quantity money,
	@PlacedPrice money,
	@ListPrice money,
	@LineItemDiscountAmount money,
	@OrderLevelDiscountAmount money,
	@ShippingAddressId nvarchar(255),
	@ShippingMethodName nvarchar(128) = NULL,
	@ShippingMethodId uniqueidentifier,
	@ExtendedPrice money,
	@Description nvarchar(255) = NULL,
	@Status nvarchar(64) = NULL,
	@DisplayName nvarchar(128) = NULL,
	@AllowBackordersAndPreorders bit,
	@InStockQuantity money,
	@PreorderQuantity money,
	@BackorderQuantity money,
	@InventoryStatus int,
	@LineItemOrdering datetime,
	@ConfigurationId nvarchar(255) = NULL,
	@MinQuantity money,
	@MaxQuantity money,
	@ProviderId nvarchar(255) = NULL,
	@ReturnReason nvarchar(255)= NULL,
	@OrigLineItemId int = NULL,
	@ReturnQuantity money,
	@WarehouseCode nvarchar(50) = NULL,
    @IsInventoryAllocated bit = NULL
)
AS
	SET NOCOUNT ON
	
	UPDATE [LineItem]
	SET
		[OrderFormId] = @OrderFormId,
		[OrderGroupId] = @OrderGroupId,
		[Catalog] = @Catalog,
		[CatalogNode] = @CatalogNode,
		[ParentCatalogEntryId] = @ParentCatalogEntryId,
		[CatalogEntryId] = @CatalogEntryId,
		[Quantity] = @Quantity,
		[PlacedPrice] = @PlacedPrice,
		[ListPrice] = @ListPrice,
		[LineItemDiscountAmount] = @LineItemDiscountAmount,
		[OrderLevelDiscountAmount] = @OrderLevelDiscountAmount,
		[ShippingAddressId] = @ShippingAddressId,
		[ShippingMethodName] = @ShippingMethodName,
		[ShippingMethodId] = @ShippingMethodId,
		[ExtendedPrice] = @ExtendedPrice,
		[Description] = @Description,
		[Status] = @Status,
		[DisplayName] = @DisplayName,
		[AllowBackordersAndPreorders] = @AllowBackordersAndPreorders,
		[InStockQuantity] = @InStockQuantity,
		[PreorderQuantity] = @PreorderQuantity,
		[BackorderQuantity] = @BackorderQuantity,
		[InventoryStatus] = @InventoryStatus,
		[LineItemOrdering] = @LineItemOrdering,
		[ConfigurationId] = @ConfigurationId,
		[MinQuantity] = @MinQuantity,
		[MaxQuantity] = @MaxQuantity,
		[ProviderId] = @ProviderId,
		[ReturnReason] = @ReturnReason,
		[OrigLineItemId] = @OrigLineItemId,
		[ReturnQuantity] = @ReturnQuantity,
		[WarehouseCode] = @WarehouseCode,
        [IsInventoryAllocated] = @IsInventoryAllocated
	WHERE 
		[LineItemId] = @LineItemId

	IF @@ERROR > 0
	BEGIN
		RAISERROR('Concurrency Error',16,1)
	END

	RETURN @@Error
GO
PRINT N'Creating [dbo].[cms_WorkFlowStatus_GetArcStatus]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[cms_WorkFlowStatus_GetArcStatus] 
	@StatusId INT,
	@ApplicationId uniqueidentifier,
	@retval INT OUTPUT
AS
 BEGIN
	DECLARE @WorkFlowId INT
	--GA
	SELECT @WorkFlowId = [WorkflowId] FROM [Workflow] WHERE [IsDefault] = 1 AND ApplicationId = @ApplicationId
	IF @StatusId != 0 
	BEGIN
		SELECT @WorkFlowId = [WorkflowId] FROM  [WorkflowStatus]
			WHERE [StatusId] = @StatusId
	END
		SELECT @retval = [StatusId]  FROM [WorkflowStatus]
			WHERE [Weight] = -1 and [WorkflowId] = @WorkFlowId
	
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaLinkDelete]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaLinkDelete]
(
@LinkId int
)
AS
    SET NOCOUNT ON

DELETE FROM [mcmd_MetaLink]
WHERE
[LinkId] = @LinkId
RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_LineItem_Insert]...';


GO

CREATE PROCEDURE [dbo].[ecf_LineItem_Insert]
(
	@LineItemId int = NULL OUTPUT,
	@OrderFormId int,
	@OrderGroupId int,
	@Catalog nvarchar(255),
	@CatalogNode nvarchar(255),
	@ParentCatalogEntryId nvarchar(255),
	@CatalogEntryId nvarchar(255),
	@Quantity money,
	@PlacedPrice money,
	@ListPrice money,
	@LineItemDiscountAmount money,
	@OrderLevelDiscountAmount money,
	@ShippingAddressId nvarchar(50),
	@ShippingMethodName nvarchar(128) = NULL,
	@ShippingMethodId uniqueidentifier,
	@ExtendedPrice money,
	@Description nvarchar(255) = NULL,
	@Status nvarchar(64) = NULL,
	@DisplayName nvarchar(128) = NULL,
	@AllowBackordersAndPreorders bit,
	@InStockQuantity money,
	@PreorderQuantity money,
	@BackorderQuantity money,
	@InventoryStatus int,
	@LineItemOrdering datetime,
	@ConfigurationId nvarchar(255) = NULL,
	@MinQuantity money,
	@MaxQuantity money,
	@ProviderId nvarchar(255) = NULL,
	@ReturnReason nvarchar(255)= NULL,
	@OrigLineItemId int = NULL,
	@ReturnQuantity money,
	@WarehouseCode nvarchar(50) = NULL,
    @IsInventoryAllocated bit = NULL
)
AS
	SET NOCOUNT ON

	INSERT INTO [LineItem]
	(
		[OrderFormId],
		[OrderGroupId],
		[Catalog],
		[CatalogNode],
		[ParentCatalogEntryId],
		[CatalogEntryId],
		[Quantity],
		[PlacedPrice],
		[ListPrice],
		[LineItemDiscountAmount],
		[OrderLevelDiscountAmount],
		[ShippingAddressId],
		[ShippingMethodName],
		[ShippingMethodId],
		[ExtendedPrice],
		[Description],
		[Status],
		[DisplayName],
		[AllowBackordersAndPreorders],
		[InStockQuantity],
		[PreorderQuantity],
		[BackorderQuantity],
		[InventoryStatus],
		[LineItemOrdering],
		[ConfigurationId],
		[MinQuantity],
		[MaxQuantity],
		[ProviderId],
		[ReturnReason],
		[OrigLineItemId],
		[ReturnQuantity],
		[WarehouseCode],
        [IsInventoryAllocated]
	)
	VALUES
	(
		@OrderFormId,
		@OrderGroupId,
		@Catalog,
		@CatalogNode,
		@ParentCatalogEntryId,
		@CatalogEntryId,
		@Quantity,
		@PlacedPrice,
		@ListPrice,
		@LineItemDiscountAmount,
		@OrderLevelDiscountAmount,
		@ShippingAddressId,
		@ShippingMethodName,
		@ShippingMethodId,
		@ExtendedPrice,
		@Description,
		@Status,
		@DisplayName,
		@AllowBackordersAndPreorders,
		@InStockQuantity,
		@PreorderQuantity,
		@BackorderQuantity,
		@InventoryStatus,
		@LineItemOrdering,
		@ConfigurationId,
		@MinQuantity,
		@MaxQuantity,
		@ProviderId,
		@ReturnReason,
		@OrigLineItemId,
		@ReturnQuantity,
		@WarehouseCode,
        @IsInventoryAllocated
	)

	SELECT @LineItemId = SCOPE_IDENTITY()

	RETURN @@Error
GO
PRINT N'Creating [dbo].[cms_WorkFlowStatus_GetAll]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[cms_WorkFlowStatus_GetAll] 
	@ApplicationId uniqueidentifier
AS
 BEGIN
	SELECT WS.[StatusId] as StatusId,
		 WS.[WorkflowId] as WorkFlowId,
		 WS.[Weight] as Weight,
		 WS.[FriendlyName] as FriendlyName
	FROM [WorkflowStatus] WS INNER JOIN Workflow W ON WS.WorkflowId = W.WorkflowId
	WHERE ApplicationId = @ApplicationId
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaIdentifierUpdate]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaIdentifierUpdate]
(
@IdentifierId int,
@Value nvarchar(510))
AS
    SET NOCOUNT ON
UPDATE [mcmd_MetaIdentifier]
SET
[Value] = @Value
WHERE
[IdentifierId] = @IdentifierId
RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_LineItem_Delete]...';


GO
CREATE PROCEDURE [dbo].[ecf_LineItem_Delete]
(
	@LineItemId int
)
AS
	SET NOCOUNT ON
	DECLARE @TempObjectId int	

	EXEC [dbo].[mdpsp_avto_LineItemEx_Delete] @LineItemId
	DELETE FROM [LineItemDiscount] WHERE [LineItemId] = @LineItemId
	DELETE FROM [LineItem] WHERE [LineItemId] = @LineItemId

	RETURN @@Error
GO
PRINT N'Creating [dbo].[cms_WorkFlowStatus_Delete]...';


GO
CREATE PROCEDURE [dbo].[cms_WorkFlowStatus_Delete]
	@StatusId INT
AS
 BEGIN
	DELETE FROM [WorkflowStatusAccess] WHERE [StatusId] =@StatusId
	DELETE FROM [WorkflowStatus] WHERE [StatusId] = @StatusId
 END
GO
PRINT N'Creating [dbo].[mdpsp_sys_DeleteMetaRule]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_DeleteMetaRule]
	@RuleId	INT
AS
	SET NOCOUNT ON

	DELETE FROM MetaRule WHERE RuleId=@RuleId

	SET NOCOUNT OFF
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaIdentifierSelect]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaIdentifierSelect]
(
@IdentifierId int
)
AS
    SET NOCOUNT ON
SELECT [IdentifierId],
[PeriodKey],
[TypeName],
[MetaClassName],
[MetaFieldName],
[Id],
[Value] FROM mcmd_MetaIdentifier
WHERE
[IdentifierId] = @IdentifierId
GO
PRINT N'Creating [dbo].[ecf_GetMostRecentOrder]...';


GO
CREATE PROCEDURE [dbo].[ecf_GetMostRecentOrder]
(
	@CustomerId uniqueidentifier, 
	@ApplicationId uniqueidentifier
)
AS
BEGIN
    declare @results udttOrderGroupId
    
    insert into @results (OrderGroupId)
	select top 1 [OrderGroupId]
	from [OrderGroup_PurchaseOrder] PO
	join OrderGroup OG on PO.ObjectId = OG.OrderGroupId
	where ([CustomerId] = @CustomerId) and ApplicationId = @ApplicationId
	ORDER BY ObjectId DESC

	exec dbo.ecf_Search_OrderGroup @results

	-- Return Purchase Order Details
	DECLARE @search_condition nvarchar(max)
	CREATE TABLE #OrderSearchResults(OrderGroupId int)
	insert into #OrderSearchResults select OrderGroupId from @results
	SET @search_condition = N'INNER JOIN OrderGroup OG ON OG.OrderGroupId = T.ObjectId WHERE [T].[ObjectId] IN (SELECT [OrderGroupId] FROM #OrderSearchResults)'
	exec mdpsp_avto_OrderGroup_PurchaseOrder_Search NULL, '''OrderGroup'' TableName, [OG].*', @search_condition

	DROP TABLE #OrderSearchResults
END
GO
PRINT N'Creating [dbo].[cms_WorkflowStatus_Add]...';


GO
CREATE PROCEDURE [cms_WorkflowStatus_Add]
	@WorkflowId int,
	@Weight int,
	@FriendlyName nvarchar(250),
	@retval int output
AS
BEGIN
	INSERT INTO [WorkflowStatus] ([WorkflowId], [Weight], [FriendlyName])
	VALUES (@WorkflowId, @Weight, @FriendlyName)
	SET @retval = SCOPE_IDENTITY()
END
GO
PRINT N'Creating [dbo].[mdpsp_sys_DeleteMetaObjectValue]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_DeleteMetaObjectValue]
	@MetaKey	INT
AS
	SET NOCOUNT ON
	DELETE FROM MetaObjectValue WHERE MetaKey = @MetaKey
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaIdentifierInsert]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaIdentifierInsert]
(
@IdentifierId int = NULL OUTPUT,
@Value nvarchar(510) OUTPUT,
@PeriodKey varchar(10),
@TypeName nvarchar(100),
@MetaClassName nvarchar(100),
@MetaFieldName nvarchar(100),
@MaskLength int
)
AS
    SET NOCOUNT ON

DECLARE @Number nvarchar(50)
DECLARE @Id int

SELECT @Id = Id FROM mcmd_MetaIdentifier WHERE PeriodKey=@PeriodKey AND TypeName=@TypeName AND MetaClassName=@MetaClassName AND MetaFieldName=@MetaFieldName

IF @Id IS NULL
	SET @Id = 1
ELSE
	SET @Id = @Id + 1

SET @Number = CAST(@Id As nvarchar(50))

IF LEN(@Number) < @MaskLength
	SET @Number = REPLICATE('0', @MaskLength - LEN(@Number)) + @Number

SET @Value = REPLACE(@Value, '#', @Number)

INSERT INTO [mcmd_MetaIdentifier]
(
[PeriodKey],
[TypeName],
[MetaClassName],
[MetaFieldName],
[Value],
[Id])
VALUES(
@PeriodKey,
@TypeName,
@MetaClassName,
@MetaFieldName,
@Value,
@Id)

SELECT @IdentifierId = SCOPE_IDENTITY();
RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_Country_CountryId]...';


GO
CREATE PROCEDURE [dbo].[ecf_Country_CountryId]
	@ApplicationId uniqueidentifier,
	@CountryId int,
	@ReturnInactive bit = 0
AS
BEGIN
	select * from [Country] C 
		where [ApplicationId] = @ApplicationId and [CountryId] = @CountryId and 
			((C.[Visible] = 1) or @ReturnInactive = 1)

	select SP.* from [StateProvince] SP 
		inner join [Country] C on C.[CountryId] = SP.[CountryId]
		where C.[ApplicationId] = @ApplicationId and SP.[CountryId] = @CountryId and 
			((C.[Visible] = 1) or @ReturnInactive = 1) and 
			((SP.[Visible] = 1) or @ReturnInactive = 1)
		order by SP.[Ordering], SP.[Name]
END
GO
PRINT N'Creating [dbo].[cms_WorkFlow_Update]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
create PROCEDURE [dbo].[cms_WorkFlow_Update]
	@WorkFlowId INT,
	@FriendlyName NVARCHAR(250),
	@IsDefault BIT,
	@ApplicationId uniqueidentifier
AS
 BEGIN
	UPDATE [Workflow] SET
		[FriendlyName] = @FriendlyName,
		[IsDefault] = @IsDefault,
		ApplicationId = @ApplicationId
	WHERE [WorkflowId] = @WorkFlowId
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_DeleteMetaFile]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_DeleteMetaFile]
	@MetaKey	INT
AS
	SET NOCOUNT ON
	DELETE FROM MetaFileValue WHERE MetaKey = @MetaKey
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaIdentifierDelete]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaIdentifierDelete]
(
@IdentifierId int
)
AS
    SET NOCOUNT ON
DELETE FROM [mcmd_MetaIdentifier]
WHERE
[IdentifierId] = @IdentifierId
RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_Country_Code]...';


GO
CREATE PROCEDURE [dbo].[ecf_Country_Code]
	@ApplicationId uniqueidentifier,
	@Code nvarchar(3),
	@ReturnInactive bit = 0
AS
BEGIN
	select * from [Country] C 
		where [ApplicationId] = @ApplicationId and [Code] = @Code and
			((C.[Visible] = 1) or @ReturnInactive = 1)

	select SP.* from [StateProvince] SP 
		inner join [Country] C on C.[CountryId] = SP.[CountryId]
		where C.[ApplicationId] = @ApplicationId and C.[Code] = @Code and
			((C.[Visible] = 1) or @ReturnInactive = 1) and 
			((SP.[Visible] = 1) or @ReturnInactive = 1)
		order by SP.[Ordering], SP.[Name]
END
GO
PRINT N'Creating [dbo].[cms_WorkFlow_GetDefault]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
create PROCEDURE [dbo].[cms_WorkFlow_GetDefault]
	@ApplicationId uniqueidentifier
AS
 BEGIN
	SELECT [WorkflowId] as WorkFlowId, [FriendlyName] as FriendlyName, [IsDefault] as IsDefault
	FROM dbo.[Workflow]
	WHERE [IsDefault] = 1 AND ApplicationId = @ApplicationId
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_mcmd_MetaFileUpdate]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaFileUpdate]
(
@FileId int,
@FileUID uniqueidentifier,
@FileName nvarchar(510)
)
AS
    SET NOCOUNT ON
UPDATE [mcmd_MetaFile]
SET
[FileUID] = @FileUID,
[FileName] = @FileName
WHERE
[FileId] = @FileId
RETURN @@Error
GO
PRINT N'Creating [dbo].[ecf_Country]...';


GO
CREATE PROCEDURE [dbo].[ecf_Country]
	@ApplicationId uniqueidentifier,
	@ReturnInactive bit = 0
AS
BEGIN
	select * from [Country] C 
		where [ApplicationId] = @ApplicationId and 
			(([Visible] = 1) or @ReturnInactive = 1)
		order by C.[Ordering], C.[Name]

	select SP.* from [StateProvince] SP 
		inner join [Country] C on C.[CountryId] = SP.[CountryId]
		where C.[ApplicationId] = @ApplicationId and 
			((C.[Visible] = 1) or @ReturnInactive = 1) and 
			((SP.[Visible] = 1) or @ReturnInactive = 1)
		order by SP.[Ordering], SP.[Name]
END
GO
PRINT N'Creating [dbo].[cms_WorkFlow_GetById]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[cms_WorkFlow_GetById] 
	@WorkFlowId INT
AS
 BEGIN
	SELECT [WorkflowId] as WorkFlowId, [FriendlyName] as FriendlyName, [IsDefault] as IsDefault
	FROM dbo.[Workflow]
	WHERE [WorkflowId] = @WorkFlowId
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_DeleteMetaDictionary]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_DeleteMetaDictionary]
	@MetaDictionaryId	INT
AS
BEGIN
	-- Step 0. Prepare
	SET NOCOUNT ON

	BEGIN TRAN

	IF NOT EXISTS(SELECT * FROM MetaDictionary WHERE MetaDictionaryId = @MetaDictionaryId)
	BEGIN
		RAISERROR ('Wrong @MetaDictionaryId.', 16, 1)
		GOTO ERR
	END

	DELETE FROM MetaDictionary WHERE MetaDictionaryId = @MetaDictionaryId

	IF @@ERROR <> 0 GOTO ERR

	COMMIT TRAN
	RETURN
ERR:
	ROLLBACK TRAN
	RETURN @@Error
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Market_Delete]...';


GO

create procedure dbo.ecf_Market_Delete
    @MarketId nvarchar(8)
as
begin
    delete from dbo.Market
    where MarketId = @MarketId
end
GO
PRINT N'Creating [dbo].[mc_mcmd_MetaFileSelect]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaFileSelect]
(
@FileId int
)
AS
    SET NOCOUNT ON
SELECT [FileId],
[FileUID],
[FileName],
[Body],
DATALENGTH(Body) as Length FROM mcmd_MetaFile
WHERE
[FileId] = @FileId
GO
PRINT N'Creating [dbo].[GetOrderSchemaVersionNumber]...';


GO
CREATE PROCEDURE [dbo].[GetOrderSchemaVersionNumber]
AS
	with PatchVersion (Major, Minor, Patch) as
		(SELECT max([Major]) as Major,
			max([Minor]) as Minor,
			max([Patch]) as Patch
			FROM [SchemaVersion_OrderSystem]),
	PatchDate (Major, Minor, Patch, InstallDate) as 
		(SELECT Major, Minor, Patch, InstallDate from [SchemaVersion_OrderSystem])
	SELECT PD.Major as Major, PD.Minor as Minor, PD.Patch as Patch, PD.InstallDate as InstallDate 
		FROM PatchDate PD, PatchVersion PV 
		WHERE PD.[Major]=PV.[Major] AND 
			PD.[Minor]=PV.[Minor] AND 
			PD.[Patch]=PV.[Patch]
GO
PRINT N'Creating [dbo].[cms_WorkFlow_GetAll]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[cms_WorkFlow_GetAll] 
	@ApplicationId uniqueidentifier
AS
 begin
	SELECT [WorkflowId] as WorkFlowId,
		 [FriendlyName] as FriendlyName,
		 [IsDefault] as IsDefault
	FROM dbo.[Workflow]
	WHERE ApplicationId = @ApplicationId
 end
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Market_Update]...';


GO

create procedure dbo.ecf_Market_Update
    @MarketId nvarchar(8),
    @IsEnabled bit,
    @MarketName nvarchar(50),
    @MarketDescription nvarchar(4000),
    @DefaultCurrencyCode nvarchar(8),
    @DefaultLanguageCode nvarchar(84),
    @CurrencyCodes udttCurrencyCode readonly,
    @LanguageCodes udttLanguageCode readonly,
    @CountryCodes udttCountryCode readonly
as
begin
    begin try
        declare @initialTranCount int = @@TRANCOUNT
        if @initialTranCount = 0 begin transaction

        if not exists (select 1 from @CurrencyCodes where CurrencyCode = @DefaultCurrencyCode) raiserror('Default currency must be included in the currency list.', 10, 0)
        if not exists (select 1 from @LanguageCodes where LanguageCode = @DefaultLanguageCode) raiserror('Default language must be included in the language list.', 10, 0)            

        update dbo.Market
        set Modified = GETUTCDATE(), IsEnabled = @IsEnabled, MarketName = @MarketName, MarketDescription = @MarketDescription, DefaultCurrencyCode = @DefaultCurrencyCode, DefaultLanguageCode = @DefaultLanguageCode
        where MarketId = @MarketId
        
        delete mc
        from dbo.MarketCurrencies mc
        where mc.MarketId = @MarketId
          and not exists (select 1 from @CurrencyCodes cc where mc.CurrencyCode = cc.CurrencyCode)
        
        insert into dbo.MarketCurrencies (MarketId, CurrencyCode)
        select @MarketId, CurrencyCode
        from @CurrencyCodes cc
        where not exists (select 1 from dbo.MarketCurrencies mc where mc.MarketId = @MarketId and mc.CurrencyCode = cc.CurrencyCode)
        
        delete ml
        from dbo.MarketLanguages ml
        where ml.MarketId = @MarketId
          and not exists (select 1 from @LanguageCodes cc where ml.LanguageCode = cc.LanguageCode)
        
        insert into dbo.MarketLanguages (MarketId, LanguageCode)
        select @MarketId, LanguageCode
        from @LanguageCodes lc
        where not exists (select 1 from dbo.MarketLanguages ml where ml.MarketId = @MarketId and ml.LanguageCode = lc.LanguageCode)

        delete mc
        from dbo.MarketCountries mc
        where mc.MarketId = @MarketId
          and not exists (select 1 from @CountryCodes cc where mc.CountryCode = cc.CountryCode)

        insert into dbo.MarketCountries (MarketId, CountryCode)
        select @MarketId, CountryCode
        from @CountryCodes cc
        where not exists (select 1 from dbo.MarketCountries mc where mc.MarketId = @MarketId and mc.CountryCode = cc.CountryCode)

        if @initialTranCount = 0 commit transaction ecf_Market_Update
    end try
    begin catch
        declare @msg nvarchar(4000), @severity int, @state int
        select @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE()
        if @initialTranCount = 0 rollback transaction
        raiserror(@msg, @severity, @state)
    end catch
end
GO
PRINT N'Creating [dbo].[mc_mcmd_MetaFileInsert]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaFileInsert]
(
@FileId int = NULL OUTPUT,
@FileUID uniqueidentifier,
@FileName nvarchar(510)
)
AS
    SET NOCOUNT ON
INSERT INTO [mcmd_MetaFile]
(
[FileUID],
[FileName])
VALUES(
@FileUID,
@FileName)
SELECT @FileId = SCOPE_IDENTITY();
RETURN @@Error
GO
PRINT N'Creating [dbo].[mc_OrderGroupLockSelect]...';


GO
CREATE PROCEDURE [dbo].[mc_OrderGroupLockSelect]
@OrderLockId AS Int
AS
BEGIN
SET NOCOUNT ON;

SELECT [t01].[OrderLockId] AS [OrderLockId], [t01].[CustomerId] AS [CustomerId], [t01].[Created] AS [Created], [t01].[OrderGroupId] AS [OrderGroupId]
FROM [OrderGroupLock] AS [t01]
WHERE ([t01].[OrderLockId]=@OrderLockId)

END
GO
PRINT N'Creating [dbo].[ecf_Setting_Name]...';


GO
CREATE PROCEDURE [dbo].[ecf_Setting_Name]
	@ApplicationId uniqueidentifier,
	@Name nvarchar(100)
AS
BEGIN
	select * from [CommonSettings] 
		where [ApplicationId] = @ApplicationId and [Name] = @Name
END
GO
PRINT N'Creating [dbo].[cms_WorkFlow_Delete]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
create PROCEDURE [dbo].[cms_WorkFlow_Delete] 
	@WorkFlowId INT
AS
 BEGIN
--dodelat
	DELETE FROM Workflow WHERE [WorkflowId] = @WorkFlowId
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_DeleteMetaClassProcedure]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_DeleteMetaClassProcedure]
	@MetaClassId	INT
AS
	SET NOCOUNT ON

BEGIN TRAN
	IF NOT EXISTS( SELECT * FROM MetaClass WHERE MetaClassId = @MetaClassId)
	BEGIN
		RAISERROR ('Wrong @MetaClassId. The class is system or not existed.', 16,1)
		GOTO ERR
	END

	-- Step 1. Create SQL Code
	PRINT'Step 1. Create SQL Code'

	DECLARE	@MetaClassTable			NVARCHAR(256)
	DECLARE	@MetaClassGetSpName			NVARCHAR(256)
	DECLARE	@MetaClassUpdateSpName		NVARCHAR(256)
	DECLARE	@MetaClassDeleteSpName		NVARCHAR(256)
	DECLARE	@MetaClassListSpName		NVARCHAR(256)

	SELECT @MetaClassTable = TableName FROM MetaClass WHERE MetaClassId = @MetaClassId

	SET @MetaClassGetSpName 		= 'mdpsp_avto_' +@MetaClassTable +'_Get'
	SET @MetaClassUpdateSpName 	= 'mdpsp_avto_' +@MetaClassTable +'_Update'
	SET @MetaClassDeleteSpName 	= 'mdpsp_avto_' +@MetaClassTable +'_Delete'
	SET @MetaClassListSpName 	= 'mdpsp_avto_' +@MetaClassTable +'_List'

	-- Step 2. Drop operation
	PRINT'Step 2. Drop operation'

	if exists (select * from dbo.sysobjects where id = object_id(@MetaClassUpdateSpName) and OBJECTPROPERTY(id, N'IsProcedure') = 1)
		EXEC('drop procedure ' + @MetaClassUpdateSpName)
	IF @@ERROR <> 0 GOTO ERR

	if exists (select * from dbo.sysobjects where id = object_id(@MetaClassGetSpName) and OBJECTPROPERTY(id, N'IsProcedure') = 1)
		EXEC('drop procedure ' + @MetaClassGetSpName)
	IF @@ERROR <> 0 GOTO ERR

	if exists (select * from dbo.sysobjects where id = object_id(@MetaClassDeleteSpName) and OBJECTPROPERTY(id, N'IsProcedure') = 1)
		EXEC('drop procedure ' + @MetaClassDeleteSpName)
	IF @@ERROR <> 0 GOTO ERR

	if exists (select * from dbo.sysobjects where id = object_id(@MetaClassListSpName) and OBJECTPROPERTY(id, N'IsProcedure') = 1)
		EXEC('drop procedure ' + @MetaClassListSpName)
	IF @@ERROR <> 0 GOTO ERR

	COMMIT TRAN
	--PRINT('COMMIT TRAN')
RETURN

ERR:
	ROLLBACK TRAN
	--PRINT('ROLLBACK TRAN')
RETURN
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Market_Create]...';


GO

create procedure dbo.ecf_Market_Create
    @MarketId nvarchar(8),
    @IsEnabled bit,
    @MarketName nvarchar(50),
    @MarketDescription nvarchar(4000),
    @DefaultCurrencyCode nvarchar(8),
    @DefaultLanguageCode nvarchar(84),
    @CurrencyCodes udttCurrencyCode readonly,
    @LanguageCodes udttLanguageCode readonly,
    @CountryCodes udttCountryCode readonly
as
begin
    begin try
        declare @initialTranCount int = @@TRANCOUNT
        if @initialTranCount = 0 begin transaction

        if not exists (select 1 from @CurrencyCodes where CurrencyCode = @DefaultCurrencyCode) raiserror('Default currency must be included in the currency list.', 10, 0)
        if not exists (select 1 from @LanguageCodes where LanguageCode = @DefaultLanguageCode) raiserror('Default language must be included in the language list.', 10, 0)            

        insert into dbo.Market (MarketId, Created, Modified, IsEnabled, MarketName, MarketDescription, DefaultCurrencyCode, DefaultLanguageCode)
        values (@MarketId, GETUTCDATE(), GETUTCDATE(), @IsEnabled, @MarketName, @MarketDescription, @DefaultCurrencyCode, @DefaultLanguageCode)
        
        insert into dbo.MarketCurrencies (MarketId, CurrencyCode)
        select distinct @MarketId, CurrencyCode
        from @CurrencyCodes
        
        insert into dbo.MarketLanguages (MarketId, LanguageCode)
        select distinct @MarketId, LanguageCode
        from @LanguageCodes
        
        insert into dbo.MarketCountries (MarketId, CountryCode)
        select distinct @MarketId, CountryCode
        from @CountryCodes

        if @initialTranCount = 0 commit transaction ecf_Market_Create
    end try
    begin catch
        declare @msg nvarchar(4000), @severity int, @state int
        select @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE()
        if @initialTranCount = 0 rollback transaction
        raiserror(@msg, @severity, @state)
    end catch
end
GO
PRINT N'Creating [dbo].[mc_mcmd_MetaFileDelete]...';


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaFileDelete]
(
@FileId int
)
AS
    SET NOCOUNT ON
DELETE FROM [mcmd_MetaFile]
WHERE
[FileId] = @FileId
RETURN @@Error
GO
PRINT N'Creating [dbo].[mc_OrderGroupLockDelete]...';


GO
CREATE PROCEDURE [dbo].[mc_OrderGroupLockDelete]
@OrderLockId AS Int
AS
BEGIN
SET NOCOUNT ON;

DELETE FROM [OrderGroupLock]
WHERE
[OrderLockId] = @OrderLockId

END
GO
PRINT N'Creating [dbo].[ecf_Setting_SettingId]...';


GO
CREATE PROCEDURE [dbo].[ecf_Setting_SettingId]
	@ApplicationId uniqueidentifier,
	@SettingId int
AS
BEGIN
	select * from [CommonSettings] 
		where [ApplicationId] = @ApplicationId and [SettingId] = @SettingId
END
GO
PRINT N'Creating [dbo].[cms_Workflow_Add]...';


GO
CREATE PROCEDURE [cms_Workflow_Add] 
	@FriendlyName nvarchar(250),
	@IsDefault bit,
	@ApplicationId uniqueidentifier,
	@retval int output
AS
BEGIN
	INSERT INTO [Workflow] (FriendlyName, IsDefault, ApplicationId)
	VALUES (@FriendlyName, @IsDefault, @ApplicationId)
	SET @retval = SCOPE_IDENTITY()
END
GO
PRINT N'Creating [dbo].[mdpsp_sys_DeleteMetaAttribute]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_DeleteMetaAttribute]
	@AttrOwnerId		INT,
	@AttrOwnerType	INT,
	@Key			NVARCHAR(512)
AS
	DELETE FROM MetaAttribute WHERE AttrOwnerId = @AttrOwnerId AND AttrOwnerType = @AttrOwnerType AND [Key] = @Key
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Market_Get]...';


GO

create procedure dbo.ecf_Market_Get
    @MarketId nvarchar(8)
as
begin
    select
        m.MarketId,
        m.Created,
        m.Modified,
        m.IsEnabled,
        m.MarketName,
        m.MarketDescription,
        m.DefaultCurrencyCode,
        m.DefaultLanguageCode
    from dbo.Market m
    where m.MarketId = @MarketId
    
    select MarketId, CurrencyCode
    from dbo.MarketCurrencies
    where MarketId = @MarketId
    
    select MarketId, LanguageCode
    from dbo.MarketLanguages
    where MarketId = @MarketId

    select MarketId, CountryCode
    from dbo.MarketCountries
    where MarketId = @MarketId
end
GO
PRINT N'Creating [dbo].[mc_mcmd_TmpMetaFileMove]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[mc_mcmd_TmpMetaFileMove] 
	@FileUid uniqueidentifier
AS
            SET NOCOUNT ON

	INSERT INTO mcmd_MetaFile (FileUID, [FileName], Body)
	SELECT FileUID, [FileName], Body FROM mcmd_TmpMetaFile WHERE FileUID=@FileUid

	DELETE FROM mcmd_TmpMetaFile WHERE FileUID=@FileUID
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_OrderGroupLockUpdate]...';


GO
CREATE PROCEDURE [dbo].[mc_OrderGroupLockUpdate]
@CustomerId AS UniqueIdentifier,
@Created AS DateTime,
@OrderGroupId AS Int,
@OrderLockId AS Int
AS
BEGIN
SET NOCOUNT ON;

UPDATE [OrderGroupLock] SET
[CustomerId] = @CustomerId,
[Created] = @Created,
[OrderGroupId] = @OrderGroupId WHERE
[OrderLockId] = @OrderLockId

END
GO
PRINT N'Creating [dbo].[ecf_Settings]...';


GO
CREATE PROCEDURE [dbo].[ecf_Settings]
	@ApplicationId uniqueidentifier
AS
BEGIN
	select * from [CommonSettings] 
		where [ApplicationId] = @ApplicationId
END
GO
PRINT N'Creating [dbo].[cms_TemplatesLoadById]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
create PROCEDURE [dbo].[cms_TemplatesLoadById]
	@ApplicationId uniqueidentifier,
	@TemplateId int
 AS
SELECT *
	FROM dbo.main_Templates
	WHERE (([TemplateId] = @TemplateId) OR (@TemplateId = 0)) and ApplicationId = @ApplicationId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_DeleteDContrainByTableAndField]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_DeleteDContrainByTableAndField]
	@TableName	NVARCHAR(256),
	@FieldName	NVARCHAR(256)
AS
	SET NOCOUNT ON

	DECLARE @DConstrainName NVARCHAR(256)

	DECLARE DConstrainCursor CURSOR local FOR
	    select df_constraints.name
	    from sys.objects df_constraints
	    join sys.columns cols on df_constraints.object_id = cols.default_object_id
	    where cols.object_id = OBJECT_ID(@TableName, 'TABLE')
	      and cols.name = @FieldName

	OPEN DConstrainCursor

	FETCH NEXT FROM DConstrainCursor  INTO @DConstrainName

	WHILE @@FETCH_STATUS = 0
	BEGIN
		EXEC('ALTER TABLE [dbo].[' + @TableName +'] DROP  CONSTRAINT '+ @DConstrainName)
		--
		FETCH NEXT FROM DConstrainCursor  INTO @DConstrainName
	END

	CLOSE DConstrainCursor
	DEALLOCATE DConstrainCursor
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Market_GetAll]...';


GO

create procedure dbo.ecf_Market_GetAll
as
begin
    select MarketId, Created, Modified, IsEnabled, MarketName, MarketDescription, DefaultCurrencyCode, DefaultLanguageCode
    from dbo.Market
    
    select MarketId, CurrencyCode
    from dbo.MarketCurrencies
    
    select MarketId, LanguageCode
    from dbo.MarketLanguages

    select MarketId, CountryCode
    from dbo.MarketCountries
end
GO
PRINT N'Creating [dbo].[mc_tempsp_Remove]...';


GO
CREATE PROCEDURE [dbo].[mc_tempsp_Remove]
	@ExpirationDate DateTime
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @SpName NVARCHAR(255)
	DECLARE @DelQuery NVARCHAR(512)

	DECLARE TempSpList_Cursor CURSOR FOR
	SELECT name FROM dbo.sysobjects 
	WHERE 
		crdate <= @ExpirationDate AND
		name like N'tempsp_%' AND 
		OBJECTPROPERTY(id, N'IsProcedure') = 1

	OPEN TempSpList_Cursor

	FETCH NEXT FROM TempSpList_Cursor 
	INTO @SpName

	WHILE @@FETCH_STATUS = 0
	   BEGIN
			SET @DelQuery = N'DROP PROCEDURE [dbo].[' + @SpName +N']'
			--PRINT @DelQuery
			EXECUTE sp_executesql @DelQuery

			FETCH NEXT FROM TempSpList_Cursor 
			INTO @SpName
	   END

	CLOSE TempSpList_Cursor;
	DEALLOCATE TempSpList_Cursor;
END
GO
PRINT N'Creating [dbo].[mc_OrderGroupLockInsert]...';


GO
CREATE PROCEDURE [dbo].[mc_OrderGroupLockInsert]
@CustomerId AS UniqueIdentifier,
@Created AS DateTime,
@OrderGroupId AS Int,
@OrderLockId AS Int = NULL OUTPUT
AS
BEGIN
SET NOCOUNT ON;

INSERT INTO [OrderGroupLock]
(
[CustomerId],
[Created],
[OrderGroupId])
VALUES(
@CustomerId,
@Created,
@OrderGroupId)
SELECT @OrderLockId = SCOPE_IDENTITY();

END
GO
PRINT N'Creating [dbo].[ecf_Site]...';


GO

CREATE PROCEDURE [dbo].[ecf_Site]
    @ApplicationId uniqueidentifier,
	@SiteId uniqueidentifier = null
AS
BEGIN

	if(LEN(@SiteId) = 0)
		set @SiteId = null

	SELECT S.* from [Site] S
	WHERE
		S.ApplicationId = @ApplicationId AND
		S.SiteId = COALESCE(@SiteId, S.SiteId)

	SELECT G.* from [main_GlobalVariables] G
	WHERE
		G.SiteId = COALESCE(@SiteId, G.SiteId)

	SELECT L.* from [SiteLanguage] L
	WHERE
		L.SiteId = COALESCE(@SiteId, L.SiteId)



/*
	SELECT APPS.* from ApplicationSite APPS
	WHERE
		APPS.ApplicationId = @ApplicationId AND
		APPS.SiteId = COALESCE(@SiteId, APPS.SiteId)

	exec [ecf_Site_Permissions] @ApplicationId, @SiteId
*/

END
GO
PRINT N'Creating [dbo].[cms_Site]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[cms_Site]
    @ApplicationId uniqueidentifier,
	@SiteId uniqueidentifier = null,
	@ReturnInactive bit = 0
AS
BEGIN
	if(LEN(@SiteId) = 0)
		set @SiteId = null

	SELECT S.* from [Site] S
	WHERE
		S.ApplicationId = @ApplicationId AND
		(S.IsActive = 1 or @ReturnInactive = 1) AND 
		S.SiteId = COALESCE(@SiteId, S.SiteId)

	SELECT G.* from [main_GlobalVariables] G
		INNER JOIN [Site] S ON G.SiteId = S.SiteId
	WHERE
		S.ApplicationId = @ApplicationId AND
		(S.IsActive = 1 or @ReturnInactive = 1) AND 
		S.SiteId = COALESCE(@SiteId, S.SiteId)

	SELECT L.* from [SiteLanguage] L
		INNER JOIN [Site] S ON L.SiteId = S.SiteId
	WHERE
		S.ApplicationId = @ApplicationId AND 
		(S.IsActive = 1 or @ReturnInactive = 1) AND 
		S.SiteId = COALESCE(@SiteId, S.SiteId)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Currency_Delete]...';


GO

create procedure dbo.ecf_Currency_Delete
    @CurrencyCode nvarchar(8)
as
begin
    delete from dbo.Currency
    where CurrencyCode = @CurrencyCode
end
GO
PRINT N'Creating [dbo].[mc_tempsp_RemoveAll]...';


GO

CREATE PROCEDURE [dbo].[mc_tempsp_RemoveAll]
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @SpName NVARCHAR(255)
	DECLARE @DelQuery NVARCHAR(512)

	DECLARE TempSpList_Cursor CURSOR FOR
	SELECT name FROM dbo.sysobjects 
	WHERE 
		name like N'tempsp_%' AND 
		OBJECTPROPERTY(id, N'sProcedure') = 1

	OPEN TempSpList_Cursor

	FETCH NEXT FROM TempSpList_Cursor 
	INTO @SpName

	WHILE @@FETCH_STATUS = 0
	   BEGIN
			SET @DelQuery = N'DROP PROCEDURE [dbo].[' + @SpName +N']'
			--PRINT @DelQuery
			EXECUTE sp_executesql @DelQuery

			FETCH NEXT FROM TempSpList_Cursor 
			INTO @SpName
	   END

	CLOSE TempSpList_Cursor;
	DEALLOCATE TempSpList_Cursor;
END
GO
PRINT N'Creating [dbo].[cms_PageStateGetById]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[cms_PageStateGetById]
	@StateId INT
AS
 BEGIN
	SELECT [StateId], [FriendlyName] FROM [main_PageState]
	WHERE [StateId] = @StateId
 END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Currency_Update]...';


GO

create procedure dbo.ecf_Currency_Update
    @CurrencyCode nvarchar(8),
    @CurrencyName nvarchar(50)
as
begin
    update dbo.Currency
    set Modified = GETUTCDATE(), CurrencyName = @CurrencyName
    where CurrencyCode = @CurrencyCode
end
GO
PRINT N'Creating [dbo].[mc_tempsp_List]...';


GO

CREATE PROCEDURE [dbo].[mc_tempsp_List]
AS
BEGIN
	SET NOCOUNT ON;

	SELECT name, crdate FROM dbo.[sysobjects]
	WHERE 
	name like N'tempsp_%' AND 
	OBJECTPROPERTY(id, N'IsProcedure') = 1
END
GO
PRINT N'Creating [dbo].[mc_OrderGroupNoteDelete]...';


GO
CREATE PROCEDURE [dbo].[mc_OrderGroupNoteDelete]
@OrderNoteId AS Int
AS
BEGIN
SET NOCOUNT ON;

DELETE FROM [OrderGroupNote]
WHERE
[OrderNoteId] = @OrderNoteId

END
GO
PRINT N'Creating [dbo].[ecf_ApplicationLog_LogId]...';


GO
CREATE PROCEDURE [dbo].[ecf_ApplicationLog_LogId]
	@LogId int
AS
BEGIN
	SELECT AL.* FROM ApplicationLog AL WHERE LogId = @LogId
END
GO
PRINT N'Creating [dbo].[cms_PageStateGetAll]...';


GO
CREATE PROCEDURE [cms_PageStateGetAll]
	@ApplicationId uniqueidentifier
AS
	SELECT [StateId], [FriendlyName] FROM [main_PageState] 
	WHERE [ApplicationId] = @ApplicationId
GO
PRINT N'Creating [dbo].[mdpsp_sys_CreateMetaClassProcedure]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO

create procedure [dbo].[mdpsp_sys_CreateMetaClassProcedure]
    @MetaClassId int
as
begin
    set nocount on
    begin try
        declare @CRLF nchar(1) = CHAR(10)
        declare @MetaClassName nvarchar(256)
        declare @TableName sysname
        select @MetaClassName = Name, @TableName = TableName from MetaClass where MetaClassId = @MetaClassId
        if @MetaClassName is null raiserror('Metaclass not found.',16,1)

        declare @azureCompatible bit
        SET @azureCompatible = (SELECT TOP 1 AzureCompatible FROM dbo.AzureCompatible)
		
        -- get required info for each field
        declare @ParameterIndex int
        declare @ColumnName sysname
        declare @FieldIsMultilanguage bit
        declare @FieldIsEncrypted bit
        declare @FieldIsNullable bit
        declare @ColumnDataType sysname
        declare fields cursor local for
            select
                mfindex.ParameterIndex,
                mf.Name as ColumnName,
                mf.MultiLanguageValue as FieldIsMultilanguage,
                mf.IsEncrypted as FieldIsEncrypted,
                mf.AllowNulls,
                mdt.SqlName + case
                        when mdt.Variable = 1 then '(' + CAST(mf.Length as nvarchar) + ')'
                        when mf.DataTypeId in (5,24) and mfprecis.Value is not null and mfscale.Value is not null then '(' + cast(mfprecis.Value as nvarchar) + ',' + cast(mfscale.Value as nvarchar) + ')'
                        else '' end as ColumnDataType
            from (
                select ROW_NUMBER() over (order by innermf.Name) as ParameterIndex, innermf.MetaFieldId
                from MetaField innermf
                where innermf.SystemMetaClassId = 0
                  and exists (select 1 from MetaClassMetaFieldRelation cfr where cfr.MetaClassId = @MetaClassId and cfr.MetaFieldId = innermf.MetaFieldId)) mfindex
            join MetaField mf on mfindex.MetaFieldId = mf.MetaFieldId
            join MetaDataType mdt on mf.DataTypeId = mdt.DataTypeId
            left outer join MetaAttribute mfprecis on mf.MetaFieldId = mfprecis.AttrOwnerId and mfprecis.AttrOwnerType = 2 and mfprecis.[Key] = 'MdpPrecision'
            left outer join MetaAttribute mfscale on mf.MetaFieldId = mfscale.AttrOwnerId and mfscale.AttrOwnerType = 2 and mfscale.[Key] = 'MdpScale'

        -- aggregate field parts into lists for stored procedures
        declare @ParameterName nvarchar(max)
        declare @ColumnReadBase nvarchar(max)
        declare @ColumnReadLocal nvarchar(max)
        declare @WriteValue nvarchar(max)
        declare @ParameterDefinitions nvarchar(max) = ''
        declare @UnlocalizedSelectValues nvarchar(max) = ''
        declare @LocalizedSelectValues nvarchar(max) = ''
        declare @AllInsertColumns nvarchar(max) = ''
        declare @AllInsertValues nvarchar(max) = ''
        declare @BaseInsertColumns nvarchar(max) = ''
        declare @BaseInsertValues nvarchar(max) = ''
        declare @LocalInsertColumns nvarchar(max) = ''
        declare @LocalInsertValues nvarchar(max) = ''
        declare @AllUpdateActions nvarchar(max) = ''
        declare @BaseUpdateActions nvarchar(max) = ''
        declare @LocalUpdateActions nvarchar(max) = ''
        open fields
        while 1=1
        begin
            fetch next from fields into @ParameterIndex, @ColumnName, @FieldIsMultilanguage, @FieldIsEncrypted, @FieldIsNullable, @ColumnDataType
            if @@FETCH_STATUS != 0 break

            set @ParameterName = '@f' + cast(@ParameterIndex as nvarchar(10))
            set @ColumnReadBase = case when @azureCompatible <> 1 and @FieldIsEncrypted = 1 then 'dbo.mdpfn_sys_EncryptDecryptString(T.[' + @ColumnName + '],0)' + ' as [' + @ColumnName + ']' else 'T.[' + @ColumnName + ']' end
            set @ColumnReadLocal = case when @azureCompatible <> 1 and @FieldIsEncrypted = 1 then 'dbo.mdpfn_sys_EncryptDecryptString(L.[' + @ColumnName + '],0)' + ' as [' + @ColumnName + ']' else 'L.[' + @ColumnName + ']' end
            set @WriteValue = case when @azureCompatible <> 1 and @FieldIsEncrypted = 1 then 'dbo.mdpfn_sys_EncryptDecryptString(' + @ParameterName + ',1)' else @ParameterName end

            set @ParameterDefinitions = @ParameterDefinitions + ',' + @ParameterName + ' ' + @ColumnDataType
            set @UnlocalizedSelectValues = @UnlocalizedSelectValues + ',' + @ColumnReadBase
            set @LocalizedSelectValues = @LocalizedSelectValues + ',' + case when @FieldIsMultilanguage = 1 then @ColumnReadLocal else @ColumnReadBase end
            set @AllInsertColumns = @AllInsertColumns + ',[' + @ColumnName + ']'
            set @AllInsertValues = @AllInsertValues + ',' + @WriteValue
            set @BaseInsertColumns = @BaseInsertColumns + case when @FieldIsMultilanguage = 0 then ',[' + @ColumnName + ']' else '' end
            set @BaseInsertValues = @BaseInsertValues + case when @FieldIsMultilanguage = 0 then ',' + @WriteValue else '' end
            set @LocalInsertColumns = @LocalInsertColumns + case when @FieldIsMultilanguage = 1 then ',[' + @ColumnName + ']' else '' end
            set @LocalInsertValues = @LocalInsertValues + case when @FieldIsMultilanguage = 1 then ',' + @WriteValue else '' end
            set @AllUpdateActions = @AllUpdateActions + ',[' + @ColumnName + ']=' + @WriteValue
            set @BaseUpdateActions = @BaseUpdateActions + ',[' + @ColumnName + ']=' + case when @FieldIsMultilanguage = 0 then @WriteValue when @FieldIsNullable = 1 then 'null' else 'default' end
            set @LocalUpdateActions = @LocalUpdateActions + ',[' + @ColumnName + ']=' + case when @FieldIsMultilanguage = 1 then @WriteValue when @FieldIsNullable = 1 then 'null' else 'default' end
        end
        close fields

        declare @OpenEncryptionKey nvarchar(max)
        declare @CloseEncryptionKey nvarchar(max)
        if exists(  select 1
                    from MetaField mf
                    join MetaClassMetaFieldRelation cfr on mf.MetaFieldId = cfr.MetaFieldId
                    where cfr.MetaClassId = @MetaClassId and mf.SystemMetaClassId = 0 and mf.IsEncrypted = 1) and @azureCompatible <> 1
        begin
            set @OpenEncryptionKey = 'exec dbo.mdpsp_sys_OpenSymmetricKey' + @CRLF
            set @CloseEncryptionKey = 'exec dbo.mdpsp_sys_CloseSymmetricKey' + @CRLF
        end
        else
        begin
            set @OpenEncryptionKey = ''
            set @CloseEncryptionKey = ''
        end

        -- create stored procedures
        declare @procedures table (name sysname, defn nvarchar(max), verb nvarchar(max))

        insert into @procedures (name, defn)
        values ('mdpsp_avto_' + @TableName + '_Get',
            'procedure dbo.[mdpsp_avto_' + @TableName + '_Get] @ObjectId int,@Language nvarchar(20)=null as ' + @CRLF +
            'begin' + @CRLF +
            @OpenEncryptionKey +
            'if @Language is null select T.ObjectId,T.CreatorId,T.Created,T.ModifierId,T.Modified' + @UnlocalizedSelectValues + @CRLF +
            'from [' + @TableName + '] T where ObjectId=@ObjectId' + @CRLF +
            'else select T.ObjectId,T.CreatorId,T.Created,T.ModifierId,T.Modified' + @LocalizedSelectValues + @CRLF +
            'from [' + @TableName + '] T' + @CRLF +
            'left join [' + @TableName + '_Localization] L on T.ObjectId=L.ObjectId and L.Language=@Language' + @CRLF +
            'where T.ObjectId= @ObjectId' + @CRLF +
            @CloseEncryptionKey +
            'end' + @CRLF)

        insert into @procedures (name, defn)
        values ('mdpsp_avto_' + @TableName + '_Update',
            'procedure dbo.[mdpsp_avto_' + @TableName + '_Update]' + @CRLF +
            '@ObjectId int,@Language nvarchar(20)=null,@CreatorId nvarchar(100),@Created datetime,@ModifierId nvarchar(100),@Modified datetime,@Retval int out' + @ParameterDefinitions + ' as' + @CRLF +
            'begin' + @CRLF +
            'set nocount on' + @CRLF +
            'declare @ins bit' + @CRLF +
            'begin try' + @CRLF +
            'begin transaction' + @CRLF +
            @OpenEncryptionKey +
            'if @ObjectId=-1 select @ObjectId=isnull(MAX(ObjectId),0)+1, @Retval=@ObjectId, @ins=0 from [' + @TableName + ']' + @CRLF +
            'else set @ins=case when exists(select 1 from [' + @TableName + '] where ObjectId=@ObjectId) then 0 else 1 end' + @CRLF +
            'if @Language is null' + @CRLF +
            'begin' + @CRLF +
            '  if @ins=1 insert [' + @TableName + '] (ObjectId,CreatorId,Created,ModifierId,Modified' + @AllInsertColumns + ')' + @CRLF +
            '  values (@ObjectId,@CreatorId,@Created,@ModifierId,@Modified' + @AllInsertValues + ')' + @CRLF +
            '  else update [' + @TableName + '] set CreatorId=@CreatorId,Created=@Created,ModifierId=@ModifierId,Modified=@Modified' + @AllUpdateActions + @CRLF +
            '  where ObjectId=@ObjectId' + @CRLF +
            'end' + @CRLF +
            'else' + @CRLF +
            'begin' + @CRLF +
            '  if @ins=1 insert [' + @TableName + '] (ObjectId,CreatorId,Created,ModifierId,Modified' + @BaseInsertColumns + ')' + @CRLF +
            '  values (@ObjectId,@CreatorId,@Created,@ModifierId,@Modified' + @BaseInsertValues + ')' + @CRLF +
            '  else update [' + @TableName + '] set CreatorId=@CreatorId,Created=@Created,ModifierId=@ModifierId,Modified=@Modified' + @BaseUpdateActions + @CRLF +
            '  where ObjectId=@ObjectId' + @CRLF +
            '  if not exists (select 1 from [' + @TableName + '_Localization] where ObjectId=@ObjectId and Language=@Language)' + @CRLF +
            '  insert [' + @TableName + '_Localization] (ObjectId,Language,ModifierId,Modified' + @LocalInsertColumns + ')' + @CRLF +
            '  values (@ObjectId,@Language,@ModifierId,@Modified' + @LocalInsertValues + ')' + @CRLF +
            '  else update [' + @TableName + '_Localization] set ModifierId=@ModifierId,Modified=@Modified' + @LocalUpdateActions + @CRLF +
            '  where ObjectId=@ObjectId and Language=@language' + @CRLF +
            'end' + @CRLF +
            @CloseEncryptionKey +
            'commit transaction' + @CRLF +
            'end try' + @CRLF +
            'begin catch' + @CRLF +
            '  declare @m nvarchar(4000),@v int,@t int' + @CRLF +
            '  select @m=ERROR_MESSAGE(),@v=ERROR_SEVERITY(),@t=ERROR_STATE()' + @CRLF +
            '  rollback transaction' + @CRLF +
            '  raiserror(@m, @v, @t)' + @CRLF +
            'end catch' + @CRLF +
            'end' + @CRLF)

        insert into @procedures (name, defn)
        values ('mdpsp_avto_' + @TableName + '_Delete',
            'procedure dbo.[mdpsp_avto_' + @TableName + '_Delete] @ObjectId int as' + @CRLF +
            'begin' + @CRLF +
            'delete [' + @TableName + '] where ObjectId=@ObjectId' + @CRLF +
			'delete [' + @TableName + '_Localization] where ObjectId=@ObjectId' + @CRLF +
            'exec dbo.mdpsp_sys_DeleteMetaKeyObjects ' + CAST(@MetaClassId as nvarchar(10)) + ',-1,@ObjectId' + @CRLF +
            'end' + @CRLF)

        insert into @procedures (name, defn)
        values ('mdpsp_avto_' + @TableName + '_List',
            'procedure dbo.[mdpsp_avto_' + @TableName + '_List] @Language nvarchar(20)=null,@select_list nvarchar(max)='''',@search_condition nvarchar(max)='''' as' + @CRLF +
            'begin' + @CRLF +
            @OpenEncryptionKey +
            'if @Language is null select T.ObjectId,T.CreatorId,T.Created,T.ModifierId,T.Modified' + @UnlocalizedSelectValues + ' from [' + @TableName + '] T' + @CRLF +
            'else select T.ObjectId,T.CreatorId,T.Created,T.ModifierId,T.Modified' + @LocalizedSelectValues + @CRLF +
            'from [' + @TableName + '] T' + @CRLF +
            'left join [' + @TableName + '_Localization] L on T.ObjectId=L.ObjectId and L.Language=@Language' + @CRLF +
            @CloseEncryptionKey +
            'end' + @CRLF)

        insert into @procedures (name, defn)
        values ('mdpsp_avto_' + @TableName + '_Search',
            'procedure dbo.[mdpsp_avto_' + @TableName + '_Search] @Language nvarchar(20)=null,@select_list nvarchar(max)='''',@search_condition nvarchar(max)='''' as' + @CRLF +
            'begin' + @CRLF +
            'if len(@select_list)>0 set @select_list='',''+@select_list' + @CRLF +
            @OpenEncryptionKey +
            'if @Language is null exec(''select T.ObjectId,T.CreatorId,T.Created,T.ModifierId,T.Modified' + @UnlocalizedSelectValues + '''+@select_list+'' from [' + @TableName + '] T ''+@search_condition)' + @CRLF +
            'else exec(''select T.ObjectId,T.CreatorId,T.Created,T.ModifierId,T.Modified' + @LocalizedSelectValues + '''+@select_list+'' from [' + @TableName + '] T left join [' + @TableName + '_Localization] L on T.ObjectId=L.ObjectId and L.Language=@Language ''+@search_condition)' + @CRLF +
            @CloseEncryptionKey +
            'end' + @CRLF)

        update tgt
        set verb = case when r.ROUTINE_NAME is null then 'create ' else 'alter ' end
        from @procedures tgt
        left outer join INFORMATION_SCHEMA.ROUTINES r on r.ROUTINE_SCHEMA COLLATE DATABASE_DEFAULT = 'dbo' and r.ROUTINE_NAME COLLATE DATABASE_DEFAULT = tgt.name COLLATE DATABASE_DEFAULT

        -- install procedures
        declare @sqlstatement nvarchar(max)
        declare procedure_cursor cursor local for select verb + defn from @procedures
        open procedure_cursor
        while 1=1
        begin
            fetch next from procedure_cursor into @sqlstatement
            if @@FETCH_STATUS != 0 break
            exec(@sqlstatement)
        end
        close procedure_cursor
    end try
    begin catch
        declare @m nvarchar(4000), @v int, @t int
        select @m = ERROR_MESSAGE(), @v = ERROR_SEVERITY(), @t = ERROR_STATE()
        raiserror(@m,@v,@t)
    end catch
end
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Currency_Create]...';


GO

create procedure dbo.ecf_Currency_Create
    @CurrencyCode nvarchar(8),
    @CurrencyName nvarchar(50)
as
begin
    begin try
        declare @initialTranCount int = @@TRANCOUNT
        if @initialTranCount = 0 begin transaction
        
        if (select COUNT(*) from Application) != 1 raiserror('Multiple applications are not supported.', 10, 0)
        
        insert into dbo.Currency (CurrencyCode, Created, Modified, CurrencyName, CompatApplicationId)
        select @CurrencyCode, GETUTCDATE(), GETUTCDATE(), @CurrencyName, a.ApplicationId
        from Application a

        if @initialTranCount = 0 commit transaction
    end try
    begin catch
        declare @msg nvarchar(4000), @severity int, @state int
        select @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE()
        if @initialTranCount = 0 rollback transaction
        raiserror(@msg, @severity, @state)
    end catch
end
GO
PRINT N'Creating [dbo].[mc_mcmd_MetaEnumSelectMaxId]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[mc_mcmd_MetaEnumSelectMaxId]
(
@TypeName nvarchar(255)
)
AS
SELECT Max([Id])
FROM mcmd_MetaEnum
WHERE
[TypeName] = @TypeName
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mc_OrderGroupNoteUpdate]...';


GO
CREATE PROCEDURE [dbo].[mc_OrderGroupNoteUpdate]
@OrderGroupId AS Int,
@CustomerId AS UniqueIdentifier,
@Title AS NVarChar(4000),
@Type AS NVarChar(4000),
@Detail AS NText,
@Created AS DateTime,
@LineItemId AS Int,
@OrderNoteId AS Int
AS
BEGIN
SET NOCOUNT ON;

UPDATE [OrderGroupNote] SET
[OrderGroupId] = @OrderGroupId,
[CustomerId] = @CustomerId,
[Title] = @Title,
[Type] = @Type,
[Detail] = @Detail,
[Created] = @Created,
[LineItemId] = @LineItemId WHERE
[OrderNoteId] = @OrderNoteId

END
GO
PRINT N'Creating [dbo].[ecf_ApplicationLog]...';


GO
CREATE PROCEDURE [dbo].[ecf_ApplicationLog]
	@ApplicationId uniqueidentifier,
	@IsSystemLog bit = 0,
	@Source nvarchar(100) = null,
	@Created datetime = null,
	@Operation nvarchar(50) = null,
	@ObjectType nvarchar(50) = null,
    @StartingRec int,
	@NumRecords int
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @SystemLogKey nvarchar(100)
	SET @SystemLogKey = 'system'; 

	WITH OrderedLogs AS 
	(
		select *, row_number() over(order by LogId desc) as RowNumber from ApplicationLog 
			where ((@IsSystemLog = 1 AND Source = @SystemLogKey) OR (@IsSystemLog = 0 AND NOT Source = @SystemLogKey))
				AND COALESCE(@Source, Source) = Source 
				AND COALESCE(@Operation, Operation) = Operation 
				AND COALESCE(@ObjectType, ObjectType) = ObjectType 
				AND COALESCE(@Created, Created) >= Created
	),
	OrderedLogsCount(TotalCount) as
	(
		select count(LogId) from OrderedLogs
	)
	select LogId, Source, Operation, ObjectKey, ObjectType, Username, Created, Succeeded, IPAddress, Notes, ApplicationId, TotalCount from OrderedLogs, OrderedLogsCount
	where RowNumber between @StartingRec and @StartingRec + @NumRecords
	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[cms_page_PageVersionGetByUserId2]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[cms_page_PageVersionGetByUserId2] 
	@ApplicationId uniqueidentifier,
	@UserId uniqueidentifier,
	@RoleNames nvarchar(1000)
AS
BEGIN
SELECT  PV.[VersionId], PV.[TemplateId], PV.[VersionNum], PV.[LangId], PV.[StatusId], PV.[Created], PV.[CreatorUID], PV.[Edited], PV.[EditorUID], PV.[StateId], PV.[Comment], PV.[PageId], P.SiteId
	FROM main_PageVersion PV
		INNER JOIN main_PageTree P ON PV.PageId = P.PageId
		INNER JOIN [Site] S ON P.SiteId = S.SiteId 
	WHERE
		S.ApplicationId = @ApplicationId AND 
		PV.StatusId IN (
			SELECT StatusId FROM WorkflowStatusAccess
				WHERE 
					RoleId IN (SELECT Item from cms_splitlist(@RoleNames)) OR
					RoleId = N'Everyone'
			)
UNION	 		 
SELECT  PV.[VersionId], PV.[TemplateId], PV.[VersionNum], PV.[LangId], PV.[StatusId], PV.[Created], PV.[CreatorUID], PV.[Edited], PV.[EditorUID], PV.[StateId], PV.[Comment], PV.[PageId], P.SiteId
		FROM main_PageVersion PV
		INNER JOIN main_PageTree P ON PV.PageId = P.PageId
		INNER JOIN [Site] S ON P.SiteId = S.SiteId
	WHERE 
		S.ApplicationId = @ApplicationId AND
		PV.CreatorUID = @UserId  AND PV.StatusId = -1
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_DeleteMetaKeyObjects]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_DeleteMetaKeyObjects]
	@MetaClassId	INT,
	@MetaFieldId	INT	=	-1,
	@MetaObjectId	INT	=	-1
AS
	-- Delete MetaObjectValue
	DELETE FROM MetaObjectValue  WHERE MetaKey IN
		(SELECT MK.MetaKey FROM MetaKey MK WHERE
			(@MetaObjectId = MK.MetaObjectId OR @MetaObjectId = -1)  AND
			(@MetaClassId = MK.MetaClassId OR @MetaClassId = -1) AND
			(@MetaFieldId = MK.MetaFieldId  OR @MetaFieldId = -1)
		)

	 IF @@ERROR <> 0 GOTO ERR

	-- Delete MetaStringDictionaryValue
	if(@MetaFieldId = -1 and @MetaObjectId != -1 and @MetaClassId != -1)
		DELETE FROM MetaStringDictionaryValue  WHERE MetaKey IN
			(SELECT MK.MetaKey FROM MetaKey MK WHERE
				(@MetaObjectId = MK.MetaObjectId)  AND
				(@MetaClassId = MK.MetaClassId)
			)
	else
		DELETE FROM MetaStringDictionaryValue  WHERE MetaKey IN
			(SELECT MK.MetaKey FROM MetaKey MK WHERE
				(@MetaObjectId = MK.MetaObjectId OR @MetaObjectId = -1)  AND
				(@MetaClassId = MK.MetaClassId OR @MetaClassId = -1) AND
				(@MetaFieldId = MK.MetaFieldId  OR @MetaFieldId = -1)
			)

	 IF @@ERROR <> 0 GOTO ERR

	-- Delete MetaMultiValueDictionary
	DELETE FROM MetaMultiValueDictionary  WHERE MetaKey IN
		(SELECT MK.MetaKey FROM MetaKey MK WHERE
			(@MetaObjectId = MK.MetaObjectId OR @MetaObjectId = -1)  AND
			(@MetaClassId = MK.MetaClassId OR @MetaClassId = -1) AND
			(@MetaFieldId = MK.MetaFieldId  OR @MetaFieldId = -1)
		)

	 IF @@ERROR <> 0 GOTO ERR

	-- Delete Meta File
	DELETE FROM MetaFileValue  WHERE MetaKey IN
		(SELECT MK.MetaKey FROM MetaKey MK WHERE
			(@MetaObjectId = MK.MetaObjectId OR @MetaObjectId = -1)  AND
			(@MetaClassId = MK.MetaClassId OR @MetaClassId = -1) AND
			(@MetaFieldId = MK.MetaFieldId  OR @MetaFieldId = -1)
		)

	 IF @@ERROR <> 0 GOTO ERR

	-- Clear Meta Key
	if(@MetaFieldId = -1 and @MetaObjectId != -1 and @MetaClassId != -1)
	begin
		DELETE FROM MetaKey WHERE
			(@MetaObjectId = MetaObjectId) AND
			(@MetaClassId = MetaClassId)
	end
	else
	begin
		DELETE FROM MetaKey  WHERE
			(@MetaObjectId = MetaObjectId OR @MetaObjectId = -1)  AND
			(@MetaClassId = MetaClassId OR @MetaClassId = -1) AND
			(@MetaFieldId = MetaFieldId OR @MetaFieldId = -1)
	end

ERR:
	RETURN
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Currency_Get]...';


GO

create procedure dbo.ecf_Currency_Get
    @CurrencyCode nvarchar(8)
as
begin
    select CurrencyCode, CurrencyName
    from dbo.Currency
    where CurrencyCode = @CurrencyCode
end
GO
PRINT N'Creating [dbo].[GetBusinessFoundationSchemaVersionNumber]...';


GO
CREATE PROCEDURE [dbo].[GetBusinessFoundationSchemaVersionNumber]
AS
	with PatchVersion (Major, Minor, Patch) as
		(SELECT max([Major]) as Major,
			max([Minor]) as Minor,
			max([Patch]) as Patch
			FROM [SchemaVersion_BusinessFoundation]),
	PatchDate (Major, Minor, Patch, InstallDate) as 
		(SELECT Major, Minor, Patch, InstallDate from [SchemaVersion_BusinessFoundation])
	SELECT PD.Major as Major, PD.Minor as Minor, PD.Patch as Patch, PD.InstallDate as InstallDate 
		FROM PatchDate PD, PatchVersion PV 
		WHERE PD.[Major]=PV.[Major] AND 
			PD.[Minor]=PV.[Minor] AND 
			PD.[Patch]=PV.[Patch]
GO
PRINT N'Creating [dbo].[mc_OrderGroupNoteInsert]...';


GO
CREATE PROCEDURE [dbo].[mc_OrderGroupNoteInsert]
@OrderGroupId AS Int,
@CustomerId AS UniqueIdentifier,
@Title AS NVarChar(4000),
@Type AS NVarChar(4000),
@Detail AS NText,
@Created AS DateTime,
@LineItemId AS Int,
@OrderNoteId AS Int = NULL OUTPUT
AS
BEGIN
SET NOCOUNT ON;

INSERT INTO [OrderGroupNote]
(
[OrderGroupId],
[CustomerId],
[Title],
[Type],
[Detail],
[Created],
[LineItemId])
VALUES(
@OrderGroupId,
@CustomerId,
@Title,
@Type,
@Detail,
@Created,
@LineItemId)
SELECT @OrderNoteId = SCOPE_IDENTITY();

END
GO
PRINT N'Creating [dbo].[ecf_Application]...';


GO

CREATE PROCEDURE [dbo].[ecf_Application]
    @ApplicationId uniqueidentifier = null,
    @ApplicationName nvarchar(200) = null,
    @IsActive bit = null
AS
begin
    select ApplicationId, Name, IsActive
    from [Application]
    where isnull(@ApplicationId, ApplicationId) = ApplicationId
      and isnull(@ApplicationName, Name) = Name
      and isnull(@IsActive, IsActive) = IsActive
end
GO
PRINT N'Creating [dbo].[cms_NavigationParamsUpdate]...';


GO
CREATE PROCEDURE [dbo].[cms_NavigationParamsUpdate]
(
	@Id int,
	@ItemId int,
	@Name nvarchar(256) = NULL,
	@Value nvarchar(256) = NULL,
	@IsRequired bit = NULL
)
AS
	SET NOCOUNT ON
	
	UPDATE [NavigationParams]
	SET
		[ItemId] = @ItemId,
		[Name] = @Name,
		[Value] = @Value,
		[IsRequired] = @IsRequired
	WHERE 
		[Id] = @Id

	RETURN @@Error
GO
PRINT N'Creating [dbo].[mdpsp_sys_CloseSymmetricKey]...';


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_CloseSymmetricKey] AS
	CLOSE SYMMETRIC KEY Mediachase_ECF50_MDP_Key
GO
PRINT N'Creating [dbo].[ecf_Currency_GetAll]...';


GO

create procedure dbo.ecf_Currency_GetAll
as
begin
    select CurrencyCode, CurrencyName
    from dbo.Currency
end
GO
PRINT N'Creating [dbo].[GetApplicationSchemaVersionNumber]...';


GO
CREATE PROCEDURE [dbo].[GetApplicationSchemaVersionNumber]
AS
	with PatchVersion (Major, Minor, Patch) as
		(SELECT max([Major]) as Major,
			max([Minor]) as Minor,
			max([Patch]) as Patch
			FROM [SchemaVersion_ApplicationSystem]),
	PatchDate (Major, Minor, Patch, InstallDate) as 
		(SELECT Major, Minor, Patch, InstallDate from [SchemaVersion_ApplicationSystem])
	SELECT PD.Major as Major, PD.Minor as Minor, PD.Patch as Patch, PD.InstallDate as InstallDate 
		FROM PatchDate PD, PatchVersion PV 
		WHERE PD.[Major]=PV.[Major] AND 
			PD.[Minor]=PV.[Minor] AND 
			PD.[Patch]=PV.[Patch]
GO
PRINT N'Creating [dbo].[cms_NavigationParamsSelectByItemId]...';


GO
CREATE PROCEDURE [dbo].[cms_NavigationParamsSelectByItemId]
(
	@ItemId int
)
AS
	SET NOCOUNT ON
	
	SELECT 		[Id],
		[ItemId],
		[Name],
		[Value],
		[IsRequired] FROM [NavigationParams]
	WHERE 
		[ItemId] = @ItemId
GO
PRINT N'Creating [dbo].[mdpsp_sys_OpenSymmetricKey]...';


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_OpenSymmetricKey] AS
	OPEN SYMMETRIC KEY Mediachase_ECF50_MDP_Key DECRYPTION BY CERTIFICATE Mediachase_ECF50_MDP
GO
PRINT N'Creating [dbo].[cms_NavigationParamsSelectAll]...';


GO
CREATE PROCEDURE [cms_NavigationParamsSelectAll]
	@ApplicationId uniqueidentifier
AS
	SELECT NP.[Id], NP.[ItemId], NP.[Name], NP.[Value], NP.[IsRequired] FROM [NavigationParams] NP
	INNER JOIN [NavigationItems] NI ON NP.[ItemId]=NI.[ItemId]	
	WHERE NI.[ApplicationId] = @ApplicationId
GO
PRINT N'Creating [dbo].[mdpsp_sys_ClearStringDictionary]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_ClearStringDictionary]
	@MetaKey	INT
AS
	DELETE FROM MetaStringDictionaryValue WHERE MetaKey = @MetaKey
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[cms_NavigationParamsInsert]...';


GO
CREATE PROCEDURE [dbo].[cms_NavigationParamsInsert]
(
	@ItemId int,
	@Name nvarchar(256) = NULL,
	@Value nvarchar(256) = NULL,
	@IsRequired bit = NULL,
	@retval int = NULL OUTPUT
)
AS
	SET NOCOUNT ON

	INSERT INTO [NavigationParams]
	(
		[ItemId],
		[Name],
		[Value],
		[IsRequired]
	)
	VALUES
	(
		@ItemId,
		@Name,
		@Value,
		@IsRequired
	)

	SELECT @retval = SCOPE_IDENTITY();

	RETURN @@Error
GO
PRINT N'Creating [dbo].[mdpsp_sys_ClearMultiValueDictionary]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_ClearMultiValueDictionary]
	@MetaKey	INT
AS
	DELETE FROM MetaMultiValueDictionary WHERE MetaKey = @MetaKey
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[cms_NavigationParamsDelete]...';


GO
CREATE PROCEDURE [dbo].[cms_NavigationParamsDelete]
(
	@Id int
)
AS
	SET NOCOUNT ON

	DELETE 
	FROM   [NavigationParams]
	WHERE  
		[Id] = @Id

	RETURN @@Error
GO
PRINT N'Creating [dbo].[mdpsp_sys_ClearMetaAttribute]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_ClearMetaAttribute]
	@AttrOwnerId		INT,
	@AttrOwnerType	INT
AS
	DELETE FROM MetaAttribute WHERE AttrOwnerId = @AttrOwnerId AND AttrOwnerType = @AttrOwnerType
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAdministration_GetCountOfState]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationAdministration_GetCountOfState (
    @Count int OUT,
    @AllUsersScope bit,
    @ApplicationName NVARCHAR(256),
    @Path NVARCHAR(256) = NULL,
    @UserName NVARCHAR(256) = NULL,
    @InactiveSinceDate DATETIME = NULL)
AS
BEGIN

    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        SELECT @Count = 0
    ELSE
        IF (@AllUsersScope = 1)
            SELECT @Count = COUNT(*)
            FROM dbo.aspnet_PersonalizationAllUsers AllUsers, dbo.aspnet_Paths Paths
            WHERE Paths.ApplicationId = @ApplicationId
                  AND AllUsers.PathId = Paths.PathId
                  AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
        ELSE
            SELECT @Count = COUNT(*)
            FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Users Users, dbo.aspnet_Paths Paths
            WHERE Paths.ApplicationId = @ApplicationId
                  AND PerUser.UserId = Users.UserId
                  AND PerUser.PathId = Paths.PathId
                  AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
                  AND (@UserName IS NULL OR Users.LoweredUserName LIKE LOWER(@UserName))
                  AND (@InactiveSinceDate IS NULL OR Users.LastActivityDate <= @InactiveSinceDate)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAdministration_FindState]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationAdministration_FindState (
    @AllUsersScope bit,
    @ApplicationName NVARCHAR(256),
    @PageIndex              INT,
    @PageSize               INT,
    @Path NVARCHAR(256) = NULL,
    @UserName NVARCHAR(256) = NULL,
    @InactiveSinceDate DATETIME = NULL)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        RETURN

    -- Set the page bounds
    DECLARE @PageLowerBound INT
    DECLARE @PageUpperBound INT
    DECLARE @TotalRecords   INT
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table to store the selected results
    CREATE TABLE #PageIndex (
        IndexId int IDENTITY (0, 1) NOT NULL,
        ItemId UNIQUEIDENTIFIER
    )

    IF (@AllUsersScope = 1)
    BEGIN
        -- Insert into our temp table
        INSERT INTO #PageIndex (ItemId)
        SELECT Paths.PathId
        FROM dbo.aspnet_Paths Paths,
             ((SELECT Paths.PathId
               FROM dbo.aspnet_PersonalizationAllUsers AllUsers, dbo.aspnet_Paths Paths
               WHERE Paths.ApplicationId = @ApplicationId
                      AND AllUsers.PathId = Paths.PathId
                      AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
              ) AS SharedDataPerPath
              FULL OUTER JOIN
              (SELECT DISTINCT Paths.PathId
               FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Paths Paths
               WHERE Paths.ApplicationId = @ApplicationId
                      AND PerUser.PathId = Paths.PathId
                      AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
              ) AS UserDataPerPath
              ON SharedDataPerPath.PathId = UserDataPerPath.PathId
             )
        WHERE Paths.PathId = SharedDataPerPath.PathId OR Paths.PathId = UserDataPerPath.PathId
        ORDER BY Paths.Path ASC

        SELECT @TotalRecords = @@ROWCOUNT

        SELECT Paths.Path,
               SharedDataPerPath.LastUpdatedDate,
               SharedDataPerPath.SharedDataLength,
               UserDataPerPath.UserDataLength,
               UserDataPerPath.UserCount
        FROM dbo.aspnet_Paths Paths,
             ((SELECT PageIndex.ItemId AS PathId,
                      AllUsers.LastUpdatedDate AS LastUpdatedDate,
                      DATALENGTH(AllUsers.PageSettings) AS SharedDataLength
               FROM dbo.aspnet_PersonalizationAllUsers AllUsers, #PageIndex PageIndex
               WHERE AllUsers.PathId = PageIndex.ItemId
                     AND PageIndex.IndexId >= @PageLowerBound AND PageIndex.IndexId <= @PageUpperBound
              ) AS SharedDataPerPath
              FULL OUTER JOIN
              (SELECT PageIndex.ItemId AS PathId,
                      SUM(DATALENGTH(PerUser.PageSettings)) AS UserDataLength,
                      COUNT(*) AS UserCount
               FROM aspnet_PersonalizationPerUser PerUser, #PageIndex PageIndex
               WHERE PerUser.PathId = PageIndex.ItemId
                     AND PageIndex.IndexId >= @PageLowerBound AND PageIndex.IndexId <= @PageUpperBound
               GROUP BY PageIndex.ItemId
              ) AS UserDataPerPath
              ON SharedDataPerPath.PathId = UserDataPerPath.PathId
             )
        WHERE Paths.PathId = SharedDataPerPath.PathId OR Paths.PathId = UserDataPerPath.PathId
        ORDER BY Paths.Path ASC
    END
    ELSE
    BEGIN
        -- Insert into our temp table
        INSERT INTO #PageIndex (ItemId)
        SELECT PerUser.Id
        FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Users Users, dbo.aspnet_Paths Paths
        WHERE Paths.ApplicationId = @ApplicationId
              AND PerUser.UserId = Users.UserId
              AND PerUser.PathId = Paths.PathId
              AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
              AND (@UserName IS NULL OR Users.LoweredUserName LIKE LOWER(@UserName))
              AND (@InactiveSinceDate IS NULL OR Users.LastActivityDate <= @InactiveSinceDate)
        ORDER BY Paths.Path ASC, Users.UserName ASC

        SELECT @TotalRecords = @@ROWCOUNT

        SELECT Paths.Path, PerUser.LastUpdatedDate, DATALENGTH(PerUser.PageSettings), Users.UserName, Users.LastActivityDate
        FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Users Users, dbo.aspnet_Paths Paths, #PageIndex PageIndex
        WHERE PerUser.Id = PageIndex.ItemId
              AND PerUser.UserId = Users.UserId
              AND PerUser.PathId = Paths.PathId
              AND PageIndex.IndexId >= @PageLowerBound AND PageIndex.IndexId <= @PageUpperBound
        ORDER BY Paths.Path ASC, Users.UserName ASC
    END

    RETURN @TotalRecords
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAdministration_ResetUserState]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationAdministration_ResetUserState (
    @Count                  int                 OUT,
    @ApplicationName        NVARCHAR(256),
    @InactiveSinceDate      DATETIME            = NULL,
    @UserName               NVARCHAR(256)       = NULL,
    @Path                   NVARCHAR(256)       = NULL)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        SELECT @Count = 0
    ELSE
    BEGIN
        DELETE FROM dbo.aspnet_PersonalizationPerUser
        WHERE Id IN (SELECT PerUser.Id
                     FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Users Users, dbo.aspnet_Paths Paths
                     WHERE Paths.ApplicationId = @ApplicationId
                           AND PerUser.UserId = Users.UserId
                           AND PerUser.PathId = Paths.PathId
                           AND (@InactiveSinceDate IS NULL OR Users.LastActivityDate <= @InactiveSinceDate)
                           AND (@UserName IS NULL OR Users.LoweredUserName = LOWER(@UserName))
                           AND (@Path IS NULL OR Paths.LoweredPath = LOWER(@Path)))

        SELECT @Count = @@ROWCOUNT
    END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAdministration_ResetSharedState]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationAdministration_ResetSharedState (
    @Count int OUT,
    @ApplicationName NVARCHAR(256),
    @Path NVARCHAR(256))
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        SELECT @Count = 0
    ELSE
    BEGIN
        DELETE FROM dbo.aspnet_PersonalizationAllUsers
        WHERE PathId IN
            (SELECT AllUsers.PathId
             FROM dbo.aspnet_PersonalizationAllUsers AllUsers, dbo.aspnet_Paths Paths
             WHERE Paths.ApplicationId = @ApplicationId
                   AND AllUsers.PathId = Paths.PathId
                   AND Paths.LoweredPath = LOWER(@Path))

        SELECT @Count = @@ROWCOUNT
    END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAdministration_DeleteAllState]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationAdministration_DeleteAllState (
    @AllUsersScope bit,
    @ApplicationName NVARCHAR(256),
    @Count int OUT)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        SELECT @Count = 0
    ELSE
    BEGIN
        IF (@AllUsersScope = 1)
            DELETE FROM aspnet_PersonalizationAllUsers
            WHERE PathId IN
               (SELECT Paths.PathId
                FROM dbo.aspnet_Paths Paths
                WHERE Paths.ApplicationId = @ApplicationId)
        ELSE
            DELETE FROM aspnet_PersonalizationPerUser
            WHERE PathId IN
               (SELECT Paths.PathId
                FROM dbo.aspnet_Paths Paths
                WHERE Paths.ApplicationId = @ApplicationId)

        SELECT @Count = @@ROWCOUNT
    END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationPerUser_SetPageSettings]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationPerUser_SetPageSettings (
    @ApplicationName  NVARCHAR(256),
    @UserName         NVARCHAR(256),
    @Path             NVARCHAR(256),
    @PageSettings     IMAGE,
    @CurrentTimeUtc   DATETIME)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER
    DECLARE @UserId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL
    SELECT @UserId = NULL

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        EXEC dbo.aspnet_Paths_CreatePath @ApplicationId, @Path, @PathId OUTPUT
    END

    SELECT @UserId = u.UserId FROM dbo.aspnet_Users u WHERE u.ApplicationId = @ApplicationId AND u.LoweredUserName = LOWER(@UserName)
    IF (@UserId IS NULL)
    BEGIN
        EXEC dbo.aspnet_Users_CreateUser @ApplicationId, @UserName, 0, @CurrentTimeUtc, @UserId OUTPUT
    END

    UPDATE   dbo.aspnet_Users WITH (ROWLOCK)
    SET      LastActivityDate = @CurrentTimeUtc
    WHERE    UserId = @UserId
    IF (@@ROWCOUNT = 0) -- Username not found
        RETURN

    IF (EXISTS(SELECT PathId FROM dbo.aspnet_PersonalizationPerUser WHERE UserId = @UserId AND PathId = @PathId))
        UPDATE dbo.aspnet_PersonalizationPerUser SET PageSettings = @PageSettings, LastUpdatedDate = @CurrentTimeUtc WHERE UserId = @UserId AND PathId = @PathId
    ELSE
        INSERT INTO dbo.aspnet_PersonalizationPerUser(UserId, PathId, PageSettings, LastUpdatedDate) VALUES (@UserId, @PathId, @PageSettings, @CurrentTimeUtc)
    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationPerUser_ResetPageSettings]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationPerUser_ResetPageSettings (
    @ApplicationName  NVARCHAR(256),
    @UserName         NVARCHAR(256),
    @Path             NVARCHAR(256),
    @CurrentTimeUtc   DATETIME)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER
    DECLARE @UserId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL
    SELECT @UserId = NULL

    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @UserId = u.UserId FROM dbo.aspnet_Users u WHERE u.ApplicationId = @ApplicationId AND u.LoweredUserName = LOWER(@UserName)
    IF (@UserId IS NULL)
    BEGIN
        RETURN
    END

    UPDATE   dbo.aspnet_Users WITH (ROWLOCK)
    SET      LastActivityDate = @CurrentTimeUtc
    WHERE    UserId = @UserId
    IF (@@ROWCOUNT = 0) -- Username not found
        RETURN

    DELETE FROM dbo.aspnet_PersonalizationPerUser WHERE PathId = @PathId AND UserId = @UserId
    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationPerUser_GetPageSettings]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationPerUser_GetPageSettings (
    @ApplicationName  NVARCHAR(256),
    @UserName         NVARCHAR(256),
    @Path             NVARCHAR(256),
    @CurrentTimeUtc   DATETIME)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER
    DECLARE @UserId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL
    SELECT @UserId = NULL

    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @UserId = u.UserId FROM dbo.aspnet_Users u WHERE u.ApplicationId = @ApplicationId AND u.LoweredUserName = LOWER(@UserName)
    IF (@UserId IS NULL)
    BEGIN
        RETURN
    END

    UPDATE   dbo.aspnet_Users WITH (ROWLOCK)
    SET      LastActivityDate = @CurrentTimeUtc
    WHERE    UserId = @UserId
    IF (@@ROWCOUNT = 0) -- Username not found
        RETURN

    SELECT p.PageSettings FROM dbo.aspnet_PersonalizationPerUser p WHERE p.PathId = @PathId AND p.UserId = @UserId
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAllUsers_SetPageSettings]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationAllUsers_SetPageSettings (
    @ApplicationName  NVARCHAR(256),
    @Path             NVARCHAR(256),
    @PageSettings     IMAGE,
    @CurrentTimeUtc   DATETIME)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        EXEC dbo.aspnet_Paths_CreatePath @ApplicationId, @Path, @PathId OUTPUT
    END

    IF (EXISTS(SELECT PathId FROM dbo.aspnet_PersonalizationAllUsers WHERE PathId = @PathId))
        UPDATE dbo.aspnet_PersonalizationAllUsers SET PageSettings = @PageSettings, LastUpdatedDate = @CurrentTimeUtc WHERE PathId = @PathId
    ELSE
        INSERT INTO dbo.aspnet_PersonalizationAllUsers(PathId, PageSettings, LastUpdatedDate) VALUES (@PathId, @PageSettings, @CurrentTimeUtc)
    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAllUsers_ResetPageSettings]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationAllUsers_ResetPageSettings (
    @ApplicationName  NVARCHAR(256),
    @Path              NVARCHAR(256))
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL

    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        RETURN
    END

    DELETE FROM dbo.aspnet_PersonalizationAllUsers WHERE PathId = @PathId
    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAllUsers_GetPageSettings]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationAllUsers_GetPageSettings (
    @ApplicationName  NVARCHAR(256),
    @Path              NVARCHAR(256))
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL

    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        RETURN
    END

    SELECT p.PageSettings FROM dbo.aspnet_PersonalizationAllUsers p WHERE p.PathId = @PathId
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Search_CatalogEntry]...';


GO
create procedure dbo.ecf_Search_CatalogEntry
	@ApplicationId uniqueidentifier,
	@SearchSetId uniqueidentifier,
	@ResponseGroup INT = NULL
as
begin
    declare @entries dbo.udttEntityList
    insert into @entries (EntityId, SortOrder)
    select r.CatalogEntryId, r.SortOrder
    from CatalogEntrySearchResults r
    where r.SearchSetId = @SearchSetId
    
	exec dbo.ecf_CatalogEntry_List @entries, @ResponseGroup

	delete CatalogEntrySearchResults
	where SearchSetId = @SearchSetId
end
GO
PRINT N'Creating [dbo].[aspnet_Roles_CreateRole]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Roles_CreateRole
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
        BEGIN TRANSACTION
        SET @TranStarted = 1
    END
    ELSE
        SET @TranStarted = 0

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF (EXISTS(SELECT RoleId FROM dbo.aspnet_Roles WHERE LoweredRoleName = LOWER(@RoleName) AND ApplicationId = @ApplicationId))
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    INSERT INTO dbo.aspnet_Roles
                (ApplicationId, RoleName, LoweredRoleName)
         VALUES (@ApplicationId, @RoleName, LOWER(@RoleName))

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
        COMMIT TRANSACTION
    END

    RETURN(0)

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
        ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogNode_CatalogParentNodeCode]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogNode_CatalogParentNodeCode]
	@ApplicationId uniqueidentifier,
	@CatalogName nvarchar(150),
	@ParentNodeCode nvarchar(100),
	@ReturnInactive bit = 0
AS
BEGIN
	declare @CatalogId int
	declare @ParentNodeId int

	select @CatalogId = CatalogId from [Catalog] where [Name] = @CatalogName AND ApplicationId = @ApplicationId
	select @ParentNodeId = CatalogNodeId from [CatalogNode] where Code = @ParentNodeCode AND ApplicationId = @ApplicationId

	EXECUTE [ecf_CatalogNode_CatalogParentNode] @CatalogId,@ParentNodeId,@ReturnInactive
END
GO
PRINT N'Creating [dbo].[mdpsp_sys_RotateEncryptionKeys]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_RotateEncryptionKeys] AS
DECLARE @Query_tmp  nvarchar(max)

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
BEGIN TRANSACTION

DECLARE @MetaClassTable NVARCHAR(256), @MetaFieldName NVARCHAR(256), @MultiLanguageValue BIT
DECLARE @sqlQuery NVARCHAR(4000)
DECLARE classall_cursor CURSOR FOR
	SELECT MF.Name, MF.MultiLanguageValue, MC.TableName FROM MetaField MF
		INNER JOIN MetaClassMetaFieldRelation MCFR ON MCFR.MetaFieldId = MF.MetaFieldId
		INNER JOIN MetaClass MC ON MC.MetaClassId = MCFR.MetaClassId
		WHERE MF.IsEncrypted = 1 AND MC.IsSystem = 0

--Open symmetric key
exec mdpsp_sys_OpenSymmetricKey

OPEN classall_cursor
	FETCH NEXT FROM classall_cursor INTO @MetaFieldName, @MultiLanguageValue, @MetaClassTable

--Decrypt meta values
WHILE(@@FETCH_STATUS = 0)
BEGIN

	IF @MultiLanguageValue = 0
		SET @Query_tmp = '
			UPDATE '+@MetaClassTable+'
				SET ['+@MetaFieldName+'] = dbo.mdpfn_sys_EncryptDecryptString(['+@MetaFieldName+'], 0)
				WHERE NOT [' + @MetaFieldName + '] IS NULL'
	ELSE
		SET @Query_tmp = '
			UPDATE '+@MetaClassTable+'_Localization
				SET ['+@MetaFieldName+'] = dbo.mdpfn_sys_EncryptDecryptString(['+@MetaFieldName+'], 0)
				WHERE NOT [' + @MetaFieldName + '] IS NULL'

	EXEC(@Query_tmp)

	IF @@ERROR <> 0 GOTO ERR

	FETCH NEXT FROM classall_cursor INTO @MetaFieldName, @MultiLanguageValue, @MetaClassTable
END

CLOSE classall_cursor

--Decrypt credit cards
SET @sqlQuery = 'UPDATE dbo.cls_CreditCard
SET [CreditCardNumber] = CCD.CardNumber_string,
[SecurityCode] = CCD.SecurityCode_string
FROM (SELECT CONVERT(VARCHAR(max), DecryptByKey(cast(N'''' AS XML).value(''xs:base64Binary(sql:column("CC.CreditCardNumber"))'', ''varbinary(max)''))) AS [CardNumber_string],
    CONVERT(VARCHAR(max), DecryptByKey(cast(N'''' AS XML).value(''xs:base64Binary(sql:column("CC.SecurityCode"))'',''varbinary(max)''))) AS [SecurityCode_string],
    CreditCardId
FROM cls_CreditCard CC WHERE CC.CreditCardNumber is not NULL) CCD WHERE CCD.CreditCardId = cls_CreditCard.CreditCardId'

EXECUTE sp_executesql @sqlQuery

--Close symmetric key
exec mdpsp_sys_CloseSymmetricKey

--Recreate symmetric key
SET @sqlQuery = ' 
DROP SYMMETRIC KEY Mediachase_ECF50_MDP_Key
CREATE SYMMETRIC KEY Mediachase_ECF50_MDP_Key
WITH ALGORITHM = AES_128 ENCRYPTION BY CERTIFICATE Mediachase_ECF50_MDP'
EXECUTE sp_executesql @sqlQuery

--Open new symmetric key
exec mdpsp_sys_OpenSymmetricKey

OPEN classall_cursor
	FETCH NEXT FROM classall_cursor INTO @MetaFieldName, @MultiLanguageValue, @MetaClassTable

--Encrypt meta values
WHILE(@@FETCH_STATUS = 0)
BEGIN

	IF @MultiLanguageValue = 0
		SET @Query_tmp = '
			UPDATE '+@MetaClassTable+'
				SET ['+@MetaFieldName+'] = dbo.mdpfn_sys_EncryptDecryptString(['+@MetaFieldName+'], 1)
				WHERE NOT [' + @MetaFieldName + '] IS NULL'
	ELSE
		SET @Query_tmp = '
			UPDATE '+@MetaClassTable+'_Localization
				SET ['+@MetaFieldName+'] = dbo.mdpfn_sys_EncryptDecryptString(['+@MetaFieldName+'], 1)
				WHERE NOT [' + @MetaFieldName + '] IS NULL'

	EXEC(@Query_tmp)

	FETCH NEXT FROM classall_cursor INTO @MetaFieldName, @MultiLanguageValue, @MetaClassTable
END

CLOSE classall_cursor
DEALLOCATE classall_cursor

--Encrypt credit cards
SET @sqlQuery = 'UPDATE  cls_CreditCard
SET CreditCardNumber = CONVERT(nvarchar(512), CAST(N'''' AS xml).value(''xs:base64Binary(sql:column("CC.CreditCardNumber_string"))'', ''varchar(4000)'') ) ,
    SecurityCode = CONVERT(nvarchar(255), CAST(N'''' AS xml).value(''xs:base64Binary(sql:column("CC.SecurityCode_string"))'', ''varchar(4000)'') ) 
FROM
    ( SELECT EncryptByKey(Key_GUID(''Mediachase_ECF50_MDP_Key''), (CONVERT(varchar(4000), CreditCardNumber)))  CreditCardNumber_string
        , EncryptByKey(Key_GUID(''Mediachase_ECF50_MDP_Key''), (CONVERT(varchar(4000), SecurityCode)))  SecurityCode_string
        , CreditCardId FROM [cls_CreditCard]) CC WHERE cls_CreditCard.CreditCardId = CC.CreditCardId'
EXECUTE sp_executesql @sqlQuery

--Close new symmetric key
exec mdpsp_sys_CloseSymmetricKey

COMMIT TRAN
RETURN

ERR:
ROLLBACK TRAN
RETURN
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_CatalogEntrySearch]...';


GO
CREATE PROCEDURE [dbo].[ecf_CatalogEntrySearch]
(
	@ApplicationId				uniqueidentifier,
	@SearchSetId				uniqueidentifier,
	@Language 					nvarchar(50),
	@Catalogs 					nvarchar(max),
	@CatalogNodes 				nvarchar(max),
	@SQLClause 					nvarchar(max),
	@MetaSQLClause 				nvarchar(max),
	@KeywordPhrase				nvarchar(max),
	@OrderBy 					nvarchar(max),
	@Namespace					nvarchar(1024) = N'',
	@Classes					nvarchar(max) = N'',
	@StartingRec				int,
	@NumRecords					int,
	@JoinType					nvarchar(50),
	@SourceTableName			sysname,
	@TargetQuery				nvarchar(max),
	@SourceJoinKey				sysname,
	@TargetJoinKey				sysname,
	@RecordCount				int OUTPUT,
	@ReturnTotalCount			bit = 1
)
AS
/*
	Last Updated: 
	September 2, 2008
		- corrected order for queries, should be ObjectId, Rank instead of Rank, ObjectId
	April 24, 2008
		- added support for joining tables
		- added language filters for meta fields
	April 8, 2008
		- added support for multiple catalog nodes, so when multiple nodes are specified,
		NodeEntryRelation table is not inner joined since that will produce repetetive entries
	April 2, 2008
		- fixed issue with entry in multiple categories and search done within multiple catalogs
		Now 3 types of queries recognized
		 - when only catalogs are specified, no NodeRelation table is joined and no soring is done
         - when one node filter is specified, sorting is enforced
         - when more than one node filter is specified, sort order is not available and
           noderelation table is not joined
	April 1, 2008 (Happy fools day!)
	    - added support for searching within localized table
	March 31, 2008
		- search couldn't display results with text type of data due to distinct statement,
		changed it '*' to U.[Key], U.[Rank]
	March 20, 2008
		- Added inner join for NodeRelation so we sort by SortOrder by default
	February 5, 2008
		- removed Meta.*, since it caused errors when multiple different meta classes were used
	Known issues:
		if item exists in two nodes and filter is requested for both nodes, the constraints error might happen
*/

BEGIN
	SET NOCOUNT ON
	
	DECLARE @FilterVariables_tmp 		nvarchar(max)
	DECLARE @query_tmp 		nvarchar(max)
	DECLARE @FilterQuery_tmp 		nvarchar(max)
	DECLARE @TableName_tmp sysname
	declare @SelectMetaQuery_tmp nvarchar(max)
	declare @FromQuery_tmp nvarchar(max)
	declare @SelectCountQuery_tmp nvarchar(max)
	declare @FullQuery nvarchar(max)
	DECLARE @JoinQuery_tmp 		nvarchar(max)
	DECLARE @TempTableName_tmp 		sysname
	DECLARE @NameSearchQuery nvarchar(max)

	-- Precalculate length for constant strings
	DECLARE @MetaSQLClauseLength bigint
	DECLARE @KeywordPhraseLength bigint
	SET @MetaSQLClauseLength = LEN(@MetaSQLClause)
	SET @KeywordPhraseLength = LEN(@KeywordPhrase)

	set @RecordCount = -1

	-- ######## CREATE FILTER QUERY
	-- CREATE "JOINS" NEEDED
	-- Create filter query
	set @FilterQuery_tmp = N''
	--set @FilterQuery_tmp = N' INNER JOIN Catalog [Catalog] ON [Catalog].CatalogId = CatalogEntry.CatalogId'

	-- Only add NodeEntryRelation table join if one Node filter is specified, if more than one then we can't inner join it
	if(Len(@CatalogNodes) != 0 and (select count(Item) from ecf_splitlist(@CatalogNodes)) <= 1)
	begin
		set @FilterQuery_tmp = @FilterQuery_tmp + N' INNER JOIN NodeEntryRelation NodeEntryRelation ON CatalogEntry.CatalogEntryId = NodeEntryRelation.CatalogEntryId'
	end

	-- CREATE "WHERE" NEEDED
	set @FilterQuery_tmp = @FilterQuery_tmp + N' WHERE CatalogEntry.ApplicationId = ''' + cast(@ApplicationId as nvarchar(100)) + ''' AND '
	
	-- If nodes specified, no need to filter by catalog since that is done in node filter
	if(Len(@CatalogNodes) = 0)
	begin
		set @FilterQuery_tmp = @FilterQuery_tmp + N' CatalogEntry.CatalogId in (select * from @Catalogs_temp)'
	end

	/*
	-- If node specified, make sure to include items that indirectly belong to the catalogs
	if(Len(@CatalogNodes) != 0 and (select count(Item) from ecf_splitlist(@CatalogNodes)) <= 1)
		set @FilterQuery_tmp = @FilterQuery_tmp + N' OR NodeEntryRelation.CatalogId in (select * from @Catalogs_temp)'

	set @FilterQuery_tmp = @FilterQuery_tmp + N')'
	*/

	-- Different filter if more than one category is specified
	if(Len(@CatalogNodes) != 0 and (select count(Item) from ecf_splitlist(@CatalogNodes)) > 1)
	begin
		set @FilterQuery_tmp = @FilterQuery_tmp + N' CatalogEntry.CatalogEntryId in (select NodeEntryRelation.CatalogEntryId from NodeEntryRelation NodeEntryRelation where '
	end

	-- Add node filter, have to do this way to not produce multiple entry items
	--set @FilterQuery_tmp = @FilterQuery_tmp + N' AND CatalogEntry.CatalogEntryId IN (select NodeEntryRelation.CatalogEntryId from NodeEntryRelation NodeEntryRelation INNER JOIN CatalogNode CatalogNode ON NodeEntryRelation.CatalogNodeId = CatalogNode.CatalogNodeId'
	if(Len(@CatalogNodes) != 0)
	begin
		set @FilterQuery_tmp = @FilterQuery_tmp + N' NodeEntryRelation.CatalogNodeId IN (select CatalogNode.CatalogNodeId from CatalogNode CatalogNode'
		set @FilterQuery_tmp = @FilterQuery_tmp + N' WHERE (CatalogNode.[Code] in (select Item from ecf_splitlist(''' + @CatalogNodes + '''))) AND NodeEntryRelation.CatalogId in (select * from @Catalogs_temp)'
		set @FilterQuery_tmp = @FilterQuery_tmp + N')'
		--set @FilterQuery_tmp = @FilterQuery_tmp; + N' WHERE (CatalogNode.[Code] in (select Item from ecf_splitlist(''' + @CatalogNodes + ''')))'
	end

	-- Different filter if more than one category is specified
	if(Len(@CatalogNodes) != 0 and (select count(Item) from ecf_splitlist(@CatalogNodes)) > 1)
	begin
		set @FilterQuery_tmp = @FilterQuery_tmp + N')'
	end

	--set @FilterQuery_tmp = @FilterQuery_tmp + N')'

	-- add sql clause statement here, if specified
	if(Len(@SQLClause) != 0)
	begin
		set @FilterQuery_tmp = @FilterQuery_tmp + N' AND (' + @SqlClause + ')'
	end

	-- 1. Cycle through all the available product meta classes
	--print 'Iterating through meta classes'
	DECLARE MetaClassCursor CURSOR READ_ONLY
	FOR SELECT C.TableName FROM MetaClass C INNER JOIN MetaClass C2 ON C.ParentClassId = C2.MetaClassId
		WHERE C.Namespace like @Namespace + '%' AND (C.[Name] in (select Item from ecf_splitlist(@Classes)) or @Classes = '')
		and C.IsSystem = 0 and C2.[Name] = 'CatalogEntry'

	OPEN MetaClassCursor
	FETCH NEXT FROM MetaClassCursor INTO @TableName_tmp
	WHILE (@@fetch_status = 0)
	BEGIN 
		--print 'Metaclass Table: ' + @TableName_tmp
		IF(@KeywordPhraseLength>0)
			-- Search by Name in CatalogEntry
			SET @Query_tmp = 'SELECT META.ObjectId AS ''Key'', 100 AS ''Rank'' FROM ' + @TableName_tmp + ' META JOIN CatalogEntry ON CatalogEntry.CatalogEntryId = META.ObjectId WHERE CatalogEntry.Name LIKE N''%' + @KeywordPhrase + '%'''
		ELSE
			set @Query_tmp = 'select META.ObjectId as ''Key'', 100 as ''Rank'' from ' + @TableName_tmp + ' META' -- INNER JOIN ' + @TableName_tmp + '_Localization LOC ON META.ObjectId = LOC.Id'
		
		--print '@Query_tmp: ' + @Query_tmp

		-- Add meta Where clause
		if(@MetaSQLClauseLength>0)
			set @query_tmp = @query_tmp + ' WHERE ' + @MetaSQLClause

		if(@SelectMetaQuery_tmp is null)
			set @SelectMetaQuery_tmp = @Query_tmp;
		else
			set @SelectMetaQuery_tmp = @SelectMetaQuery_tmp + N' UNION ALL ' + @Query_tmp;

	FETCH NEXT FROM MetaClassCursor INTO @TableName_tmp
	END
	CLOSE MetaClassCursor
	DEALLOCATE MetaClassCursor

	--print @SelectMetaQuery_tmp
	IF(@KeywordPhraseLength>0)
		SET @NameSearchQuery = N' UNION SELECT CatalogEntry.CatalogEntryId AS ''Key'', 100 AS ''Rank'' FROM CatalogEntry WHERE CatalogEntry.Name LIKE N''%' + @KeywordPhrase + '%'' ';	
	ELSE
		SET @NameSearchQuery = N'';

	-- Create from command
	SET @FromQuery_tmp = N'FROM [CatalogEntry] CatalogEntry' + N' INNER JOIN (select distinct U.[KEY], MIN(U.Rank) AS Rank from (' + @SelectMetaQuery_tmp + @NameSearchQuery + N') U GROUP BY U.[KEY]) META ON CatalogEntry.[CatalogEntryId] = META.[KEY] '

	-- attach inner join if needed
	if(@JoinType is not null and Len(@JoinType) > 0)
	begin
		set @Query_tmp = ''
		EXEC [ecf_CreateTableJoinQuery] @SourceTableName, @TargetQuery, @SourceJoinKey, @TargetJoinKey, @JoinType, @Query_tmp OUT
		print(@Query_tmp)
		set @FromQuery_tmp = @FromQuery_tmp + N' ' + @Query_tmp
	end
	--print(@FromQuery_tmp)
	
	-- order by statement here
	if(Len(@OrderBy) = 0 and Len(@CatalogNodes) != 0 and CHARINDEX(',', @CatalogNodes) = 0)
	begin
		set @OrderBy = 'NodeEntryRelation.SortOrder'
	end
	else if(Len(@OrderBy) = 0)
	begin
		set @OrderBy = 'CatalogEntry.CatalogEntryId'
	end

	--print(@FilterQuery_tmp)
	-- add catalogs temp variable that will be used to filter out catalogs
	set @FilterVariables_tmp = 'declare @Catalogs_temp table (CatalogId int);'
	set @FilterVariables_tmp = @FilterVariables_tmp + 'INSERT INTO @Catalogs_temp select CatalogId from Catalog'
	if(Len(RTrim(LTrim(@Catalogs)))>0)
		set @FilterVariables_tmp = @FilterVariables_tmp + ' WHERE ([Catalog].[Name] in (select Item from ecf_splitlist(''' + @Catalogs + ''')))'
	set @FilterVariables_tmp = @FilterVariables_tmp + ';'

	if(@ReturnTotalCount = 1) -- Only return count if we requested it
		begin
			set @FullQuery = N'SELECT count([CatalogEntry].CatalogEntryId) OVER() TotalRecords, [CatalogEntry].CatalogEntryId, Rank, ROW_NUMBER() OVER(ORDER BY ' + @OrderBy + N') RowNumber ' + @FromQuery_tmp + @FilterQuery_tmp
			-- use temp table variable
			set @FullQuery = N'with OrderedResults as (' + @FullQuery +') INSERT INTO @Page_temp (TotalRecords, ObjectId, SortOrder) SELECT top(' + cast(@NumRecords as nvarchar(50)) + ') TotalRecords, CatalogEntryId, RowNumber FROM OrderedResults WHERE RowNumber > ' + cast(@StartingRec as nvarchar(50)) + ';'
			--print(@FullQuery)
			set @FullQuery = @FilterVariables_tmp + 'declare @Page_temp table (TotalRecords int,ObjectId int,SortOrder int);' + @FullQuery + ';select @RecordCount = TotalRecords from @Page_temp;INSERT INTO CatalogEntrySearchResults (SearchSetId, CatalogEntryId, SortOrder) SELECT ''' + cast(@SearchSetId as nvarchar(100)) + N''', ObjectId, SortOrder from @Page_temp;'
			exec sp_executesql @FullQuery, N'@RecordCount int output', @RecordCount = @RecordCount OUTPUT
			
			--print @FullQuery
			--exec(@FullQuery)			
		end
	else
		begin
			-- simplified query with no TotalRecords, should give some performance gain
			set @FullQuery = N'SELECT [CatalogEntry].CatalogEntryId, Rank, ROW_NUMBER() OVER(ORDER BY ' + @OrderBy + N') RowNumber ' + @FromQuery_tmp + @FilterQuery_tmp
			
			set @FullQuery = @FilterVariables_tmp + N'with OrderedResults as (' + @FullQuery +') INSERT INTO CatalogEntrySearchResults (SearchSetId, CatalogEntryId, SortOrder) SELECT top(' + cast(@NumRecords as nvarchar(50)) + ') ''' + cast(@SearchSetId as nvarchar(100)) + N''', CatalogEntryId, RowNumber FROM OrderedResults WHERE RowNumber > ' + cast(@StartingRec as nvarchar(50)) + ';'
			--print(@FullQuery)
			--select * from CatalogEntrySearchResults
			exec(@FullQuery)
		end

	--print(@FullQuery)
	SET NOCOUNT OFF
END
GO
PRINT N'Creating [dbo].[aspnet_Profile_DeleteProfiles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Profile_DeleteProfiles
    @ApplicationName        nvarchar(256),
    @UserNames              nvarchar(4000)
AS
BEGIN
    DECLARE @UserName     nvarchar(256)
    DECLARE @CurrentPos   int
    DECLARE @NextPos      int
    DECLARE @NumDeleted   int
    DECLARE @DeletedUser  int
    DECLARE @TranStarted  bit
    DECLARE @ErrorCode    int

    SET @ErrorCode = 0
    SET @CurrentPos = 1
    SET @NumDeleted = 0
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
        BEGIN TRANSACTION
        SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    WHILE (@CurrentPos <= LEN(@UserNames))
    BEGIN
        SELECT @NextPos = CHARINDEX(N',', @UserNames,  @CurrentPos)
        IF (@NextPos = 0 OR @NextPos IS NULL)
            SELECT @NextPos = LEN(@UserNames) + 1

        SELECT @UserName = SUBSTRING(@UserNames, @CurrentPos, @NextPos - @CurrentPos)
        SELECT @CurrentPos = @NextPos+1

        IF (LEN(@UserName) > 0)
        BEGIN
            SELECT @DeletedUser = 0
            EXEC dbo.aspnet_Users_DeleteUser @ApplicationName, @UserName, 4, @DeletedUser OUTPUT
            IF( @@ERROR <> 0 )
            BEGIN
                SET @ErrorCode = -1
                GOTO Cleanup
            END
            IF (@DeletedUser <> 0)
                SELECT @NumDeleted = @NumDeleted + 1
        END
    END
    SELECT @NumDeleted
    IF (@TranStarted = 1)
    BEGIN
    	SET @TranStarted = 0
    	COMMIT TRANSACTION
    END
    SET @TranStarted = 0

    RETURN 0

Cleanup:
    IF (@TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END
    RETURN @ErrorCode
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Profile_SetProperties]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Profile_SetProperties
    @ApplicationName        nvarchar(256),
    @PropertyNames          ntext,
    @PropertyValuesString   ntext,
    @PropertyValuesBinary   image,
    @UserName               nvarchar(256),
    @IsUserAnonymous        bit,
    @CurrentTimeUtc         datetime
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
       BEGIN TRANSACTION
       SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    DECLARE @UserId uniqueidentifier
    DECLARE @LastActivityDate datetime
    SELECT  @UserId = NULL
    SELECT  @LastActivityDate = @CurrentTimeUtc

    SELECT @UserId = UserId
    FROM   dbo.aspnet_Users
    WHERE  ApplicationId = @ApplicationId AND LoweredUserName = LOWER(@UserName)
    IF (@UserId IS NULL)
        EXEC dbo.aspnet_Users_CreateUser @ApplicationId, @UserName, @IsUserAnonymous, @LastActivityDate, @UserId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    UPDATE dbo.aspnet_Users
    SET    LastActivityDate=@CurrentTimeUtc
    WHERE  UserId = @UserId

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF (EXISTS( SELECT *
               FROM   dbo.aspnet_Profile
               WHERE  UserId = @UserId))
        UPDATE dbo.aspnet_Profile
        SET    PropertyNames=@PropertyNames, PropertyValuesString = @PropertyValuesString,
               PropertyValuesBinary = @PropertyValuesBinary, LastUpdatedDate=@CurrentTimeUtc
        WHERE  UserId = @UserId
    ELSE
        INSERT INTO dbo.aspnet_Profile(UserId, PropertyNames, PropertyValuesString, PropertyValuesBinary, LastUpdatedDate)
             VALUES (@UserId, @PropertyNames, @PropertyValuesString, @PropertyValuesBinary, @CurrentTimeUtc)

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
    	SET @TranStarted = 0
    	COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_RefreshSystemMetaClassInfoAll]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_RefreshSystemMetaClassInfoAll]
AS
SET NOCOUNT ON
BEGIN TRAN
	DECLARE classall_cursor CURSOR FOR
		SELECT MetaClassId FROM MetaClass WHERE IsSystem =1

	DECLARE @MetaClassId	INT

	OPEN classall_cursor
	FETCH NEXT FROM classall_cursor INTO @MetaClassId

	WHILE @@FETCH_STATUS = 0
	BEGIN
		PRINT @MetaClassId
		EXEC  mdpsp_sys_RefreshSystemMetaClassInfo @MetaClassId
		IF @@ERROR <> 0 GOTO ERR

	FETCH NEXT FROM classall_cursor INTO @MetaClassId
	END

	CLOSE classall_cursor
	DEALLOCATE classall_cursor

	COMMIT TRAN
RETURN

ERR:
	CLOSE classall_cursor
	DEALLOCATE classall_cursor

	ROLLBACK TRAN
RETURN
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_MetaFieldIsEncrypted]...';


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_MetaFieldIsEncrypted]
	@MetaFieldId 	INT,
	@IsEncrypted	BIT
AS
	SET NOCOUNT ON

	BEGIN TRAN

	IF NOT EXISTS( SELECT * FROM MetaField WHERE MetaFieldId = @MetaFieldId)
	BEGIN
		RAISERROR ('Wrong @MetaFieldId. The field is system or not exists.', 16,1)
		GOTO ERR
	END

	UPDATE MetaField SET IsEncrypted = @IsEncrypted WHERE MetaFieldId = @MetaFieldId

	DECLARE class_w_search CURSOR FOR
		SELECT MCMFR.MetaClassId FROM MetaClassMetaFieldRelation MCMFR
			INNER JOIN MetaField MF ON MF.MetaFieldId = MCMFR.MetaFieldId
			INNER JOIN MetaClass MC ON MC.MetaClassId = MCMFR.MetaClassId
		WHERE MCMFR.MetaFieldId = @MetaFieldId AND (MC.IsSystem = 1 OR MF.SystemMetaClassId = 0 )

	DECLARE @MetaClassId INT

	OPEN class_w_search
	FETCH NEXT FROM class_w_search INTO @MetaClassId

	WHILE @@FETCH_STATUS = 0
	BEGIN
		EXEC mdpsp_sys_CreateMetaClassProcedure @MetaClassId

		IF @@ERROR <> 0
		BEGIN
			CLOSE class_w_search
			DEALLOCATE class_w_search

			GOTO ERR
		END

		FETCH NEXT FROM class_w_search INTO @MetaClassId
	END

	CLOSE class_w_search
	DEALLOCATE class_w_search

	COMMIT TRAN

RETURN

ERR:
	ROLLBACK TRAN
RETURN
GO
PRINT N'Creating [dbo].[mdpsp_sys_MetaFieldAllowMultiLanguage]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_MetaFieldAllowMultiLanguage]
	@MetaFieldId 	INT,
	@MultiLanguageValue	BIT
AS
	SET NOCOUNT ON

	BEGIN TRAN

	IF NOT EXISTS( SELECT * FROM MetaField WHERE MetaFieldId = @MetaFieldId)
	BEGIN
		RAISERROR ('Wrong @MetaFieldId. The field is system or not exists.', 16,1)
		GOTO ERR
	END

	UPDATE MetaField SET MultiLanguageValue = @MultiLanguageValue WHERE MetaFieldId = @MetaFieldId

	DECLARE class_w_search CURSOR FOR
		SELECT MCMFR.MetaClassId FROM MetaClassMetaFieldRelation MCMFR
			INNER JOIN MetaField MF ON MF.MetaFieldId = MCMFR.MetaFieldId
			INNER JOIN MetaClass MC ON MC.MetaClassId = MCMFR.MetaClassId
		WHERE MCMFR.MetaFieldId = @MetaFieldId AND (MC.IsSystem = 1 OR MF.SystemMetaClassId = 0 )

	DECLARE @MetaClassId INT

	OPEN class_w_search
	FETCH NEXT FROM class_w_search INTO @MetaClassId

	WHILE @@FETCH_STATUS = 0
	BEGIN
		EXEC mdpsp_sys_CreateMetaClassProcedure @MetaClassId

		IF @@ERROR <> 0
		BEGIN
			CLOSE class_w_search
			DEALLOCATE class_w_search

			GOTO ERR
		END

		FETCH NEXT FROM class_w_search INTO @MetaClassId
	END

	CLOSE class_w_search
	DEALLOCATE class_w_search

	COMMIT TRAN

RETURN

ERR:
	ROLLBACK TRAN
RETURN
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_Search_ShoppingCart_CustomerAndName]...';


GO
CREATE PROCEDURE [dbo].[ecf_Search_ShoppingCart_CustomerAndName]
	@ApplicationId uniqueidentifier,
    @CustomerId uniqueidentifier,
	@Name nvarchar(64) = null
AS
BEGIN
    declare @results udttOrderGroupId
    
    insert into @results (OrderGroupId)
	select [OrderGroupId]
	from [OrderGroup_ShoppingCart] PO
	join OrderGroup OG on PO.ObjectId = OG.OrderGroupId
	where ([CustomerId] = @CustomerId) and [Name] = @Name and ApplicationId = @ApplicationId

    exec dbo.ecf_Search_OrderGroup @results

	IF(EXISTS(SELECT OrderGroupId from OrderGroup where OrderGroupId IN (SELECT [OrderGroupId] FROM @results)))
	begin
	    -- Return Purchase Order Details
		DECLARE @search_condition nvarchar(max)
		CREATE TABLE #OrderSearchResults (OrderGroupId int)
		insert into #OrderSearchResults (OrderGroupId) select OrderGroupId from @results
		SET @search_condition = N'INNER JOIN OrderGroup OG ON OG.OrderGroupId = T.ObjectId WHERE [T].[ObjectId] IN (SELECT [OrderGroupId] FROM #OrderSearchResults)'
		exec mdpsp_avto_OrderGroup_ShoppingCart_Search NULL, '''OrderGroup'' TableName, [OG].*', @search_condition

		DROP TABLE #OrderSearchResults
	end
END
GO
PRINT N'Creating [dbo].[ecf_Search_ShoppingCart_Customer]...';


GO
CREATE PROCEDURE [dbo].[ecf_Search_ShoppingCart_Customer]
	@ApplicationId uniqueidentifier,
	@CustomerId uniqueidentifier
AS
BEGIN
    declare @results udttOrderGroupId
    
    insert into @results (OrderGroupId)
	select [OrderGroupId]
	from [OrderGroup_ShoppingCart] PO 
	join OrderGroup OG on PO.ObjectId = OG.OrderGroupId 
	where ([CustomerId] = @CustomerId) and ApplicationId = @ApplicationId
	
	exec dbo.ecf_Search_OrderGroup @results
	
	IF(EXISTS(SELECT OrderGroupId from OrderGroup where OrderGroupId IN (SELECT [OrderGroupId] FROM @results)))
	begin
	    -- Return Purchase Order Details
		DECLARE @search_condition nvarchar(max)
		CREATE TABLE #OrderSearchResults (OrderGroupId int)
		insert into #OrderSearchResults (OrderGroupId) select OrderGroupId from @results
		SET @search_condition = N'INNER JOIN OrderGroup OG ON OG.OrderGroupId = T.ObjectId WHERE [T].[ObjectId] IN (SELECT [OrderGroupId] FROM #OrderSearchResults)'
		exec mdpsp_avto_OrderGroup_ShoppingCart_Search NULL, '''OrderGroup'' TableName, [OG].*', @search_condition
        
		DROP TABLE #OrderSearchResults
	end
END
GO
PRINT N'Creating [dbo].[ecf_Search_ShoppingCart]...';


GO
CREATE PROCEDURE [dbo].[ecf_Search_ShoppingCart]
    @ApplicationId				uniqueidentifier,
	@SQLClause 					nvarchar(max),
	@MetaSQLClause 				nvarchar(max),
    @OrderBy 					nvarchar(max),
	@Namespace					nvarchar(1024) = N'',
	@Classes					nvarchar(max) = N'',
    @StartingRec 				int,
	@NumRecords   				int,
	@RecordCount                int OUTPUT
AS
BEGIN
    declare @results udttOrderGroupId
    insert into @results (OrderGroupId)    
    exec dbo.ecf_OrderSearch
        @ApplicationId, 
        @SQLClause, 
        @MetaSQLClause, 
        @OrderBy, 
        @Namespace, 
        @Classes, 
        @StartingRec, 
        @NumRecords, 
        @RecordCount output
    
    exec dbo.ecf_Search_OrderGroup @results
    
	IF(EXISTS(SELECT OrderGroupId from OrderGroup where OrderGroupId IN (SELECT [OrderGroupId] FROM @results)))
	begin
	    -- Return Purchase Order Details
		DECLARE @search_condition nvarchar(max)
		CREATE TABLE #OrderSearchResults (OrderGroupId int)
		insert into #OrderSearchResults (OrderGroupId) select OrderGroupId from @results
		if(Len(@OrderBy) = 0)
		begin
			set @OrderBy = 'OrderGroupId DESC'
		end
		SET @search_condition = N'INNER JOIN OrderGroup OG ON OG.OrderGroupId = T.ObjectId WHERE [T].[ObjectId] IN (SELECT [OrderGroupId] FROM #OrderSearchResults) ORDER BY ' + @OrderBy
		exec mdpsp_avto_OrderGroup_ShoppingCart_Search NULL, '''OrderGroup'' TableName, [OG].*', @search_condition

		DROP TABLE #OrderSearchResults
	end
END
GO
PRINT N'Creating [dbo].[ecf_Search_PurchaseOrder_CustomerAndName]...';


GO
CREATE PROCEDURE [dbo].[ecf_Search_PurchaseOrder_CustomerAndName]
	@ApplicationId uniqueidentifier,
    @CustomerId uniqueidentifier,
	@Name nvarchar(64)
AS
BEGIN
    declare @results udttOrderGroupId
    
    insert into @results (OrderGroupId)
	select [OrderGroupId] 
	from [OrderGroup_PurchaseOrder] PO 
	join OrderGroup OG on PO.ObjectId = OG.OrderGroupId 
	where ([CustomerId] = @CustomerId) and [Name] = @Name and ApplicationId = @ApplicationId
	
	exec dbo.ecf_Search_OrderGroup @results
	
	-- Return Purchase Order Details
	DECLARE @search_condition nvarchar(max)
	CREATE TABLE #OrderSearchResults (OrderGroupId int)
	insert into #OrderSearchResults select OrderGroupId from @results
	SET @search_condition = N'INNER JOIN OrderGroup OG ON OG.OrderGroupId = T.ObjectId WHERE [T].[ObjectId] IN (SELECT [OrderGroupId] FROM #OrderSearchResults)'
	exec mdpsp_avto_OrderGroup_PurchaseOrder_Search NULL, '''OrderGroup'' TableName, [OG].*', @search_condition	

	DROP TABLE #OrderSearchResults
END
GO
PRINT N'Creating [dbo].[ecf_Search_PurchaseOrder_Customer]...';


GO
CREATE PROCEDURE [dbo].[ecf_Search_PurchaseOrder_Customer]
	@ApplicationId uniqueidentifier,
    @CustomerId uniqueidentifier
AS
BEGIN
    declare @results udttOrderGroupId
    
    insert into @results (OrderGroupId)
	select [OrderGroupId]
	from [OrderGroup_PurchaseOrder] PO
	join OrderGroup OG on PO.ObjectId = OG.OrderGroupId
	where ([CustomerId] = @CustomerId) and ApplicationId = @ApplicationId
	
	exec dbo.ecf_Search_OrderGroup @results
	
	-- Return Purchase Order Details
	DECLARE @search_condition nvarchar(max)
	CREATE TABLE #OrderSearchResults (OrderGroupId int)
	insert into #OrderSearchResults (OrderGroupId) select OrderGroupId from @results
	SET @search_condition = N'INNER JOIN OrderGroup OG ON OG.OrderGroupId = T.ObjectId WHERE [T].[ObjectId] IN (SELECT [OrderGroupId] FROM #OrderSearchResults)'
	exec mdpsp_avto_OrderGroup_PurchaseOrder_Search NULL, '''OrderGroup'' TableName, [OG].*', @search_condition

	DROP TABLE #OrderSearchResults
END
GO
PRINT N'Creating [dbo].[ecf_Search_PurchaseOrder]...';


GO
CREATE PROCEDURE [dbo].[ecf_Search_PurchaseOrder]
    @ApplicationId				uniqueidentifier,
	@SQLClause 					nvarchar(max),
	@MetaSQLClause 				nvarchar(max),
    @OrderBy 					nvarchar(max),
	@Namespace					nvarchar(1024) = N'',
	@Classes					nvarchar(max) = N'',
    @StartingRec 				int,
	@NumRecords   				int,
	@RecordCount                int OUTPUT
AS
BEGIN
    declare @results udttOrderGroupId
    insert into @results (OrderGroupId)    
    exec dbo.ecf_OrderSearch
        @ApplicationId, 
        @SQLClause, 
        @MetaSQLClause, 
        @OrderBy, 
        @Namespace, 
        @Classes, 
        @StartingRec, 
        @NumRecords, 
        @RecordCount output
	
	exec [dbo].[ecf_Search_OrderGroup] @results

    -- Return Purchase Order Details
	DECLARE @search_condition nvarchar(max)
	CREATE TABLE #OrderSearchResults (OrderGroupId int)
	insert into #OrderSearchResults select OrderGroupId from @results
	if(Len(@OrderBy) = 0)
	begin
		set @OrderBy = 'OrderGroupId DESC'
	end
	SET @search_condition = N'INNER JOIN OrderGroup OG ON OG.OrderGroupId = T.ObjectId WHERE [T].[ObjectId] IN (SELECT [OrderGroupId] FROM #OrderSearchResults) ORDER BY ' + @OrderBy
	exec mdpsp_avto_OrderGroup_PurchaseOrder_Search NULL, '''OrderGroup'' TableName, [OG].*', @search_condition

	DROP TABLE #OrderSearchResults
END
GO
PRINT N'Creating [dbo].[ecf_Search_PaymentPlan_CustomerAndName]...';


GO
CREATE PROCEDURE [dbo].[ecf_Search_PaymentPlan_CustomerAndName]
	@ApplicationId uniqueidentifier,
    @CustomerId uniqueidentifier,
	@Name nvarchar(64)
AS
BEGIN
	declare @results udttOrderGroupId
    
    insert into @results (OrderGroupId)    
    select OrderGroupId 
    from [OrderGroup_PaymentPlan] PO 
    join OrderGroup OG on PO.ObjectId = OG.OrderGroupId 
    where ([CustomerId] = @CustomerId) and [Name] = @Name and ApplicationId = @ApplicationId
    
    exec [dbo].[ecf_Search_OrderGroup] @results

    -- Return Purchase Order Details
	DECLARE @search_condition nvarchar(max)
	CREATE TABLE #OrderSearchResults (OrderGroupId int)
	insert into #OrderSearchResults select OrderGroupId from @results
	SET @search_condition = N'INNER JOIN OrderGroup OG ON OG.OrderGroupId = T.ObjectId WHERE [T].[ObjectId] IN (SELECT [OrderGroupId] FROM #OrderSearchResults)'
	exec mdpsp_avto_OrderGroup_PaymentPlan_Search NULL, '''OrderGroup'' TableName, [OG].*', @search_condition

	DROP TABLE #OrderSearchResults
END
GO
PRINT N'Creating [dbo].[ecf_Search_PaymentPlan_Customer]...';


GO
CREATE PROCEDURE [dbo].[ecf_Search_PaymentPlan_Customer]
	@ApplicationId uniqueidentifier,
    @CustomerId uniqueidentifier
AS
BEGIN
	declare @results udttOrderGroupId
    
    insert into @results (OrderGroupId)    
    select OrderGroupId 
    from [OrderGroup_PaymentPlan] PO 
    join OrderGroup OG on PO.ObjectId = OG.OrderGroupId
    where ([CustomerId] = @CustomerId) and ApplicationId = @ApplicationId
        
    exec [dbo].[ecf_Search_OrderGroup] @results

    -- Return Purchase Order Details
	DECLARE @search_condition nvarchar(max)
	CREATE TABLE #OrderSearchResults (OrderGroupId int)
	insert into #OrderSearchResults select OrderGroupId from @results
	SET @search_condition = N'INNER JOIN OrderGroup OG ON OG.OrderGroupId = T.ObjectId WHERE [T].[ObjectId] IN (SELECT [OrderGroupId] FROM #OrderSearchResults)'
	exec mdpsp_avto_OrderGroup_PaymentPlan_Search NULL, '''OrderGroup'' TableName, [OG].*', @search_condition

	DROP TABLE #OrderSearchResults
END
GO
PRINT N'Creating [dbo].[ecf_Search_PaymentPlan]...';


GO
CREATE PROCEDURE [dbo].[ecf_Search_PaymentPlan]
    @ApplicationId				uniqueidentifier,
	@SQLClause 					nvarchar(max),
	@MetaSQLClause 				nvarchar(max),
    @OrderBy 					nvarchar(max),
	@Namespace					nvarchar(1024) = N'',
	@Classes					nvarchar(max) = N'',
    @StartingRec 				int,
	@NumRecords   				int,
	@RecordCount                int OUTPUT
AS
BEGIN
    declare @results udttOrderGroupId
    insert into @results (OrderGroupId)    
    exec dbo.ecf_OrderSearch
        @ApplicationId, 
        @SQLClause, 
        @MetaSQLClause, 
        @OrderBy, 
        @Namespace, 
        @Classes, 
        @StartingRec, 
        @NumRecords, 
        @RecordCount output
	
	exec [dbo].[ecf_Search_OrderGroup] @results

    -- Return Purchase Order Details
	DECLARE @search_condition nvarchar(max)
	CREATE TABLE #OrderSearchResults (OrderGroupId int)
	insert into #OrderSearchResults select OrderGroupId from @results
	if(Len(@OrderBy) = 0)
	begin
		set @OrderBy = 'OrderGroupId DESC'
	end
	SET @search_condition = N'INNER JOIN OrderGroup OG ON OG.OrderGroupId = T.ObjectId WHERE [T].[ObjectId] IN (SELECT [OrderGroupId] FROM #OrderSearchResults) ORDER BY ' + @OrderBy
	exec mdpsp_avto_OrderGroup_PaymentPlan_Search NULL, '''OrderGroup'' TableName, [OG].*', @search_condition

	DROP TABLE #OrderSearchResults
END
GO
PRINT N'Creating [dbo].[aspnet_Membership_CreateUser]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_CreateUser
    @ApplicationName                        nvarchar(256),
    @UserName                               nvarchar(256),
    @Password                               nvarchar(128),
    @PasswordSalt                           nvarchar(128),
    @Email                                  nvarchar(256),
    @PasswordQuestion                       nvarchar(256),
    @PasswordAnswer                         nvarchar(128),
    @IsApproved                             bit,
    @CurrentTimeUtc                         datetime,
    @CreateDate                             datetime = NULL,
    @UniqueEmail                            int      = 0,
    @PasswordFormat                         int      = 0,
    @UserId                                 uniqueidentifier OUTPUT
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL

    DECLARE @NewUserId uniqueidentifier
    SELECT @NewUserId = NULL

    DECLARE @IsLockedOut bit
    SET @IsLockedOut = 0

    DECLARE @LastLockoutDate  datetime
    SET @LastLockoutDate = CONVERT( datetime, '17540101', 112 )

    DECLARE @FailedPasswordAttemptCount int
    SET @FailedPasswordAttemptCount = 0

    DECLARE @FailedPasswordAttemptWindowStart  datetime
    SET @FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 )

    DECLARE @FailedPasswordAnswerAttemptCount int
    SET @FailedPasswordAnswerAttemptCount = 0

    DECLARE @FailedPasswordAnswerAttemptWindowStart  datetime
    SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )

    DECLARE @NewUserCreated bit
    DECLARE @ReturnValue   int
    SET @ReturnValue = 0

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    SET @CreateDate = @CurrentTimeUtc

    SELECT  @NewUserId = UserId FROM dbo.aspnet_Users WHERE LOWER(@UserName) = LoweredUserName AND @ApplicationId = ApplicationId
    IF ( @NewUserId IS NULL )
    BEGIN
        SET @NewUserId = @UserId
        EXEC @ReturnValue = dbo.aspnet_Users_CreateUser @ApplicationId, @UserName, 0, @CreateDate, @NewUserId OUTPUT
        SET @NewUserCreated = 1
    END
    ELSE
    BEGIN
        SET @NewUserCreated = 0
        IF( @NewUserId <> @UserId AND @UserId IS NOT NULL )
        BEGIN
            SET @ErrorCode = 6
            GOTO Cleanup
        END
    END

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @ReturnValue = -1 )
    BEGIN
        SET @ErrorCode = 10
        GOTO Cleanup
    END

    IF ( EXISTS ( SELECT UserId
                  FROM   dbo.aspnet_Membership
                  WHERE  @NewUserId = UserId ) )
    BEGIN
        SET @ErrorCode = 6
        GOTO Cleanup
    END

    SET @UserId = @NewUserId

    IF (@UniqueEmail = 1)
    BEGIN
        IF (EXISTS (SELECT *
                    FROM  dbo.aspnet_Membership m WITH ( UPDLOCK, HOLDLOCK )
                    WHERE ApplicationId = @ApplicationId AND LoweredEmail = LOWER(@Email)))
        BEGIN
            SET @ErrorCode = 7
            GOTO Cleanup
        END
    END

    IF (@NewUserCreated = 0)
    BEGIN
        UPDATE dbo.aspnet_Users
        SET    LastActivityDate = @CreateDate
        WHERE  @UserId = UserId
        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END

    INSERT INTO dbo.aspnet_Membership
                ( ApplicationId,
                  UserId,
                  Password,
                  PasswordSalt,
                  Email,
                  LoweredEmail,
                  PasswordQuestion,
                  PasswordAnswer,
                  PasswordFormat,
                  IsApproved,
                  IsLockedOut,
                  CreateDate,
                  LastLoginDate,
                  LastPasswordChangedDate,
                  LastLockoutDate,
                  FailedPasswordAttemptCount,
                  FailedPasswordAttemptWindowStart,
                  FailedPasswordAnswerAttemptCount,
                  FailedPasswordAnswerAttemptWindowStart )
         VALUES ( @ApplicationId,
                  @UserId,
                  @Password,
                  @PasswordSalt,
                  @Email,
                  LOWER(@Email),
                  @PasswordQuestion,
                  @PasswordAnswer,
                  @PasswordFormat,
                  @IsApproved,
                  @IsLockedOut,
                  @CreateDate,
                  @CreateDate,
                  @CreateDate,
                  @LastLockoutDate,
                  @FailedPasswordAttemptCount,
                  @FailedPasswordAttemptWindowStart,
                  @FailedPasswordAnswerAttemptCount,
                  @FailedPasswordAnswerAttemptWindowStart )

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
	    SET @TranStarted = 0
	    COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ecf_OrderGroup_Delete]...';


GO

CREATE PROCEDURE [dbo].[ecf_OrderGroup_Delete]
(
	@OrderGroupId int
)
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @TempObjectId int

	-- Delete OrderForm
	DECLARE _cursorOrderForm CURSOR READ_ONLY FAST_FORWARD FOR 
		SELECT OrderFormId FROM [OrderForm] where OrderGroupId = @OrderGroupId
	OPEN _cursorOrderForm
	FETCH NEXT FROM _cursorOrderForm INTO @TempObjectId
	WHILE (@@fetch_status = 0) BEGIN
		EXEC [dbo].[ecf_OrderForm_Delete] @TempObjectId
		FETCH NEXT FROM _cursorOrderForm INTO @TempObjectId
	END
	CLOSE _cursorOrderForm
	DEALLOCATE _cursorOrderForm
	
	-- Delete OrderGroupAddress
	DECLARE _cursor CURSOR READ_ONLY FAST_FORWARD FOR 
		SELECT OrderGroupAddressId FROM [OrderGroupAddress] where OrderGroupId = @OrderGroupId
	OPEN _cursor
	FETCH NEXT FROM _cursor INTO @TempObjectId
	WHILE (@@fetch_status = 0) BEGIN
	EXEC [dbo].[mdpsp_avto_OrderGroupAddressEx_Delete] @TempObjectId
		FETCH NEXT FROM _cursor INTO @TempObjectId
	END
	CLOSE _cursor
	DEALLOCATE _cursor
	DELETE FROM [OrderGroupAddress] where OrderGroupId = @OrderGroupId

	EXEC [dbo].[mdpsp_avto_OrderGroup_PaymentPlan_Delete] @OrderGroupId
	EXEC [dbo].[mdpsp_avto_OrderGroup_PurchaseOrder_Delete] @OrderGroupId
	EXEC [dbo].[mdpsp_avto_OrderGroup_ShoppingCart_Delete] @OrderGroupId
	DELETE FROM [OrderGroup] where OrderGroupId = @OrderGroupId

	RETURN @@Error
END
GO
PRINT N'Creating [dbo].[mdpsp_sys_DeleteMetaFieldFromMetaClass]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_DeleteMetaFieldFromMetaClass]
	@MetaClassId	INT,
	@MetaFieldId	INT
AS
BEGIN
	IF NOT EXISTS(SELECT * FROM MetaClassMetaFieldRelation WHERE MetaFieldId = @MetaFieldId AND MetaClassId = @MetaClassId)
	BEGIN
		--RAISERROR ('Wrong @MetaFieldId and @MetaClassId.', 16, 1)
		-- GOTO ERR
		RETURN
	END

	-- Step 0. Prepare
	SET NOCOUNT ON

	DECLARE @MetaFieldName NVARCHAR(256)
	DECLARE @MetaFieldOwnerTable NVARCHAR(256)
	DECLARE @BaseMetaFieldOwnerTable NVARCHAR(256)
	DECLARE @IsAbstractClass BIT

	-- Step 1. Find a Field Name
	-- Step 2. Find a TableName
	IF NOT EXISTS(SELECT * FROM MetaField MF WHERE MetaFieldId = @MetaFieldId AND SystemMetaClassId = 0 )
	BEGIN
		RAISERROR ('Wrong @MetaFieldId.', 16, 1)
		GOTO ERR
	END

	SELECT @MetaFieldName = MF.[Name] FROM MetaField MF WHERE MetaFieldId = @MetaFieldId AND SystemMetaClassId = 0

	IF NOT EXISTS(SELECT * FROM MetaClass MC WHERE MetaClassId = @MetaClassId AND IsSystem = 0)
	BEGIN
		RAISERROR ('Wrong @MetaClassId.', 16, 1)
		GOTO ERR
	END

	SELECT @BaseMetaFieldOwnerTable = MC.TableName, @IsAbstractClass = MC.IsAbstract FROM MetaClass MC
		WHERE MetaClassId = @MetaClassId AND IsSystem = 0

	SET @MetaFieldOwnerTable = @BaseMetaFieldOwnerTable

	 IF @@ERROR <> 0 GOTO ERR

	BEGIN TRAN

	IF @IsAbstractClass = 0
	BEGIN
		EXEC mdpsp_sys_DeleteMetaKeyObjects @MetaClassId, @MetaFieldId
		 IF @@ERROR <> 0 GOTO ERR

		-- Delete Meta Dictionary Relations
		--DELETE FROM MetaMultiValueDictionary  WHERE MetaKey IN
		--	(SELECT MK.MetaKey FROM MetaKey MK WHERE MK.MetaFieldId = @MetaFieldId AND MK.MetaClassId = @MetaClassId)

		-- IF @@ERROR <> 0 GOTO ERR

		-- Delete Meta File
		--DELETE FROM MetaFileValue  WHERE MetaKey IN
		--	(SELECT MK.MetaKey FROM MetaKey MK WHERE MK.MetaFieldId = @MetaFieldId AND MK.MetaClassId = @MetaClassId)

		-- IF @@ERROR <> 0 GOTO ERR

		--DELETE FROM MetaKey WHERE MetaFieldId = @MetaFieldId AND MetaClassId = @MetaClassId

		-- IF @@ERROR <> 0 GOTO ERR

		-- Step 3. Delete Constrains
		EXEC mdpsp_sys_DeleteDContrainByTableAndField @MetaFieldOwnerTable, @MetaFieldName

		IF @@ERROR <> 0 GOTO ERR

		-- Step 4. Delete Field
		EXEC ('ALTER TABLE ['+@MetaFieldOwnerTable+'] DROP COLUMN [' + @MetaFieldName + ']')

		IF @@ERROR <> 0 GOTO ERR

		-- Update 2007/10/05: Remove meta field from Localization table (if table exists)
		SET @MetaFieldOwnerTable = @BaseMetaFieldOwnerTable + '_Localization'

		if exists (select * from dbo.sysobjects where id = object_id(@MetaFieldOwnerTable) and OBJECTPROPERTY(id, N'IsUserTable') = 1)
		begin
			-- a). Delete constraints
			EXEC mdpsp_sys_DeleteDContrainByTableAndField @MetaFieldOwnerTable, @MetaFieldName
			-- a). Drop column
			EXEC ('ALTER TABLE ['+@MetaFieldOwnerTable+'] DROP COLUMN [' + @MetaFieldName + ']')
		end
	END

	-- Step 5. Delete Field Info Record
	DELETE FROM MetaClassMetaFieldRelation WHERE MetaFieldId = @MetaFieldId AND MetaClassId = @MetaClassId
	IF @@ERROR <> 0 GOTO ERR

	IF @IsAbstractClass = 0
	BEGIN
		EXEC mdpsp_sys_CreateMetaClassProcedure @MetaClassId

		IF @@ERROR <> 0 GOTO ERR

		--IF @@ERROR <> 0 GOTO ERR
	END

	COMMIT TRAN
	RETURN
ERR:
	ROLLBACK TRAN

	RETURN @@Error
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_AddMetaFieldToMetaClass]...';


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_AddMetaFieldToMetaClass]
	@MetaClassId	INT,
	@MetaFieldId	INT,
	@Weight	INT
AS
BEGIN
	-- Step 0. Prepare
	SET NOCOUNT ON

	DECLARE @IsAbstractClass	BIT
	SELECT @IsAbstractClass = IsAbstract FROM MetaClass WHERE MetaClassId = @MetaClassId

    BEGIN TRAN
	IF NOT EXISTS( SELECT * FROM MetaClass WHERE MetaClassId = @MetaClassId AND IsSystem = 0)
	BEGIN
		RAISERROR ('Wrong @MetaClassId. The class is system or not exists.', 16,1)
		GOTO ERR
	END

	IF NOT EXISTS( SELECT * FROM MetaField WHERE MetaFieldId = @MetaFieldId AND SystemMetaClassId = 0)
	BEGIN
		RAISERROR ('Wrong @MetaFieldId. The field is system or not exists.', 16,1)
		GOTO ERR
	END

	IF @IsAbstractClass = 0
	BEGIN
		-- Step 1. Insert a new column.
		DECLARE @Name		NVARCHAR(256)
		DECLARE @DataTypeId	INT
		DECLARE @Length		INT
		DECLARE @AllowNulls		BIT
		DECLARE @MultiLanguageValue BIT
		DECLARE @AllowSearch	BIT
		DECLARE @IsEncrypted	BIT

		SELECT @Name = [Name], @DataTypeId = DataTypeId,  @Length = [Length], @AllowNulls = AllowNulls, @MultiLanguageValue = MultiLanguageValue, @AllowSearch = AllowSearch, @IsEncrypted = IsEncrypted
		FROM [MetaField]
        WHERE MetaFieldId = @MetaFieldId AND SystemMetaClassId = 0

		-- Step 1-1. Create a new column query.

		DECLARE @MetaClassTableName NVARCHAR(256)
		DECLARE @SqlDataTypeName NVARCHAR(256)
		DECLARE @IsVariableDataType BIT
		DECLARE @DefaultValue	NVARCHAR(50)

		SELECT @MetaClassTableName = TableName FROM MetaClass WHERE MetaClassId = @MetaClassId

		IF @@ERROR<> 0 GOTO ERR

		SELECT @SqlDataTypeName = SqlName,  @IsVariableDataType = Variable, @DefaultValue = DefaultValue FROM MetaDataType WHERE DataTypeId= @DataTypeId

		IF @@ERROR<> 0 GOTO ERR

		DECLARE @ExecLine 			NVARCHAR(1024)
		DECLARE @ExecLineLocalization 	NVARCHAR(1024)

		SET @ExecLine = 'ALTER TABLE [dbo].['+@MetaClassTableName+'] ADD ['+@Name+'] ' + @SqlDataTypeName
		SET @ExecLineLocalization = 'ALTER TABLE [dbo].['+@MetaClassTableName+'_Localization] ADD ['+@Name+'] ' + @SqlDataTypeName

		IF @IsVariableDataType = 1
		BEGIN
			SET @ExecLine = @ExecLine + ' (' + STR(@Length) + ')'
			SET @ExecLineLocalization = @ExecLineLocalization + ' (' + STR(@Length) + ')'
		END
		ELSE
		BEGIN
			IF @DataTypeId = 5 OR @DataTypeId = 24
			BEGIN
				DECLARE @MdpPrecision NVARCHAR(10)
				DECLARE @MdpScale NVARCHAR(10)

				SET @MdpPrecision = NULL
				SET @MdpScale = NULL

				SELECT @MdpPrecision = [Value] FROM MetaAttribute
				WHERE
					AttrOwnerId = @MetaFieldId AND
					AttrOwnerType = 2 AND
					[Key] = 'MdpPrecision'

				SELECT @MdpScale = [Value] FROM MetaAttribute
				WHERE
					AttrOwnerId = @MetaFieldId AND
					AttrOwnerType = 2 AND
					[Key] = 'MdpScale'

				IF @MdpPrecision IS NOT NULL AND @MdpScale IS NOT NULL
				BEGIN
					SET @ExecLine = @ExecLine + ' (' + @MdpPrecision + ',' + @MdpScale + ')'
					SET @ExecLineLocalization = @ExecLineLocalization + ' (' + @MdpPrecision + ',' + @MdpScale + ')'
				END
			END
		END

		SET @ExecLineLocalization = @ExecLineLocalization + ' NULL'

		IF @AllowNulls = 1
		BEGIN
			SET @ExecLine = @ExecLine + ' NULL'
		END
		ELSE
			BEGIN
				SET @ExecLine = @ExecLine + ' NOT NULL DEFAULT ' + @DefaultValue

				--IF @IsVariableDataType = 1
				--BEGIN
					--SET @ExecLine = @ExecLine + ' (' + STR(@Length) + ')'
				--END

				SET @ExecLine = @ExecLine  +'  WITH VALUES'
			END

		--PRINT (@ExecLine)

		-- Step 1-2. Create a new column.
		EXEC (@ExecLine)

		IF @@ERROR<> 0 GOTO ERR

		-- Step 1-3. Create a new localization column.
		EXEC (@ExecLineLocalization)

		IF @@ERROR <> 0 GOTO ERR
	END

	-- Step 2. Insert a record in to MetaClassMetaFieldRelation table.
	INSERT INTO [MetaClassMetaFieldRelation] (MetaClassId, MetaFieldId, Weight) VALUES(@MetaClassId, @MetaFieldId, @Weight)

	IF @@ERROR <> 0 GOTO ERR

	IF @IsAbstractClass = 0
	BEGIN
		EXEC mdpsp_sys_CreateMetaClassProcedure @MetaClassId

		IF @@ERROR <> 0 GOTO ERR
	END

	--IF @@ERROR <> 0 GOTO ERR

	COMMIT TRAN

    RETURN

ERR:
	ROLLBACK TRAN
    RETURN
END
GO
PRINT N'Creating [dbo].[mdpsp_sys_DeleteMetaField]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_DeleteMetaField]
	@MetaFieldId	INT
AS
BEGIN
	-- Step 0. Prepare
	SET NOCOUNT ON

	BEGIN TRAN

	IF NOT EXISTS(SELECT * FROM MetaClassMetaFieldRelation WHERE MetaFieldId = @MetaFieldId)
	BEGIN
		-- Step 5. Delete Dictionary Record
		DELETE FROM MetaDictionary WHERE MetaFieldId = @MetaFieldId

		IF @@ERROR <> 0 GOTO ERR

		-- Step 5. Delete Field Info Record
		DELETE FROM MetaField WHERE MetaFieldId = @MetaFieldId

		IF @@ERROR <> 0 GOTO ERR

		EXEC mdpsp_sys_ClearMetaAttribute @MetaFieldId, 2

		IF @@ERROR <> 0 GOTO ERR
	END
	ELSE
	BEGIN
		RAISERROR ('The MetaClass have got a link to @MetaFieldId.', 16, 1)
		GOTO ERR
	END

	COMMIT TRAN
	RETURN
ERR:
	ROLLBACK TRAN
	RETURN @@Error
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_DeleteMetaClass]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_DeleteMetaClass]
	@MetaClassId	INT
AS
BEGIN
	-- Step 0. Prepare
	SET NOCOUNT ON

	BEGIN TRAN

	DECLARE @MetaFieldOwnerTable	NVARCHAR(256)

	-- Check Childs Table
	IF EXISTS(SELECT *  FROM MetaClass MC WHERE ParentClassId = @MetaClassId)
	BEGIN
		RAISERROR ('The class have childs.', 16, 1)
		GOTO ERR
	END

	-- Step 1. Find a TableName
	IF EXISTS(SELECT *  FROM MetaClass MC WHERE MetaClassId = @MetaClassId)
	BEGIN
		IF EXISTS(SELECT *  FROM MetaClass MC WHERE MetaClassId = @MetaClassId AND IsSystem = 0 AND IsAbstract = 0)
		BEGIN
			SELECT @MetaFieldOwnerTable = TableName  FROM MetaClass MC WHERE MetaClassId = @MetaClassId AND IsSystem = 0 AND IsAbstract = 0

			IF @@ERROR <> 0 GOTO ERR

			EXEC mdpsp_sys_DeleteMetaClassProcedure @MetaClassId

			IF @@ERROR <> 0 GOTO ERR

			-- Step 2. Delete Table
			EXEC('DROP TABLE [dbo].[' + @MetaFieldOwnerTable + ']')

			IF @@ERROR <> 0 GOTO ERR

			EXEC('DROP TABLE [dbo].[' + @MetaFieldOwnerTable + '_Localization]')

				-- Delete Meta Dictionary Relations
			--DELETE FROM MetaMultiValueDictionary  WHERE MetaKey IN
			--	(SELECT MK.MetaKey FROM MetaKey MK WHERE MK.MetaClassId = @MetaClassId)

			-- IF @@ERROR <> 0 GOTO ERR

			-- Delete Meta File
			--DELETE FROM MetaFileValue  WHERE MetaKey IN
			--	(SELECT MK.MetaKey FROM MetaKey MK WHERE MK.MetaClassId = @MetaClassId)

			-- IF @@ERROR <> 0 GOTO ERR

			-- Delete Meta Key
			--DELETE FROM MetaKey WHERE MetaClassId = @MetaClassId

			EXEC mdpsp_sys_DeleteMetaKeyObjects @MetaClassId
			 IF @@ERROR <> 0 GOTO ERR

			-- Delete Meta Attribute
			EXEC mdpsp_sys_ClearMetaAttribute @MetaClassId, 1

			 IF @@ERROR <> 0 GOTO ERR

			-- Step 3. Delete MetaField Relations
			DELETE FROM MetaClassMetaFieldRelation WHERE MetaClassId = @MetaClassId

			IF @@ERROR <> 0 GOTO ERR

			-- Step 3. Delete MetaClass
			DELETE FROM MetaClass WHERE MetaClassId = @MetaClassId

			IF @@ERROR <> 0 GOTO ERR
		END
		ELSE
		BEGIN
			-- Delete Meta Attribute
			EXEC mdpsp_sys_ClearMetaAttribute @MetaClassId, 1

			 IF @@ERROR <> 0 GOTO ERR

			-- Step 3. Delete MetaField Relations
			DELETE FROM MetaClassMetaFieldRelation WHERE MetaClassId = @MetaClassId

			IF @@ERROR <> 0 GOTO ERR

			-- Step 3. Delete MetaField
			DELETE FROM MetaField WHERE SystemMetaClassId = @MetaClassId

			IF @@ERROR <> 0 GOTO ERR

			-- Step 3. Delete MetaClass
			DELETE FROM MetaClass WHERE MetaClassId = @MetaClassId

			IF @@ERROR <> 0 GOTO ERR

		END
	END
	ELSE
	BEGIN
		RAISERROR ('Wrong @MetaClassId.', 16, 1)
		GOTO ERR
	END

	COMMIT TRAN
	RETURN

ERR:
	ROLLBACK TRAN
	RETURN
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[mdpsp_sys_CreateMetaClass]...';


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_CreateMetaClass]
	@Namespace 		NVARCHAR(1024),
	@Name 		NVARCHAR(256),
	@FriendlyName		NVARCHAR(256),
	@TableName 		NVARCHAR(256),
	@ParentClassId 		INT,
	@IsSystem		BIT,
	@IsAbstract		BIT	=	0,
	@Description 		NTEXT,
	@Retval 		INT OUTPUT
AS
BEGIN
	-- Step 0. Prepare
	SET NOCOUNT ON
	SET @Retval = -1

BEGIN TRAN
	-- Step 1. Insert a new record in to the MetaClass table
	INSERT INTO [MetaClass] ([Namespace],[Name], [FriendlyName],[Description], [TableName], [ParentClassId], [PrimaryKeyName], [IsSystem], [IsAbstract])
		VALUES (@Namespace, @Name, @FriendlyName, @Description, @TableName, @ParentClassId, 'undefined', @IsSystem, @IsAbstract)

	IF @@ERROR <> 0 GOTO ERR

	SET @Retval = @@IDENTITY

	declare @tableParameter nvarchar(400)
	
	IF (SELECT AzureCompatible FROM dbo.AzureCompatible) = 1
		SET @tableParameter = ''
	ELSE
		SET @tableParameter = ' ON [PRIMARY]'
	
	IF @IsSystem = 1
	BEGIN
		IF NOT EXISTS(SELECT * FROM sysobjects WHERE [name] = @TableName AND [type] = 'U')
		BEGIN
			RAISERROR ('Wrong System TableName.', 16,1 )
			GOTO ERR
		END

		-- Step 3-2. Insert a new record in to the MetaField table
		INSERT INTO [MetaField]  ([Namespace], [Name], [FriendlyName], [SystemMetaClassId], [DataTypeId], [Length], [AllowNulls],  [MultiLanguageValue], [AllowSearch], [IsEncrypted])
			 SELECT @Namespace+ N'.' + @Name, SC .[name] , SC .[name] , @Retval ,MDT .[DataTypeId], SC .[length], SC .[isnullable], 0, 0, 0  FROM syscolumns AS SC
				INNER JOIN sysobjects SO ON SO.[id] = SC.[id]
				INNER JOIN systypes ST ON ST.[xtype] = SC.[xtype]
				INNER JOIN MetaDataType MDT ON MDT.[Name] = ST.[name]
			WHERE SO.[id]  = object_id( @TableName) and OBJECTPROPERTY( SO.[id], N'IsTable') = 1 and ST.name<>'sysname'
			ORDER BY colorder

		IF @@ERROR<> 0 GOTO ERR

		-- Step 3-2. Insert a new record in to the MetaClassMetaFieldRelation table
		INSERT INTO [MetaClassMetaFieldRelation]  (MetaClassId, MetaFieldId)
			SELECT @Retval, MetaFieldId FROM MetaField WHERE [SystemMetaClassId] = @Retval
	END
	ELSE
	BEGIN
		IF @IsAbstract = 0
		BEGIN
			-- Step 2. Create the @TableName table.
			EXEC('CREATE TABLE [dbo].[' + @TableName  + '] ([ObjectId] [int] NOT NULL , [CreatorId] [nvarchar](100), [Created] [datetime], [ModifierId] [nvarchar](100) , [Modified] [datetime] )' + @tableParameter)

			IF @@ERROR <> 0 GOTO ERR

			EXEC('ALTER TABLE [dbo].[' + @TableName  + '] WITH NOCHECK ADD CONSTRAINT [PK_' + @TableName  + '] PRIMARY KEY  CLUSTERED ([ObjectId])' + @tableParameter)

			IF @@ERROR <> 0 GOTO ERR

			IF EXISTS(SELECT * FROM MetaClass WHERE MetaClassId = @ParentClassId /* AND @IsSystem = 1 */ )
			BEGIN
				-- Step 3-2. Insert a new record in to the MetaClassMetaFieldRelation table
				INSERT INTO [MetaClassMetaFieldRelation]  (MetaClassId, MetaFieldId)
					SELECT @Retval, MetaFieldId FROM MetaField WHERE [SystemMetaClassId] = @ParentClassId
			END

			IF @@ERROR<> 0 GOTO ERR

			-- Step 2-2. Create the @TableName_Localization table
			EXEC('CREATE TABLE [dbo].[' + @TableName + '_Localization] ([Id] [int] IDENTITY (1, 1)  NOT NULL, [ObjectId] [int] NOT NULL , [ModifierId] [nvarchar](100), [Modified] [datetime], [Language] nvarchar(20) NOT NULL)' + @tableParameter)

			IF @@ERROR<> 0 GOTO ERR

			EXEC('ALTER TABLE [dbo].[' + @TableName  + '_Localization] WITH NOCHECK ADD CONSTRAINT [PK_' + @TableName  + '_Localization] PRIMARY KEY  CLUSTERED ([Id])' + @tableParameter)

			IF @@ERROR<> 0 GOTO ERR

			EXEC ('CREATE NONCLUSTERED INDEX IX_' + @TableName + '_Localization_Language ON dbo.' + @TableName + '_Localization ([Language])' + @tableParameter)

			IF @@ERROR<> 0 GOTO ERR

			EXEC ('CREATE UNIQUE NONCLUSTERED INDEX IX_' + @TableName + '_Localization_ObjectId ON dbo.' + @TableName + '_Localization (ObjectId,[Language])' + @tableParameter)

			IF @@ERROR<> 0 GOTO ERR

			declare @system_root_class_id int
			;with cte as (
				select MetaClassId, ParentClassId, IsSystem
				from MetaClass
				where MetaClassId = @ParentClassId
				union all
				select mc.MetaClassId, mc.ParentClassId, mc.IsSystem
				from cte
				join MetaClass mc on cte.ParentClassId = mc.MetaClassId and cte.IsSystem = 0
			)
			select @system_root_class_id = MetaClassId
			from cte
			where IsSystem = 1

			if exists (select 1 from MetaClass where MetaClassId = @ParentClassId and IsSystem = 1)
			begin
				declare @parent_table sysname
				declare @parent_key_column sysname
				select @parent_table = mc.TableName, @parent_key_column = c.name
				from MetaClass mc
				join sys.key_constraints kc on kc.parent_object_id = OBJECT_ID('[dbo].[' + mc.TableName + ']', 'U')
				join sys.index_columns ic on kc.parent_object_id = ic.object_id and kc.unique_index_id = ic.index_id
				join sys.columns c on ic.object_id = c.object_id and ic.column_id = c.column_id
				where mc.MetaClassId = @system_root_class_id
				  and kc.type = 'PK'
				  and ic.index_column_id = 1
				
				declare @child_table nvarchar(4000)
				declare child_tables cursor local for select @TableName as table_name union all select @TableName + '_Localization'
				open child_tables
				while 1=1
				begin
					fetch next from child_tables into @child_table
					if @@FETCH_STATUS != 0 break
					
					declare @fk_name nvarchar(4000) = 'FK_' + @child_table + '_' + @parent_table
					
					declare @pdeletecascade nvarchar(30) = ' on delete cascade'
					if (@child_table like '%_Localization'
						and @Namespace = 'Mediachase.Commerce.Orders.System') 
					  begin
					  set @pdeletecascade = ''
					  end

					declare @fk_sql nvarchar(4000) =
						'alter table [dbo].[' + @child_table + '] add ' +
						case when LEN(@fk_name) <= 128 then 'constraint [' + @fk_name + '] ' else '' end +
						'foreign key (ObjectId) references [dbo].[' + @parent_table + '] ([' + @parent_key_column + '])'+ @pdeletecascade + ' on update cascade'
												
					execute dbo.sp_executesql @fk_sql
				end
				close child_tables
				
				if @@ERROR != 0 goto ERR
			end

			EXEC mdpsp_sys_CreateMetaClassProcedure @Retval
			IF @@ERROR <> 0 GOTO ERR
		END
	END

	-- Update PK Value
	DECLARE @PrimaryKeyName	NVARCHAR(256)
	SELECT @PrimaryKeyName = name FROM sysobjects WHERE OBJECTPROPERTY(id, N'IsPrimaryKey') = 1 and parent_obj = OBJECT_ID(@TableName) and OBJECTPROPERTY(parent_obj, N'IsUserTable') = 1

	IF @PrimaryKeyName IS NOT NULL
		UPDATE [MetaClass] SET PrimaryKeyName = @PrimaryKeyName WHERE MetaClassId = @Retval

	COMMIT TRAN
RETURN

ERR:
	ROLLBACK TRAN
	SET @Retval = -1
RETURN
END
GO
PRINT N'Creating [dbo].[mdpsp_sys_CreateMetaClassProcedureAll]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[mdpsp_sys_CreateMetaClassProcedureAll]
AS
SET NOCOUNT ON
BEGIN TRAN
	DECLARE classall_cursor CURSOR FOR
		SELECT MetaClassId FROM MetaClass WHERE IsSystem =0 AND IsAbstract = 0

	DECLARE @MetaClassId	INT

	OPEN classall_cursor
	FETCH NEXT FROM classall_cursor INTO @MetaClassId

	WHILE @@FETCH_STATUS = 0
	BEGIN
		--PRINT @MetaClassId
		EXEC  mdpsp_sys_CreateMetaClassProcedure @MetaClassId
		IF @@ERROR <> 0 GOTO ERR

	FETCH NEXT FROM classall_cursor INTO @MetaClassId
	END

	CLOSE classall_cursor
	DEALLOCATE classall_cursor

	COMMIT TRAN
RETURN

ERR:
	CLOSE classall_cursor
	DEALLOCATE classall_cursor

	ROLLBACK TRAN
RETURN
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Applications] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Applications] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Applications] TO [aspnet_Profile_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Applications] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_WebPartState_User] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_WebPartState_Shared] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_WebPartState_Paths] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_UsersInRoles] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Roles] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Profiles] TO [aspnet_Profile_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_MembershipUsers] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Users] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Users] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Users] TO [aspnet_Profile_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Users] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_Profile_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_Profile_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_Roles_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_WebEvent_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_Profile_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_Profile_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_Roles_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_WebEvent_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_Profile_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_Profile_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_Roles_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_WebEvent_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Users_DeleteUser] TO [aspnet_Membership_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetUserByName] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetUserByName] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_CreateUser] TO [aspnet_Membership_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetPasswordWithFormat] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetUserByEmail] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetUserByEmail] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetUserByUserId] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetUserByUserId] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_ResetPassword] TO [aspnet_Membership_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_SetPassword] TO [aspnet_Membership_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetPassword] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_UpdateUserInfo] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_ChangePasswordQuestionAndAnswer] TO [aspnet_Membership_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_UpdateUser] TO [aspnet_Membership_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_UnlockUser] TO [aspnet_Membership_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_FindUsersByName] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetNumberOfUsersOnline] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetNumberOfUsersOnline] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetAllUsers] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_FindUsersByEmail] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Profile_GetProperties] TO [aspnet_Profile_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Profile_DeleteInactiveProfiles] TO [aspnet_Profile_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Profile_DeleteProfiles] TO [aspnet_Profile_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Profile_SetProperties] TO [aspnet_Profile_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Profile_GetProfiles] TO [aspnet_Profile_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Profile_GetNumberOfInactiveProfiles] TO [aspnet_Profile_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Roles_RoleExists] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Roles_DeleteRole] TO [aspnet_Roles_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Roles_CreateRole] TO [aspnet_Roles_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UsersInRoles_GetRolesForUser] TO [aspnet_Roles_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UsersInRoles_GetRolesForUser] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UsersInRoles_IsUserInRole] TO [aspnet_Roles_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UsersInRoles_IsUserInRole] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Roles_GetAllRoles] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UsersInRoles_FindUsersInRole] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UsersInRoles_GetUsersInRoles] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UsersInRoles_RemoveUsersFromRoles] TO [aspnet_Roles_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UsersInRoles_AddUsersToRoles] TO [aspnet_Roles_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Personalization_GetApplicationId] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Paths_CreatePath] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationPerUser_SetPageSettings] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationPerUser_ResetPageSettings] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationPerUser_GetPageSettings] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationAllUsers_SetPageSettings] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationAllUsers_ResetPageSettings] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationAllUsers_GetPageSettings] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationAdministration_GetCountOfState] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationAdministration_FindState] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationAdministration_ResetUserState] TO [aspnet_Personalization_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationAdministration_ResetSharedState] TO [aspnet_Personalization_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationAdministration_DeleteAllState] TO [aspnet_Personalization_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_WebEvent_LogEvent] TO [aspnet_WebEvent_FullAccess]
    AS [dbo];


/*
This script was created by Visual Studio on 2013-12-11 at 12:52.
Run this script on (local).CommerceManagerLocalRaven (EP\gogo) to make it the same as (local).CommerceManagerLocalHead (EP\gogo).
This script performs its actions in the following order:
1. Disable foreign-key constraints.
2. Perform DELETE commands. 
3. Perform UPDATE commands.
4. Perform INSERT commands.
5. Re-enable foreign-key constraints.
Please back up your target database before running this script.
*/
SET NUMERIC_ROUNDABORT OFF
GO
SET XACT_ABORT, ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
/*Pointer used for text / image updates. This might not be needed, but is declared here just in case*/
DECLARE @pv binary(16)
DECLARE @ApplicationId UniqueIdentifier = NEWID()

BEGIN TRANSACTION
ALTER TABLE [dbo].[mcmd_MetaClassDataSource] DROP CONSTRAINT [FK_mcmd_MetaClassDataSource_mcmd_MetaClass]
ALTER TABLE [dbo].[ShipmentDiscount] DROP CONSTRAINT [FK_ShipmentDiscount_Shipment]
ALTER TABLE [dbo].[TaxLanguage] DROP CONSTRAINT [FK_TaxLanguage_Tax]
ALTER TABLE [dbo].[dps_Node] DROP CONSTRAINT [FK_dps_Node_dps_NodeType]
ALTER TABLE [dbo].[dps_Node] DROP CONSTRAINT [FK_dps_Node_dps_PageDocument]
ALTER TABLE [dbo].[ShippingMethodParameter] DROP CONSTRAINT [FK_ShippingMethodParameter_ShippingMethod]
ALTER TABLE [dbo].[GroupPolicy] DROP CONSTRAINT [FK_ecf_mktg-GroupPolicy_ecf_mktg-Policy]
ALTER TABLE [dbo].[ShippingOptionParameter] DROP CONSTRAINT [FK_ShippingOptionParameter_ShippingOption]
ALTER TABLE [dbo].[MetaMultiValueDictionary] DROP CONSTRAINT [FK_MetaMultiValueDictionary_MetaKey]
ALTER TABLE [dbo].[OrderFormPayment] DROP CONSTRAINT [FK_OrderFormPayment_OrderForm]
ALTER TABLE [dbo].[ShippingMethodCase] DROP CONSTRAINT [FK_ShippingMethodCase_JurisdictionGroup]
ALTER TABLE [dbo].[ShippingMethodCase] DROP CONSTRAINT [ShippingMethod_ShippingMethodCase_FK1]
ALTER TABLE [dbo].[MetaDictionaryLocalization] DROP CONSTRAINT [FK_MetaDictionaryLocalization_MetaDictionary]
ALTER TABLE [dbo].[CurrencyRate] DROP CONSTRAINT [FK_CurrencyRate_Currency]
ALTER TABLE [dbo].[CurrencyRate] DROP CONSTRAINT [FK_CurrencyRate_Currency1]
ALTER TABLE [dbo].[OrderFormDiscount] DROP CONSTRAINT [FK_OrderFormDiscount_OrderForm]
ALTER TABLE [dbo].[PriceValue] DROP CONSTRAINT [FK_PriceValue_PriceGroup]
ALTER TABLE [dbo].[NavigationCommand] DROP CONSTRAINT [FK_NavigationCommand_NavigationItems]
ALTER TABLE [dbo].[WorkflowStatusAccess] DROP CONSTRAINT [FK_main_WorkflowStatusAccess_main_WorkflowStatus]
ALTER TABLE [dbo].[WorkflowStatus] DROP CONSTRAINT [FK_main_WorkflowStatus_main_Workflow]
ALTER TABLE [dbo].[ShippingMethod] DROP CONSTRAINT [FK_ShippingMethod_ShippingOption]
ALTER TABLE [dbo].[ShippingRegion] DROP CONSTRAINT [FK_ShippingRegion_ShippingMethod]
ALTER TABLE [dbo].[ShippingRegion] DROP CONSTRAINT [StateProvince_ShippingRegion_FK1]
ALTER TABLE [dbo].[Policy] DROP CONSTRAINT [FK_ecf_mktg-Policy_ecf_mktg-Expression]
ALTER TABLE [dbo].[mcmd_MetaFieldMap] DROP CONSTRAINT [FK_mcmd_MetaFieldMap_mcmd_MetaClass]
ALTER TABLE [dbo].[mcmd_MetaFieldMap] DROP CONSTRAINT [FK_mcmd_MetaFieldMap_mcmd_MetaClass1]
ALTER TABLE [dbo].[TaxValue] DROP CONSTRAINT [FK_TaxValue_JurisdictionGroup]
ALTER TABLE [dbo].[TaxValue] DROP CONSTRAINT [Tax_TaxValue_FK1]
ALTER TABLE [dbo].[LineItemDiscount] DROP CONSTRAINT [FK_LineItemDiscount_LineItem]
ALTER TABLE [dbo].[LineItem] DROP CONSTRAINT [FK_LineItem_OrderForm]
ALTER TABLE [dbo].[mcmd_MetaField] DROP CONSTRAINT [FK_mcmd_MetaField_mcmd_MetaClass]
ALTER TABLE [dbo].[aspnet_PersonalizationAllUsers] DROP CONSTRAINT [FK_PersAllUser_Paths]
ALTER TABLE [dbo].[NavigationParams] DROP CONSTRAINT [FK_NavigationParams_NavigationItems]
ALTER TABLE [dbo].[Shipment] DROP CONSTRAINT [FK_Shipment_OrderForm]
ALTER TABLE [dbo].[OrderForm] DROP CONSTRAINT [FK_OrderForm_OrderGroup]
ALTER TABLE [dbo].[Variation] DROP CONSTRAINT [FK_Variation_CatalogEntry]
ALTER TABLE [dbo].[Variation] DROP CONSTRAINT [FK_Variation_Merchant]
ALTER TABLE [dbo].[aspnet_Profile] DROP CONSTRAINT [FK_Profile_Users]
ALTER TABLE [dbo].[SegmentCondition] DROP CONSTRAINT [FK_ecf_mktg-SegmentCondition_ecf_mktg-Expression]
ALTER TABLE [dbo].[SegmentCondition] DROP CONSTRAINT [FK_ecf_mktg-SegmentCondition_ecf_mktg-Segment]
ALTER TABLE [dbo].[CatalogLanguage] DROP CONSTRAINT [FK_CatalogLanguage_Catalog]
ALTER TABLE [dbo].[OrderGroupAddress] DROP CONSTRAINT [FK_OrderGroupAddress_OrderGroup]
ALTER TABLE [dbo].[ApplicationLog] DROP CONSTRAINT [FK_ApplicationLog_Application]
ALTER TABLE [dbo].[ShippingCountry] DROP CONSTRAINT [FK_ShippingCountry_Country]
ALTER TABLE [dbo].[ShippingCountry] DROP CONSTRAINT [FK_ShippingCountry_ShippingMethod]
ALTER TABLE [dbo].[JurisdictionRelation] DROP CONSTRAINT [FK_JurisdictionRelation_Jurisdiction]
ALTER TABLE [dbo].[JurisdictionRelation] DROP CONSTRAINT [FK_JurisdictionRelation_JurisdictionGroup]
ALTER TABLE [dbo].[MetaClassMetaFieldRelation] DROP CONSTRAINT [FK_MetaClassMetaFieldRelation_MetaClass]
ALTER TABLE [dbo].[MetaClassMetaFieldRelation] DROP CONSTRAINT [FK_MetaClassMetaFieldRelation_MetaField]
ALTER TABLE [dbo].[MarketCampaigns] DROP CONSTRAINT [FK_MarketCampaigns_Campaign]
ALTER TABLE [dbo].[MarketCampaigns] DROP CONSTRAINT [FK_MarketCampaigns_Market]
ALTER TABLE [dbo].[CatalogEntryRelation] DROP CONSTRAINT [FK_CatalogEntryRelation_CatalogEntry]
ALTER TABLE [dbo].[CatalogEntryRelation] DROP CONSTRAINT [FK_CatalogEntryRelation_CatalogEntry1]
ALTER TABLE [dbo].[main_PageVersion] DROP CONSTRAINT [FK_main_PageVersion_main_LanguageInfo]
ALTER TABLE [dbo].[main_PageVersion] DROP CONSTRAINT [FK_main_PageVersion_main_PageTree]
ALTER TABLE [dbo].[main_PageVersion] DROP CONSTRAINT [FK_main_PageVersion_main_Templates]
ALTER TABLE [dbo].[CatalogEntryAssociation] DROP CONSTRAINT [FK_CatalogEntryAssociation_CatalogAssociation]
ALTER TABLE [dbo].[CatalogEntryAssociation] DROP CONSTRAINT [FK_CatalogEntryAssociation_CatalogEntry]
ALTER TABLE [dbo].[CatalogEntryAssociation] DROP CONSTRAINT [FK_CatalogEntryAssociation_AssociationType]
ALTER TABLE [dbo].[CatalogAssociation] DROP CONSTRAINT [FK_CatalogAssociation_CatalogEntry]
ALTER TABLE [dbo].[CatalogEntry] DROP CONSTRAINT [FK_CatalogEntity_Catalog]
ALTER TABLE [dbo].[aspnet_Roles] DROP CONSTRAINT [FK_Roles_Application]
ALTER TABLE [dbo].[aspnet_Paths] DROP CONSTRAINT [FK_Paths_Application]
ALTER TABLE [dbo].[WarehouseInventory] DROP CONSTRAINT [FK_WarehouseInventory_Warehouse]
ALTER TABLE [dbo].[PaymentMethodParameter] DROP CONSTRAINT [PaymentMethod_PaymentMethodParameter_FK1]
ALTER TABLE [dbo].[dps_ControlStorage] DROP CONSTRAINT [FK_dps_ControlStorage_dps_Control]
ALTER TABLE [dbo].[dps_Control] DROP CONSTRAINT [FK_dps_Control_dps_Node]
ALTER TABLE [dbo].[main_MenuItem_Resources] DROP CONSTRAINT [FK_main_MenuItem_Resources_main_MenuItem]
ALTER TABLE [dbo].[main_MenuItem] DROP CONSTRAINT [FK_main_MenuItem_main_Menu]
ALTER TABLE [dbo].[aspnet_UsersInRoles] DROP CONSTRAINT [FK_UsersInRoles_Roles]
ALTER TABLE [dbo].[aspnet_UsersInRoles] DROP CONSTRAINT [FK_UsersInRoles_Users]
ALTER TABLE [dbo].[CatalogSecurity] DROP CONSTRAINT [FK_CatalogSecurity_Catalog]
ALTER TABLE [dbo].[MetaDictionary] DROP CONSTRAINT [FK_MetaDictionary_MetaField]
ALTER TABLE [dbo].[MetaField] DROP CONSTRAINT [FK_MetaField_MetaDataType]
ALTER TABLE [dbo].[MarketPaymentMethods] DROP CONSTRAINT [FK_MarketPaymentMethods_Market]
ALTER TABLE [dbo].[MarketPaymentMethods] DROP CONSTRAINT [FK_MarketPaymentMethods_PaymentMethod]
ALTER TABLE [dbo].[PromotionLanguage] DROP CONSTRAINT [FK_ecf_mktg-PromotionLanguage_ecf_mktg-Promotion]
ALTER TABLE [dbo].[CampaignSegment] DROP CONSTRAINT [FK_ecf_mktg-CampaignSegment_ecf_mktg-Campaign]
ALTER TABLE [dbo].[CampaignSegment] DROP CONSTRAINT [FK_ecf_mktg-CampaignSegment_ecf_mktg-Segment]
ALTER TABLE [dbo].[PriceDetail] DROP CONSTRAINT [FK_PriceDetail_CatalogEntry]
ALTER TABLE [dbo].[PriceDetail] DROP CONSTRAINT [FK_PriceDetail_Currency]
ALTER TABLE [dbo].[PriceDetail] DROP CONSTRAINT [FK_PriceDetail_Market]
ALTER TABLE [dbo].[PriceDetail] DROP CONSTRAINT [FK_PriceDetail_PriceType]
ALTER TABLE [dbo].[MarketLanguages] DROP CONSTRAINT [FK_MarketLanguages_Market]
ALTER TABLE [dbo].[StateProvince] DROP CONSTRAINT [FK_StateProvince_Country]
ALTER TABLE [dbo].[SegmentMember] DROP CONSTRAINT [FK_ecf_mktg-SegmentMember_ecf_mktg-Segment]
ALTER TABLE [dbo].[MarketCountries] DROP CONSTRAINT [FK_MarketCountries_Market]
ALTER TABLE [dbo].[aspnet_Membership] DROP CONSTRAINT [FK_Membership_Applications]
ALTER TABLE [dbo].[aspnet_Membership] DROP CONSTRAINT [FK_Membership_Users]
ALTER TABLE [dbo].[MetaFileValue] DROP CONSTRAINT [FK_MetaFileValue_MetaKey]
ALTER TABLE [dbo].[CatalogNode] DROP CONSTRAINT [FK_CatalogItem_Catalog]
ALTER TABLE [dbo].[CatalogNodeRelation] DROP CONSTRAINT [FK_CatalogItemCategory_Catalog]
ALTER TABLE [dbo].[CatalogNodeRelation] DROP CONSTRAINT [FK_CatalogItemCategory_CatalogItem]
ALTER TABLE [dbo].[SiteCatalog] DROP CONSTRAINT [FK_SiteCatalog_Catalog]
ALTER TABLE [dbo].[PromotionCondition] DROP CONSTRAINT [FK_ecf_mktg-PromotionCondition_ecf_mktg-Expression]
ALTER TABLE [dbo].[PromotionCondition] DROP CONSTRAINT [FK_ecf_mktg-PromotionCondition_ecf_mktg-Promotion]
ALTER TABLE [dbo].[PromotionUsage] DROP CONSTRAINT [FK_PromotionUsage_Promotion]
ALTER TABLE [dbo].[ShippingPaymentRestriction] DROP CONSTRAINT [FK_ShippingPaymentRestriction_PaymentMethod]
ALTER TABLE [dbo].[ShippingPaymentRestriction] DROP CONSTRAINT [FK_ShippingPaymentRestriction_ShippingMethod]
ALTER TABLE [dbo].[aspnet_PersonalizationPerUser] DROP CONSTRAINT [FK_PersPerUser_Paths]
ALTER TABLE [dbo].[aspnet_PersonalizationPerUser] DROP CONSTRAINT [FK_PersPerUser_Users]
ALTER TABLE [dbo].[aspnet_Users] DROP CONSTRAINT [FK_Users_Applications]
ALTER TABLE [dbo].[SiteSecurity] DROP CONSTRAINT [FK_SiteSecurity_Site]
ALTER TABLE [dbo].[PromotionPolicy] DROP CONSTRAINT [FK_ecf_mktg-PromotionPolicy_ecf_mktg-Policy]
ALTER TABLE [dbo].[PromotionPolicy] DROP CONSTRAINT [FK_ecf_mktg-PromotionPolicy_ecf_mktg-Promotion]
ALTER TABLE [dbo].[ShippingPackage] DROP CONSTRAINT [FK_ShippingPackage_Package]
ALTER TABLE [dbo].[ShippingPackage] DROP CONSTRAINT [FK_ShippingPackage_ShippingOption]
ALTER TABLE [dbo].[Promotion] DROP CONSTRAINT [FK_ecf_mktg-Promotion_ecf_mktg-Campaign]
ALTER TABLE [dbo].[PriceGroup] DROP CONSTRAINT [FK_PriceGroup_CatalogEntry]
ALTER TABLE [dbo].[PriceGroup] DROP CONSTRAINT [FK_PriceGroup_Currency]
ALTER TABLE [dbo].[PriceGroup] DROP CONSTRAINT [FK_PriceGroup_Market]
ALTER TABLE [dbo].[PriceGroup] DROP CONSTRAINT [FK_PriceGroup_PriceType]
ALTER TABLE [dbo].[MarketCurrencies] DROP CONSTRAINT [FK_MarketCurrencies_Market]
ALTER TABLE [dbo].[Market] DROP CONSTRAINT [FK_Market_Currency]
ALTER TABLE [dbo].[NodeEntryRelation] DROP CONSTRAINT [FK_NodeEntryRelation_Catalog]
ALTER TABLE [dbo].[NodeEntryRelation] DROP CONSTRAINT [FK_NodeEntryRelation_CatalogEntry]
ALTER TABLE [dbo].[NodeEntryRelation] DROP CONSTRAINT [FK_NodeEntryRelation_CatalogNode]
ALTER TABLE [dbo].[mcmd_SelectedEnumValue] DROP CONSTRAINT [FK_mcmd_SelectedEnumValue_mcmd_MetaEnum]
INSERT INTO [dbo].[Market] ([MarketId], [Created], [Modified], [IsEnabled], [MarketName], [MarketDescription], [DefaultCurrencyCode], [DefaultLanguageCode]) VALUES (N'DEFAULT', '20131211 08:56:45.417', '20131211 08:56:45.417', 1, N'Default Market', N'Default Market', N'USD', N'en')
INSERT INTO [dbo].[MarketCurrencies] ([MarketId], [CurrencyCode]) VALUES (N'DEFAULT', N'USD')
SET IDENTITY_INSERT [dbo].[Currency] ON
INSERT INTO [dbo].[Currency] ([CurrencyCode], [Created], [Modified], [CurrencyName], [CompatCurrencyId], [CompatApplicationId]) VALUES (N'AUD', '20131211 08:56:45.410', '20131211 08:56:45.410', N'Australian dollar', 1, @ApplicationId)
INSERT INTO [dbo].[Currency] ([CurrencyCode], [Created], [Modified], [CurrencyName], [CompatCurrencyId], [CompatApplicationId]) VALUES (N'CAD', '20131211 08:56:45.410', '20131211 08:56:45.410', N'Canadian dollar', 2, @ApplicationId)
INSERT INTO [dbo].[Currency] ([CurrencyCode], [Created], [Modified], [CurrencyName], [CompatCurrencyId], [CompatApplicationId]) VALUES (N'CHF', '20131211 08:56:45.410', '20131211 08:56:45.410', N'Swiss franc', 3, @ApplicationId)
INSERT INTO [dbo].[Currency] ([CurrencyCode], [Created], [Modified], [CurrencyName], [CompatCurrencyId], [CompatApplicationId]) VALUES (N'CZK', '20131211 08:56:45.410', '20131211 08:56:45.410', N'Czech koruna', 4, @ApplicationId)
INSERT INTO [dbo].[Currency] ([CurrencyCode], [Created], [Modified], [CurrencyName], [CompatCurrencyId], [CompatApplicationId]) VALUES (N'DKK', '20131211 08:56:45.410', '20131211 08:56:45.410', N'Danish krone', 5, @ApplicationId)
INSERT INTO [dbo].[Currency] ([CurrencyCode], [Created], [Modified], [CurrencyName], [CompatCurrencyId], [CompatApplicationId]) VALUES (N'EEK', '20131211 08:56:45.410', '20131211 08:56:45.410', N'Estonian kroon', 6, @ApplicationId)
INSERT INTO [dbo].[Currency] ([CurrencyCode], [Created], [Modified], [CurrencyName], [CompatCurrencyId], [CompatApplicationId]) VALUES (N'EUR', '20131211 08:56:45.410', '20131211 08:56:45.410', N'Euro', 7, @ApplicationId)
INSERT INTO [dbo].[Currency] ([CurrencyCode], [Created], [Modified], [CurrencyName], [CompatCurrencyId], [CompatApplicationId]) VALUES (N'GBP', '20131211 08:56:45.410', '20131211 08:56:45.410', N'Pound sterling', 8, @ApplicationId)
INSERT INTO [dbo].[Currency] ([CurrencyCode], [Created], [Modified], [CurrencyName], [CompatCurrencyId], [CompatApplicationId]) VALUES (N'HUF', '20131211 08:56:45.410', '20131211 08:56:45.410', N'Hungarian forint', 9, @ApplicationId)
INSERT INTO [dbo].[Currency] ([CurrencyCode], [Created], [Modified], [CurrencyName], [CompatCurrencyId], [CompatApplicationId]) VALUES (N'ISK', '20131211 08:56:45.410', '20131211 08:56:45.410', N'Iceland krona', 10, @ApplicationId)
INSERT INTO [dbo].[Currency] ([CurrencyCode], [Created], [Modified], [CurrencyName], [CompatCurrencyId], [CompatApplicationId]) VALUES (N'JPY', '20131211 08:56:45.410', '20131211 08:56:45.410', N'Japanese yen', 11, @ApplicationId)
INSERT INTO [dbo].[Currency] ([CurrencyCode], [Created], [Modified], [CurrencyName], [CompatCurrencyId], [CompatApplicationId]) VALUES (N'KRW', '20131211 08:56:45.410', '20131211 08:56:45.410', N'South Korean won', 12, @ApplicationId)
INSERT INTO [dbo].[Currency] ([CurrencyCode], [Created], [Modified], [CurrencyName], [CompatCurrencyId], [CompatApplicationId]) VALUES (N'LTL', '20131211 08:56:45.410', '20131211 08:56:45.410', N'Lithuanian litas', 13, @ApplicationId)
INSERT INTO [dbo].[Currency] ([CurrencyCode], [Created], [Modified], [CurrencyName], [CompatCurrencyId], [CompatApplicationId]) VALUES (N'LVL', '20131211 08:56:45.410', '20131211 08:56:45.410', N'Latvian lats', 14, @ApplicationId)
INSERT INTO [dbo].[Currency] ([CurrencyCode], [Created], [Modified], [CurrencyName], [CompatCurrencyId], [CompatApplicationId]) VALUES (N'NOK', '20131211 08:56:45.410', '20131211 08:56:45.410', N'Norwegian krone', 15, @ApplicationId)
INSERT INTO [dbo].[Currency] ([CurrencyCode], [Created], [Modified], [CurrencyName], [CompatCurrencyId], [CompatApplicationId]) VALUES (N'NZD', '20131211 08:56:45.410', '20131211 08:56:45.410', N'New Zeland dollar', 16, @ApplicationId)
INSERT INTO [dbo].[Currency] ([CurrencyCode], [Created], [Modified], [CurrencyName], [CompatCurrencyId], [CompatApplicationId]) VALUES (N'PLN', '20131211 08:56:45.413', '20131211 08:56:45.413', N'Polish zloty', 17, @ApplicationId)
INSERT INTO [dbo].[Currency] ([CurrencyCode], [Created], [Modified], [CurrencyName], [CompatCurrencyId], [CompatApplicationId]) VALUES (N'RON', '20131211 08:56:45.413', '20131211 08:56:45.413', N'Romanian leu', 18, @ApplicationId)
INSERT INTO [dbo].[Currency] ([CurrencyCode], [Created], [Modified], [CurrencyName], [CompatCurrencyId], [CompatApplicationId]) VALUES (N'RUB', '20131211 08:56:45.413', '20131211 08:56:45.413', N'Ruble', 19, @ApplicationId)
INSERT INTO [dbo].[Currency] ([CurrencyCode], [Created], [Modified], [CurrencyName], [CompatCurrencyId], [CompatApplicationId]) VALUES (N'SEK', '20131211 08:56:45.413', '20131211 08:56:45.413', N'Swedish krona', 20, @ApplicationId)
INSERT INTO [dbo].[Currency] ([CurrencyCode], [Created], [Modified], [CurrencyName], [CompatCurrencyId], [CompatApplicationId]) VALUES (N'SKK', '20131211 08:56:45.413', '20131211 08:56:45.413', N'Slovak koruna', 21, @ApplicationId)
INSERT INTO [dbo].[Currency] ([CurrencyCode], [Created], [Modified], [CurrencyName], [CompatCurrencyId], [CompatApplicationId]) VALUES (N'TRY', '20131211 08:56:45.413', '20131211 08:56:45.413', N'Turkish lira', 22, @ApplicationId)
INSERT INTO [dbo].[Currency] ([CurrencyCode], [Created], [Modified], [CurrencyName], [CompatCurrencyId], [CompatApplicationId]) VALUES (N'USD', '20131211 08:56:45.413', '20131211 08:56:45.413', N'US dollar', 23, @ApplicationId)
INSERT INTO [dbo].[Currency] ([CurrencyCode], [Created], [Modified], [CurrencyName], [CompatCurrencyId], [CompatApplicationId]) VALUES (N'ZAR', '20131211 08:56:45.413', '20131211 08:56:45.413', N'South African rand', 24, @ApplicationId)
SET IDENTITY_INSERT [dbo].[Currency] OFF
INSERT INTO [dbo].[aspnet_Users] ([ApplicationId], [LoweredUserName], [UserId], [UserName], [MobileAlias], [IsAnonymous], [LastActivityDate]) VALUES (N'dae8247f-1940-4833-902d-d4a7cfc9d57f', N'admin', N'45f3ed19-05b0-4bc9-97c4-9d323b0a8959', N'admin', NULL, 0, '20131211 08:56:54.577')
INSERT INTO [dbo].[PaymentMethod] ([PaymentMethodId], [ApplicationId], [Name], [Description], [LanguageId], [SystemKeyword], [IsActive], [IsDefault], [ClassName], [PaymentImplementationClassName], [SupportsRecurring], [Ordering], [Created], [Modified]) VALUES (N'3b1cd10d-0c22-4bf4-9fba-563a9c27605c', @ApplicationId, N'Pay By Phone', N'Pay by phone payment', N'en', N'Generic', 1, 1, N'Mediachase.Commerce.Plugins.Payment.GenericPaymentGateway, Mediachase.Commerce.Plugins.Payment', N'Mediachase.Commerce.Orders.OtherPayment, Mediachase.Commerce', 1, 2, '20100420 00:00:00.000', '20100420 00:00:00.000')
INSERT INTO [dbo].[PaymentMethod] ([PaymentMethodId], [ApplicationId], [Name], [Description], [LanguageId], [SystemKeyword], [IsActive], [IsDefault], [ClassName], [PaymentImplementationClassName], [SupportsRecurring], [Ordering], [Created], [Modified]) VALUES (N'4b6e692f-d6fb-4552-9439-3a39d2251316', @ApplicationId, N'Pay By Credit Card', N'Pay By Credit Card', N'en', N'Authorize', 1, 0, N'Mediachase.Commerce.Plugins.Payment.Authorize.AuthorizePaymentGateway, Mediachase.Commerce.Plugins.Payment', N'Mediachase.Commerce.Orders.CreditCardPayment, Mediachase.Commerce', 1, 2, '20100420 00:00:00.000', '20100420 00:00:00.000')
INSERT INTO [dbo].[PaymentMethod] ([PaymentMethodId], [ApplicationId], [Name], [Description], [LanguageId], [SystemKeyword], [IsActive], [IsDefault], [ClassName], [PaymentImplementationClassName], [SupportsRecurring], [Ordering], [Created], [Modified]) VALUES (N'a6141930-df6c-48a7-8339-724ca005af52', @ApplicationId, N'Pay per Telefon', N'Pay per Telefon', N'de', N'Generic', 1, 1, N'Mediachase.Commerce.Plugins.Payment.GenericPaymentGateway, Mediachase.Commerce.Plugins.Payment', N'Mediachase.Commerce.Orders.OtherPayment, Mediachase.Commerce', 1, 2, '20100420 00:00:00.000', '20100420 00:00:00.000')
INSERT INTO [dbo].[PaymentMethod] ([PaymentMethodId], [ApplicationId], [Name], [Description], [LanguageId], [SystemKeyword], [IsActive], [IsDefault], [ClassName], [PaymentImplementationClassName], [SupportsRecurring], [Ordering], [Created], [Modified]) VALUES (N'c1ba5772-5c6f-473d-a812-fde7a350c0cf', @ApplicationId, N'ExchangePayment', N'Exchange Payment', N'en', N'Exchange', 0, 0, N'Mediachase.Commerce.Plugins.Payment.GenericPaymentGateway, Mediachase.Commerce.Plugins.Payment', N'Mediachase.Commerce.Orders.OtherPayment, Mediachase.Commerce', 1, 2, '20100420 00:00:00.000', '20100420 00:00:00.000')
INSERT INTO [dbo].[PaymentMethod] ([PaymentMethodId], [ApplicationId], [Name], [Description], [LanguageId], [SystemKeyword], [IsActive], [IsDefault], [ClassName], [PaymentImplementationClassName], [SupportsRecurring], [Ordering], [Created], [Modified]) VALUES (N'c59b8070-07fb-4177-a458-0e992432ffa5', @ApplicationId, N'Pago por telfono', N'Pago por telfono', N'es', N'Generic', 1, 1, N'Mediachase.Commerce.Plugins.Payment.GenericPaymentGateway, Mediachase.Commerce.Plugins.Payment', N'Mediachase.Commerce.Orders.OtherPayment, Mediachase.Commerce', 1, 2, '20100420 00:00:00.000', '20100420 00:00:00.000')
INSERT INTO [dbo].[aspnet_Applications] ([ApplicationId], [ApplicationName], [LoweredApplicationName], [Description]) VALUES (N'dae8247f-1940-4833-902d-d4a7cfc9d57f', N'ECApplication', N'ecapplication', NULL)
INSERT INTO [dbo].[aspnet_Membership] ([UserId], [ApplicationId], [Password], [PasswordFormat], [PasswordSalt], [MobilePIN], [Email], [LoweredEmail], [PasswordQuestion], [PasswordAnswer], [IsApproved], [IsLockedOut], [CreateDate], [LastLoginDate], [LastPasswordChangedDate], [LastLockoutDate], [FailedPasswordAttemptCount], [FailedPasswordAttemptWindowStart], [FailedPasswordAnswerAttemptCount], [FailedPasswordAnswerAttemptWindowStart], [Comment]) VALUES (N'45f3ed19-05b0-4bc9-97c4-9d323b0a8959', N'dae8247f-1940-4833-902d-d4a7cfc9d57f', N'h7I4zig4aMBSJuMqnfI98uZrof9PWvOs5WBSTUjn++ejyQtei7oiOIawJLmGzHGnEDUzZf7P+aF8ICmXbQ2KPQ==', 1, N'yzdvrrY2IljwAxvEjYUgZg==', NULL, N'admin@yourcompany.com', N'admin@yourcompany.com', NULL, NULL, 1, 0, '20131211 08:56:54.577', '20131211 08:56:54.577', '20131211 08:56:54.577', '17540101 00:00:00.000', 0, '17540101 00:00:00.000', 0, '17540101 00:00:00.000', NULL)
INSERT INTO [dbo].[MarketCountries] ([MarketId], [CountryCode]) VALUES (N'DEFAULT', N'USA')
SET IDENTITY_INSERT [dbo].[Country] ON
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (1, N'Aruba', 0, 1, N'ABW', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (2, N'Afghanistan', 0, 1, N'AFG', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (3, N'Angola', 0, 1, N'AGO', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (4, N'Anguilla', 0, 1, N'AIA', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (5, N'Albania', 0, 1, N'ALB', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (6, N'Andorra', 0, 1, N'AND', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (7, N'Netherlands Antilles', 0, 1, N'ANT', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (8, N'United Arab Emirates', 0, 1, N'ARE', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (9, N'Argentina', 0, 1, N'ARG', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (10, N'Armenia', 0, 1, N'ARM', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (11, N'American Samoa', 0, 1, N'ASM', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (12, N'Antarctica', 0, 1, N'ATA', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (13, N'French Southern Territories', 0, 1, N'ATF', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (14, N'Antigua and Barbuda', 0, 1, N'ATG', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (15, N'Australia', 0, 1, N'AUS', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (16, N'Austria', 0, 1, N'AUT', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (17, N'Azerbaijan', 0, 1, N'AZE', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (18, N'Burundi', 0, 1, N'BDI', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (19, N'Belgium', 0, 1, N'BEL', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (20, N'Benin', 0, 1, N'BEN', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (21, N'Burkina Faso', 0, 1, N'BFA', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (22, N'Bangladesh', 0, 1, N'BGD', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (23, N'Bulgaria', 0, 1, N'BGR', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (24, N'Bahrain', 0, 1, N'BHR', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (25, N'Bahamas', 0, 1, N'BHS', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (26, N'Bosnia and Herzegovina', 0, 1, N'BIH', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (27, N'Belarus', 0, 1, N'BLR', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (28, N'Belize', 0, 1, N'BLZ', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (29, N'Bermuda', 0, 1, N'BMU', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (30, N'Bolivia', 0, 1, N'BOL', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (31, N'Brazil', 0, 1, N'BRA', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (32, N'Barbados', 0, 1, N'BRB', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (33, N'Brunei Darussalam', 0, 1, N'BRN', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (34, N'Bhutan', 0, 1, N'BTN', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (35, N'Bouvet Island', 0, 1, N'BVT', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (36, N'Botswana', 0, 1, N'BWA', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (37, N'Central African Republic', 0, 1, N'CAF', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (38, N'Canada', 0, 1, N'CAN', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (39, N'Cocos (Keeling) Islands', 0, 1, N'CCK', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (40, N'Switzerland', 0, 1, N'CHE', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (41, N'Chile', 0, 1, N'CHL', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (42, N'China', 0, 1, N'CHN', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (43, N'Cote D\Ivoire', 0, 1, N'CIV', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (44, N'Cameroon', 0, 1, N'CMR', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (45, N'Congo, the Democratic Republic of the', 0, 1, N'COD', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (46, N'Congo', 0, 1, N'COG', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (47, N'Cook Islands', 0, 1, N'COK', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (48, N'Colombia', 0, 1, N'COL', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (49, N'Comoros', 0, 1, N'COM', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (50, N'Cape Verde', 0, 1, N'CPV', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (51, N'Costa Rica', 0, 1, N'CRI', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (52, N'Cuba', 0, 1, N'CUB', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (53, N'Christmas Island', 0, 1, N'CXR', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (54, N'Cayman Islands', 0, 1, N'CYM', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (55, N'Cyprus', 0, 1, N'CYP', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (56, N'Czech Republic', 0, 1, N'CZE', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (57, N'Germany', 0, 1, N'DEU', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (58, N'Djibouti', 0, 1, N'DJI', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (59, N'Dominica', 0, 1, N'DMA', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (60, N'Denmark', 0, 1, N'DNK', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (61, N'Dominican Republic', 0, 1, N'DOM', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (62, N'Algeria', 0, 1, N'DZA', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (63, N'Ecuador', 0, 1, N'ECU', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (64, N'Egypt', 0, 1, N'EGY', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (65, N'Eritrea', 0, 1, N'ERI', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (66, N'Western Sahara', 0, 1, N'ESH', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (67, N'Spain', 0, 1, N'ESP', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (68, N'Estonia', 0, 1, N'EST', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (69, N'Ethiopia', 0, 1, N'ETH', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (70, N'Finland', 0, 1, N'FIN', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (71, N'Fiji', 0, 1, N'FJI', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (72, N'Falkland Islands (Malvinas)', 0, 1, N'FLK', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (73, N'France', 0, 1, N'FRA', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (74, N'Faroe Islands', 0, 1, N'FRO', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (75, N'Micronesia, Federated States of', 0, 1, N'FSM', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (76, N'Gabon', 0, 1, N'GAB', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (77, N'United Kingdom', 0, 1, N'GBR', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (78, N'Georgia', 0, 1, N'GEO', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (79, N'Ghana', 0, 1, N'GHA', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (80, N'Gibraltar', 0, 1, N'GIB', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (81, N'Guinea', 0, 1, N'GIN', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (82, N'Guadeloupe', 0, 1, N'GLP', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (83, N'Gambia', 0, 1, N'GMB', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (84, N'Guinea-Bissau', 0, 1, N'GNB', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (85, N'Equatorial Guinea', 0, 1, N'GNQ', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (86, N'Greece', 0, 1, N'GRC', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (87, N'Grenada', 0, 1, N'GRD', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (88, N'Greenland', 0, 1, N'GRL', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (89, N'Guatemala', 0, 1, N'GTM', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (90, N'French Guiana', 0, 1, N'GUF', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (91, N'Guam', 0, 1, N'GUM', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (92, N'Guyana', 0, 1, N'GUY', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (93, N'Hong Kong', 0, 1, N'HKG', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (94, N'Heard Island and Mcdonald Islands', 0, 1, N'HMD', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (95, N'Honduras', 0, 1, N'HND', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (96, N'Croatia', 0, 1, N'HRV', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (97, N'Haiti', 0, 1, N'HTI', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (98, N'Hungary', 0, 1, N'HUN', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (99, N'Indonesia', 0, 1, N'IDN', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (100, N'India', 0, 1, N'IND', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (101, N'British Indian Ocean Territory', 0, 1, N'IOT', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (102, N'Ireland', 0, 1, N'IRL', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (103, N'Iran, Islamic Republic of', 0, 1, N'IRN', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (104, N'Iraq', 0, 1, N'IRQ', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (105, N'Iceland', 0, 1, N'ISL', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (106, N'Israel', 0, 1, N'ISR', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (107, N'Italy', 0, 1, N'ITA', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (108, N'Jamaica', 0, 1, N'JAM', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (109, N'Jordan', 0, 1, N'JOR', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (110, N'Japan', 0, 1, N'JPN', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (111, N'Kazakhstan', 0, 1, N'KAZ', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (112, N'Kenya', 0, 1, N'KEN', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (113, N'Kyrgyzstan', 0, 1, N'KGZ', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (114, N'Cambodia', 0, 1, N'KHM', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (115, N'Kiribati', 0, 1, N'KIR', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (116, N'Saint Kitts and Nevis', 0, 1, N'KNA', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (117, N'Korea, Republic of', 0, 1, N'KOR', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (118, N'Kuwait', 0, 1, N'KWT', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (119, N'Lao People\s Democratic Republic', 0, 1, N'LAO', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (120, N'Lebanon', 0, 1, N'LBN', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (121, N'Liberia', 0, 1, N'LBR', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (122, N'Libyan Arab Jamahiriya', 0, 1, N'LBY', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (123, N'Saint Lucia', 0, 1, N'LCA', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (124, N'Liechtenstein', 0, 1, N'LIE', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (125, N'Sri Lanka', 0, 1, N'LKA', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (126, N'Lesotho', 0, 1, N'LSO', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (127, N'Lithuania', 0, 1, N'LTU', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (128, N'Luxembourg', 0, 1, N'LUX', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (129, N'Latvia', 0, 1, N'LVA', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (130, N'Macao', 0, 1, N'MAC', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (131, N'Morocco', 0, 1, N'MAR', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (132, N'Monaco', 0, 1, N'MCO', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (133, N'Moldova, Republic of', 0, 1, N'MDA', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (134, N'Madagascar', 0, 1, N'MDG', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (135, N'Maldives', 0, 1, N'MDV', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (136, N'Mexico', 0, 1, N'MEX', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (137, N'Marshall Islands', 0, 1, N'MHL', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (138, N'Macedonia, the Former Yugoslav Republic of', 0, 1, N'MKD', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (139, N'Mali', 0, 1, N'MLI', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (140, N'Malta', 0, 1, N'MLT', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (141, N'Myanmar', 0, 1, N'MMR', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (142, N'Mongolia', 0, 1, N'MNG', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (143, N'Northern Mariana Islands', 0, 1, N'MNP', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (144, N'Mozambique', 0, 1, N'MOZ', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (145, N'Mauritania', 0, 1, N'MRT', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (146, N'Montserrat', 0, 1, N'MSR', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (147, N'Martinique', 0, 1, N'MTQ', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (148, N'Mauritius', 0, 1, N'MUS', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (149, N'Malawi', 0, 1, N'MWI', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (150, N'Malaysia', 0, 1, N'MYS', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (151, N'Mayotte', 0, 1, N'MYT', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (152, N'Namibia', 0, 1, N'NAM', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (153, N'New Caledonia', 0, 1, N'NCL', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (154, N'Niger', 0, 1, N'NER', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (155, N'Norfolk Island', 0, 1, N'NFK', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (156, N'Nigeria', 0, 1, N'NGA', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (157, N'Nicaragua', 0, 1, N'NIC', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (158, N'Niue', 0, 1, N'NIU', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (159, N'Netherlands', 0, 1, N'NLD', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (160, N'Norway', 0, 1, N'NOR', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (161, N'Nepal', 0, 1, N'NPL', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (162, N'Nauru', 0, 1, N'NRU', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (163, N'New Zealand', 0, 1, N'NZL', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (164, N'Oman', 0, 1, N'OMN', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (165, N'Pakistan', 0, 1, N'PAK', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (166, N'Panama', 0, 1, N'PAN', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (167, N'Pitcairn', 0, 1, N'PCN', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (168, N'Peru', 0, 1, N'PER', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (169, N'Philippines', 0, 1, N'PHL', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (170, N'Palau', 0, 1, N'PLW', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (171, N'Papua New Guinea', 0, 1, N'PNG', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (172, N'Poland', 0, 1, N'POL', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (173, N'Puerto Rico', 0, 1, N'PRI', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (174, N'Korea, Democratic People\s Republic of', 0, 1, N'PRK', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (175, N'Portugal', 0, 1, N'PRT', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (176, N'Paraguay', 0, 1, N'PRY', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (177, N'Palestinian Territory, Occupied', 0, 1, N'PSE', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (178, N'French Polynesia', 0, 1, N'PYF', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (179, N'Qatar', 0, 1, N'QAT', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (180, N'Reunion', 0, 1, N'REU', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (181, N'Romania', 0, 1, N'ROM', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (182, N'Russian Federation', 0, 1, N'RUS', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (183, N'Rwanda', 0, 1, N'RWA', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (184, N'Saudi Arabia', 0, 1, N'SAU', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (185, N'Serbia and Montenegro', 0, 1, N'SCG', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (186, N'Sudan', 0, 1, N'SDN', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (187, N'Senegal', 0, 1, N'SEN', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (188, N'Singapore', 0, 1, N'SGP', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (189, N'South Georgia and the South Sandwich Islands', 0, 1, N'SGS', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (190, N'Saint Helena', 0, 1, N'SHN', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (191, N'Svalbard and Jan Mayen', 0, 1, N'SJM', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (192, N'Solomon Islands', 0, 1, N'SLB', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (193, N'Sierra Leone', 0, 1, N'SLE', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (194, N'El Salvador', 0, 1, N'SLV', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (195, N'San Marino', 0, 1, N'SMR', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (196, N'Somalia', 0, 1, N'SOM', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (197, N'Saint Pierre and Miquelon', 0, 1, N'SPM', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (198, N'Sao Tome and Principe', 0, 1, N'STP', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (199, N'Suriname', 0, 1, N'SUR', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (200, N'Slovakia', 0, 1, N'SVK', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (201, N'Slovenia', 0, 1, N'SVN', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (202, N'Sweden', 0, 1, N'SWE', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (203, N'Swaziland', 0, 1, N'SWZ', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (204, N'Seychelles', 0, 1, N'SYC', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (205, N'Syrian Arab Republic', 0, 1, N'SYR', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (206, N'Turks and Caicos Islands', 0, 1, N'TCA', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (207, N'Chad', 0, 1, N'TCD', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (208, N'Togo', 0, 1, N'TGO', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (209, N'Thailand', 0, 1, N'THA', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (210, N'Tajikistan', 0, 1, N'TJK', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (211, N'Tokelau', 0, 1, N'TKL', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (212, N'Turkmenistan', 0, 1, N'TKM', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (213, N'Timor-Leste', 0, 1, N'TLS', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (214, N'Tonga', 0, 1, N'TON', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (215, N'Trinidad and Tobago', 0, 1, N'TTO', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (216, N'Tunisia', 0, 1, N'TUN', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (217, N'Turkey', 0, 1, N'TUR', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (218, N'Tuvalu', 0, 1, N'TUV', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (219, N'Taiwan, Province of China', 0, 1, N'TWN', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (220, N'Tanzania, United Republic of', 0, 1, N'TZA', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (221, N'Uganda', 0, 1, N'UGA', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (222, N'Ukraine', 0, 1, N'UKR', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (223, N'United States Minor Outlying Islands', 0, 1, N'UMI', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (224, N'Uruguay', 0, 1, N'URY', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (225, N'United States', -1, 1, N'USA', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (226, N'Uzbekistan', 0, 1, N'UZB', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (227, N'Holy See (Vatican City State)', 0, 1, N'VAT', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (228, N'Saint Vincent and the Grenadines', 0, 1, N'VCT', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (229, N'Venezuela', 0, 1, N'VEN', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (230, N'Virgin Islands, British', 0, 1, N'VGB', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (231, N'Virgin Islands, U.s.', 0, 1, N'VIR', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (232, N'Viet Nam', 0, 1, N'VNM', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (233, N'Vanuatu', 0, 1, N'VUT', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (234, N'Wallis and Futuna', 0, 1, N'WLF', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (235, N'Samoa', 0, 1, N'WSM', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (236, N'Yemen', 0, 1, N'YEM', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (237, N'South Africa', 0, 1, N'ZAF', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (238, N'Zambia', 0, 1, N'ZMB', @ApplicationId)
INSERT INTO [dbo].[Country] ([CountryId], [Name], [Ordering], [Visible], [Code], [ApplicationId]) VALUES (239, N'Zimbabwe', 0, 1, N'ZWE', @ApplicationId)
SET IDENTITY_INSERT [dbo].[Country] OFF
SET IDENTITY_INSERT [dbo].[StateProvince] ON
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (1, N'Alaska', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (2, N'Alabama', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (3, N'American Samoa', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (4, N'Arizona', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (5, N'Arkansas', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (6, N'California', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (7, N'Colorado', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (8, N'Connecticut', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (9, N'Delaware', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (10, N'District of Columbia', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (11, N'Federated States of Micronesia', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (12, N'Florida', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (13, N'Georgia', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (14, N'Guam', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (15, N'Hawaii', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (16, N'Idaho', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (17, N'Illinois', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (18, N'Indiana', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (19, N'Iowa', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (20, N'Kansas', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (21, N'Kentucky', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (22, N'Louisiana', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (23, N'Maine', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (24, N'Marshall Islands', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (25, N'Maryland', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (26, N'Massachusetts', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (27, N'Michigan', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (28, N'Minnesota', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (29, N'Mississippi', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (30, N'Missouri', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (31, N'Montana', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (32, N'Nebraska', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (33, N'Nevada', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (34, N'New Hampshire', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (35, N'New Jersey', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (36, N'New Mexico', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (37, N'New York', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (38, N'North Carolina', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (39, N'North Dakota', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (40, N'Northern Mariana Islands', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (41, N'Ohio', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (42, N'Oklahoma', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (43, N'Oregon', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (44, N'Palau', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (45, N'Pennsylvania', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (46, N'Puerto Rico', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (47, N'Rhode Island', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (48, N'South Carolina', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (49, N'South Dakota', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (50, N'Tennessee', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (51, N'Texas', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (52, N'Utah', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (53, N'Vermont', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (54, N'Virgin Islands', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (55, N'Virginia', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (56, N'Washington', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (57, N'West Virginia', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (58, N'Wisconsin', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (59, N'Wyoming', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (60, N'Armed Forces Africa', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (61, N'Armed Forces Americas (except Canada)', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (62, N'Armed Forces Canada', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (63, N'Armed Forces Europe', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (64, N'Armed Forces Middle East', 0, 1, 225)
INSERT INTO [dbo].[StateProvince] ([StateProvinceId], [Name], [Ordering], [Visible], [CountryId]) VALUES (65, N'Armed Forces Pacific', 0, 1, 225)
SET IDENTITY_INSERT [dbo].[StateProvince] OFF
INSERT INTO [dbo].[MarketLanguages] ([MarketId], [LanguageCode]) VALUES (N'DEFAULT', N'en')
INSERT INTO [dbo].[MarketPaymentMethods] ([MarketId], [PaymentMethodId]) VALUES (N'DEFAULT', N'3b1cd10d-0c22-4bf4-9fba-563a9c27605c')
INSERT INTO [dbo].[MarketPaymentMethods] ([MarketId], [PaymentMethodId]) VALUES (N'DEFAULT', N'4b6e692f-d6fb-4552-9439-3a39d2251316')
INSERT INTO [dbo].[MarketPaymentMethods] ([MarketId], [PaymentMethodId]) VALUES (N'DEFAULT', N'a6141930-df6c-48a7-8339-724ca005af52')
INSERT INTO [dbo].[MarketPaymentMethods] ([MarketId], [PaymentMethodId]) VALUES (N'DEFAULT', N'c1ba5772-5c6f-473d-a812-fde7a350c0cf')
INSERT INTO [dbo].[MarketPaymentMethods] ([MarketId], [PaymentMethodId]) VALUES (N'DEFAULT', N'c59b8070-07fb-4177-a458-0e992432ffa5')
INSERT INTO [dbo].[aspnet_UsersInRoles] ([UserId], [RoleId]) VALUES (N'45f3ed19-05b0-4bc9-97c4-9d323b0a8959', N'54fe9056-83ca-4b17-b80d-4037388f79a6')
INSERT INTO [dbo].[aspnet_UsersInRoles] ([UserId], [RoleId]) VALUES (N'45f3ed19-05b0-4bc9-97c4-9d323b0a8959', N'aeb9c440-b56f-4c2a-a1d9-710dad71ebc1')
INSERT INTO [dbo].[aspnet_UsersInRoles] ([UserId], [RoleId]) VALUES (N'45f3ed19-05b0-4bc9-97c4-9d323b0a8959', N'cd7d1b9c-5fe4-472d-88c3-c9c216e6eb0f')
INSERT INTO [dbo].[PriceType] ([PriceTypeId], [PriceTypeName]) VALUES (0, N'Default Price')
INSERT INTO [dbo].[PriceType] ([PriceTypeId], [PriceTypeName]) VALUES (1, N'Specific Customer')
INSERT INTO [dbo].[PriceType] ([PriceTypeId], [PriceTypeName]) VALUES (2, N'Customer Price Group')
SET IDENTITY_INSERT [dbo].[Warehouse] ON
INSERT INTO [dbo].[Warehouse] ([WarehouseId], [ApplicationId], [Name], [CreatorId], [Created], [ModifierId], [Modified], [IsActive], [IsPrimary], [SortOrder], [Code], [IsFulfillmentCenter], [IsPickupLocation], [IsDeliveryLocation], [FirstName], [LastName], [Organization], [Line1], [Line2], [City], [State], [CountryCode], [CountryName], [PostalCode], [RegionCode], [RegionName], [DaytimePhoneNumber], [EveningPhoneNumber], [FaxNumber], [Email]) VALUES (1, @ApplicationId, N'Default Warehouse', N'', '20131211 09:56:48.990', N'', '20131211 09:56:48.990', 1, 1, 0, N'default', 1, 1, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)
SET IDENTITY_INSERT [dbo].[Warehouse] OFF
INSERT INTO [dbo].[aspnet_Roles] ([ApplicationId], [LoweredRoleName], [RoleId], [RoleName], [Description]) VALUES (N'dae8247f-1940-4833-902d-d4a7cfc9d57f', N'administrators', N'aeb9c440-b56f-4c2a-a1d9-710dad71ebc1', N'Administrators', NULL)
INSERT INTO [dbo].[aspnet_Roles] ([ApplicationId], [LoweredRoleName], [RoleId], [RoleName], [Description]) VALUES (N'dae8247f-1940-4833-902d-d4a7cfc9d57f', N'webadmins', N'54fe9056-83ca-4b17-b80d-4037388f79a6', N'WebAdmins', NULL)
INSERT INTO [dbo].[aspnet_Roles] ([ApplicationId], [LoweredRoleName], [RoleId], [RoleName], [Description]) VALUES (N'dae8247f-1940-4833-902d-d4a7cfc9d57f', N'webeditors', N'cd7d1b9c-5fe4-472d-88c3-c9c216e6eb0f', N'WebEditors', NULL)
SET IDENTITY_INSERT [dbo].[Jurisdiction] ON
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (1, N'United States', N'', N'USA', 2, N'', N'', N'', N'', N'', N'', @ApplicationId, N'USA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (2, N'UK postcode - Aberdeen(AB)', NULL, N'GBR', 2, N'AB', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-AB')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (3, N'UK postcode - St Albans(AL)', NULL, N'GBR', 2, N'AL', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-AL')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (4, N'UK postcode - Birmingham(B)', NULL, N'GBR', 2, N'B', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-B')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (5, N'UK postcode - Bath(BA)', NULL, N'GBR', 2, N'BA', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-BA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (6, N'UK postcode - Blackburn(BB)', NULL, N'GBR', 2, N'BB', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-BB')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (7, N'UK postcode - Bradford(BD)', NULL, N'GBR', 2, N'BD', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-BD')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (8, N'UK postcode - Bournemouth(BH)', NULL, N'GBR', 2, N'BH', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-BH')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (9, N'UK postcode - Bolton(BL)', NULL, N'GBR', 2, N'BL', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-BL')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (10, N'UK postcode - Brighton(BN)', NULL, N'GBR', 2, N'BN', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-BN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (11, N'UK postcode - Bromley(BR)', NULL, N'GBR', 2, N'BR', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-BR')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (12, N'UK postcode - Bristol(BS)', NULL, N'GBR', 2, N'BS', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-BS')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (13, N'UK postcode - Belfast(BT)', NULL, N'GBR', 2, N'BT', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-BT')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (14, N'UK postcode - Carlisle(CA)', NULL, N'GBR', 2, N'CA', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-CA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (15, N'UK postcode - Cambridge(CB)', NULL, N'GBR', 2, N'CB', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-CB')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (16, N'UK postcode - Cardiff(CF)', NULL, N'GBR', 2, N'CF', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-CF')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (17, N'UK postcode - Chester(CH)', NULL, N'GBR', 2, N'CH', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-CH')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (18, N'UK postcode - Chelmsford(CM)', NULL, N'GBR', 2, N'CM', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-CM')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (19, N'UK postcode - Colchester(CO)', NULL, N'GBR', 2, N'CO', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-CO')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (20, N'UK postcode - Croydon(CR)', NULL, N'GBR', 2, N'CR', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-CR')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (21, N'UK postcode - Canterbury(CT)', NULL, N'GBR', 2, N'CT', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-CT')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (22, N'UK postcode - Coventry(CV)', NULL, N'GBR', 2, N'CV', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-CV')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (23, N'UK postcode - Crewe(CW)', NULL, N'GBR', 2, N'CW', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-CW')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (24, N'UK postcode - Dartford(DA)', NULL, N'GBR', 2, N'DA', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-DA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (25, N'UK postcode - Dundee(DD)', NULL, N'GBR', 2, N'DD', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-DD')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (26, N'UK postcode - Derby(DE)', NULL, N'GBR', 2, N'DE', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-DE')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (27, N'UK postcode - Dumfries(DG)', NULL, N'GBR', 2, N'DG', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-DG')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (28, N'UK postcode - Durham(DH)', NULL, N'GBR', 2, N'DH', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-DH')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (29, N'UK postcode - Darlington(DL)', NULL, N'GBR', 2, N'DL', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-DL')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (30, N'UK postcode - Doncaster(DN)', NULL, N'GBR', 2, N'DN', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-DN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (31, N'UK postcode - Dorchester(DT)', NULL, N'GBR', 2, N'DT', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-DT')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (32, N'UK postcode - Dudley(DY)', NULL, N'GBR', 2, N'DY', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-DY')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (33, N'UK postcode - London E(E)', NULL, N'GBR', 2, N'E', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-E')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (34, N'UK postcode - London EC(EC)', NULL, N'GBR', 2, N'EC', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-EC')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (35, N'UK postcode - Edinburgh(EH)', NULL, N'GBR', 2, N'EH', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-EH')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (36, N'UK postcode - Enfield(EN)', NULL, N'GBR', 2, N'EN', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-EN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (37, N'UK postcode - Exeter(EX)', NULL, N'GBR', 2, N'EX', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-EX')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (38, N'UK postcode - Falkirk(FK)', NULL, N'GBR', 2, N'FK', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-FK')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (39, N'UK postcode - Blackpool(FY)', NULL, N'GBR', 2, N'FY', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-FY')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (40, N'UK postcode - Glasgow(G)', NULL, N'GBR', 2, N'G', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-G')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (41, N'UK postcode - Gloucester(GL)', NULL, N'GBR', 2, N'GL', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-GL')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (42, N'UK postcode - Guildford(GU)', NULL, N'GBR', 2, N'GU', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-GU')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (43, N'UK postcode - Guernsey(GY)', NULL, N'GBR', 2, N'GY', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-GY')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (44, N'UK postcode - Harrow(HA)', NULL, N'GBR', 2, N'HA', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-HA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (45, N'UK postcode - Huddersfield(HD)', NULL, N'GBR', 2, N'HD', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-HD')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (46, N'UK postcode - Harrogate(HG)', NULL, N'GBR', 2, N'HG', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-HG')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (47, N'UK postcode - Hemel Hempstead(HP)', NULL, N'GBR', 2, N'HP', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-HP')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (48, N'UK postcode - Hereford(HR)', NULL, N'GBR', 2, N'HR', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-HR')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (49, N'UK postcode - Outer Hebride(HS)', NULL, N'GBR', 2, N'HS', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-HS')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (50, N'UK postcode - Hull(HU)', NULL, N'GBR', 2, N'HU', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-HU')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (51, N'UK postcode - Halifax(HX)', NULL, N'GBR', 2, N'HX', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-HX')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (52, N'UK postcode - Ilfor(IG)', NULL, N'GBR', 2, N'IG', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-IG')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (53, N'UK postcode - Isle of Man(IM)', NULL, N'GBR', 2, N'IM', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-IM')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (54, N'UK postcode - Ipswich(IP)', NULL, N'GBR', 2, N'IP', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-IP')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (55, N'UK postcode - Inverness(IV)', NULL, N'GBR', 2, N'IV', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-IV')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (56, N'UK postcode - Morayshire(IV3-IV24)', NULL, N'GBR', 2, N'IV3', N'IV24', NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-IV3')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (57, N'UK postcode - Morayshire(IV26-IV99)', NULL, N'GBR', 2, N'IV26', N'IV99', NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-IV26')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (58, N'UK postcode - Jersey(JE)', NULL, N'GBR', 2, N'JE', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-JE')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (59, N'UK postcode - Kilmarnock(KA)', NULL, N'GBR', 2, N'KA', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-KA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (60, N'UK postcode - Brodwick & Millport(KA27-KA28)', NULL, N'GBR', 2, N'KA27', N'KA28', NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-KA27')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (61, N'UK postcode - Kingston upon Thames(KT)', NULL, N'GBR', 2, N'KT', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-KT')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (62, N'UK postcode - Kirkwall(KW)', NULL, N'GBR', 2, N'KW', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-KW')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (63, N'UK postcode - Orkney(KW1-KW17)', NULL, N'GBR', 2, N'KW1', N'KW17', NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-KW1')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (64, N'UK postcode - Kirkcaldy(KY)', NULL, N'GBR', 2, N'KY', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-KY')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (65, N'UK postcode - Liverpool(L)', NULL, N'GBR', 2, N'L', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-L')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (66, N'UK postcode - Lancaster(LA)', NULL, N'GBR', 2, N'LA', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-LA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (67, N'UK postcode - Llandrindod Well(LD)', NULL, N'GBR', 2, N'LD', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-LD')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (68, N'UK postcode - Leicester(LE)', NULL, N'GBR', 2, N'LE', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-LE')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (69, N'UK postcode - Llandudno(LL)', NULL, N'GBR', 2, N'LL', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-LL')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (70, N'UK postcode - Lincoln(LN)', NULL, N'GBR', 2, N'LN', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-LN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (71, N'UK postcode - Leeds(LS)', NULL, N'GBR', 2, N'LS', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-LS')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (72, N'UK postcode - Luton(LU)', NULL, N'GBR', 2, N'LU', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-LU')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (73, N'UK postcode - Manchester(M)', NULL, N'GBR', 2, N'M', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-M')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (74, N'UK postcode - Rochester(ME)', NULL, N'GBR', 2, N'ME', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-ME')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (75, N'UK postcode - Milton Keynes(MK)', NULL, N'GBR', 2, N'MK', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-MK')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (76, N'UK postcode - Motherwell(ML)', NULL, N'GBR', 2, N'ML', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-ML')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (77, N'UK postcode - London N(N)', NULL, N'GBR', 2, N'N', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-N')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (78, N'UK postcode - Newcastle upon Tyne(NE)', NULL, N'GBR', 2, N'NE', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-NE')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (79, N'UK postcode - Nottingham(NG)', NULL, N'GBR', 2, N'NG', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-NG')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (80, N'UK postcode - Northampton(NN)', NULL, N'GBR', 2, N'NN', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-NN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (81, N'UK postcode - Newport(NP)', NULL, N'GBR', 2, N'NP', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-NP')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (82, N'UK postcode - Norwich(NR)', NULL, N'GBR', 2, N'NR', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-NR')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (83, N'UK postcode - London NW(NW)', NULL, N'GBR', 2, N'NW', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-NW')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (84, N'UK postcode - Oldham(OL)', NULL, N'GBR', 2, N'OL', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-OL')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (85, N'UK postcode - Oxford(OX)', NULL, N'GBR', 2, N'OX', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-OX')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (86, N'UK postcode - Paisley(PA)', NULL, N'GBR', 2, N'PA', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-PA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (87, N'UK postcode - Argyll(PA20-PA99)', NULL, N'GBR', 2, N'PA20', N'PA99', NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-PA20')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (88, N'UK postcode - Peterborough(PE)', NULL, N'GBR', 2, N'PE', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-PE')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (89, N'UK postcode - Perth(PH)', NULL, N'GBR', 2, N'PH', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-PH')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (90, N'UK postcode - Inverness-Shire(PH19-PH44)', NULL, N'GBR', 2, N'PH19', N'PH44', NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-PH19')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (91, N'UK postcode - Plymouth(PL)', NULL, N'GBR', 2, N'PL', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-PL')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (92, N'UK postcode - Portsmouth(PO)', NULL, N'GBR', 2, N'PO', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-PO')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (93, N'UK postcode - Preston(PR)', NULL, N'GBR', 2, N'PR', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-PR')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (94, N'UK postcode - Reading(RG)', NULL, N'GBR', 2, N'RG', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-RG')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (95, N'UK postcode - Redhill(RH)', NULL, N'GBR', 2, N'RH', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-RH')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (96, N'UK postcode - Romford(RM)', NULL, N'GBR', 2, N'RM', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-RM')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (97, N'UK postcode - Sheffield(S)', NULL, N'GBR', 2, N'S', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-S')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (98, N'UK postcode - Swansea(SA)', NULL, N'GBR', 2, N'SA', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-SA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (99, N'UK postcode - London SE(SE)', NULL, N'GBR', 2, N'SE', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-SE')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (100, N'UK postcode - Stevenage(SG)', NULL, N'GBR', 2, N'SG', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-SG')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (101, N'UK postcode - Stockport(SK)', NULL, N'GBR', 2, N'SK', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-SK')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (102, N'UK postcode - Slough(SL)', NULL, N'GBR', 2, N'SL', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-SL')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (103, N'UK postcode - Sutto(SM)', NULL, N'GBR', 2, N'SM', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-SM')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (104, N'UK postcode - Swindon(SN)', NULL, N'GBR', 2, N'SN', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-SN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (105, N'UK postcode - Southampton(SO)', NULL, N'GBR', 2, N'SO', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-SO')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (106, N'UK postcode - Salisbury(SP)', NULL, N'GBR', 2, N'SP', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-SP')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (107, N'UK postcode - Sunderland(SR)', NULL, N'GBR', 2, N'SR', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-SR')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (108, N'UK postcode - Southend on Sea(SS)', NULL, N'GBR', 2, N'SS', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-SS')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (109, N'UK postcode - Stoke-on-Trent(ST)', NULL, N'GBR', 2, N'ST', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-ST')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (110, N'UK postcode - London SW(SW)', NULL, N'GBR', 2, N'SW', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-SW')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (111, N'UK postcode - Shrewsbury(SY)', NULL, N'GBR', 2, N'SY', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-SY')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (112, N'UK postcode - Taunton(TA)', NULL, N'GBR', 2, N'TA', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-TA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (113, N'UK postcode - Galashiels(TD)', NULL, N'GBR', 2, N'TD', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-TD')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (114, N'UK postcode - Telford(TF)', NULL, N'GBR', 2, N'TF', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-TF')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (115, N'UK postcode - Tonbridge(TN)', NULL, N'GBR', 2, N'TN', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-TN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (116, N'UK postcode - Torquay(TQ)', NULL, N'GBR', 2, N'TQ', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-TQ')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (117, N'UK postcode - Truro(TR)', NULL, N'GBR', 2, N'TR', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-TR')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (118, N'UK postcode - Truro(TR2-TR25)', NULL, N'GBR', 2, N'TR2', N'TR25', NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-TR2')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (119, N'UK postcode - Cleveland(TS)', NULL, N'GBR', 2, N'TS', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-TS')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (120, N'UK postcode - Twickenham(TW)', NULL, N'GBR', 2, N'TW', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-TW')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (121, N'UK postcode - Southall(UB)', NULL, N'GBR', 2, N'UB', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-UB')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (122, N'UK postcode - London W(W)', NULL, N'GBR', 2, N'W', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-W')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (123, N'UK postcode - Warrington(WA)', NULL, N'GBR', 2, N'WA', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-WA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (124, N'UK postcode - London WC(WC)', NULL, N'GBR', 2, N'WC', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-WC')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (125, N'UK postcode - Watford(WD)', NULL, N'GBR', 2, N'WD', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-WD')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (126, N'UK postcode - Wakefield(WF)', NULL, N'GBR', 2, N'WF', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-WF')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (127, N'UK postcode - Wigan(WN)', NULL, N'GBR', 2, N'WN', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-WN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (128, N'UK postcode - Worcester(WR)', NULL, N'GBR', 2, N'WR', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-WR')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (129, N'UK postcode - Walsall(WS)', NULL, N'GBR', 2, N'WS', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-WS')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (130, N'UK postcode - Wolverhampton(WV)', NULL, N'GBR', 2, N'WV', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-WV')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (131, N'UK postcode - York(YO)', NULL, N'GBR', 2, N'YO', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-YO')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (132, N'UK postcode - Lerwick(ZE)', NULL, N'GBR', 2, N'ZE', NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GBR-ZE')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (133, N'Country - Afghanistan(AFG)', NULL, N'AFG', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'AFG')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (134, N'Country - Aland Islands(ALA)', NULL, N'ALA', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'ALA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (135, N'Country - Albania(ALB)', NULL, N'ALB', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'ALB')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (136, N'Country - Algeria(DZA)', NULL, N'DZA', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'DZA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (137, N'Country - American Samoa(ASM)', NULL, N'ASM', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'ASM')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (138, N'Country - Andorra(AND)', NULL, N'AND', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'AND')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (139, N'Country - Angola(AGO)', NULL, N'AGO', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'AGO')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (140, N'Country - Anguilla(AIA)', NULL, N'AIA', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'AIA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (141, N'Country - Antarctica(ATA)', NULL, N'ATA', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'ATA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (142, N'Country - Antigua and Barbuda(ATG)', NULL, N'ATG', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'ATG')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (143, N'Country - Argentina(ARG)', NULL, N'ARG', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'ARG')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (144, N'Country - Armenia(ARM)', NULL, N'ARM', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'ARM')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (145, N'Country - Aruba(ABW)', NULL, N'ABW', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'ABW')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (146, N'Country - Australia(AUS)', NULL, N'AUS', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'AUS')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (147, N'Country - Austria(AUT)', NULL, N'AUT', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'AUT')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (148, N'Country - Azerbaijan(AZE)', NULL, N'AZE', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'AZE')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (149, N'Country - Bahamas(BHS)', NULL, N'BHS', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'BHS')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (150, N'Country - Bahrain(BHR)', NULL, N'BHR', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'BHR')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (151, N'Country - Bangladesh(BGD)', NULL, N'BGD', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'BGD')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (152, N'Country - Barbados(BRB)', NULL, N'BRB', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'BRB')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (153, N'Country - Belarus(BLR)', NULL, N'BLR', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'BLR')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (154, N'Country - Belgium(BEL)', NULL, N'BEL', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'BEL')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (155, N'Country - Belize(BLZ)', NULL, N'BLZ', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'BLZ')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (156, N'Country - Benin(BEN)', NULL, N'BEN', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'BEN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (157, N'Country - Bermuda(BMU)', NULL, N'BMU', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'BMU')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (158, N'Country - Bhutan(BTN)', NULL, N'BTN', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'BTN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (159, N'Country - Bolivia(BOL)', NULL, N'BOL', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'BOL')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (160, N'Country - Bosnia and Herzegovina(BIH)', NULL, N'BIH', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'BIH')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (161, N'Country - Botswana(BWA)', NULL, N'BWA', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'BWA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (162, N'Country - Bouvet Island(BVT)', NULL, N'BVT', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'BVT')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (163, N'Country - Brazil(BRA)', NULL, N'BRA', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'BRA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (164, N'Country - British Virgin Islands(VGB)', NULL, N'VGB', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'VGB')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (165, N'Country - British Indian Ocean Territory(IOT)', NULL, N'IOT', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'IOT')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (166, N'Country - Brunei Darussalam(BRN)', NULL, N'BRN', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'BRN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (167, N'Country - Bulgaria(BGR)', NULL, N'BGR', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'BGR')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (168, N'Country - Burkina Faso(BFA)', NULL, N'BFA', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'BFA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (169, N'Country - Burundi(BDI)', NULL, N'BDI', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'BDI')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (170, N'Country - Cambodia(KHM)', NULL, N'KHM', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'KHM')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (171, N'Country - Cameroon(CMR)', NULL, N'CMR', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'CMR')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (172, N'Country - Canada(CAN)', NULL, N'CAN', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'CAN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (173, N'Country - Cape Verde(CPV)', NULL, N'CPV', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'CPV')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (174, N'Country - Cayman Islands(CYM)', NULL, N'CYM', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'CYM')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (175, N'Country - Central African Republic(CAF)', NULL, N'CAF', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'CAF')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (176, N'Country - Chad(TCD)', NULL, N'TCD', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'TCD')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (177, N'Country - Chile(CHL)', NULL, N'CHL', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'CHL')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (178, N'Country - China(CHN)', NULL, N'CHN', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'CHN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (179, N'Country - Hong Kong Special Administrative Region of China(HKG)', NULL, N'HKG', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'HKG')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (180, N'Country - Macao Special Administrative Region of China(MAC)', NULL, N'MAC', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'MAC')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (181, N'Country - Christmas Island(CXR)', NULL, N'CXR', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'CXR')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (182, N'Country - Cocos (Keeling) Islands(CCK)', NULL, N'CCK', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'CCK')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (183, N'Country - Colombia(COL)', NULL, N'COL', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'COL')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (184, N'Country - Comoros(COM)', NULL, N'COM', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'COM')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (185, N'Country - Congo (Brazzaville)(COG)', NULL, N'COG', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'COG')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (186, N'Country - Congo, Democratic Republic of the(COD)', NULL, N'COD', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'COD')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (187, N'Country - Cook Islands(COK)', NULL, N'COK', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'COK')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (188, N'Country - Costa Rica(CRI)', NULL, N'CRI', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'CRI')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (189, N'Country - Cte d''Ivoire(CIV)', NULL, N'CIV', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'CIV')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (190, N'Country - Croatia(HRV)', NULL, N'HRV', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'HRV')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (191, N'Country - Cuba(CUB)', NULL, N'CUB', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'CUB')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (192, N'Country - Cyprus(CYP)', NULL, N'CYP', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'CYP')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (193, N'Country - Czech Republic(CZE)', NULL, N'CZE', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'CZE')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (194, N'Country - Denmark(DNK)', NULL, N'DNK', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'DNK')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (195, N'Country - Djibouti(DJI)', NULL, N'DJI', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'DJI')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (196, N'Country - Dominica(DMA)', NULL, N'DMA', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'DMA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (197, N'Country - Dominican Republic(DOM)', NULL, N'DOM', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'DOM')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (198, N'Country - Ecuador(ECU)', NULL, N'ECU', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'ECU')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (199, N'Country - Egypt(EGY)', NULL, N'EGY', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'EGY')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (200, N'Country - El Salvador(SLV)', NULL, N'SLV', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'SLV')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (201, N'Country - Equatorial Guinea(GNQ)', NULL, N'GNQ', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GNQ')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (202, N'Country - Eritrea(ERI)', NULL, N'ERI', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'ERI')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (203, N'Country - Estonia(EST)', NULL, N'EST', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'EST')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (204, N'Country - Ethiopia(ETH)', NULL, N'ETH', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'ETH')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (205, N'Country - Falkland Islands (Malvinas)(FLK)', NULL, N'FLK', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'FLK')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (206, N'Country - Faroe Islands(FRO)', NULL, N'FRO', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'FRO')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (207, N'Country - Fiji(FJI)', NULL, N'FJI', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'FJI')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (208, N'Country - Finland(FIN)', NULL, N'FIN', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'FIN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (209, N'Country - France(FRA)', NULL, N'FRA', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'FRA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (210, N'Country - French Guiana(GUF)', NULL, N'GUF', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GUF')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (211, N'Country - French Polynesia(PYF)', NULL, N'PYF', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'PYF')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (212, N'Country - French Southern Territories(ATF)', NULL, N'ATF', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'ATF')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (213, N'Country - Gabon(GAB)', NULL, N'GAB', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GAB')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (214, N'Country - Gambia(GMB)', NULL, N'GMB', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GMB')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (215, N'Country - Georgia(GEO)', NULL, N'GEO', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GEO')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (216, N'Country - Germany(DEU)', NULL, N'DEU', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'DEU')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (217, N'Country - Ghana(GHA)', NULL, N'GHA', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GHA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (218, N'Country - Gibraltar(GIB)', NULL, N'GIB', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GIB')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (219, N'Country - Greece(GRC)', NULL, N'GRC', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GRC')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (220, N'Country - Greenland(GRL)', NULL, N'GRL', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GRL')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (221, N'Country - Grenada(GRD)', NULL, N'GRD', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GRD')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (222, N'Country - Guadeloupe(GLP)', NULL, N'GLP', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GLP')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (223, N'Country - Guam(GUM)', NULL, N'GUM', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GUM')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (224, N'Country - Guatemala(GTM)', NULL, N'GTM', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GTM')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (225, N'Country - Guernsey(GGY)', NULL, N'GGY', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GGY')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (226, N'Country - Guinea(GIN)', NULL, N'GIN', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GIN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (227, N'Country - Guinea-Bissau(GNB)', NULL, N'GNB', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GNB')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (228, N'Country - Guyana(GUY)', NULL, N'GUY', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'GUY')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (229, N'Country - Haiti(HTI)', NULL, N'HTI', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'HTI')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (230, N'Country - Heard Island and Mcdonald Islands(HMD)', NULL, N'HMD', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'HMD')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (231, N'Country - Holy See (Vatican City State)(VAT)', NULL, N'VAT', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'VAT')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (232, N'Country - Honduras(HND)', NULL, N'HND', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'HND')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (233, N'Country - Hungary(HUN)', NULL, N'HUN', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'HUN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (234, N'Country - Iceland(ISL)', NULL, N'ISL', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'ISL')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (235, N'Country - India(IND)', NULL, N'IND', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'IND')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (236, N'Country - Indonesia(IDN)', NULL, N'IDN', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'IDN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (237, N'Country - Iran, Islamic Republic of(IRN)', NULL, N'IRN', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'IRN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (238, N'Country - Iraq(IRQ)', NULL, N'IRQ', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'IRQ')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (239, N'Country - Ireland(IRL)', NULL, N'IRL', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'IRL')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (240, N'Country - Isle of Man(IMN)', NULL, N'IMN', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'IMN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (241, N'Country - Israel(ISR)', NULL, N'ISR', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'ISR')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (242, N'Country - Italy(ITA)', NULL, N'ITA', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'ITA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (243, N'Country - Jamaica(JAM)', NULL, N'JAM', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'JAM')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (244, N'Country - Japan(JPN)', NULL, N'JPN', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'JPN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (245, N'Country - Jersey(JEY)', NULL, N'JEY', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'JEY')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (246, N'Country - Jordan(JOR)', NULL, N'JOR', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'JOR')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (247, N'Country - Kazakhstan(KAZ)', NULL, N'KAZ', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'KAZ')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (248, N'Country - Kenya(KEN)', NULL, N'KEN', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'KEN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (249, N'Country - Kiribati(KIR)', NULL, N'KIR', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'KIR')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (250, N'Country - Korea, Democratic People''s Republic of(PRK)', NULL, N'PRK', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'PRK')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (251, N'Country - Korea, Republic of(KOR)', NULL, N'KOR', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'KOR')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (252, N'Country - Kuwait(KWT)', NULL, N'KWT', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'KWT')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (253, N'Country - Kyrgyzstan(KGZ)', NULL, N'KGZ', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'KGZ')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (254, N'Country - Lao PDR(LAO)', NULL, N'LAO', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'LAO')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (255, N'Country - Latvia(LVA)', NULL, N'LVA', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'LVA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (256, N'Country - Lebanon(LBN)', NULL, N'LBN', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'LBN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (257, N'Country - Lesotho(LSO)', NULL, N'LSO', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'LSO')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (258, N'Country - Liberia(LBR)', NULL, N'LBR', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'LBR')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (259, N'Country - Libyan Arab Jamahiriya(LBY)', NULL, N'LBY', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'LBY')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (260, N'Country - Liechtenstein(LIE)', NULL, N'LIE', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'LIE')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (261, N'Country - Lithuania(LTU)', NULL, N'LTU', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'LTU')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (262, N'Country - Luxembourg(LUX)', NULL, N'LUX', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'LUX')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (263, N'Country - Macedonia, Republic of(MKD)', NULL, N'MKD', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'MKD')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (264, N'Country - Madagascar(MDG)', NULL, N'MDG', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'MDG')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (265, N'Country - Malawi(MWI)', NULL, N'MWI', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'MWI')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (266, N'Country - Malaysia(MYS)', NULL, N'MYS', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'MYS')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (267, N'Country - Maldives(MDV)', NULL, N'MDV', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'MDV')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (268, N'Country - Mali(MLI)', NULL, N'MLI', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'MLI')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (269, N'Country - Malta(MLT)', NULL, N'MLT', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'MLT')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (270, N'Country - Marshall Islands(MHL)', NULL, N'MHL', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'MHL')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (271, N'Country - Martinique(MTQ)', NULL, N'MTQ', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'MTQ')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (272, N'Country - Mauritania(MRT)', NULL, N'MRT', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'MRT')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (273, N'Country - Mauritius(MUS)', NULL, N'MUS', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'MUS')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (274, N'Country - Mayotte(MYT)', NULL, N'MYT', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'MYT')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (275, N'Country - Mexico(MEX)', NULL, N'MEX', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'MEX')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (276, N'Country - Micronesia, Federated States of(FSM)', NULL, N'FSM', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'FSM')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (277, N'Country - Moldova(MDA)', NULL, N'MDA', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'MDA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (278, N'Country - Monaco(MCO)', NULL, N'MCO', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'MCO')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (279, N'Country - Mongolia(MNG)', NULL, N'MNG', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'MNG')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (280, N'Country - Montenegro(MNE)', NULL, N'MNE', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'MNE')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (281, N'Country - Montserrat(MSR)', NULL, N'MSR', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'MSR')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (282, N'Country - Morocco(MAR)', NULL, N'MAR', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'MAR')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (283, N'Country - Mozambique(MOZ)', NULL, N'MOZ', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'MOZ')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (284, N'Country - Myanmar(MMR)', NULL, N'MMR', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'MMR')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (285, N'Country - Namibia(NAM)', NULL, N'NAM', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'NAM')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (286, N'Country - Nauru(NRU)', NULL, N'NRU', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'NRU')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (287, N'Country - Nepal(NPL)', NULL, N'NPL', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'NPL')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (288, N'Country - Netherlands(NLD)', NULL, N'NLD', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'NLD')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (289, N'Country - Netherlands Antilles(ANT)', NULL, N'ANT', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'ANT')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (290, N'Country - New Caledonia(NCL)', NULL, N'NCL', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'NCL')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (291, N'Country - New Zealand(NZL)', NULL, N'NZL', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'NZL')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (292, N'Country - Nicaragua(NIC)', NULL, N'NIC', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'NIC')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (293, N'Country - Niger(NER)', NULL, N'NER', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'NER')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (294, N'Country - Nigeria(NGA)', NULL, N'NGA', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'NGA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (295, N'Country - Niue(NIU)', NULL, N'NIU', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'NIU')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (296, N'Country - Norfolk Island(NFK)', NULL, N'NFK', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'NFK')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (297, N'Country - Northern Mariana Islands(MNP)', NULL, N'MNP', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'MNP')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (298, N'Country - Norway(NOR)', NULL, N'NOR', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'NOR')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (299, N'Country - Oman(OMN)', NULL, N'OMN', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'OMN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (300, N'Country - Pakistan(PAK)', NULL, N'PAK', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'PAK')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (301, N'Country - Palau(PLW)', NULL, N'PLW', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'PLW')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (302, N'Country - Palestinian Territory, Occupied(PSE)', NULL, N'PSE', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'PSE')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (303, N'Country - Panama(PAN)', NULL, N'PAN', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'PAN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (304, N'Country - Papua New Guinea(PNG)', NULL, N'PNG', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'PNG')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (305, N'Country - Paraguay(PRY)', NULL, N'PRY', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'PRY')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (306, N'Country - Peru(PER)', NULL, N'PER', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'PER')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (307, N'Country - Philippines(PHL)', NULL, N'PHL', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'PHL')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (308, N'Country - Pitcairn(PCN)', NULL, N'PCN', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'PCN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (309, N'Country - Poland(POL)', NULL, N'POL', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'POL')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (310, N'Country - Portugal(PRT)', NULL, N'PRT', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'PRT')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (311, N'Country - Puerto Rico(PRI)', NULL, N'PRI', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'PRI')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (312, N'Country - Qatar(QAT)', NULL, N'QAT', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'QAT')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (313, N'Country - Runion(REU)', NULL, N'REU', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'REU')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (314, N'Country - Romania(ROU)', NULL, N'ROU', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'ROU')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (315, N'Country - Russian Federation(RUS)', NULL, N'RUS', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'RUS')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (316, N'Country - Rwanda(RWA)', NULL, N'RWA', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'RWA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (317, N'Country - Saint-Barthlemy(BLM)', NULL, N'BLM', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'BLM')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (318, N'Country - Saint Helena(SHN)', NULL, N'SHN', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'SHN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (319, N'Country - Saint Kitts and Nevis(KNA)', NULL, N'KNA', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'KNA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (320, N'Country - Saint Lucia(LCA)', NULL, N'LCA', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'LCA')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (321, N'Country - Saint-Martin (French part)(MAF)', NULL, N'MAF', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'MAF')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (322, N'Country - Saint Pierre and Miquelon(SPM)', NULL, N'SPM', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'SPM')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (323, N'Country - Saint Vincent and Grenadines(VCT)', NULL, N'VCT', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'VCT')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (324, N'Country - Samoa(WSM)', NULL, N'WSM', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'WSM')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (325, N'Country - San Marino(SMR)', NULL, N'SMR', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'SMR')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (326, N'Country - Sao Tome and Principe(STP)', NULL, N'STP', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'STP')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (327, N'Country - Saudi Arabia(SAU)', NULL, N'SAU', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'SAU')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (328, N'Country - Senegal(SEN)', NULL, N'SEN', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'SEN')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (329, N'Country - Serbia(SRB)', NULL, N'SRB', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'SRB')
INSERT INTO [dbo].[Jurisdiction] ([JurisdictionId], [DisplayName], [StateProvinceCode], [CountryCode], [JurisdictionType], [ZipPostalCodeStart], [ZipPostalCodeEnd], [City], [District], [County], [GeoCode], [ApplicationId], [Code]) VALUES (330, N'Country - Seychelles(SYC)', NULL, N'SYC', 2, NULL, NULL, NULL, NULL, NULL, NULL, @ApplicationId, N'SYC')
SET IDENTITY_INSERT [dbo].[Jurisdiction] OFF
INSERT INTO [dbo].[JurisdictionRelation] ([JurisdictionId], [JurisdictionGroupId]) VALUES (1, 1)
INSERT INTO [dbo].[AssociationType] ([AssociationTypeId], [Description]) VALUES (N'OPTIONAL', N'Optional')
INSERT INTO [dbo].[AssociationType] ([AssociationTypeId], [Description]) VALUES (N'REQUIRED', N'Required')
INSERT INTO [dbo].[Application] ([ApplicationId], [Name], [IsActive]) VALUES (@ApplicationId, N'ECApplication', 1)
INSERT INTO [dbo].[ShippingMethod] ([ShippingMethodId], [ShippingOptionId], [ApplicationId], [LanguageId], [IsActive], [Name], [Description], [BasePrice], [Currency], [DisplayName], [IsDefault], [Ordering], [Created], [Modified]) VALUES (N'1d77f587-ca7b-4090-92f3-19cdac7f6cf2', N'8826e08e-636d-4962-8607-dbf80fe1945c', @ApplicationId, N'en', 1, N'Default Shipping', N'Calculates shipping based on weight and zone.', 2.0000, N'USD', N'Ground Shipping', 1, 0, '20081007 18:21:37.000', '20081008 20:27:44.000')
INSERT INTO [dbo].[ShippingMethod] ([ShippingMethodId], [ShippingOptionId], [ApplicationId], [LanguageId], [IsActive], [Name], [Description], [BasePrice], [Currency], [DisplayName], [IsDefault], [Ordering], [Created], [Modified]) VALUES (N'43cf66b4-8940-4c95-9b87-97ae8bf44cbd', N'18ede71f-3df3-4d9e-a4cb-3d25881c1ec6', @ApplicationId, N'en', 1, N'Online Download', NULL, 10.0000, N'USD', N'Fixed Shipping Rate', 0, 0, '20070101 00:00:00.000', '20070101 00:00:00.000')
INSERT INTO [dbo].[ShippingMethod] ([ShippingMethodId], [ShippingOptionId], [ApplicationId], [LanguageId], [IsActive], [Name], [Description], [BasePrice], [Currency], [DisplayName], [IsDefault], [Ordering], [Created], [Modified]) VALUES (N'dade7f46-646b-4a16-9226-4e574c8c79e6', N'18ede71f-3df3-4d9e-a4cb-3d25881c1ec6', @ApplicationId, N'en', 1, N'In Store Pickup', NULL, 0.0000, N'USD', N'In Store Pickup', 0, 0, '20130417 10:11:32.000', '20130417 10:11:32.000')
INSERT INTO [dbo].[MarketShippingMethods] ([MarketId], [ShippingMethodId]) VALUES (N'DEFAULT', N'1d77f587-ca7b-4090-92f3-19cdac7f6cf2')
INSERT INTO [dbo].[MarketShippingMethods] ([MarketId], [ShippingMethodId]) VALUES (N'DEFAULT', N'43cf66b4-8940-4c95-9b87-97ae8bf44cbd')
INSERT INTO [dbo].[MarketShippingMethods] ([MarketId], [ShippingMethodId]) VALUES (N'DEFAULT', N'dade7f46-646b-4a16-9226-4e574c8c79e6')
SET IDENTITY_INSERT [dbo].[WorkflowStatus] ON
INSERT INTO [dbo].[WorkflowStatus] ([StatusId], [WorkflowId], [Weight], [FriendlyName]) VALUES (1, 1, -1, N'Archive')
INSERT INTO [dbo].[WorkflowStatus] ([StatusId], [WorkflowId], [Weight], [FriendlyName]) VALUES (2, 1, 0, N'Draft')
INSERT INTO [dbo].[WorkflowStatus] ([StatusId], [WorkflowId], [Weight], [FriendlyName]) VALUES (3, 1, 3, N'Published')
INSERT INTO [dbo].[WorkflowStatus] ([StatusId], [WorkflowId], [Weight], [FriendlyName]) VALUES (4, 1, 2, N'Ready')
SET IDENTITY_INSERT [dbo].[WorkflowStatus] OFF
SET IDENTITY_INSERT [dbo].[WorkflowStatusAccess] ON
INSERT INTO [dbo].[WorkflowStatusAccess] ([StatusAccessId], [StatusId], [RoleId]) VALUES (1, 2, N'Everyone')
INSERT INTO [dbo].[WorkflowStatusAccess] ([StatusAccessId], [StatusId], [RoleId]) VALUES (2, 3, N'Cms Managers')
INSERT INTO [dbo].[WorkflowStatusAccess] ([StatusAccessId], [StatusId], [RoleId]) VALUES (3, 3, N'Admins')
INSERT INTO [dbo].[WorkflowStatusAccess] ([StatusAccessId], [StatusId], [RoleId]) VALUES (4, 3, N'Cms Admins')
INSERT INTO [dbo].[WorkflowStatusAccess] ([StatusAccessId], [StatusId], [RoleId]) VALUES (5, 4, N'Cms Editors')
INSERT INTO [dbo].[WorkflowStatusAccess] ([StatusAccessId], [StatusId], [RoleId]) VALUES (6, 4, N'Admins')
SET IDENTITY_INSERT [dbo].[WorkflowStatusAccess] OFF
SET IDENTITY_INSERT [dbo].[Workflow] ON
INSERT INTO [dbo].[Workflow] ([WorkflowId], [FriendlyName], [IsDefault], [ApplicationId]) VALUES (1, N'Page Workflow', 1, @ApplicationId)
SET IDENTITY_INSERT [dbo].[Workflow] OFF
SET IDENTITY_INSERT [dbo].[JurisdictionGroup] ON
INSERT INTO [dbo].[JurisdictionGroup] ([JurisdictionGroupId], [ApplicationId], [DisplayName], [JurisdictionType], [Code]) VALUES (1, @ApplicationId, N'United States', 2, N'USA')
SET IDENTITY_INSERT [dbo].[JurisdictionGroup] OFF
SET IDENTITY_INSERT [dbo].[CurrencyRate] ON
INSERT INTO [dbo].[CurrencyRate] ([CurrencyRateId], [AverageRate], [EndOfDayRate], [ModifiedDate], [FromCurrencyId], [ToCurrencyId], [CurrencyRateDate]) VALUES (1, 0.9597, 0.9597, '20131211 08:56:55.210', 1, 23, '20131211 09:56:55.187')
INSERT INTO [dbo].[CurrencyRate] ([CurrencyRateId], [AverageRate], [EndOfDayRate], [ModifiedDate], [FromCurrencyId], [ToCurrencyId], [CurrencyRateDate]) VALUES (2, 1.042, 1.042, '20131211 08:56:55.210', 23, 1, '20131211 09:56:55.187')
INSERT INTO [dbo].[CurrencyRate] ([CurrencyRateId], [AverageRate], [EndOfDayRate], [ModifiedDate], [FromCurrencyId], [ToCurrencyId], [CurrencyRateDate]) VALUES (3, 1.29, 1.29, '20131211 08:56:55.210', 7, 23, '20131211 09:56:55.187')
INSERT INTO [dbo].[CurrencyRate] ([CurrencyRateId], [AverageRate], [EndOfDayRate], [ModifiedDate], [FromCurrencyId], [ToCurrencyId], [CurrencyRateDate]) VALUES (4, 0.7752, 0.7752, '20131211 08:56:55.210', 23, 7, '20131211 09:56:55.187')
SET IDENTITY_INSERT [dbo].[CurrencyRate] OFF
SET IDENTITY_INSERT [dbo].[ShippingMethodCase] ON
INSERT INTO [dbo].[ShippingMethodCase] ([ShippingMethodCaseId], [Total], [Charge], [ShippingMethodId], [JurisdictionGroupId], [StartDate], [EndDate]) VALUES (1, 0, 10.0000, N'1d77f587-ca7b-4090-92f3-19cdac7f6cf2', 1, '20081008 00:00:00.000', '20201008 00:00:00.000')
SET IDENTITY_INSERT [dbo].[ShippingMethodCase] OFF
INSERT INTO [dbo].[ShippingOption] ([ShippingOptionId], [Name], [Description], [SystemKeyword], [ClassName], [Created], [Modified], [ApplicationId]) VALUES (N'18ede71f-3df3-4d9e-a4cb-3d25881c1ec6', N'Generic Gateway', N'', N'Generic', N'Mediachase.Commerce.Plugins.Shipping.Generic.GenericGateway, Mediachase.Commerce.Plugins.Shipping', '20070101 00:00:00.000', '20070101 00:00:00.000', @ApplicationId)
INSERT INTO [dbo].[ShippingOption] ([ShippingOptionId], [Name], [Description], [SystemKeyword], [ClassName], [Created], [Modified], [ApplicationId]) VALUES (N'8826e08e-636d-4962-8607-dbf80fe1945c', N'Weight/Jurisdiction Gateway', N'', N'WeightJurisdiction', N'Mediachase.Commerce.Plugins.Shipping.WeightJurisdictionGateway, Mediachase.Commerce.Plugins.Shipping', '20081007 18:21:01.000', '20081008 18:54:12.000', @ApplicationId)
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (0, N'BigInt', N'bigint', N'MSSQL Common Type', 8, N'bigint', 1, 0, 1, N'0')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (1, N'Binary', N'binary', N'MSSQL Common Type', 8000, N'binary', 1, 0, 1, N'')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (2, N'Bit', N'bit', N'MSSQL Common Type', 1, N'bit', 1, 0, 1, N'0')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (3, N'Char', N'char', N'MSSQL Common Type', 8000, N'char', 1, 0, 1, N'''''')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (4, N'DateTime', N'datetime', N'MSSQL Common Type', 8, N'datetime', 1, 0, 1, N'getdate()')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (5, N'Decimal', N'decimal', N'MSSQL Common Type', 17, N'decimal', 1, 0, 1, N'0')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (6, N'Float', N'float', N'MSSQL Common Type', 8, N'float', 1, 0, 1, N'0')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (7, N'Image', N'image', N'MSSQL Common Type', 16, N'image', 1, 0, 1, N'')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (8, N'Int', N'int', N'MSSQL Common Type', 4, N'int', 1, 0, 1, N'0')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (9, N'Money', N'money', N'MSSQL Common Type', 8, N'money', 1, 0, 1, N'0')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (10, N'NChar', N'nchar', N'MSSQL Common Type', 8000, N'nchar', 1, 0, 1, N'0')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (11, N'NText', N'ntext', N'MSSQL Common Type', 16, N'ntext', 1, 0, 1, N'''''')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (12, N'NVarChar', N'nvarchar', N'MSSQL Common Type', 8000, N'nvarchar', 1, 1, 1, N'''''')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (13, N'Real', N'real', N'MSSQL Common Type', 4, N'real', 1, 0, 1, N'0')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (14, N'UniqueIdentifier', N'uniqueidentifier', N'MSSQL Common Type', 16, N'uniqueidentifier', 1, 0, 1, N'newid()')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (15, N'SmallDateTime', N'smalldatetime', N'MSSQL Common Type', 4, N'smalldatetime', 1, 0, 1, N'getdate()')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (16, N'SmallInt', N'smallint', N'MSSQL Common Type', 2, N'smallint', 1, 0, 1, N'0')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (17, N'SmallMoney', N'smallmoney', N'MSSQL Common Type', 4, N'smallmoney', 1, 0, 1, N'0')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (18, N'Text', N'text', N'MSSQL Common Type', 16, N'text', 1, 0, 1, N'''''')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (19, N'Timestamp', N'timestamp', N'MSSQL Common Type', 8, N'timestamp', 0, 0, 1, N'0')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (20, N'TinyInt', N'tinyint', N'MSSQL Common Type', 1, N'tinyint', 1, 0, 1, N'0')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (21, N'VarBinary', N'varbinary', N'MSSQL Common Type', 8000, N'varbinary', 1, 1, 1, N'')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (22, N'VarChar', N'varchar', N'MSSQL Common Type', 8000, N'varchar', 1, 1, 1, N'''''')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (23, N'Variant', N'sql_variant', N'MSSQL Common Type', 8016, N'sql_variant', 1, 0, 1, N'''''')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (24, N'Numeric', N'numeric', N'MSSQL Common Type', 17, N'numeric', 1, 0, 1, N'0')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (25, N'Sysname', N'sysname', N'MSSQL Common Type', 256, N'sysname', 0, 1, 1, N'''''')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (26, N'Integer', N'Integer', N'Meta Data Type', 4, N'int', 1, 0, 0, N'0')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (27, N'Boolean', N'Boolean', N'Meta Data Type', 1, N'bit', 1, 0, 0, N'0')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (28, N'Date', N'Date', N'Meta Data Type', 8, N'datetime', 1, 0, 0, N'getdate()')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (29, N'Email', N'Email', N'Meta Data Type', 256, N'varchar', 1, 1, 0, N'''''')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (30, N'URL', N'URL', N'Meta Data Type', 512, N'varchar', 1, 1, 0, N'''''')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (31, N'ShortString', N'Short String', N'Meta Data Type', 512, N'nvarchar', 1, 1, 0, N'''''')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (32, N'LongString', N'Long String', N'Meta Data Type', 16, N'ntext', 1, 0, 0, N'''''')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (33, N'LongHtmlString', N'Long Html String', N'Meta Data Type', 16, N'ntext', 1, 0, 0, N'''''')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (34, N'DictionarySingleValue', N'Dictionary Single Value', N'Meta Data Type', 4, N'int', 1, 0, 0, N'0')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (35, N'DictionaryMultiValue', N'Dictionary Multi Value', N'Meta Data Type', 4, N'int', 1, 0, 0, N'0')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (36, N'EnumSingleValue', N'Enum Single Value', N'Meta Data Type', 4, N'int', 1, 0, 0, N'0')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (37, N'EnumMultiValue', N'Enum Multi Value', N'Meta Data Type', 4, N'int', 1, 0, 0, N'0')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (38, N'StringDictionary', N'String Dictionary', N'Meta Data Type', 4, N'int', 1, 0, 0, N'0')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (39, N'File', N'File', N'Meta Data Type', 4, N'int', 1, 0, 0, N'0')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (40, N'ImageFile', N'Image File', N'Meta Data Type', 4, N'int', 1, 0, 0, N'0')
INSERT INTO [dbo].[MetaDataType] ([DataTypeId], [Name], [FriendlyName], [Description], [Length], [SqlName], [AllowNulls], [Variable], [IsSQLCommonType], [DefaultValue]) VALUES (41, N'MetaObject', N'Meta Object', N'Meta Data Type', 4, N'int', 1, 0, 0, N'0')
SET IDENTITY_INSERT [dbo].[dps_NodeType] ON
INSERT INTO [dbo].[dps_NodeType] ([NodeTypeId], [TypeName]) VALUES (1, N'Static')
INSERT INTO [dbo].[dps_NodeType] ([NodeTypeId], [TypeName]) VALUES (2, N'Dynamic')
SET IDENTITY_INSERT [dbo].[dps_NodeType] OFF

SET IDENTITY_INSERT [dbo].[main_PageState] ON
INSERT INTO [dbo].[main_PageState] ([StateId], [FriendlyName], [ApplicationId]) VALUES (1, N'Page is under review', @ApplicationId)
INSERT INTO [dbo].[main_PageState] ([StateId], [FriendlyName], [ApplicationId]) VALUES (2, N'Denied', @ApplicationId)
SET IDENTITY_INSERT [dbo].[main_PageState] OFF
INSERT INTO [dbo].[Security_RoleAssignment] ([SecurityRoleAssignmentId], [RoleParticipant], [Role], [Scope], [CheckMode], [IsOnlyForOwner]) VALUES (N'0f99f665-9b1e-4ab1-9586-9b07ca04bf86', N'45f3ed19-05b0-4bc9-97c4-9d323b0a8959', N'Registered', NULL, NULL, 0)
INSERT INTO [dbo].[Security_RoleAssignment] ([SecurityRoleAssignmentId], [RoleParticipant], [Role], [Scope], [CheckMode], [IsOnlyForOwner]) VALUES (N'739da5b5-534f-48d3-aa6b-a720a2c6b8a3', N'45f3ed19-05b0-4bc9-97c4-9d323b0a8959', N'Admins', NULL, NULL, 0)
INSERT INTO [dbo].[Security_RoleAssignment] ([SecurityRoleAssignmentId], [RoleParticipant], [Role], [Scope], [CheckMode], [IsOnlyForOwner]) VALUES (N'79bd5c99-0835-4fa0-8b57-a954ab7f01d2', N'45f3ed19-05b0-4bc9-97c4-9d323b0a8959', N'Management Users', NULL, NULL, 0)
INSERT INTO [dbo].[Security_RoleAssignment] ([SecurityRoleAssignmentId], [RoleParticipant], [Role], [Scope], [CheckMode], [IsOnlyForOwner]) VALUES (N'a9a4e386-ea6a-4154-a1e3-19bf1b70966c', N'45f3ed19-05b0-4bc9-97c4-9d323b0a8959', N'Everyone', NULL, NULL, 0)
INSERT INTO [dbo].[OrderStatus] ([OrderStatusId], [ApplicationId], [Name]) VALUES (1, @ApplicationId, N'OnHold')
INSERT INTO [dbo].[OrderStatus] ([OrderStatusId], [ApplicationId], [Name]) VALUES (2, @ApplicationId, N'PartiallyShipped')
INSERT INTO [dbo].[OrderStatus] ([OrderStatusId], [ApplicationId], [Name]) VALUES (3, @ApplicationId, N'InProgress')
INSERT INTO [dbo].[OrderStatus] ([OrderStatusId], [ApplicationId], [Name]) VALUES (4, @ApplicationId, N'Completed')
INSERT INTO [dbo].[OrderStatus] ([OrderStatusId], [ApplicationId], [Name]) VALUES (5, @ApplicationId, N'Cancelled')
INSERT INTO [dbo].[OrderStatus] ([OrderStatusId], [ApplicationId], [Name]) VALUES (6, @ApplicationId, N'AwaitingExchange')
SET IDENTITY_INSERT [dbo].[RolePermission] ON
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (1, @ApplicationId, N'Admins', N'core:mng:login')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (2, @ApplicationId, N'Admins', N'businessfoundation:tabviewpermission')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (3, @ApplicationId, N'Admins', N'businessfoundation:organization:view:permission')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (4, @ApplicationId, N'Admins', N'businessfoundation:contact:create:permission')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (5, @ApplicationId, N'Admins', N'businessfoundation:contact:view:permission')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (6, @ApplicationId, N'Admins', N'businessfoundation:contact:delete:permission')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (7, @ApplicationId, N'Admins', N'businessfoundation:organization:view:permission')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (8, @ApplicationId, N'Admins', N'businessfoundation:organization:create:permission')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (9, @ApplicationId, N'Admins', N'businessfoundation:organization:edit:permission')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (10, @ApplicationId, N'Admins', N'businessfoundation:organization:delete:permission')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (11, @ApplicationId, N'Admins', N'customer:tabviewpermission')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (12, @ApplicationId, N'Admins', N'customer:roles:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (13, @ApplicationId, N'Admins', N'customer:roles:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (14, @ApplicationId, N'Admins', N'customer:roles:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (15, @ApplicationId, N'Admins', N'customer:roles:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (16, @ApplicationId, N'Admins', N'asset:tabviewpermission')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (17, @ApplicationId, N'Admins', N'asset:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (18, @ApplicationId, N'Admins', N'asset:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (19, @ApplicationId, N'Admins', N'asset:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (20, @ApplicationId, N'Admins', N'asset:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (21, @ApplicationId, N'Admins', N'asset:admin:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (22, @ApplicationId, N'Admins', N'catalog:tabviewpermission')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (23, @ApplicationId, N'Admins', N'catalog:ctlg:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (24, @ApplicationId, N'Admins', N'catalog:ctlg:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (25, @ApplicationId, N'Admins', N'catalog:ctlg:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (26, @ApplicationId, N'Admins', N'catalog:ctlg:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (27, @ApplicationId, N'Admins', N'catalog:ctlg:mng:import')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (28, @ApplicationId, N'Admins', N'catalog:ctlg:mng:export')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (29, @ApplicationId, N'Admins', N'catalog:ctlg:nodes:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (30, @ApplicationId, N'Admins', N'catalog:ctlg:nodes:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (31, @ApplicationId, N'Admins', N'catalog:ctlg:nodes:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (32, @ApplicationId, N'Admins', N'catalog:ctlg:nodes:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (33, @ApplicationId, N'Admins', N'catalog:ctlg:entries:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (34, @ApplicationId, N'Admins', N'catalog:ctlg:entries:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (35, @ApplicationId, N'Admins', N'catalog:ctlg:entries:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (36, @ApplicationId, N'Admins', N'catalog:ctlg:entries:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (37, @ApplicationId, N'Admins', N'catalog:admin:warehouses:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (38, @ApplicationId, N'Admins', N'catalog:admin:warehouses:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (39, @ApplicationId, N'Admins', N'catalog:admin:warehouses:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (40, @ApplicationId, N'Admins', N'catalog:admin:warehouses:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (41, @ApplicationId, N'Admins', N'catalog:admin:meta:cls:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (42, @ApplicationId, N'Admins', N'catalog:admin:meta:cls:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (43, @ApplicationId, N'Admins', N'catalog:admin:meta:cls:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (44, @ApplicationId, N'Admins', N'catalog:admin:meta:cls:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (45, @ApplicationId, N'Admins', N'catalog:admin:meta:fld:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (46, @ApplicationId, N'Admins', N'catalog:admin:meta:fld:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (47, @ApplicationId, N'Admins', N'catalog:admin:meta:fld:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (48, @ApplicationId, N'Admins', N'catalog:admin:meta:fld:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (49, @ApplicationId, N'Admins', N'content:tabviewpermission')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (50, @ApplicationId, N'Admins', N'content:site:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (51, @ApplicationId, N'Admins', N'content:site:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (52, @ApplicationId, N'Admins', N'content:site:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (53, @ApplicationId, N'Admins', N'content:site:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (54, @ApplicationId, N'Admins', N'content:site:mng:import')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (55, @ApplicationId, N'Admins', N'content:site:mng:export')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (56, @ApplicationId, N'Admins', N'content:site:nav:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (57, @ApplicationId, N'Admins', N'content:site:nav:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (58, @ApplicationId, N'Admins', N'content:site:nav:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (59, @ApplicationId, N'Admins', N'content:site:nav:mng:design')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (60, @ApplicationId, N'Admins', N'content:site:nav:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (61, @ApplicationId, N'Admins', N'content:site:menu:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (62, @ApplicationId, N'Admins', N'content:site:menu:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (63, @ApplicationId, N'Admins', N'content:site:menu:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (64, @ApplicationId, N'Admins', N'content:site:menu:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (65, @ApplicationId, N'Admins', N'content:admin:workflow:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (66, @ApplicationId, N'Admins', N'content:admin:workflow:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (67, @ApplicationId, N'Admins', N'content:admin:workflow:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (68, @ApplicationId, N'Admins', N'content:admin:workflow:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (69, @ApplicationId, N'Admins', N'content:admin:templates:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (70, @ApplicationId, N'Admins', N'content:admin:templates:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (71, @ApplicationId, N'Admins', N'content:admin:templates:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (72, @ApplicationId, N'Admins', N'content:admin:templates:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (73, @ApplicationId, N'Admins', N'marketing:tabviewpermission')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (74, @ApplicationId, N'Admins', N'marketing:campaigns:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (75, @ApplicationId, N'Admins', N'marketing:campaigns:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (76, @ApplicationId, N'Admins', N'marketing:campaigns:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (77, @ApplicationId, N'Admins', N'marketing:campaigns:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (78, @ApplicationId, N'Admins', N'marketing:promotions:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (79, @ApplicationId, N'Admins', N'marketing:promotions:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (80, @ApplicationId, N'Admins', N'marketing:promotions:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (81, @ApplicationId, N'Admins', N'marketing:promotions:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (82, @ApplicationId, N'Admins', N'marketing:segments:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (83, @ApplicationId, N'Admins', N'marketing:segments:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (84, @ApplicationId, N'Admins', N'marketing:segments:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (85, @ApplicationId, N'Admins', N'marketing:segments:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (86, @ApplicationId, N'Admins', N'marketing:policies:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (87, @ApplicationId, N'Admins', N'marketing:policies:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (88, @ApplicationId, N'Admins', N'marketing:policies:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (89, @ApplicationId, N'Admins', N'marketing:policies:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (90, @ApplicationId, N'Admins', N'marketing:expr:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (91, @ApplicationId, N'Admins', N'marketing:expr:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (92, @ApplicationId, N'Admins', N'marketing:expr:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (93, @ApplicationId, N'Admins', N'marketing:expr:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (94, @ApplicationId, N'Admins', N'order:tabviewpermission')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (95, @ApplicationId, N'Admins', N'order:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (96, @ApplicationId, N'Admins', N'order:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (97, @ApplicationId, N'Admins', N'order:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (98, @ApplicationId, N'Admins', N'order:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (99, @ApplicationId, N'Admins', N'order:mng:notify')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (100, @ApplicationId, N'Admins', N'order:mng:payments')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (101, @ApplicationId, N'Admins', N'order:admin:payments:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (102, @ApplicationId, N'Admins', N'order:admin:payments:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (103, @ApplicationId, N'Admins', N'order:admin:payments:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (104, @ApplicationId, N'Admins', N'order:admin:payments:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (105, @ApplicationId, N'Admins', N'order:admin:shipping:jur:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (106, @ApplicationId, N'Admins', N'order:admin:shipping:jur:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (107, @ApplicationId, N'Admins', N'order:admin:shipping:jur:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (108, @ApplicationId, N'Admins', N'order:admin:shipping:jur:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (109, @ApplicationId, N'Admins', N'order:admin:shipping:providers:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (110, @ApplicationId, N'Admins', N'order:admin:shipping:providers:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (111, @ApplicationId, N'Admins', N'order:admin:shipping:providers:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (112, @ApplicationId, N'Admins', N'order:admin:shipping:providers:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (113, @ApplicationId, N'Admins', N'order:admin:shipping:packages:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (114, @ApplicationId, N'Admins', N'order:admin:shipping:packages:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (115, @ApplicationId, N'Admins', N'order:admin:shipping:packages:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (116, @ApplicationId, N'Admins', N'order:admin:shipping:packages:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (117, @ApplicationId, N'Admins', N'order:admin:shipping:methods:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (118, @ApplicationId, N'Admins', N'order:admin:shipping:methods:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (119, @ApplicationId, N'Admins', N'order:admin:shipping:methods:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (120, @ApplicationId, N'Admins', N'order:admin:shipping:methods:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (121, @ApplicationId, N'Admins', N'order:admin:taxes:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (122, @ApplicationId, N'Admins', N'order:admin:taxes:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (123, @ApplicationId, N'Admins', N'order:admin:taxes:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (124, @ApplicationId, N'Admins', N'order:admin:taxes:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (125, @ApplicationId, N'Admins', N'order:admin:taxes:mng:import')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (126, @ApplicationId, N'Admins', N'order:admin:meta:cls:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (127, @ApplicationId, N'Admins', N'order:admin:meta:cls:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (128, @ApplicationId, N'Admins', N'order:admin:meta:cls:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (129, @ApplicationId, N'Admins', N'order:admin:meta:cls:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (130, @ApplicationId, N'Admins', N'order:admin:meta:fld:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (131, @ApplicationId, N'Admins', N'order:admin:meta:fld:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (132, @ApplicationId, N'Admins', N'order:admin:meta:fld:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (133, @ApplicationId, N'Admins', N'order:admin:meta:fld:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (134, @ApplicationId, N'Admins', N'order:mng:return:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (135, @ApplicationId, N'Admins', N'order:mng:return:create_exchange')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (136, @ApplicationId, N'Admins', N'order:mng:split_shipments')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (137, @ApplicationId, N'Admins', N'order:mng:return:receiving')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (138, @ApplicationId, N'Admins', N'order:mng:shipment:packing')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (139, @ApplicationId, N'Admins', N'order:mng:shipment:complete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (140, @ApplicationId, N'Admins', N'order:mng:discretionary_credit_payment')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (141, @ApplicationId, N'Admins', N'order:mng:discount')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (142, @ApplicationId, N'Order Managers', N'core:mng:login')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (143, @ApplicationId, N'Order Managers', N'order:tabviewpermission')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (144, @ApplicationId, N'Order Managers', N'order:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (145, @ApplicationId, N'Order Managers', N'order:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (146, @ApplicationId, N'Order Managers', N'order:mng:notify')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (147, @ApplicationId, N'Order Managers', N'order:mng:payments')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (148, @ApplicationId, N'Order Managers', N'order:mng:return:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (149, @ApplicationId, N'Order Managers', N'order:mng:return:create_exchange')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (150, @ApplicationId, N'Order Managers', N'order:mng:split_shipments')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (151, @ApplicationId, N'Order Supervisor', N'core:mng:login')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (152, @ApplicationId, N'Order Supervisor', N'order:tabviewpermission')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (153, @ApplicationId, N'Order Supervisor', N'order:mng:return:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (154, @ApplicationId, N'Order Supervisor', N'order:mng:return:create_exchange')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (155, @ApplicationId, N'Order Supervisor', N'order:mng:return:receiving')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (156, @ApplicationId, N'Order Supervisor', N'order:mng:shipment:packing')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (157, @ApplicationId, N'Order Supervisor', N'order:mng:shipment:complete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (158, @ApplicationId, N'Order Supervisor', N'order:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (159, @ApplicationId, N'Order Supervisor', N'order:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (160, @ApplicationId, N'Order Supervisor', N'order:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (161, @ApplicationId, N'Order Supervisor', N'order:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (162, @ApplicationId, N'Order Supervisor', N'order:mng:notify')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (163, @ApplicationId, N'Order Supervisor', N'order:mng:payments')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (164, @ApplicationId, N'Order Supervisor', N'order:mng:split_shipments')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (165, @ApplicationId, N'Order Supervisor', N'order:mng:discretionary_credit_payment')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (166, @ApplicationId, N'Order Supervisor', N'order:mng:discount')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (167, @ApplicationId, N'Order Supervisor', N'order:mng:change_price')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (168, @ApplicationId, N'Shipping Manager', N'core:mng:login')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (169, @ApplicationId, N'Shipping Manager', N'order:tabviewpermission')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (170, @ApplicationId, N'Shipping Manager', N'order:mng:shipment:packing')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (171, @ApplicationId, N'Shipping Manager', N'order:mng:shipment:complete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (172, @ApplicationId, N'Shipping Manager', N'order:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (173, @ApplicationId, N'Receiving Manager', N'core:mng:login')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (174, @ApplicationId, N'Receiving Manager', N'order:tabviewpermission')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (175, @ApplicationId, N'Receiving Manager', N'order:mng:return:receiving')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (176, @ApplicationId, N'Receiving Manager', N'order:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (177, @ApplicationId, N'Everyone', N'empty')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (178, @ApplicationId, N'Registered', N'empty')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (179, @ApplicationId, N'Management Users', N'core:mng:login')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (180, @ApplicationId, N'Administrators', N'asset:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (181, @ApplicationId, N'Administrators', N'asset:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (182, @ApplicationId, N'Administrators', N'asset:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (183, @ApplicationId, N'Administrators', N'asset:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (184, @ApplicationId, N'Administrators', N'asset:admin:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (185, @ApplicationId, N'Administrators', N'catalog:ctlg:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (186, @ApplicationId, N'Administrators', N'catalog:ctlg:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (187, @ApplicationId, N'Administrators', N'catalog:ctlg:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (188, @ApplicationId, N'Administrators', N'catalog:ctlg:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (189, @ApplicationId, N'Administrators', N'catalog:ctlg:mng:import')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (190, @ApplicationId, N'Administrators', N'catalog:ctlg:mng:export')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (191, @ApplicationId, N'Administrators', N'catalog:ctlg:nodes:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (192, @ApplicationId, N'Administrators', N'catalog:ctlg:nodes:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (193, @ApplicationId, N'Administrators', N'catalog:ctlg:nodes:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (194, @ApplicationId, N'Administrators', N'catalog:ctlg:nodes:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (195, @ApplicationId, N'Administrators', N'catalog:ctlg:entries:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (196, @ApplicationId, N'Administrators', N'catalog:ctlg:entries:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (197, @ApplicationId, N'Administrators', N'catalog:ctlg:entries:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (198, @ApplicationId, N'Administrators', N'catalog:ctlg:entries:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (199, @ApplicationId, N'Administrators', N'catalog:admin:warehouses:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (200, @ApplicationId, N'Administrators', N'catalog:admin:warehouses:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (201, @ApplicationId, N'Administrators', N'catalog:admin:warehouses:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (202, @ApplicationId, N'Administrators', N'catalog:admin:warehouses:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (203, @ApplicationId, N'Administrators', N'catalog:admin:country:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (204, @ApplicationId, N'Administrators', N'catalog:admin:country:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (205, @ApplicationId, N'Administrators', N'catalog:admin:country:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (206, @ApplicationId, N'Administrators', N'catalog:admin:country:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (207, @ApplicationId, N'Administrators', N'catalog:admin:taxcategories:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (208, @ApplicationId, N'Administrators', N'catalog:admin:taxcategories:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (209, @ApplicationId, N'Administrators', N'catalog:admin:taxcategories:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (210, @ApplicationId, N'Administrators', N'catalog:admin:taxcategories:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (211, @ApplicationId, N'Administrators', N'catalog:admin:meta:cls:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (212, @ApplicationId, N'Administrators', N'catalog:admin:meta:fld:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (213, @ApplicationId, N'Administrators', N'content:site:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (214, @ApplicationId, N'Administrators', N'content:site:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (215, @ApplicationId, N'Administrators', N'content:site:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (216, @ApplicationId, N'Administrators', N'content:site:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (217, @ApplicationId, N'Administrators', N'content:site:mng:import')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (218, @ApplicationId, N'Administrators', N'content:site:mng:export')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (219, @ApplicationId, N'Administrators', N'content:site:nav:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (220, @ApplicationId, N'Administrators', N'content:site:nav:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (221, @ApplicationId, N'Administrators', N'content:site:nav:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (222, @ApplicationId, N'Administrators', N'content:site:nav:mng:design')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (223, @ApplicationId, N'Administrators', N'content:site:nav:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (224, @ApplicationId, N'Administrators', N'content:site:menu:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (225, @ApplicationId, N'Administrators', N'content:site:menu:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (226, @ApplicationId, N'Administrators', N'content:site:menu:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (227, @ApplicationId, N'Administrators', N'content:site:menu:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (228, @ApplicationId, N'Administrators', N'content:admin:workflow:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (229, @ApplicationId, N'Administrators', N'content:admin:workflow:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (230, @ApplicationId, N'Administrators', N'content:admin:workflow:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (231, @ApplicationId, N'Administrators', N'content:admin:workflow:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (232, @ApplicationId, N'Administrators', N'content:admin:templates:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (233, @ApplicationId, N'Administrators', N'content:admin:templates:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (234, @ApplicationId, N'Administrators', N'content:admin:templates:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (235, @ApplicationId, N'Administrators', N'content:admin:templates:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (236, @ApplicationId, N'Administrators', N'core:mng:login')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (237, @ApplicationId, N'Administrators', N'core:mng:settings')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (238, @ApplicationId, N'Administrators', N'marketing:campaigns:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (239, @ApplicationId, N'Administrators', N'marketing:campaigns:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (240, @ApplicationId, N'Administrators', N'marketing:campaigns:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (241, @ApplicationId, N'Administrators', N'marketing:campaigns:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (242, @ApplicationId, N'Administrators', N'marketing:promotions:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (243, @ApplicationId, N'Administrators', N'marketing:promotions:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (244, @ApplicationId, N'Administrators', N'marketing:promotions:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (245, @ApplicationId, N'Administrators', N'marketing:promotions:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (246, @ApplicationId, N'Administrators', N'marketing:segments:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (247, @ApplicationId, N'Administrators', N'marketing:segments:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (248, @ApplicationId, N'Administrators', N'marketing:segments:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (249, @ApplicationId, N'Administrators', N'marketing:segments:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (250, @ApplicationId, N'Administrators', N'marketing:policies:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (251, @ApplicationId, N'Administrators', N'marketing:policies:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (252, @ApplicationId, N'Administrators', N'marketing:policies:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (253, @ApplicationId, N'Administrators', N'marketing:policies:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (254, @ApplicationId, N'Administrators', N'marketing:expr:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (255, @ApplicationId, N'Administrators', N'marketing:expr:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (256, @ApplicationId, N'Administrators', N'marketing:expr:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (257, @ApplicationId, N'Administrators', N'marketing:expr:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (258, @ApplicationId, N'Administrators', N'order:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (259, @ApplicationId, N'Administrators', N'order:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (260, @ApplicationId, N'Administrators', N'order:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (261, @ApplicationId, N'Administrators', N'order:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (262, @ApplicationId, N'Administrators', N'order:mng:notify')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (263, @ApplicationId, N'Administrators', N'order:mng:payments')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (264, @ApplicationId, N'Administrators', N'order:admin:payments:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (265, @ApplicationId, N'Administrators', N'order:admin:payments:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (266, @ApplicationId, N'Administrators', N'order:admin:payments:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (267, @ApplicationId, N'Administrators', N'order:admin:payments:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (268, @ApplicationId, N'Administrators', N'order:admin:shipping:jur:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (269, @ApplicationId, N'Administrators', N'order:admin:shipping:jur:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (270, @ApplicationId, N'Administrators', N'order:admin:shipping:jur:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (271, @ApplicationId, N'Administrators', N'order:admin:shipping:jur:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (272, @ApplicationId, N'Administrators', N'order:admin:shipping:providers:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (273, @ApplicationId, N'Administrators', N'order:admin:shipping:providers:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (274, @ApplicationId, N'Administrators', N'order:admin:shipping:providers:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (275, @ApplicationId, N'Administrators', N'order:admin:shipping:providers:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (276, @ApplicationId, N'Administrators', N'order:admin:shipping:packages:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (277, @ApplicationId, N'Administrators', N'order:admin:shipping:packages:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (278, @ApplicationId, N'Administrators', N'order:admin:shipping:packages:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (279, @ApplicationId, N'Administrators', N'order:admin:shipping:packages:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (280, @ApplicationId, N'Administrators', N'order:admin:shipping:methods:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (281, @ApplicationId, N'Administrators', N'order:admin:shipping:methods:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (282, @ApplicationId, N'Administrators', N'order:admin:shipping:methods:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (283, @ApplicationId, N'Administrators', N'order:admin:shipping:methods:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (284, @ApplicationId, N'Administrators', N'order:admin:taxes:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (285, @ApplicationId, N'Administrators', N'order:admin:taxes:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (286, @ApplicationId, N'Administrators', N'order:admin:taxes:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (287, @ApplicationId, N'Administrators', N'order:admin:taxes:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (288, @ApplicationId, N'Administrators', N'order:admin:taxes:mng:import')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (289, @ApplicationId, N'Administrators', N'order:admin:meta:cls:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (290, @ApplicationId, N'Administrators', N'order:admin:meta:fld:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (291, @ApplicationId, N'Administrators', N'customer:roles:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (292, @ApplicationId, N'WebAdmins', N'asset:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (293, @ApplicationId, N'WebAdmins', N'asset:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (294, @ApplicationId, N'WebAdmins', N'asset:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (295, @ApplicationId, N'WebAdmins', N'asset:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (296, @ApplicationId, N'WebAdmins', N'catalog:ctlg:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (297, @ApplicationId, N'WebAdmins', N'catalog:ctlg:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (298, @ApplicationId, N'WebAdmins', N'catalog:ctlg:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (299, @ApplicationId, N'WebAdmins', N'catalog:ctlg:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (300, @ApplicationId, N'WebAdmins', N'catalog:ctlg:mng:import')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (301, @ApplicationId, N'WebAdmins', N'catalog:ctlg:mng:export')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (302, @ApplicationId, N'WebAdmins', N'catalog:ctlg:nodes:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (303, @ApplicationId, N'WebAdmins', N'catalog:ctlg:nodes:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (304, @ApplicationId, N'WebAdmins', N'catalog:ctlg:nodes:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (305, @ApplicationId, N'WebAdmins', N'catalog:ctlg:nodes:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (306, @ApplicationId, N'WebAdmins', N'catalog:ctlg:entries:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (307, @ApplicationId, N'WebAdmins', N'catalog:ctlg:entries:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (308, @ApplicationId, N'WebAdmins', N'catalog:ctlg:entries:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (309, @ApplicationId, N'WebAdmins', N'catalog:ctlg:entries:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (310, @ApplicationId, N'WebAdmins', N'content:site:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (311, @ApplicationId, N'WebAdmins', N'content:site:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (312, @ApplicationId, N'WebAdmins', N'content:site:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (313, @ApplicationId, N'WebAdmins', N'content:site:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (314, @ApplicationId, N'WebAdmins', N'content:site:mng:import')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (315, @ApplicationId, N'WebAdmins', N'content:site:mng:export')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (316, @ApplicationId, N'WebAdmins', N'content:site:nav:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (317, @ApplicationId, N'WebAdmins', N'content:site:nav:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (318, @ApplicationId, N'WebAdmins', N'content:site:nav:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (319, @ApplicationId, N'WebAdmins', N'content:site:nav:mng:design')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (320, @ApplicationId, N'WebAdmins', N'content:site:nav:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (321, @ApplicationId, N'WebAdmins', N'content:site:menu:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (322, @ApplicationId, N'WebAdmins', N'content:site:menu:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (323, @ApplicationId, N'WebAdmins', N'content:site:menu:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (324, @ApplicationId, N'WebAdmins', N'content:site:menu:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (325, @ApplicationId, N'WebAdmins', N'core:mng:login')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (326, @ApplicationId, N'WebAdmins', N'marketing:campaigns:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (327, @ApplicationId, N'WebAdmins', N'marketing:campaigns:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (328, @ApplicationId, N'WebAdmins', N'marketing:campaigns:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (329, @ApplicationId, N'WebAdmins', N'marketing:campaigns:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (330, @ApplicationId, N'WebAdmins', N'marketing:promotions:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (331, @ApplicationId, N'WebAdmins', N'marketing:promotions:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (332, @ApplicationId, N'WebAdmins', N'marketing:promotions:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (333, @ApplicationId, N'WebAdmins', N'marketing:promotions:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (334, @ApplicationId, N'WebAdmins', N'marketing:segments:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (335, @ApplicationId, N'WebAdmins', N'marketing:segments:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (336, @ApplicationId, N'WebAdmins', N'marketing:segments:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (337, @ApplicationId, N'WebAdmins', N'marketing:segments:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (338, @ApplicationId, N'WebAdmins', N'marketing:policies:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (339, @ApplicationId, N'WebAdmins', N'marketing:policies:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (340, @ApplicationId, N'WebAdmins', N'marketing:policies:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (341, @ApplicationId, N'WebAdmins', N'marketing:policies:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (342, @ApplicationId, N'WebAdmins', N'marketing:expr:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (343, @ApplicationId, N'WebAdmins', N'marketing:expr:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (344, @ApplicationId, N'WebAdmins', N'marketing:expr:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (345, @ApplicationId, N'WebAdmins', N'marketing:expr:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (346, @ApplicationId, N'WebAdmins', N'order:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (347, @ApplicationId, N'WebAdmins', N'order:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (348, @ApplicationId, N'WebAdmins', N'order:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (349, @ApplicationId, N'WebAdmins', N'order:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (350, @ApplicationId, N'WebAdmins', N'order:mng:notify')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (351, @ApplicationId, N'WebAdmins', N'order:mng:payments')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (352, @ApplicationId, N'WebEditors', N'content:site:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (353, @ApplicationId, N'WebEditors', N'content:site:nav:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (354, @ApplicationId, N'WebEditors', N'content:site:nav:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (355, @ApplicationId, N'WebEditors', N'content:site:nav:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (356, @ApplicationId, N'WebEditors', N'content:site:nav:mng:design')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (357, @ApplicationId, N'WebEditors', N'content:site:nav:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (358, @ApplicationId, N'WebEditors', N'content:site:menu:mng:view')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (359, @ApplicationId, N'WebEditors', N'content:site:menu:mng:create')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (360, @ApplicationId, N'WebEditors', N'content:site:menu:mng:edit')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (361, @ApplicationId, N'WebEditors', N'content:site:menu:mng:delete')
INSERT INTO [dbo].[RolePermission] ([RolePermissionId], [ApplicationId], [RoleName], [Permission]) VALUES (362, @ApplicationId, N'WebEditors', N'core:mng:login')
SET IDENTITY_INSERT [dbo].[RolePermission] OFF
----schema version data load
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 1, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 2, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 3, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 4, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 5, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 6, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 7, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 8, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 9, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 10, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 11, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 12, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 13, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 14, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 15, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 16, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 17, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 18, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 19, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 20, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 21, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 22, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 23, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 24, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 25, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 26, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 27, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 28, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 29, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 30, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 31, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 32, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 33, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 1, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 1, 1, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 1, 2, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 2, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 2, 1, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 3, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 4, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 5, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 5, 1, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 5, 2, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 6, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 6, 1, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (6, 0, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (6, 0, 1, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (6, 0, 2, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (6, 1, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (6, 1, 1, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (6, 2, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (6, 3, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (6, 3, 1, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (6, 3, 2, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (6, 4, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (6, 4, 1, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (6, 4, 2, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (6, 4, 3, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (6, 5, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (6, 6, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (6, 7, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (6, 7, 1, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (6, 8, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (6, 9, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (6, 9, 1, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion] ([Major], [Minor], [Patch], [InstallDate]) VALUES (6, 9, 2, GETUTCDATE())
----last schema version
INSERT INTO [dbo].[SchemaVersion_ApplicationSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ApplicationSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 1, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ApplicationSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 2, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ApplicationSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 3, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ApplicationSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 4, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ApplicationSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 5, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ApplicationSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 6, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ApplicationSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 7, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ApplicationSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 8, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ApplicationSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 9, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_BusinessFoundation] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_BusinessFoundation] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 1, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_BusinessFoundation] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 2, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 1, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 2, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 3, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 4, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 5, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 6, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 7, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 8, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 9, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 10, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 11, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 12, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 13, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 14, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 15, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 16, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 17, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 18, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 19, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 20, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 21, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 22, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 23, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 24, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 25, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 26, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 27, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 28, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 29, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 30, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 31, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 32, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 33, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 34, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 35, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 36, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 37, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 38, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 39, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 40, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 41, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 42, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 43, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 44, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 45, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 46, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 47, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 48, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 49, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 50, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 51, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 52, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 53, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 54, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 55, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 56, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 57, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 58, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 59, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 60, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 61, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 62, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 63, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 64, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 65, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 66, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 67, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 68, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 69, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 70, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 71, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 72, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 73, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 74, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 75, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 76, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 77, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 78, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 79, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 80, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 81, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 82, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 83, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 84, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 85, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 86, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 87, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 88, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 89, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 90, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 91, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 92, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 93, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 94, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 95, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 96, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 97, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 98, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 99, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 100, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 101, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 102, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 103, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 104, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 105, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 106, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 107, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 108, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 109, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 110, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 111, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 112, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 113, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 114, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 115, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 116, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 117, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 118, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 119, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 120, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 121, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 122, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 123, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 124, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 125, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 126, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 127, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 128, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 129, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 130, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 131, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 132, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 133, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 134, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 135, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 136, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 137, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 138, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 139, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 140, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 141, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 142, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 143, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 144, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 145, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 146, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 147, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 148, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 149, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 150, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 151, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 152, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 153, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 154, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 155, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 156, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 157, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 158, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 159, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 160, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 161, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 162, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 163, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 164, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 165, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 166, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 167, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 168, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 169, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 170, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 171, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 172, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 173, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 174, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 175, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 176, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 177, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 178, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 179, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 180, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 181, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 182, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 183, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 184, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 185, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 186, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 187, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 188, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 189, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 190, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 191, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 192, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 193, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 194, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 195, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 196, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 197, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 198, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 199, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 200, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 201, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 202, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 203, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 204, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 205, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 206, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 207, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 208, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 209, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_CatalogSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 210, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MarketingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MarketingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 1, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MarketingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 2, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MarketingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 3, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MarketingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 4, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MarketingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 5, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MarketingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 6, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MarketingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 7, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MarketingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 8, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MarketingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 9, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MarketingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 10, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MarketingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 11, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MarketingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 12, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MarketingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 13, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MarketingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 14, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MarketingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 15, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MarketingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 16, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MetaDataSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 2, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MetaDataSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 2, 1, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MetaDataSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 2, 2, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MetaDataSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 2, 3, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MetaDataSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 2, 4, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MetaDataSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 2, 5, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MetaDataSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 2, 6, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MetaDataSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 2, 7, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MetaDataSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 2, 8, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MetaDataSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 2, 9, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MetaDataSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 2, 10, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MetaDataSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 2, 11, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MetaDataSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 2, 12, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MetaDataSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 2, 13, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MetaDataSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 2, 14, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MetaDataSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 2, 15, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_MetaDataSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 2, 16, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 1, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 2, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 3, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 4, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 5, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 6, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 7, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 8, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 9, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 10, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 11, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 12, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 13, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 14, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 15, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 16, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 17, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 18, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 19, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 20, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 21, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 22, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 23, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 24, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 25, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 26, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 27, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 28, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 29, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 30, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 31, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 32, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 33, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 34, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 35, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 36, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 37, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 38, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 39, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 40, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 41, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 42, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 43, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 44, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 45, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 46, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 47, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 48, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 49, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 50, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 51, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 52, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 53, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 54, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 55, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 56, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 57, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 58, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 59, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 60, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 61, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 62, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 63, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 64, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 65, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 66, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 67, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 68, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 69, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 70, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 71, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 72, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_OrderSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 73, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_PricingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (6, 0, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_PricingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (6, 0, 1, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ReportingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ReportingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 1, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ReportingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 2, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ReportingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 3, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ReportingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 4, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ReportingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 5, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ReportingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 6, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ReportingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 7, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ReportingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 8, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ReportingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 9, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ReportingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 10, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ReportingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 11, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ReportingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 12, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ReportingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 13, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ReportingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 14, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ReportingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 15, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_ReportingSystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 0, 16, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_SecuritySystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 1, 0, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_SecuritySystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 1, 1, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_SecuritySystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 1, 2, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_SecuritySystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 1, 3, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_SecuritySystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 1, 4, GETUTCDATE())
INSERT INTO [dbo].[SchemaVersion_SecuritySystem] ([Major], [Minor], [Patch], [InstallDate]) VALUES (5, 1, 5, GETUTCDATE())
----
INSERT INTO [dbo].[aspnet_SchemaVersions] ([Feature], [CompatibleSchemaVersion], [IsCurrentVersion]) VALUES (N'common', N'1', 1)
INSERT INTO [dbo].[aspnet_SchemaVersions] ([Feature], [CompatibleSchemaVersion], [IsCurrentVersion]) VALUES (N'health monitoring', N'1', 1)
INSERT INTO [dbo].[aspnet_SchemaVersions] ([Feature], [CompatibleSchemaVersion], [IsCurrentVersion]) VALUES (N'membership', N'1', 1)
INSERT INTO [dbo].[aspnet_SchemaVersions] ([Feature], [CompatibleSchemaVersion], [IsCurrentVersion]) VALUES (N'personalization', N'1', 1)
INSERT INTO [dbo].[aspnet_SchemaVersions] ([Feature], [CompatibleSchemaVersion], [IsCurrentVersion]) VALUES (N'profile', N'1', 1)
INSERT INTO [dbo].[aspnet_SchemaVersions] ([Feature], [CompatibleSchemaVersion], [IsCurrentVersion]) VALUES (N'role manager', N'1', 1)
SET IDENTITY_INSERT [dbo].[CommonSettings] ON
INSERT INTO [dbo].[CommonSettings] ([SettingId], [ApplicationId], [Name], [Value]) VALUES (1, @ApplicationId, N'DefaultLanguage', N'en')
INSERT INTO [dbo].[CommonSettings] ([SettingId], [ApplicationId], [Name], [Value]) VALUES (2, @ApplicationId, N'DefaultCurrency', N'USD')
INSERT INTO [dbo].[CommonSettings] ([SettingId], [ApplicationId], [Name], [Value]) VALUES (3, @ApplicationId, N'DefaultLength', N'FT')
INSERT INTO [dbo].[CommonSettings] ([SettingId], [ApplicationId], [Name], [Value]) VALUES (4, @ApplicationId, N'DefaultWeight', N'LBS')
SET IDENTITY_INSERT [dbo].[CommonSettings] OFF
SET IDENTITY_INSERT [dbo].[mcmd_MetaFieldType] ON
INSERT INTO [dbo].[mcmd_MetaFieldType] ([MetaFieldTypeId], [Name], [FriendlyName], [McDataType], [XSViews], [XSAttributes], [Owner], [AccessLevel]) VALUES (1, N'Guid', N'{GlobalMetaInfo:Guid}', 2, NULL, NULL, N'System', 1)
INSERT INTO [dbo].[mcmd_MetaFieldType] ([MetaFieldTypeId], [Name], [FriendlyName], [McDataType], [XSViews], [XSAttributes], [Owner], [AccessLevel]) VALUES (2, N'DateTime', N'{GlobalMetaInfo:DateTime}', 1, NULL, NULL, N'System', 1)
INSERT INTO [dbo].[mcmd_MetaFieldType] ([MetaFieldTypeId], [Name], [FriendlyName], [McDataType], [XSViews], [XSAttributes], [Owner], [AccessLevel]) VALUES (3, N'Date', N'{GlobalMetaInfo:Date}', 1, NULL, NULL, N'System', 1)
INSERT INTO [dbo].[mcmd_MetaFieldType] ([MetaFieldTypeId], [Name], [FriendlyName], [McDataType], [XSViews], [XSAttributes], [Owner], [AccessLevel]) VALUES (4, N'Integer', N'{GlobalMetaInfo:Integer}', 0, NULL, NULL, N'System', 1)
INSERT INTO [dbo].[mcmd_MetaFieldType] ([MetaFieldTypeId], [Name], [FriendlyName], [McDataType], [XSViews], [XSAttributes], [Owner], [AccessLevel]) VALUES (5, N'Float', N'{GlobalMetaInfo:Float}', 3, NULL, NULL, N'System', 1)
INSERT INTO [dbo].[mcmd_MetaFieldType] ([MetaFieldTypeId], [Name], [FriendlyName], [McDataType], [XSViews], [XSAttributes], [Owner], [AccessLevel]) VALUES (6, N'Currency', N'{GlobalMetaInfo:Currency}', 4, NULL, NULL, N'System', 1)
INSERT INTO [dbo].[mcmd_MetaFieldType] ([MetaFieldTypeId], [Name], [FriendlyName], [McDataType], [XSViews], [XSAttributes], [Owner], [AccessLevel]) VALUES (7, N'CheckboxBoolean', N'{GlobalMetaInfo:CheckboxBoolean}', 5, NULL, NULL, N'System', 1)
INSERT INTO [dbo].[mcmd_MetaFieldType] ([MetaFieldTypeId], [Name], [FriendlyName], [McDataType], [XSViews], [XSAttributes], [Owner], [AccessLevel]) VALUES (8, N'DropDownBoolean', N'{GlobalMetaInfo:DropDownBoolean}', 5, NULL, NULL, N'System', 1)
INSERT INTO [dbo].[mcmd_MetaFieldType] ([MetaFieldTypeId], [Name], [FriendlyName], [McDataType], [XSViews], [XSAttributes], [Owner], [AccessLevel]) VALUES (9, N'Text', N'{GlobalMetaInfo:Text}', 6, NULL, NULL, N'System', 1)
INSERT INTO [dbo].[mcmd_MetaFieldType] ([MetaFieldTypeId], [Name], [FriendlyName], [McDataType], [XSViews], [XSAttributes], [Owner], [AccessLevel]) VALUES (10, N'EMail', N'{GlobalMetaInfo:EMail}', 6, NULL, NULL, N'System', 1)
INSERT INTO [dbo].[mcmd_MetaFieldType] ([MetaFieldTypeId], [Name], [FriendlyName], [McDataType], [XSViews], [XSAttributes], [Owner], [AccessLevel]) VALUES (11, N'Url', N'{GlobalMetaInfo:Url}', 6, NULL, NULL, N'System', 1)
INSERT INTO [dbo].[mcmd_MetaFieldType] ([MetaFieldTypeId], [Name], [FriendlyName], [McDataType], [XSViews], [XSAttributes], [Owner], [AccessLevel]) VALUES (12, N'LongText', N'{GlobalMetaInfo:LongText}', 6, NULL, NULL, N'System', 1)
INSERT INTO [dbo].[mcmd_MetaFieldType] ([MetaFieldTypeId], [Name], [FriendlyName], [McDataType], [XSViews], [XSAttributes], [Owner], [AccessLevel]) VALUES (13, N'Html', N'{GlobalMetaInfo:Html}', 6, NULL, NULL, N'System', 1)
INSERT INTO [dbo].[mcmd_MetaFieldType] ([MetaFieldTypeId], [Name], [FriendlyName], [McDataType], [XSViews], [XSAttributes], [Owner], [AccessLevel]) VALUES (14, N'File', N'{GlobalMetaInfo:File}', 7, NULL, NULL, N'System', 1)
INSERT INTO [dbo].[mcmd_MetaFieldType] ([MetaFieldTypeId], [Name], [FriendlyName], [McDataType], [XSViews], [XSAttributes], [Owner], [AccessLevel]) VALUES (15, N'Image', N'{GlobalMetaInfo:Image}', 7, NULL, NULL, N'System', 1)
INSERT INTO [dbo].[mcmd_MetaFieldType] ([MetaFieldTypeId], [Name], [FriendlyName], [McDataType], [XSViews], [XSAttributes], [Owner], [AccessLevel]) VALUES (16, N'Reference', N'{GlobalMetaInfo:Reference}', 9, NULL, NULL, N'System', 1)
INSERT INTO [dbo].[mcmd_MetaFieldType] ([MetaFieldTypeId], [Name], [FriendlyName], [McDataType], [XSViews], [XSAttributes], [Owner], [AccessLevel]) VALUES (17, N'ReferencedField', N'{GlobalMetaInfo:ReferencedField}', 10, NULL, NULL, N'System', 1)
INSERT INTO [dbo].[mcmd_MetaFieldType] ([MetaFieldTypeId], [Name], [FriendlyName], [McDataType], [XSViews], [XSAttributes], [Owner], [AccessLevel]) VALUES (18, N'BackReference', N'{GlobalMetaInfo:BackReference}', 11, NULL, NULL, N'System', 1)
INSERT INTO [dbo].[mcmd_MetaFieldType] ([MetaFieldTypeId], [Name], [FriendlyName], [McDataType], [XSViews], [XSAttributes], [Owner], [AccessLevel]) VALUES (19, N'Card', N'Card', 12, NULL, NULL, N'System', 1)
INSERT INTO [dbo].[mcmd_MetaFieldType] ([MetaFieldTypeId], [Name], [FriendlyName], [McDataType], [XSViews], [XSAttributes], [Owner], [AccessLevel]) VALUES (20, N'Link', N'{GlobalMetaInfo:Link}', 14, NULL, NULL, N'System', 1)
INSERT INTO [dbo].[mcmd_MetaFieldType] ([MetaFieldTypeId], [Name], [FriendlyName], [McDataType], [XSViews], [XSAttributes], [Owner], [AccessLevel]) VALUES (21, N'Aggregation', N'{GlobalMetaInfo:Aggregation}', 15, NULL, NULL, N'System', 1)
INSERT INTO [dbo].[mcmd_MetaFieldType] ([MetaFieldTypeId], [Name], [FriendlyName], [McDataType], [XSViews], [XSAttributes], [Owner], [AccessLevel]) VALUES (22, N'IntegerPercent', N'{GlobalMetaInfo:IntegerPercent}', 0, NULL, NULL, N'System', 1)
INSERT INTO [dbo].[mcmd_MetaFieldType] ([MetaFieldTypeId], [Name], [FriendlyName], [McDataType], [XSViews], [XSAttributes], [Owner], [AccessLevel]) VALUES (23, N'FloatPercent', N'{GlobalMetaInfo:FloatPercent}', 3, NULL, NULL, N'System', 1)
INSERT INTO [dbo].[mcmd_MetaFieldType] ([MetaFieldTypeId], [Name], [FriendlyName], [McDataType], [XSViews], [XSAttributes], [Owner], [AccessLevel]) VALUES (24, N'Duration', N'{GlobalMetaInfo:Duration}', 0, NULL, NULL, N'System', 1)
SET IDENTITY_INSERT [dbo].[mcmd_MetaFieldType] OFF
SET IDENTITY_INSERT [dbo].[ReturnReasonDictionary] ON
INSERT INTO [dbo].[ReturnReasonDictionary] ([ReturnReasonText], [ApplicationId], [ReturnReasonId], [Ordering], [Visible]) VALUES (N'Faulty', @ApplicationId, 1, 0, 1)
INSERT INTO [dbo].[ReturnReasonDictionary] ([ReturnReasonText], [ApplicationId], [ReturnReasonId], [Ordering], [Visible]) VALUES (N'Incorrect Item', @ApplicationId, 3, 0, 1)
INSERT INTO [dbo].[ReturnReasonDictionary] ([ReturnReasonText], [ApplicationId], [ReturnReasonId], [Ordering], [Visible]) VALUES (N'Unwanted Gift', @ApplicationId, 2, 0, 1)
SET IDENTITY_INSERT [dbo].[ReturnReasonDictionary] OFF
INSERT INTO [dbo].[OrderShipmentStatus] ([OrderShipmentStatusId], [ApplicationId], [Name]) VALUES (1, @ApplicationId, N'AwaitingInventory')
INSERT INTO [dbo].[OrderShipmentStatus] ([OrderShipmentStatusId], [ApplicationId], [Name]) VALUES (2, @ApplicationId, N'Cancelled')
INSERT INTO [dbo].[OrderShipmentStatus] ([OrderShipmentStatusId], [ApplicationId], [Name]) VALUES (3, @ApplicationId, N'InventoryAssigned')
INSERT INTO [dbo].[OrderShipmentStatus] ([OrderShipmentStatusId], [ApplicationId], [Name]) VALUES (4, @ApplicationId, N'OnHold')
INSERT INTO [dbo].[OrderShipmentStatus] ([OrderShipmentStatusId], [ApplicationId], [Name]) VALUES (5, @ApplicationId, N'Packing')
INSERT INTO [dbo].[OrderShipmentStatus] ([OrderShipmentStatusId], [ApplicationId], [Name]) VALUES (6, @ApplicationId, N'Released')
INSERT INTO [dbo].[OrderShipmentStatus] ([OrderShipmentStatusId], [ApplicationId], [Name]) VALUES (7, @ApplicationId, N'Shipped')
INSERT INTO [dbo].[ReturnFormStatus] ([ReturnFormStatusId], [ApplicationId], [Name]) VALUES (1, @ApplicationId, N'Complete')
INSERT INTO [dbo].[ReturnFormStatus] ([ReturnFormStatusId], [ApplicationId], [Name]) VALUES (2, @ApplicationId, N'Canceled')
INSERT INTO [dbo].[ReturnFormStatus] ([ReturnFormStatusId], [ApplicationId], [Name]) VALUES (3, @ApplicationId, N'AwaitingStockReturn')
INSERT INTO [dbo].[ReturnFormStatus] ([ReturnFormStatusId], [ApplicationId], [Name]) VALUES (4, @ApplicationId, N'AwaitingCompletion')
INSERT INTO [dbo].[OrderNoteType] ([OrderNoteTypeId], [ApplicationId], [Name]) VALUES (1, @ApplicationId, N'Info')
INSERT INTO [dbo].[OrderNoteType] ([OrderNoteTypeId], [ApplicationId], [Name]) VALUES (2, @ApplicationId, N'Shipment')
INSERT INTO [dbo].[OrderNoteType] ([OrderNoteTypeId], [ApplicationId], [Name]) VALUES (3, @ApplicationId, N'ReturnsExchange')
INSERT INTO [dbo].[OrderNoteType] ([OrderNoteTypeId], [ApplicationId], [Name]) VALUES (4, @ApplicationId, N'Payments')
SET IDENTITY_INSERT [dbo].[mcmd_MetaModelVersionId] ON
INSERT INTO [dbo].[mcmd_MetaModelVersionId] ([Id], [VersionId]) VALUES (1, N'1eccc777-8137-473f-b82a-c171e489975e')
SET IDENTITY_INSERT [dbo].[mcmd_MetaModelVersionId] OFF
ALTER TABLE [dbo].[mcmd_MetaClassDataSource]
    ADD CONSTRAINT [FK_mcmd_MetaClassDataSource_mcmd_MetaClass] FOREIGN KEY ([MetaClassId]) REFERENCES [dbo].[mcmd_MetaClass] ([MetaClassId]) ON DELETE CASCADE
ALTER TABLE [dbo].[ShipmentDiscount]
    ADD CONSTRAINT [FK_ShipmentDiscount_Shipment] FOREIGN KEY ([ShipmentId]) REFERENCES [dbo].[Shipment] ([ShipmentId])
ALTER TABLE [dbo].[TaxLanguage]
    ADD CONSTRAINT [FK_TaxLanguage_Tax] FOREIGN KEY ([TaxId]) REFERENCES [dbo].[Tax] ([TaxId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[dps_Node]
    ADD CONSTRAINT [FK_dps_Node_dps_NodeType] FOREIGN KEY ([NodeTypeId]) REFERENCES [dbo].[dps_NodeType] ([NodeTypeId]) ON DELETE CASCADE
ALTER TABLE [dbo].[dps_Node]
    ADD CONSTRAINT [FK_dps_Node_dps_PageDocument] FOREIGN KEY ([PageId]) REFERENCES [dbo].[dps_PageDocument] ([PageId]) ON DELETE CASCADE
ALTER TABLE [dbo].[ShippingMethodParameter]
    ADD CONSTRAINT [FK_ShippingMethodParameter_ShippingMethod] FOREIGN KEY ([ShippingMethodId]) REFERENCES [dbo].[ShippingMethod] ([ShippingMethodId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[GroupPolicy]
    ADD CONSTRAINT [FK_ecf_mktg-GroupPolicy_ecf_mktg-Policy] FOREIGN KEY ([PolicyId]) REFERENCES [dbo].[Policy] ([PolicyId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[ShippingOptionParameter]
    ADD CONSTRAINT [FK_ShippingOptionParameter_ShippingOption] FOREIGN KEY ([ShippingOptionId]) REFERENCES [dbo].[ShippingOption] ([ShippingOptionId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[MetaMultiValueDictionary]
    ADD CONSTRAINT [FK_MetaMultiValueDictionary_MetaKey] FOREIGN KEY ([MetaKey]) REFERENCES [dbo].[MetaKey] ([MetaKey])
ALTER TABLE [dbo].[OrderFormPayment]
    ADD CONSTRAINT [FK_OrderFormPayment_OrderForm] FOREIGN KEY ([OrderFormId]) REFERENCES [dbo].[OrderForm] ([OrderFormId])
ALTER TABLE [dbo].[ShippingMethodCase]
    ADD CONSTRAINT [FK_ShippingMethodCase_JurisdictionGroup] FOREIGN KEY ([JurisdictionGroupId]) REFERENCES [dbo].[JurisdictionGroup] ([JurisdictionGroupId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[ShippingMethodCase]
    ADD CONSTRAINT [ShippingMethod_ShippingMethodCase_FK1] FOREIGN KEY ([ShippingMethodId]) REFERENCES [dbo].[ShippingMethod] ([ShippingMethodId])
ALTER TABLE [dbo].[MetaDictionaryLocalization]
    ADD CONSTRAINT [FK_MetaDictionaryLocalization_MetaDictionary] FOREIGN KEY ([MetaDictionaryId]) REFERENCES [dbo].[MetaDictionary] ([MetaDictionaryId]) ON DELETE CASCADE
ALTER TABLE [dbo].[CurrencyRate]
    ADD CONSTRAINT [FK_CurrencyRate_Currency] FOREIGN KEY ([FromCurrencyId]) REFERENCES [dbo].[Currency] ([CompatCurrencyId])
ALTER TABLE [dbo].[CurrencyRate]
    ADD CONSTRAINT [FK_CurrencyRate_Currency1] FOREIGN KEY ([ToCurrencyId]) REFERENCES [dbo].[Currency] ([CompatCurrencyId])
ALTER TABLE [dbo].[OrderFormDiscount]
    ADD CONSTRAINT [FK_OrderFormDiscount_OrderForm] FOREIGN KEY ([OrderFormId]) REFERENCES [dbo].[OrderForm] ([OrderFormId])
ALTER TABLE [dbo].[PriceValue]
    ADD CONSTRAINT [FK_PriceValue_PriceGroup] FOREIGN KEY ([PriceGroupId]) REFERENCES [dbo].[PriceGroup] ([PriceGroupId]) ON DELETE CASCADE
ALTER TABLE [dbo].[NavigationCommand]
    ADD CONSTRAINT [FK_NavigationCommand_NavigationItems] FOREIGN KEY ([ItemId]) REFERENCES [dbo].[NavigationItems] ([ItemId])
ALTER TABLE [dbo].[WorkflowStatusAccess]
    ADD CONSTRAINT [FK_main_WorkflowStatusAccess_main_WorkflowStatus] FOREIGN KEY ([StatusId]) REFERENCES [dbo].[WorkflowStatus] ([StatusId]) ON DELETE CASCADE
ALTER TABLE [dbo].[WorkflowStatus]
    ADD CONSTRAINT [FK_main_WorkflowStatus_main_Workflow] FOREIGN KEY ([WorkflowId]) REFERENCES [dbo].[Workflow] ([WorkflowId]) ON DELETE CASCADE
ALTER TABLE [dbo].[ShippingMethod]
    ADD CONSTRAINT [FK_ShippingMethod_ShippingOption] FOREIGN KEY ([ShippingOptionId]) REFERENCES [dbo].[ShippingOption] ([ShippingOptionId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[ShippingRegion]
    ADD CONSTRAINT [FK_ShippingRegion_ShippingMethod] FOREIGN KEY ([ShippingMethodId]) REFERENCES [dbo].[ShippingMethod] ([ShippingMethodId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[ShippingRegion]
    ADD CONSTRAINT [StateProvince_ShippingRegion_FK1] FOREIGN KEY ([StateProvinceId]) REFERENCES [dbo].[StateProvince] ([StateProvinceId])
ALTER TABLE [dbo].[Policy]
    ADD CONSTRAINT [FK_ecf_mktg-Policy_ecf_mktg-Expression] FOREIGN KEY ([ExpressionId]) REFERENCES [dbo].[Expression] ([ExpressionId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[mcmd_MetaFieldMap]
    ADD CONSTRAINT [FK_mcmd_MetaFieldMap_mcmd_MetaClass] FOREIGN KEY ([SrcMetaClassId]) REFERENCES [dbo].[mcmd_MetaClass] ([MetaClassId])
ALTER TABLE [dbo].[mcmd_MetaFieldMap]
    ADD CONSTRAINT [FK_mcmd_MetaFieldMap_mcmd_MetaClass1] FOREIGN KEY ([DestMetaClassId]) REFERENCES [dbo].[mcmd_MetaClass] ([MetaClassId])
ALTER TABLE [dbo].[TaxValue]
    ADD CONSTRAINT [FK_TaxValue_JurisdictionGroup] FOREIGN KEY ([JurisdictionGroupId]) REFERENCES [dbo].[JurisdictionGroup] ([JurisdictionGroupId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[TaxValue]
    ADD CONSTRAINT [Tax_TaxValue_FK1] FOREIGN KEY ([TaxId]) REFERENCES [dbo].[Tax] ([TaxId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[LineItemDiscount]
    ADD CONSTRAINT [FK_LineItemDiscount_LineItem] FOREIGN KEY ([LineItemId]) REFERENCES [dbo].[LineItem] ([LineItemId])
ALTER TABLE [dbo].[LineItem]
    ADD CONSTRAINT [FK_LineItem_OrderForm] FOREIGN KEY ([OrderFormId]) REFERENCES [dbo].[OrderForm] ([OrderFormId])
ALTER TABLE [dbo].[mcmd_MetaField]
    ADD CONSTRAINT [FK_mcmd_MetaField_mcmd_MetaClass] FOREIGN KEY ([MetaClassId]) REFERENCES [dbo].[mcmd_MetaClass] ([MetaClassId]) ON DELETE CASCADE
ALTER TABLE [dbo].[aspnet_PersonalizationAllUsers]
    ADD  CONSTRAINT [FK_PersAllUser_Paths] FOREIGN KEY ([PathId]) REFERENCES [dbo].[aspnet_Paths] ([PathId])
ALTER TABLE [dbo].[NavigationParams]
    ADD CONSTRAINT [FK_NavigationParams_NavigationItems] FOREIGN KEY ([ItemId]) REFERENCES [dbo].[NavigationItems] ([ItemId])
ALTER TABLE [dbo].[Shipment]
    ADD CONSTRAINT [FK_Shipment_OrderForm] FOREIGN KEY ([OrderFormId]) REFERENCES [dbo].[OrderForm] ([OrderFormId])
ALTER TABLE [dbo].[OrderForm]
    ADD CONSTRAINT [FK_OrderForm_OrderGroup] FOREIGN KEY ([OrderGroupId]) REFERENCES [dbo].[OrderGroup] ([OrderGroupId])
ALTER TABLE [dbo].[Variation]
    ADD CONSTRAINT [FK_Variation_CatalogEntry] FOREIGN KEY ([CatalogEntryId]) REFERENCES [dbo].[CatalogEntry] ([CatalogEntryId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[Variation]
    ADD CONSTRAINT [FK_Variation_Merchant] FOREIGN KEY ([MerchantId]) REFERENCES [dbo].[Merchant] ([MerchantId]) ON DELETE SET NULL ON UPDATE SET NULL
ALTER TABLE [dbo].[aspnet_Profile]
    ADD CONSTRAINT [FK_Profile_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId])
ALTER TABLE [dbo].[SegmentCondition]
    ADD CONSTRAINT [FK_ecf_mktg-SegmentCondition_ecf_mktg-Expression] FOREIGN KEY ([ExpressionId]) REFERENCES [dbo].[Expression] ([ExpressionId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[SegmentCondition]
    ADD CONSTRAINT [FK_ecf_mktg-SegmentCondition_ecf_mktg-Segment] FOREIGN KEY ([SegmentId]) REFERENCES [dbo].[Segment] ([SegmentId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[CatalogLanguage]
    ADD CONSTRAINT [FK_CatalogLanguage_Catalog] FOREIGN KEY ([CatalogId]) REFERENCES [dbo].[Catalog] ([CatalogId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[OrderGroupAddress]
    ADD CONSTRAINT [FK_OrderGroupAddress_OrderGroup] FOREIGN KEY ([OrderGroupId]) REFERENCES [dbo].[OrderGroup] ([OrderGroupId])
ALTER TABLE [dbo].[ApplicationLog]
    ADD CONSTRAINT [FK_ApplicationLog_Application] FOREIGN KEY ([ApplicationId]) REFERENCES [dbo].[Application] ([ApplicationId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[ShippingCountry]
    ADD CONSTRAINT [FK_ShippingCountry_Country] FOREIGN KEY ([CountryId]) REFERENCES [dbo].[Country] ([CountryId])
ALTER TABLE [dbo].[ShippingCountry]
    ADD CONSTRAINT [FK_ShippingCountry_ShippingMethod] FOREIGN KEY ([ShippingMethodId]) REFERENCES [dbo].[ShippingMethod] ([ShippingMethodId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[JurisdictionRelation]
    ADD CONSTRAINT [FK_JurisdictionRelation_Jurisdiction] FOREIGN KEY ([JurisdictionId]) REFERENCES [dbo].[Jurisdiction] ([JurisdictionId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[JurisdictionRelation]
    ADD CONSTRAINT [FK_JurisdictionRelation_JurisdictionGroup] FOREIGN KEY ([JurisdictionGroupId]) REFERENCES [dbo].[JurisdictionGroup] ([JurisdictionGroupId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[MetaClassMetaFieldRelation]
    ADD CONSTRAINT [FK_MetaClassMetaFieldRelation_MetaClass] FOREIGN KEY ([MetaClassId]) REFERENCES [dbo].[MetaClass] ([MetaClassId])
ALTER TABLE [dbo].[MetaClassMetaFieldRelation]
    ADD CONSTRAINT [FK_MetaClassMetaFieldRelation_MetaField] FOREIGN KEY ([MetaFieldId]) REFERENCES [dbo].[MetaField] ([MetaFieldId])
ALTER TABLE [dbo].[MarketCampaigns]
    ADD CONSTRAINT [FK_MarketCampaigns_Campaign] FOREIGN KEY ([CampaignId]) REFERENCES [dbo].[Campaign] ([CampaignId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[MarketCampaigns]
    ADD CONSTRAINT [FK_MarketCampaigns_Market] FOREIGN KEY ([MarketId]) REFERENCES [dbo].[Market] ([MarketId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[CatalogEntryRelation]
    ADD CONSTRAINT [FK_CatalogEntryRelation_CatalogEntry] FOREIGN KEY ([ChildEntryId]) REFERENCES [dbo].[CatalogEntry] ([CatalogEntryId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[CatalogEntryRelation]
    ADD CONSTRAINT [FK_CatalogEntryRelation_CatalogEntry1] FOREIGN KEY ([ParentEntryId]) REFERENCES [dbo].[CatalogEntry] ([CatalogEntryId])
ALTER TABLE [dbo].[main_PageVersion]
    ADD CONSTRAINT [FK_main_PageVersion_main_LanguageInfo] FOREIGN KEY ([LangId]) REFERENCES [dbo].[main_LanguageInfo] ([LangId]) ON DELETE CASCADE
ALTER TABLE [dbo].[main_PageVersion]
    ADD CONSTRAINT [FK_main_PageVersion_main_PageTree] FOREIGN KEY ([PageId]) REFERENCES [dbo].[main_PageTree] ([PageId])
ALTER TABLE [dbo].[main_PageVersion]
    ADD CONSTRAINT [FK_main_PageVersion_main_Templates] FOREIGN KEY ([TemplateId]) REFERENCES [dbo].[main_Templates] ([TemplateId])
ALTER TABLE [dbo].[CatalogEntryAssociation]
    ADD CONSTRAINT [FK_CatalogEntryAssociation_CatalogAssociation] FOREIGN KEY ([CatalogAssociationId]) REFERENCES [dbo].[CatalogAssociation] ([CatalogAssociationId])
ALTER TABLE [dbo].[CatalogEntryAssociation]
    ADD CONSTRAINT [FK_CatalogEntryAssociation_CatalogEntry] FOREIGN KEY ([CatalogEntryId]) REFERENCES [dbo].[CatalogEntry] ([CatalogEntryId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[CatalogEntryAssociation]
    ADD CONSTRAINT [FK_CatalogEntryAssociation_AssociationType] FOREIGN KEY ([AssociationTypeId]) REFERENCES [dbo].[AssociationType] ([AssociationTypeId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[CatalogAssociation]
    ADD CONSTRAINT [FK_CatalogAssociation_CatalogEntry] FOREIGN KEY ([CatalogEntryId]) REFERENCES [dbo].[CatalogEntry] ([CatalogEntryId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[CatalogEntry]
    ADD CONSTRAINT [FK_CatalogEntity_Catalog] FOREIGN KEY ([CatalogId]) REFERENCES [dbo].[Catalog] ([CatalogId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[aspnet_Roles]
    ADD FOREIGN KEY ([ApplicationId]) REFERENCES [dbo].[aspnet_Applications] ([ApplicationId])
ALTER TABLE [dbo].[aspnet_Paths]
    ADD FOREIGN KEY ([ApplicationId]) REFERENCES [dbo].[aspnet_Applications] ([ApplicationId])
ALTER TABLE [dbo].[WarehouseInventory]
    ADD CONSTRAINT [FK_WarehouseInventory_Warehouse] FOREIGN KEY ([ApplicationId], [WarehouseCode]) REFERENCES [dbo].[Warehouse] ([ApplicationId], [Code]) ON DELETE CASCADE
ALTER TABLE [dbo].[PaymentMethodParameter]
    ADD CONSTRAINT [PaymentMethod_PaymentMethodParameter_FK1] FOREIGN KEY ([PaymentMethodId]) REFERENCES [dbo].[PaymentMethod] ([PaymentMethodId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[dps_ControlStorage]
    ADD CONSTRAINT [FK_dps_ControlStorage_dps_Control] FOREIGN KEY ([ControlId]) REFERENCES [dbo].[dps_Control] ([ControlId]) ON DELETE CASCADE
ALTER TABLE [dbo].[dps_Control]
    ADD CONSTRAINT [FK_dps_Control_dps_Node] FOREIGN KEY ([NodeId]) REFERENCES [dbo].[dps_Node] ([NodeId]) ON DELETE CASCADE
ALTER TABLE [dbo].[main_MenuItem_Resources]
    ADD CONSTRAINT [FK_main_MenuItem_Resources_main_MenuItem] FOREIGN KEY ([MenuItemId]) REFERENCES [dbo].[main_MenuItem] ([MenuItemId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[main_MenuItem]
    ADD CONSTRAINT [FK_main_MenuItem_main_Menu] FOREIGN KEY ([MenuId]) REFERENCES [dbo].[main_Menu] ([MenuId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[aspnet_UsersInRoles]
    ADD CONSTRAINT [FK_UsersInRoles_Roles] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[aspnet_Roles] ([RoleId])
ALTER TABLE [dbo].[aspnet_UsersInRoles]
    ADD CONSTRAINT [FK_UsersInRoles_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId])
ALTER TABLE [dbo].[CatalogSecurity]
    ADD CONSTRAINT [FK_CatalogSecurity_Catalog] FOREIGN KEY ([CatalogId]) REFERENCES [dbo].[Catalog] ([CatalogId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[MetaDictionary]
    ADD CONSTRAINT [FK_MetaDictionary_MetaField] FOREIGN KEY ([MetaFieldId]) REFERENCES [dbo].[MetaField] ([MetaFieldId])
ALTER TABLE [dbo].[MetaField]
    ADD CONSTRAINT [FK_MetaField_MetaDataType] FOREIGN KEY ([DataTypeId]) REFERENCES [dbo].[MetaDataType] ([DataTypeId])
ALTER TABLE [dbo].[MarketPaymentMethods]
    ADD CONSTRAINT [FK_MarketPaymentMethods_Market] FOREIGN KEY ([MarketId]) REFERENCES [dbo].[Market] ([MarketId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[MarketPaymentMethods]
    ADD CONSTRAINT [FK_MarketPaymentMethods_PaymentMethod] FOREIGN KEY ([PaymentMethodId]) REFERENCES [dbo].[PaymentMethod] ([PaymentMethodId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[PromotionLanguage]
    ADD CONSTRAINT [FK_ecf_mktg-PromotionLanguage_ecf_mktg-Promotion] FOREIGN KEY ([PromotionId]) REFERENCES [dbo].[Promotion] ([PromotionId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[CampaignSegment]
    ADD CONSTRAINT [FK_ecf_mktg-CampaignSegment_ecf_mktg-Campaign] FOREIGN KEY ([CampaignId]) REFERENCES [dbo].[Campaign] ([CampaignId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[CampaignSegment]
    ADD CONSTRAINT [FK_ecf_mktg-CampaignSegment_ecf_mktg-Segment] FOREIGN KEY ([SegmentId]) REFERENCES [dbo].[Segment] ([SegmentId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[PriceDetail]
    ADD CONSTRAINT [FK_PriceDetail_CatalogEntry] FOREIGN KEY ([CatalogEntryCode], [ApplicationId]) REFERENCES [dbo].[CatalogEntry] ([Code], [ApplicationId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[PriceDetail]
    ADD CONSTRAINT [FK_PriceDetail_Currency] FOREIGN KEY ([CurrencyCode]) REFERENCES [dbo].[Currency] ([CurrencyCode]) ON DELETE CASCADE
ALTER TABLE [dbo].[PriceDetail]
    ADD CONSTRAINT [FK_PriceDetail_Market] FOREIGN KEY ([MarketId]) REFERENCES [dbo].[Market] ([MarketId]) ON DELETE CASCADE
ALTER TABLE [dbo].[PriceDetail]
    ADD CONSTRAINT [FK_PriceDetail_PriceType] FOREIGN KEY ([PriceTypeId]) REFERENCES [dbo].[PriceType] ([PriceTypeId])
ALTER TABLE [dbo].[MarketLanguages]
    ADD CONSTRAINT [FK_MarketLanguages_Market] FOREIGN KEY ([MarketId]) REFERENCES [dbo].[Market] ([MarketId]) ON DELETE CASCADE
ALTER TABLE [dbo].[StateProvince]
    ADD CONSTRAINT [FK_StateProvince_Country] FOREIGN KEY ([CountryId]) REFERENCES [dbo].[Country] ([CountryId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[SegmentMember]
    ADD CONSTRAINT [FK_ecf_mktg-SegmentMember_ecf_mktg-Segment] FOREIGN KEY ([SegmentId]) REFERENCES [dbo].[Segment] ([SegmentId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[MarketCountries]
    ADD CONSTRAINT [FK_MarketCountries_Market] FOREIGN KEY ([MarketId]) REFERENCES [dbo].[Market] ([MarketId]) ON DELETE CASCADE
ALTER TABLE [dbo].[aspnet_Membership]
    ADD CONSTRAINT [FK_Membership_Applications] FOREIGN KEY ([ApplicationId]) REFERENCES [dbo].[aspnet_Applications] ([ApplicationId])
ALTER TABLE [dbo].[aspnet_Membership]
    ADD CONSTRAINT [FK_Membership_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId])
ALTER TABLE [dbo].[MetaFileValue]
    ADD CONSTRAINT [FK_MetaFileValue_MetaKey] FOREIGN KEY ([MetaKey]) REFERENCES [dbo].[MetaKey] ([MetaKey])
ALTER TABLE [dbo].[CatalogNode]
    ADD CONSTRAINT [FK_CatalogItem_Catalog] FOREIGN KEY ([CatalogId]) REFERENCES [dbo].[Catalog] ([CatalogId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[CatalogNodeRelation]
    ADD CONSTRAINT [FK_CatalogItemCategory_Catalog] FOREIGN KEY ([CatalogId]) REFERENCES [dbo].[Catalog] ([CatalogId])
ALTER TABLE [dbo].[CatalogNodeRelation]
    ADD CONSTRAINT [FK_CatalogItemCategory_CatalogItem] FOREIGN KEY ([ChildNodeId]) REFERENCES [dbo].[CatalogNode] ([CatalogNodeId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[SiteCatalog]
    ADD CONSTRAINT [FK_SiteCatalog_Catalog] FOREIGN KEY ([CatalogId]) REFERENCES [dbo].[Catalog] ([CatalogId])
ALTER TABLE [dbo].[PromotionCondition]
    ADD CONSTRAINT [FK_ecf_mktg-PromotionCondition_ecf_mktg-Expression] FOREIGN KEY ([ExpressionId]) REFERENCES [dbo].[Expression] ([ExpressionId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[PromotionCondition]
    ADD CONSTRAINT [FK_ecf_mktg-PromotionCondition_ecf_mktg-Promotion] FOREIGN KEY ([PromotionId]) REFERENCES [dbo].[Promotion] ([PromotionId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[PromotionUsage]
    ADD CONSTRAINT [FK_PromotionUsage_Promotion] FOREIGN KEY ([PromotionId]) REFERENCES [dbo].[Promotion] ([PromotionId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[ShippingPaymentRestriction]
    ADD CONSTRAINT [FK_ShippingPaymentRestriction_PaymentMethod] FOREIGN KEY ([PaymentMethodId]) REFERENCES [dbo].[PaymentMethod] ([PaymentMethodId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[ShippingPaymentRestriction]
    ADD CONSTRAINT [FK_ShippingPaymentRestriction_ShippingMethod] FOREIGN KEY ([ShippingMethodId]) REFERENCES [dbo].[ShippingMethod] ([ShippingMethodId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[aspnet_PersonalizationPerUser]
    ADD CONSTRAINT [FK_PersPerUser_Paths] FOREIGN KEY ([PathId]) REFERENCES [dbo].[aspnet_Paths] ([PathId])
ALTER TABLE [dbo].[aspnet_PersonalizationPerUser]
    ADD CONSTRAINT [FK_PersPerUser_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId])
ALTER TABLE [dbo].[aspnet_Users]
    ADD CONSTRAINT [FK_Users_Applications] FOREIGN KEY ([ApplicationId]) REFERENCES [dbo].[aspnet_Applications] ([ApplicationId])
ALTER TABLE [dbo].[SiteSecurity]
    ADD CONSTRAINT [FK_SiteSecurity_Site] FOREIGN KEY ([SiteId]) REFERENCES [dbo].[Site] ([SiteId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[PromotionPolicy]
    ADD CONSTRAINT [FK_ecf_mktg-PromotionPolicy_ecf_mktg-Policy] FOREIGN KEY ([PolicyId]) REFERENCES [dbo].[Policy] ([PolicyId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[PromotionPolicy]
    ADD CONSTRAINT [FK_ecf_mktg-PromotionPolicy_ecf_mktg-Promotion] FOREIGN KEY ([PromotionId]) REFERENCES [dbo].[Promotion] ([PromotionId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[ShippingPackage]
    ADD CONSTRAINT [FK_ShippingPackage_Package] FOREIGN KEY ([PackageId]) REFERENCES [dbo].[Package] ([PackageId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[ShippingPackage]
    ADD CONSTRAINT [FK_ShippingPackage_ShippingOption] FOREIGN KEY ([ShippingOptionId]) REFERENCES [dbo].[ShippingOption] ([ShippingOptionId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[Promotion]
    ADD CONSTRAINT [FK_ecf_mktg-Promotion_ecf_mktg-Campaign] FOREIGN KEY ([CampaignId]) REFERENCES [dbo].[Campaign] ([CampaignId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[PriceGroup]
    ADD CONSTRAINT [FK_PriceGroup_CatalogEntry] FOREIGN KEY ([CatalogEntryCode], [ApplicationId]) REFERENCES [dbo].[CatalogEntry] ([Code], [ApplicationId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[PriceGroup]
    ADD CONSTRAINT [FK_PriceGroup_Currency] FOREIGN KEY ([CurrencyCode]) REFERENCES [dbo].[Currency] ([CurrencyCode]) ON DELETE CASCADE
ALTER TABLE [dbo].[PriceGroup]
    ADD CONSTRAINT [FK_PriceGroup_Market] FOREIGN KEY ([MarketId]) REFERENCES [dbo].[Market] ([MarketId]) ON DELETE CASCADE
ALTER TABLE [dbo].[PriceGroup]
    ADD CONSTRAINT [FK_PriceGroup_PriceType] FOREIGN KEY ([PriceTypeId]) REFERENCES [dbo].[PriceType] ([PriceTypeId])
ALTER TABLE [dbo].[MarketCurrencies]
    ADD CONSTRAINT [FK_MarketCurrencies_Market] FOREIGN KEY ([MarketId]) REFERENCES [dbo].[Market] ([MarketId]) ON DELETE CASCADE
ALTER TABLE [dbo].[Market]
    ADD CONSTRAINT [FK_Market_Currency] FOREIGN KEY ([DefaultCurrencyCode]) REFERENCES [dbo].[Currency] ([CurrencyCode])
ALTER TABLE [dbo].[NodeEntryRelation]
    ADD CONSTRAINT [FK_NodeEntryRelation_Catalog] FOREIGN KEY ([CatalogId]) REFERENCES [dbo].[Catalog] ([CatalogId])
ALTER TABLE [dbo].[NodeEntryRelation]
    ADD CONSTRAINT [FK_NodeEntryRelation_CatalogEntry] FOREIGN KEY ([CatalogEntryId]) REFERENCES [dbo].[CatalogEntry] ([CatalogEntryId]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE [dbo].[NodeEntryRelation]
    ADD CONSTRAINT [FK_NodeEntryRelation_CatalogNode] FOREIGN KEY ([CatalogNodeId]) REFERENCES [dbo].[CatalogNode] ([CatalogNodeId])
ALTER TABLE [dbo].[mcmd_SelectedEnumValue]
    ADD CONSTRAINT [FK_mcmd_SelectedEnumValue_mcmd_MetaEnum] FOREIGN KEY ([Id], [TypeName]) REFERENCES [dbo].[mcmd_MetaEnum] ([Id], [TypeName]) ON DELETE CASCADE
COMMIT TRANSACTION




PRINT N'Generating reporting dates...';

GO

DECLARE @EndDate Date
SET @EndDate = DATEADD(year, 10, GETUTCDATE()) 
EXEC ecf_GenerateReportingDates @EndDate

GO

GO
