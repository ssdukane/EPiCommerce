/*
Commerce Starter Kit for EPiServer

All rights reserved. See LICENSE.txt in project root.

Copyright (C) 2013-2014 Oxx AS
Copyright (C) 2013-2014 BV Network AS

*/

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Reflection;
using EPiServer.ServiceLocation;
using log4net;
using Mediachase.Commerce;
using Mediachase.Commerce.Markets;
using Mediachase.Commerce.Orders;
using Newtonsoft.Json;
using EPICommerce.Core.Extensions;
using EPICommerce.Core.Services;

namespace EPICommerce.Core.Objects.SharedViewModels
{
    public class OrderViewModel
    {
        protected static ILog _log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);

        private IFormatProvider _currencyFormat;

        public OrderViewModel(IFormatProvider currencyFormat)
        {
            if (currencyFormat == null)
                throw new ArgumentNullException("currencyFormat");
            OrderLines = new List<OrderLineViewModel>();
            OrderDate = DateTime.MinValue;
            _currencyFormat = currencyFormat;
        }

        public OrderViewModel(IFormatProvider currencyFormat, PurchaseOrderModel order)
            : this(currencyFormat)
        {
            OrderNumber = order.TrackingNumber;
            OrderDate = order.Created;
            Status = order.Status;

            TotalLineItemsAmount = order.OrderForms.First().LineItems.Sum(i => i.ExtendedPrice);
            TotalAmount = order.Total;
            Shipping = order.ShippingTotal;

            // TODO: Make taxes work as it should, instead of flat hard codet 25% tax
            if (order.TaxTotal == 0 && order.Total > 0)
            {
                order.TaxTotal = ((decimal)0.25) * order.Total;
            }
            Tax = order.TaxTotal;


            Discount = order.OrderForms.First().LineItems.Sum(i => i.LineItemDiscountAmount + i.OrderLevelDiscountAmount) + order.OrderForms.First().Shipments.First().ShippingDiscountAmount;
            if (order.OrderForms.Any() && order.OrderForms.First().Payments.Any())
            {
                PaymentMethod = order.OrderForms.First().Payments.First().PaymentMethodName;
            }

            Email = order.BillingEmail;
            Phone = order.BillingPhone;
            BillingAddress = new Address(order.OrderAddresses.FirstOrDefault(a => a.Name == Constants.Order.BillingAddressName));
            var shippingAddress = order.OrderAddresses.FirstOrDefault(a => a.Name == Constants.Order.ShippingAddressName);
            ShippingAddress = new Address(shippingAddress);
            DeliveryLocation = "";
            if (shippingAddress != null && !string.IsNullOrWhiteSpace(shippingAddress.DeliveryServicePoint))
                DeliveryLocation = shippingAddress.DeliveryServicePoint;

            foreach (var item in order.OrderForms.First().LineItems)
            {
                OrderLines.Add(new OrderLineViewModel(item));
            }

            // discounts
            var discounts = CartService.GetAllDiscounts(order);
            DiscountCodes = discounts.Where(x => !string.IsNullOrEmpty(x.DiscountCode)).Select(x => x.DiscountCode).ToList();

            ShippingTrackingNumber = "";
            if (order.OrderForms.Any() &&
                order.OrderForms.First().Shipments != null &&
                order.OrderForms.First().Shipments.Any())
            {
                ShippingTrackingNumber = order.OrderForms.First().Shipments.First().ShipmentTrackingNumber;
            }

            ErpOrderNumber = order.BackendOrderNumber;
        }


        public string OrderNumber { get; set; }
        public DateTime OrderDate { get; set; }
        public string Status { get; set; }
        public List<OrderLineViewModel> OrderLines { get; set; }
        public decimal TotalLineItemsAmount { get; set; }
        public decimal TotalAmount { get; set; }
        public decimal Tax { get; set; }
        public decimal Shipping { get; set; }
        public decimal Discount { get; set; }
        public List<string> DiscountCodes { get; set; }
        public string PaymentMethod { get; set; }

        public Address BillingAddress { get; set; }
        public Address ShippingAddress { get; set; }
        public string SocialSecurityNumber { get; set; }
        public string Email { get; set; }
        public string Phone { get; set; }
        public string ShippingTrackingNumber { get; set; }

        /// <summary>
        /// The ERP order number, if you cannot use the one
        /// generated by Commerce.
        /// </summary>
        /// <remarks>
        /// This field can be used to hold a reference to an
        /// order number in your back-end system, to help track
        /// an order between the two systems.
        /// </remarks>
        public string ErpOrderNumber { get; set; }

        public string DeliveryLocation { get; set; }

        public string FormatMoney(decimal input)
        {
            return input.ToString("C", _currencyFormat);
        }

        public string FormatMoneyForReceipt(decimal input)
        {
            return FormatMoney(input);
        }
    }
}
